{"name": "test_iscsi_clean", "status": "broken", "statusDetails": {"message": "prime.swagger_client.rest.ApiException: (400)\nReason: Bad Request\nHTTP response headers: HTTPHeaderDict({'DELL-EMC-TOKEN': 'aHzvlQa7FlcMFAOjZGiUc3oxMW0grDpOaPcl5yWVGwc=', 'Cache-Control': 'no-cache, no-store, must-revalidate, max-age=0', 'Expires': '-1', 'Content-Type': 'application/json', 'X-Content-Type-Options': 'nosniff', 'transfer-encoding': 'chunked', 'content-language': 'en-US'})\nHTTP response body: {\"messages\":[{\"code\":\"0xE0A010010022\",\"severity\":\"Error\",\"message_l10n\":\"Host 10.226.69.132 is attached to one or more volumes. Please detach it before deleting.\",\"arguments\":[\"10.226.69.132\"]}]}", "trace": "self = <test_block.Test_Clean object at 0x7f3785816390>\njsons = {'ip': {'ens192': {'gateway': '172.16.20.180', 'mask': '255.255.0.0', 'net': 'block-vaai', 'range': '172.16.98.200-172...tacenter': 'FileDatacenter', 'guestcredential': 'root:Admin@123', 'insecure': 'true', 'password': 'Password123!', ...}}\nconfig = {'PowerStore': {'NAS': {'bgjobip': '172.100.41.2', 'fsnum': 2, 'migrateip': '172.100.10.34,172.100.10.32,172.100.10.33...n'}, 'esxi_hosts': ['10.226.69.132', '10.226.69.203', '10.226.69.204', '10.226.69.206'], 'log_extension': '.log', ...}}\n\n    def test_iscsi_clean(self,jsons,config):\n        self.init(config,jsons)\n        self.init_vcenter_info(jsons)\n        self.delete_vm(jsons)\n        self.delete_ds(config)\n        self.unmap_host(config)\n        self.delete_volume(config)\n>       self.delete_host(config)\n\ntestcase/PowerStore/Day0/VAAI/test_block.py:195: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntestcase/PowerStore/Day0/VAAI/test_block.py:181: in delete_host\n    self.iscsi.delete_host_by_name(host)\nPowerStore/iscsi/iscsiImpl.py:140: in delete_host_by_name\n    host_api.host_id_delete(host_id)\nPowerStore/prime/swagger_client/api/host_api.py:254: in host_id_delete\n    (data) = self.host_id_delete_with_http_info(id, **kwargs)  # noqa: E501\nPowerStore/prime/swagger_client/api/host_api.py:335: in host_id_delete_with_http_info\n    collection_formats=collection_formats)\nPowerStore/prime/swagger_client/api_client.py:331: in call_api\n    _preload_content, _request_timeout)\nPowerStore/prime/swagger_client/api_client.py:162: in __call_api\n    _request_timeout=_request_timeout)\nPowerStore/prime/swagger_client/api_client.py:397: in request\n    body=body)\n../../py_auto_test/prime/swagger_client/rest.py:265: in DELETE\n    body=body)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <prime.swagger_client.rest.RESTClientObject object at 0x7f37856b6048>, method = 'DELETE'\nurl = 'https://10.226.49.138/api/rest/host/e654ee6d-2731-402c-bcfe-2cd4ba2567a7', query_params = []\nheaders = {'Accept': 'application/json', 'Authorization': 'Basic YWRtaW46UGFzc3dvcmQxMjMh', 'Content-Type': 'application/json', 'User-Agent': 'Swagger-Codegen/1.0.0/python'}\nbody = None, post_params = {}, _preload_content = True, _request_timeout = None\n\n    def request(self, method, url, query_params=None, headers=None,\n                body=None, post_params=None, _preload_content=True,\n                _request_timeout=None):\n        \"\"\"Perform requests.\n    \n        :param method: http request method\n        :param url: http request url\n        :param query_params: query parameters in the url\n        :param headers: http request headers\n        :param body: request json body, for `application/json`\n        :param post_params: request post parameters,\n                            `application/x-www-form-urlencoded`\n                            and `multipart/form-data`\n        :param _preload_content: if False, the urllib3.HTTPResponse object will\n                                 be returned without reading/decoding response\n                                 data. Default is True.\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        \"\"\"\n        method = method.upper()\n        assert method in ['GET', 'HEAD', 'DELETE', 'POST', 'PUT',\n                          'PATCH', 'OPTIONS']\n    \n        if post_params and body:\n            raise ValueError(\n                \"body parameter cannot be used with post_params parameter.\"\n            )\n    \n        post_params = post_params or {}\n        headers = headers or {}\n    \n        timeout = None\n        if _request_timeout:\n            if isinstance(_request_timeout, (int, ) if six.PY3 else (int, long)):  # noqa: E501,F821\n                timeout = urllib3.Timeout(total=_request_timeout)\n            elif (isinstance(_request_timeout, tuple) and\n                  len(_request_timeout) == 2):\n                timeout = urllib3.Timeout(\n                    connect=_request_timeout[0], read=_request_timeout[1])\n    \n        if 'Content-Type' not in headers:\n            headers['Content-Type'] = 'application/json'\n    \n        try:\n            # For `POST`, `PUT`, `PATCH`, `OPTIONS`, `DELETE`\n            if method in ['POST', 'PUT', 'PATCH', 'OPTIONS', 'DELETE']:\n                if query_params:\n                    url += '?' + urlencode(query_params)\n                if re.search('json', headers['Content-Type'], re.IGNORECASE):\n                    request_body = '{}'\n                    if body is not None:\n                        request_body = json.dumps(body)\n                    r = self.pool_manager.request(\n                        method, url,\n                        body=request_body,\n                        preload_content=_preload_content,\n                        timeout=timeout,\n                        headers=headers)\n                elif headers['Content-Type'] == 'application/x-www-form-urlencoded':  # noqa: E501\n                    r = self.pool_manager.request(\n                        method, url,\n                        fields=post_params,\n                        encode_multipart=False,\n                        preload_content=_preload_content,\n                        timeout=timeout,\n                        headers=headers)\n                elif headers['Content-Type'] == 'multipart/form-data':\n                    # must del headers['Content-Type'], or the correct\n                    # Content-Type which generated by urllib3 will be\n                    # overwritten.\n                    del headers['Content-Type']\n                    r = self.pool_manager.request(\n                        method, url,\n                        fields=post_params,\n                        encode_multipart=True,\n                        preload_content=_preload_content,\n                        timeout=timeout,\n                        headers=headers)\n                # Pass a `string` parameter directly in the body to support\n                # other content types than Json when `body` argument is\n                # provided in serialized form\n                elif isinstance(body, str):\n                    request_body = body\n                    r = self.pool_manager.request(\n                        method, url,\n                        body=request_body,\n                        preload_content=_preload_content,\n                        timeout=timeout,\n                        headers=headers)\n                else:\n                    # Cannot generate the request from given parameters\n                    msg = \"\"\"Cannot prepare a request message for provided\n                             arguments. Please check that your arguments match\n                             declared content type.\"\"\"\n                    raise ApiException(status=0, reason=msg)\n            # For `GET`, `HEAD`\n            else:\n                r = self.pool_manager.request(method, url,\n                                              fields=query_params,\n                                              preload_content=_preload_content,\n                                              timeout=timeout,\n                                              headers=headers)\n        except urllib3.exceptions.SSLError as e:\n            msg = \"{0}\\n{1}\".format(type(e).__name__, str(e))\n            raise ApiException(status=0, reason=msg)\n    \n        if _preload_content:\n            r = RESTResponse(r)\n    \n            # In the python 3, the response.data is bytes.\n            # we need to decode it to string.\n            if six.PY3:\n                r.data = r.data.decode('utf8')\n    \n            # log response body\n            logger.debug(\"response body: %s\", r.data)\n    \n        if not 200 <= r.status <= 299:\n>           raise ApiException(http_resp=r)\nE           prime.swagger_client.rest.ApiException: (400)\nE           Reason: Bad Request\nE           HTTP response headers: HTTPHeaderDict({'DELL-EMC-TOKEN': 'aHzvlQa7FlcMFAOjZGiUc3oxMW0grDpOaPcl5yWVGwc=', 'Cache-Control': 'no-cache, no-store, must-revalidate, max-age=0', 'Expires': '-1', 'Content-Type': 'application/json', 'X-Content-Type-Options': 'nosniff', 'transfer-encoding': 'chunked', 'content-language': 'en-US'})\nE           HTTP response body: {\"messages\":[{\"code\":\"0xE0A010010022\",\"severity\":\"Error\",\"message_l10n\":\"Host 10.226.69.132 is attached to one or more volumes. Please detach it before deleting.\",\"arguments\":[\"10.226.69.132\"]}]}\n\n../../py_auto_test/prime/swagger_client/rest.py:228: ApiException"}, "start": 1679465165040, "stop": 1679465169723, "uuid": "7bc0fba6-3f36-4490-9a69-bf3420ffd2ec", "historyId": "3c2f22c31d658f235baa0e2cf883de73", "testCaseId": "47c3595c1323d8a0aaa66942fd2843e3", "fullName": "testcase.PowerStore.Day0.VAAI.test_block.Test_Clean#test_iscsi_clean", "labels": [{"name": "parentSuite", "value": "testcase.PowerStore.Day0.VAAI"}, {"name": "suite", "value": "test_block"}, {"name": "subSuite", "value": "Test_Clean"}, {"name": "host", "value": "localhost.localdomain"}, {"name": "thread", "value": "9039-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.PowerStore.Day0.VAAI.test_block"}]}