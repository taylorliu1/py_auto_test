{"name": "test_VAAI", "status": "broken", "statusDetails": {"message": "paramiko.ssh_exception.NoValidConnectionsError: [Errno None] Unable to connect to port 22 on 172.16.98.200", "trace": "self = <test_VAAI.Test_Setup object at 0x7f197a2fdc50>\nconfig = {'PowerStore': {'NAS': {'bgjobip': '172.100.41.2', 'fsnum': 10, 'migrateip': '172.100.10.34,172.100.10.32,172.100.10.3...n'}, 'esxi_hosts': ['10.226.69.132', '10.226.69.203', '10.226.69.204', '10.226.69.206'], 'log_extension': '.log', ...}}\njsons = {'ip': {'ens192': {'gateway': '172.16.20.180', 'mask': '255.255.0.0', 'net': 'block-vaai', 'range': '172.16.98.200-172...tacenter': 'FileDatacenter', 'guestcredential': 'root:Admin@123', 'insecure': 'true', 'password': 'Password123!', ...}}\n\n    def test_VAAI(self,config,jsons):\n        # self.init(config,jsons)\n        # self.init_vcenter_info(jsons)\n        # #1 create nas server\n        # self.create_nas(config)\n        # #2 create interface\n        # self.create_file_interface()\n        # #3 create SMB server\n        # self.create_smb_server()\n        # #4 create NFS server\n        # self.create_nfs_server()\n        # #5 create filesystem\n        # self.create_file_system(config)\n        # #6 create NFS export\n        # self.create_nfs_export()\n        #7 mount nfs datastore\n        self.mount_nfs_datastore(config)\n        #8 clone VM\n        self.clone_vm(jsons)\n        with allure.step(\"install node exporter\"):\n>           self.install_node_exporter(jsons,config)\n\ntestcase/PowerStore/Day0/VAAI/test_VAAI.py:138: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntestcase/PowerStore/Day0/VAAI/test_VAAI.py:114: in install_node_exporter\n    NodeExporter.install_exporter_linux(vm[0],\"root\",\"#1Danger0us\")\ncommon/monitor/node_exporter_deployment.py:13: in install_exporter_linux\n    excutor = Executor(ip, user, password)\nutils/os/Linux.py:13: in __init__\n    look_for_keys=False, compress=True)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <paramiko.client.SSHClient object at 0x7f197a322cf8>, hostname = '172.16.98.200', port = 22, username = 'root'\npassword = '#1Danger0us', pkey = None, key_filename = None, timeout = None, allow_agent = True, look_for_keys = False, compress = True\nsock = <socket.socket fd=8, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0, laddr=('0.0.0.0', 49544)>\ngss_auth = False, gss_kex = False, gss_deleg_creds = True, gss_host = None, banner_timeout = None, auth_timeout = None\ngss_trust_dns = True, passphrase = None, disabled_algorithms = None\n\n    def connect(\n        self,\n        hostname,\n        port=SSH_PORT,\n        username=None,\n        password=None,\n        pkey=None,\n        key_filename=None,\n        timeout=None,\n        allow_agent=True,\n        look_for_keys=True,\n        compress=False,\n        sock=None,\n        gss_auth=False,\n        gss_kex=False,\n        gss_deleg_creds=True,\n        gss_host=None,\n        banner_timeout=None,\n        auth_timeout=None,\n        gss_trust_dns=True,\n        passphrase=None,\n        disabled_algorithms=None,\n    ):\n        \"\"\"\n        Connect to an SSH server and authenticate to it.  The server's host key\n        is checked against the system host keys (see `load_system_host_keys`)\n        and any local host keys (`load_host_keys`).  If the server's hostname\n        is not found in either set of host keys, the missing host key policy\n        is used (see `set_missing_host_key_policy`).  The default policy is\n        to reject the key and raise an `.SSHException`.\n    \n        Authentication is attempted in the following order of priority:\n    \n            - The ``pkey`` or ``key_filename`` passed in (if any)\n    \n              - ``key_filename`` may contain OpenSSH public certificate paths\n                as well as regular private-key paths; when files ending in\n                ``-cert.pub`` are found, they are assumed to match a private\n                key, and both components will be loaded. (The private key\n                itself does *not* need to be listed in ``key_filename`` for\n                this to occur - *just* the certificate.)\n    \n            - Any key we can find through an SSH agent\n            - Any \"id_rsa\", \"id_dsa\" or \"id_ecdsa\" key discoverable in\n              ``~/.ssh/``\n    \n              - When OpenSSH-style public certificates exist that match an\n                existing such private key (so e.g. one has ``id_rsa`` and\n                ``id_rsa-cert.pub``) the certificate will be loaded alongside\n                the private key and used for authentication.\n    \n            - Plain username/password auth, if a password was given\n    \n        If a private key requires a password to unlock it, and a password is\n        passed in, that password will be used to attempt to unlock the key.\n    \n        :param str hostname: the server to connect to\n        :param int port: the server port to connect to\n        :param str username:\n            the username to authenticate as (defaults to the current local\n            username)\n        :param str password:\n            Used for password authentication; is also used for private key\n            decryption if ``passphrase`` is not given.\n        :param str passphrase:\n            Used for decrypting private keys.\n        :param .PKey pkey: an optional private key to use for authentication\n        :param str key_filename:\n            the filename, or list of filenames, of optional private key(s)\n            and/or certs to try for authentication\n        :param float timeout:\n            an optional timeout (in seconds) for the TCP connect\n        :param bool allow_agent:\n            set to False to disable connecting to the SSH agent\n        :param bool look_for_keys:\n            set to False to disable searching for discoverable private key\n            files in ``~/.ssh/``\n        :param bool compress: set to True to turn on compression\n        :param socket sock:\n            an open socket or socket-like object (such as a `.Channel`) to use\n            for communication to the target host\n        :param bool gss_auth:\n            ``True`` if you want to use GSS-API authentication\n        :param bool gss_kex:\n            Perform GSS-API Key Exchange and user authentication\n        :param bool gss_deleg_creds: Delegate GSS-API client credentials or not\n        :param str gss_host:\n            The targets name in the kerberos database. default: hostname\n        :param bool gss_trust_dns:\n            Indicates whether or not the DNS is trusted to securely\n            canonicalize the name of the host being connected to (default\n            ``True``).\n        :param float banner_timeout: an optional timeout (in seconds) to wait\n            for the SSH banner to be presented.\n        :param float auth_timeout: an optional timeout (in seconds) to wait for\n            an authentication response.\n        :param dict disabled_algorithms:\n            an optional dict passed directly to `.Transport` and its keyword\n            argument of the same name.\n    \n        :raises:\n            `.BadHostKeyException` -- if the server's host key could not be\n            verified\n        :raises: `.AuthenticationException` -- if authentication failed\n        :raises:\n            `.SSHException` -- if there was any other error connecting or\n            establishing an SSH session\n        :raises socket.error: if a socket error occurred while connecting\n    \n        .. versionchanged:: 1.15\n            Added the ``banner_timeout``, ``gss_auth``, ``gss_kex``,\n            ``gss_deleg_creds`` and ``gss_host`` arguments.\n        .. versionchanged:: 2.3\n            Added the ``gss_trust_dns`` argument.\n        .. versionchanged:: 2.4\n            Added the ``passphrase`` argument.\n        .. versionchanged:: 2.6\n            Added the ``disabled_algorithms`` argument.\n        \"\"\"\n        if not sock:\n            errors = {}\n            # Try multiple possible address families (e.g. IPv4 vs IPv6)\n            to_try = list(self._families_and_addresses(hostname, port))\n            for af, addr in to_try:\n                try:\n                    sock = socket.socket(af, socket.SOCK_STREAM)\n                    if timeout is not None:\n                        try:\n                            sock.settimeout(timeout)\n                        except:\n                            pass\n                    retry_on_signal(lambda: sock.connect(addr))\n                    # Break out of the loop on success\n                    break\n                except socket.error as e:\n                    # Raise anything that isn't a straight up connection error\n                    # (such as a resolution error)\n                    if e.errno not in (ECONNREFUSED, EHOSTUNREACH):\n                        raise\n                    # Capture anything else so we know how the run looks once\n                    # iteration is complete. Retain info about which attempt\n                    # this was.\n                    errors[addr] = e\n    \n            # Make sure we explode usefully if no address family attempts\n            # succeeded. We've no way of knowing which error is the \"right\"\n            # one, so we construct a hybrid exception containing all the real\n            # ones, of a subclass that client code should still be watching for\n            # (socket.error)\n            if len(errors) == len(to_try):\n>               raise NoValidConnectionsError(errors)\nE               paramiko.ssh_exception.NoValidConnectionsError: [Errno None] Unable to connect to port 22 on 172.16.98.200\n\n/usr/local/python3/lib/python3.7/site-packages/paramiko/client.py:368: NoValidConnectionsError"}, "steps": [{"name": "install node exporter", "status": "broken", "statusDetails": {"message": "paramiko.ssh_exception.NoValidConnectionsError: [Errno None] Unable to connect to port 22 on 172.16.98.200\n", "trace": "  File \"/root/repo/ellie_han/ELAB/py_auto_test/testcase/PowerStore/Day0/VAAI/test_VAAI.py\", line 138, in test_VAAI\n    self.install_node_exporter(jsons,config)\n  File \"/root/repo/ellie_han/ELAB/py_auto_test/testcase/PowerStore/Day0/VAAI/test_VAAI.py\", line 114, in install_node_exporter\n    NodeExporter.install_exporter_linux(vm[0],\"root\",\"#1Danger0us\")\n  File \"/root/repo/ellie_han/ELAB/py_auto_test/common/monitor/node_exporter_deployment.py\", line 13, in install_exporter_linux\n    excutor = Executor(ip, user, password)\n  File \"/root/repo/ellie_han/ELAB/py_auto_test/utils/os/Linux.py\", line 13, in __init__\n    look_for_keys=False, compress=True)\n  File \"/usr/local/python3/lib/python3.7/site-packages/paramiko/client.py\", line 368, in connect\n    raise NoValidConnectionsError(errors)\n"}, "start": 1679380959994, "stop": 1679380963002}], "start": 1679380686861, "stop": 1679380963041, "uuid": "c4431867-85d4-4683-afe3-0dd0b9858d1d", "historyId": "977d32936728ac63f04bc1343eb33fc7", "testCaseId": "071f3cd834c21d0da8e84a8997be5834", "fullName": "testcase.PowerStore.Day0.VAAI.test_VAAI.Test_Setup#test_VAAI", "labels": [{"name": "parentSuite", "value": "testcase.PowerStore.Day0.VAAI"}, {"name": "suite", "value": "test_VAAI"}, {"name": "subSuite", "value": "Test_Setup"}, {"name": "host", "value": "localhost.localdomain"}, {"name": "thread", "value": "23233-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.PowerStore.Day0.VAAI.test_VAAI"}]}