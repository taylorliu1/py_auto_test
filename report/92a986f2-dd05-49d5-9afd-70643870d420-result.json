{"name": "test_nfs_clean", "status": "broken", "statusDetails": {"message": "pymysql.err.OperationalError: (2003, \"Can't connect to MySQL server on 'localhost' ([Errno 111] Connection refused)\")", "trace": "self = <pymysql.connections.Connection object at 0x7f2845eb1940>, sock = None\n\n    def connect(self, sock=None):\n        self._closed = False\n        try:\n            if sock is None:\n                if self.unix_socket:\n                    sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n                    sock.settimeout(self.connect_timeout)\n                    sock.connect(self.unix_socket)\n                    self.host_info = \"Localhost via UNIX socket\"\n                    self._secure = True\n                    if DEBUG:\n                        print(\"connected using unix_socket\")\n                else:\n                    kwargs = {}\n                    if self.bind_address is not None:\n                        kwargs[\"source_address\"] = (self.bind_address, 0)\n                    while True:\n                        try:\n                            sock = socket.create_connection(\n>                               (self.host, self.port), self.connect_timeout, **kwargs\n                            )\n\n/usr/local/python3/lib/python3.7/site-packages/pymysql/connections.py:614: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('localhost', 3306), timeout = 10, source_address = None\n\n    def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        A host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        err = None\n        for res in getaddrinfo(host, port, 0, SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket(af, socktype, proto)\n                if timeout is not _GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                # Break explicitly a reference cycle\n                err = None\n                return sock\n    \n            except error as _:\n                err = _\n                if sock is not None:\n                    sock.close()\n    \n        if err is not None:\n>           raise err\n\n/usr/local/python3/lib/python3.7/socket.py:727: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('localhost', 3306), timeout = 10, source_address = None\n\n    def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        A host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        err = None\n        for res in getaddrinfo(host, port, 0, SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket(af, socktype, proto)\n                if timeout is not _GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [Errno 111] Connection refused\n\n/usr/local/python3/lib/python3.7/socket.py:716: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_VAAI.Test_Setup.Test_Clean object at 0x7f2845f67438>\njsons = {'ip': {'ens192': {'gateway': '172.16.20.180', 'mask': '255.255.0.0', 'net': 'block-vaai', 'range': '172.16.98.200-172...tacenter': 'FileDatacenter', 'guestcredential': 'root:Admin@123', 'insecure': 'true', 'password': 'Password123!', ...}}\nconfig = {'PowerStore': {'array': {'pwd': 'Password123!', 'url': '10.226.49.138', 'user': 'admin'}, 'esxi_hosts': ['10.226.69.132', '10.226.69.203', '10.226.69.204', '10.226.68.206'], 'log_extension': '.log', 'log_level': 'debug', ...}}\n\n    def test_nfs_clean(self,jsons,config):\n        self.init_vcenter_info(jsons)\n>       self.delete_vm(jsons)\n\ntestcase/PowerStore/Day0/VAAI/test_VAAI.py:175: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntestcase/PowerStore/Day0/VAAI/test_VAAI.py:159: in delete_vm\n    self.vm.delete_vm(prefix)\nutils/vsphere/VMUtil.py:228: in delete_vm\n    lst = database.get_data(sql)\ncommon/databases/database.py:42: in get_data\n    db = pymysql.connect(host='localhost', port=3306, user='root', passwd='123456', db=\"test\")\n/usr/local/python3/lib/python3.7/site-packages/pymysql/connections.py:353: in __init__\n    self.connect()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pymysql.connections.Connection object at 0x7f2845eb1940>, sock = None\n\n    def connect(self, sock=None):\n        self._closed = False\n        try:\n            if sock is None:\n                if self.unix_socket:\n                    sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n                    sock.settimeout(self.connect_timeout)\n                    sock.connect(self.unix_socket)\n                    self.host_info = \"Localhost via UNIX socket\"\n                    self._secure = True\n                    if DEBUG:\n                        print(\"connected using unix_socket\")\n                else:\n                    kwargs = {}\n                    if self.bind_address is not None:\n                        kwargs[\"source_address\"] = (self.bind_address, 0)\n                    while True:\n                        try:\n                            sock = socket.create_connection(\n                                (self.host, self.port), self.connect_timeout, **kwargs\n                            )\n                            break\n                        except (OSError, IOError) as e:\n                            if e.errno == errno.EINTR:\n                                continue\n                            raise\n                    self.host_info = \"socket %s:%d\" % (self.host, self.port)\n                    if DEBUG:\n                        print(\"connected using socket\")\n                    sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                    sock.setsockopt(socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1)\n                sock.settimeout(None)\n    \n            self._sock = sock\n            self._rfile = sock.makefile(\"rb\")\n            self._next_seq_id = 0\n    \n            self._get_server_information()\n            self._request_authentication()\n    \n            if self.sql_mode is not None:\n                c = self.cursor()\n                c.execute(\"SET sql_mode=%s\", (self.sql_mode,))\n    \n            if self.init_command is not None:\n                c = self.cursor()\n                c.execute(self.init_command)\n                c.close()\n                self.commit()\n    \n            if self.autocommit_mode is not None:\n                self.autocommit(self.autocommit_mode)\n        except BaseException as e:\n            self._rfile = None\n            if sock is not None:\n                try:\n                    sock.close()\n                except:  # noqa\n                    pass\n    \n            if isinstance(e, (OSError, IOError, socket.error)):\n                exc = err.OperationalError(\n                    2003, \"Can't connect to MySQL server on %r (%s)\" % (self.host, e)\n                )\n                # Keep original exception and traceback to investigate error.\n                exc.original_exception = e\n                exc.traceback = traceback.format_exc()\n                if DEBUG:\n                    print(exc.traceback)\n>               raise exc\nE               pymysql.err.OperationalError: (2003, \"Can't connect to MySQL server on 'localhost' ([Errno 111] Connection refused)\")\n\n/usr/local/python3/lib/python3.7/site-packages/pymysql/connections.py:664: OperationalError"}, "start": 1678953775483, "stop": 1678953775609, "uuid": "079affde-6f75-4157-821a-566b3496faa8", "historyId": "48bc36b723190f30154c880ad19fbf35", "testCaseId": "13a9a953c24f63a2913e80156c740d55", "fullName": "testcase.PowerStore.Day0.VAAI.test_VAAI.Test_Setup#test_nfs_clean", "labels": [{"name": "parentSuite", "value": "testcase.PowerStore.Day0.VAAI"}, {"name": "suite", "value": "test_VAAI"}, {"name": "subSuite", "value": "Test_Setup"}, {"name": "host", "value": "localhost.localdomain"}, {"name": "thread", "value": "22720-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.PowerStore.Day0.VAAI.test_VAAI"}]}