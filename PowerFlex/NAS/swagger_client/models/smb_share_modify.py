# coding: utf-8

"""
    PowerFlex NAS Management REST API

    NAS Storage Management REST API definition.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SmbShareModify(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'is_abe_enabled': 'bool',
        'is_branch_cache_enabled': 'bool',
        'offline_availability': 'SMBShareOfflineAvailabilityEnum',
        'umask': 'str',
        'is_continuous_availability_enabled': 'bool',
        'is_encryption_enabled': 'bool'
    }

    attribute_map = {
        'description': 'description',
        'is_abe_enabled': 'is_ABE_enabled',
        'is_branch_cache_enabled': 'is_branch_cache_enabled',
        'offline_availability': 'offline_availability',
        'umask': 'umask',
        'is_continuous_availability_enabled': 'is_continuous_availability_enabled',
        'is_encryption_enabled': 'is_encryption_enabled'
    }

    def __init__(self, description=None, is_abe_enabled=None, is_branch_cache_enabled=None, offline_availability=None, umask=None, is_continuous_availability_enabled=None, is_encryption_enabled=None):  # noqa: E501
        """SmbShareModify - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._is_abe_enabled = None
        self._is_branch_cache_enabled = None
        self._offline_availability = None
        self._umask = None
        self._is_continuous_availability_enabled = None
        self._is_encryption_enabled = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if is_abe_enabled is not None:
            self.is_abe_enabled = is_abe_enabled
        if is_branch_cache_enabled is not None:
            self.is_branch_cache_enabled = is_branch_cache_enabled
        if offline_availability is not None:
            self.offline_availability = offline_availability
        if umask is not None:
            self.umask = umask
        if is_continuous_availability_enabled is not None:
            self.is_continuous_availability_enabled = is_continuous_availability_enabled
        if is_encryption_enabled is not None:
            self.is_encryption_enabled = is_encryption_enabled

    @property
    def description(self):
        """Gets the description of this SmbShareModify.  # noqa: E501

        NFS Share description.  # noqa: E501

        :return: The description of this SmbShareModify.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SmbShareModify.

        NFS Share description.  # noqa: E501

        :param description: The description of this SmbShareModify.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def is_abe_enabled(self):
        """Gets the is_abe_enabled of this SmbShareModify.  # noqa: E501

        Indicates whether Access-based Enumeration (ABE) is enabled. ABE filters the list of available files and folders on a server to include only those, that the requesting user has access to. Values are: - true - ABE is enabled. - false - ABE is disabled.   # noqa: E501

        :return: The is_abe_enabled of this SmbShareModify.  # noqa: E501
        :rtype: bool
        """
        return self._is_abe_enabled

    @is_abe_enabled.setter
    def is_abe_enabled(self, is_abe_enabled):
        """Sets the is_abe_enabled of this SmbShareModify.

        Indicates whether Access-based Enumeration (ABE) is enabled. ABE filters the list of available files and folders on a server to include only those, that the requesting user has access to. Values are: - true - ABE is enabled. - false - ABE is disabled.   # noqa: E501

        :param is_abe_enabled: The is_abe_enabled of this SmbShareModify.  # noqa: E501
        :type: bool
        """

        self._is_abe_enabled = is_abe_enabled

    @property
    def is_branch_cache_enabled(self):
        """Gets the is_branch_cache_enabled of this SmbShareModify.  # noqa: E501

        Indicates whether BranchCace optimization is enabled. BranchCache optimization technology copies content from your main office or hosted cloud content servers and caches the content at branch office locations, allowing client computers at branch offices to access the content locally rather than over the WAN. Values are: - true - BranchCache is enabled. - false - BranchCache is disabled.   # noqa: E501

        :return: The is_branch_cache_enabled of this SmbShareModify.  # noqa: E501
        :rtype: bool
        """
        return self._is_branch_cache_enabled

    @is_branch_cache_enabled.setter
    def is_branch_cache_enabled(self, is_branch_cache_enabled):
        """Sets the is_branch_cache_enabled of this SmbShareModify.

        Indicates whether BranchCace optimization is enabled. BranchCache optimization technology copies content from your main office or hosted cloud content servers and caches the content at branch office locations, allowing client computers at branch offices to access the content locally rather than over the WAN. Values are: - true - BranchCache is enabled. - false - BranchCache is disabled.   # noqa: E501

        :param is_branch_cache_enabled: The is_branch_cache_enabled of this SmbShareModify.  # noqa: E501
        :type: bool
        """

        self._is_branch_cache_enabled = is_branch_cache_enabled

    @property
    def offline_availability(self):
        """Gets the offline_availability of this SmbShareModify.  # noqa: E501


        :return: The offline_availability of this SmbShareModify.  # noqa: E501
        :rtype: SMBShareOfflineAvailabilityEnum
        """
        return self._offline_availability

    @offline_availability.setter
    def offline_availability(self, offline_availability):
        """Sets the offline_availability of this SmbShareModify.


        :param offline_availability: The offline_availability of this SmbShareModify.  # noqa: E501
        :type: SMBShareOfflineAvailabilityEnum
        """

        self._offline_availability = offline_availability

    @property
    def umask(self):
        """Gets the umask of this SmbShareModify.  # noqa: E501

        The default UNIX umask for new files created on the Share.  # noqa: E501

        :return: The umask of this SmbShareModify.  # noqa: E501
        :rtype: str
        """
        return self._umask

    @umask.setter
    def umask(self, umask):
        """Sets the umask of this SmbShareModify.

        The default UNIX umask for new files created on the Share.  # noqa: E501

        :param umask: The umask of this SmbShareModify.  # noqa: E501
        :type: str
        """

        self._umask = umask

    @property
    def is_continuous_availability_enabled(self):
        """Gets the is_continuous_availability_enabled of this SmbShareModify.  # noqa: E501

        Indicates whether continuous availability for Server Message Block (SMB) 3.0 is enabled for the SMB Share. Values are: - true - Continuous availability for SMB 3.0 is enabled for the SMB Share. - false - Continuous availability for SMB 3.0 is disabled for the SMB Share.   # noqa: E501

        :return: The is_continuous_availability_enabled of this SmbShareModify.  # noqa: E501
        :rtype: bool
        """
        return self._is_continuous_availability_enabled

    @is_continuous_availability_enabled.setter
    def is_continuous_availability_enabled(self, is_continuous_availability_enabled):
        """Sets the is_continuous_availability_enabled of this SmbShareModify.

        Indicates whether continuous availability for Server Message Block (SMB) 3.0 is enabled for the SMB Share. Values are: - true - Continuous availability for SMB 3.0 is enabled for the SMB Share. - false - Continuous availability for SMB 3.0 is disabled for the SMB Share.   # noqa: E501

        :param is_continuous_availability_enabled: The is_continuous_availability_enabled of this SmbShareModify.  # noqa: E501
        :type: bool
        """

        self._is_continuous_availability_enabled = is_continuous_availability_enabled

    @property
    def is_encryption_enabled(self):
        """Gets the is_encryption_enabled of this SmbShareModify.  # noqa: E501

        Indicates whether encryption for Server Message Block (SMB) 3.0 is enabled at the shared folder level. Values are: - true - encryption for SMB 3.0 is enabled. - false - encryption for SMB 3.0 is disabled.   # noqa: E501

        :return: The is_encryption_enabled of this SmbShareModify.  # noqa: E501
        :rtype: bool
        """
        return self._is_encryption_enabled

    @is_encryption_enabled.setter
    def is_encryption_enabled(self, is_encryption_enabled):
        """Sets the is_encryption_enabled of this SmbShareModify.

        Indicates whether encryption for Server Message Block (SMB) 3.0 is enabled at the shared folder level. Values are: - true - encryption for SMB 3.0 is enabled. - false - encryption for SMB 3.0 is disabled.   # noqa: E501

        :param is_encryption_enabled: The is_encryption_enabled of this SmbShareModify.  # noqa: E501
        :type: bool
        """

        self._is_encryption_enabled = is_encryption_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SmbShareModify, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SmbShareModify):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
