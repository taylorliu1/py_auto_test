# coding: utf-8

"""
    PowerFlex NAS Management REST API

    NAS Storage Management REST API definition.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FileUserQuotaInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'file_system_id': 'str',
        'tree_quota_id': 'str',
        'uid': 'int',
        'unix_name': 'str',
        'windows_name': 'str',
        'windows_sid': 'str',
        'state': 'FileQuotaStateEnum',
        'hard_limit': 'int',
        'soft_limit': 'int',
        'remaining_grace_period': 'int',
        'size_used': 'int',
        'state_l10n': 'str',
        'file_system': 'FileSystemInstance',
        'tree_quota': 'FileTreeQuotaInstance'
    }

    attribute_map = {
        'id': 'id',
        'file_system_id': 'file_system_id',
        'tree_quota_id': 'tree_quota_id',
        'uid': 'uid',
        'unix_name': 'unix_name',
        'windows_name': 'windows_name',
        'windows_sid': 'windows_sid',
        'state': 'state',
        'hard_limit': 'hard_limit',
        'soft_limit': 'soft_limit',
        'remaining_grace_period': 'remaining_grace_period',
        'size_used': 'size_used',
        'state_l10n': 'state_l10n',
        'file_system': 'file_system',
        'tree_quota': 'tree_quota'
    }

    def __init__(self, id=None, file_system_id=None, tree_quota_id=None, uid=None, unix_name=None, windows_name=None, windows_sid=None, state=None, hard_limit=None, soft_limit=None, remaining_grace_period=None, size_used=None, state_l10n=None, file_system=None, tree_quota=None):  # noqa: E501
        """FileUserQuotaInstance - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._file_system_id = None
        self._tree_quota_id = None
        self._uid = None
        self._unix_name = None
        self._windows_name = None
        self._windows_sid = None
        self._state = None
        self._hard_limit = None
        self._soft_limit = None
        self._remaining_grace_period = None
        self._size_used = None
        self._state_l10n = None
        self._file_system = None
        self._tree_quota = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if file_system_id is not None:
            self.file_system_id = file_system_id
        if tree_quota_id is not None:
            self.tree_quota_id = tree_quota_id
        if uid is not None:
            self.uid = uid
        if unix_name is not None:
            self.unix_name = unix_name
        if windows_name is not None:
            self.windows_name = windows_name
        if windows_sid is not None:
            self.windows_sid = windows_sid
        if state is not None:
            self.state = state
        if hard_limit is not None:
            self.hard_limit = hard_limit
        if soft_limit is not None:
            self.soft_limit = soft_limit
        if remaining_grace_period is not None:
            self.remaining_grace_period = remaining_grace_period
        if size_used is not None:
            self.size_used = size_used
        if state_l10n is not None:
            self.state_l10n = state_l10n
        if file_system is not None:
            self.file_system = file_system
        if tree_quota is not None:
            self.tree_quota = tree_quota

    @property
    def id(self):
        """Gets the id of this FileUserQuotaInstance.  # noqa: E501

        Unique identifier of the user quota.  # noqa: E501

        :return: The id of this FileUserQuotaInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FileUserQuotaInstance.

        Unique identifier of the user quota.  # noqa: E501

        :param id: The id of this FileUserQuotaInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def file_system_id(self):
        """Gets the file_system_id of this FileUserQuotaInstance.  # noqa: E501

        Unique identifier of the associated filesystem.  # noqa: E501

        :return: The file_system_id of this FileUserQuotaInstance.  # noqa: E501
        :rtype: str
        """
        return self._file_system_id

    @file_system_id.setter
    def file_system_id(self, file_system_id):
        """Sets the file_system_id of this FileUserQuotaInstance.

        Unique identifier of the associated filesystem.  # noqa: E501

        :param file_system_id: The file_system_id of this FileUserQuotaInstance.  # noqa: E501
        :type: str
        """

        self._file_system_id = file_system_id

    @property
    def tree_quota_id(self):
        """Gets the tree_quota_id of this FileUserQuotaInstance.  # noqa: E501

        Unique identifier of the associated tree quota. Values are: - null - if the user quota is not within a quota tree. - tree_quota instance id - if the user quota is within a quota tree.   # noqa: E501

        :return: The tree_quota_id of this FileUserQuotaInstance.  # noqa: E501
        :rtype: str
        """
        return self._tree_quota_id

    @tree_quota_id.setter
    def tree_quota_id(self, tree_quota_id):
        """Sets the tree_quota_id of this FileUserQuotaInstance.

        Unique identifier of the associated tree quota. Values are: - null - if the user quota is not within a quota tree. - tree_quota instance id - if the user quota is within a quota tree.   # noqa: E501

        :param tree_quota_id: The tree_quota_id of this FileUserQuotaInstance.  # noqa: E501
        :type: str
        """

        self._tree_quota_id = tree_quota_id

    @property
    def uid(self):
        """Gets the uid of this FileUserQuotaInstance.  # noqa: E501

        Unix user identifier (UID) of the user.  # noqa: E501

        :return: The uid of this FileUserQuotaInstance.  # noqa: E501
        :rtype: int
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this FileUserQuotaInstance.

        Unix user identifier (UID) of the user.  # noqa: E501

        :param uid: The uid of this FileUserQuotaInstance.  # noqa: E501
        :type: int
        """

        self._uid = uid

    @property
    def unix_name(self):
        """Gets the unix_name of this FileUserQuotaInstance.  # noqa: E501

        Unix username.  # noqa: E501

        :return: The unix_name of this FileUserQuotaInstance.  # noqa: E501
        :rtype: str
        """
        return self._unix_name

    @unix_name.setter
    def unix_name(self, unix_name):
        """Sets the unix_name of this FileUserQuotaInstance.

        Unix username.  # noqa: E501

        :param unix_name: The unix_name of this FileUserQuotaInstance.  # noqa: E501
        :type: str
        """

        self._unix_name = unix_name

    @property
    def windows_name(self):
        """Gets the windows_name of this FileUserQuotaInstance.  # noqa: E501

        Windows username. The format is domain\\\\user for the domain user.  # noqa: E501

        :return: The windows_name of this FileUserQuotaInstance.  # noqa: E501
        :rtype: str
        """
        return self._windows_name

    @windows_name.setter
    def windows_name(self, windows_name):
        """Sets the windows_name of this FileUserQuotaInstance.

        Windows username. The format is domain\\\\user for the domain user.  # noqa: E501

        :param windows_name: The windows_name of this FileUserQuotaInstance.  # noqa: E501
        :type: str
        """

        self._windows_name = windows_name

    @property
    def windows_sid(self):
        """Gets the windows_sid of this FileUserQuotaInstance.  # noqa: E501

        Windows Security Identifier of the user.  # noqa: E501

        :return: The windows_sid of this FileUserQuotaInstance.  # noqa: E501
        :rtype: str
        """
        return self._windows_sid

    @windows_sid.setter
    def windows_sid(self, windows_sid):
        """Sets the windows_sid of this FileUserQuotaInstance.

        Windows Security Identifier of the user.  # noqa: E501

        :param windows_sid: The windows_sid of this FileUserQuotaInstance.  # noqa: E501
        :type: str
        """

        self._windows_sid = windows_sid

    @property
    def state(self):
        """Gets the state of this FileUserQuotaInstance.  # noqa: E501


        :return: The state of this FileUserQuotaInstance.  # noqa: E501
        :rtype: FileQuotaStateEnum
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this FileUserQuotaInstance.


        :param state: The state of this FileUserQuotaInstance.  # noqa: E501
        :type: FileQuotaStateEnum
        """

        self._state = state

    @property
    def hard_limit(self):
        """Gets the hard_limit of this FileUserQuotaInstance.  # noqa: E501

        Hard limit of the user quota, in bytes. No hard limit when set to 0. This value can be used to compute amount of space that is consumed without limiting the space.  # noqa: E501

        :return: The hard_limit of this FileUserQuotaInstance.  # noqa: E501
        :rtype: int
        """
        return self._hard_limit

    @hard_limit.setter
    def hard_limit(self, hard_limit):
        """Sets the hard_limit of this FileUserQuotaInstance.

        Hard limit of the user quota, in bytes. No hard limit when set to 0. This value can be used to compute amount of space that is consumed without limiting the space.  # noqa: E501

        :param hard_limit: The hard_limit of this FileUserQuotaInstance.  # noqa: E501
        :type: int
        """

        self._hard_limit = hard_limit

    @property
    def soft_limit(self):
        """Gets the soft_limit of this FileUserQuotaInstance.  # noqa: E501

        Soft limit of the user quota, in bytes. No hard limit when set to 0.  # noqa: E501

        :return: The soft_limit of this FileUserQuotaInstance.  # noqa: E501
        :rtype: int
        """
        return self._soft_limit

    @soft_limit.setter
    def soft_limit(self, soft_limit):
        """Sets the soft_limit of this FileUserQuotaInstance.

        Soft limit of the user quota, in bytes. No hard limit when set to 0.  # noqa: E501

        :param soft_limit: The soft_limit of this FileUserQuotaInstance.  # noqa: E501
        :type: int
        """

        self._soft_limit = soft_limit

    @property
    def remaining_grace_period(self):
        """Gets the remaining_grace_period of this FileUserQuotaInstance.  # noqa: E501

        Remaining grace period, in seconds, after the soft limit is exceeded:   - 0 - Grace period has already expired   - -1 - No grace period in-progress, or infinite grace period set The grace period of user quotas is set in the file system quota configuration.   # noqa: E501

        :return: The remaining_grace_period of this FileUserQuotaInstance.  # noqa: E501
        :rtype: int
        """
        return self._remaining_grace_period

    @remaining_grace_period.setter
    def remaining_grace_period(self, remaining_grace_period):
        """Sets the remaining_grace_period of this FileUserQuotaInstance.

        Remaining grace period, in seconds, after the soft limit is exceeded:   - 0 - Grace period has already expired   - -1 - No grace period in-progress, or infinite grace period set The grace period of user quotas is set in the file system quota configuration.   # noqa: E501

        :param remaining_grace_period: The remaining_grace_period of this FileUserQuotaInstance.  # noqa: E501
        :type: int
        """

        self._remaining_grace_period = remaining_grace_period

    @property
    def size_used(self):
        """Gets the size_used of this FileUserQuotaInstance.  # noqa: E501

        Size currently consumed by the user on the filesystem, in bytes.  # noqa: E501

        :return: The size_used of this FileUserQuotaInstance.  # noqa: E501
        :rtype: int
        """
        return self._size_used

    @size_used.setter
    def size_used(self, size_used):
        """Sets the size_used of this FileUserQuotaInstance.

        Size currently consumed by the user on the filesystem, in bytes.  # noqa: E501

        :param size_used: The size_used of this FileUserQuotaInstance.  # noqa: E501
        :type: int
        """

        self._size_used = size_used

    @property
    def state_l10n(self):
        """Gets the state_l10n of this FileUserQuotaInstance.  # noqa: E501

        Localized message string corresponding to state  # noqa: E501

        :return: The state_l10n of this FileUserQuotaInstance.  # noqa: E501
        :rtype: str
        """
        return self._state_l10n

    @state_l10n.setter
    def state_l10n(self, state_l10n):
        """Sets the state_l10n of this FileUserQuotaInstance.

        Localized message string corresponding to state  # noqa: E501

        :param state_l10n: The state_l10n of this FileUserQuotaInstance.  # noqa: E501
        :type: str
        """

        self._state_l10n = state_l10n

    @property
    def file_system(self):
        """Gets the file_system of this FileUserQuotaInstance.  # noqa: E501


        :return: The file_system of this FileUserQuotaInstance.  # noqa: E501
        :rtype: FileSystemInstance
        """
        return self._file_system

    @file_system.setter
    def file_system(self, file_system):
        """Sets the file_system of this FileUserQuotaInstance.


        :param file_system: The file_system of this FileUserQuotaInstance.  # noqa: E501
        :type: FileSystemInstance
        """

        self._file_system = file_system

    @property
    def tree_quota(self):
        """Gets the tree_quota of this FileUserQuotaInstance.  # noqa: E501


        :return: The tree_quota of this FileUserQuotaInstance.  # noqa: E501
        :rtype: FileTreeQuotaInstance
        """
        return self._tree_quota

    @tree_quota.setter
    def tree_quota(self, tree_quota):
        """Sets the tree_quota of this FileUserQuotaInstance.


        :param tree_quota: The tree_quota of this FileUserQuotaInstance.  # noqa: E501
        :type: FileTreeQuotaInstance
        """

        self._tree_quota = tree_quota

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileUserQuotaInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileUserQuotaInstance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
