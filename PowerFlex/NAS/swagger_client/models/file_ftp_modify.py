# coding: utf-8

"""
    PowerFlex NAS Management REST API

    NAS Storage Management REST API definition.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FileFtpModify(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_ftp_enabled': 'bool',
        'is_sftp_enabled': 'bool',
        'is_smb_authentication_enabled': 'bool',
        'is_unix_authentication_enabled': 'bool',
        'is_anonymous_authentication_enabled': 'bool',
        'is_homedir_limit_enabled': 'bool',
        'default_homedir': 'str',
        'welcome_message': 'str',
        'message_of_the_day': 'str',
        'is_audit_enabled': 'bool',
        'audit_dir': 'str',
        'audit_max_size': 'int',
        'hosts': 'list[str]',
        'add_hosts': 'list[str]',
        'remove_hosts': 'list[str]',
        'users': 'list[str]',
        'add_users': 'list[str]',
        'remove_users': 'list[str]',
        'groups': 'list[str]',
        'add_groups': 'list[str]',
        'remove_groups': 'list[str]',
        'is_allowed_hosts': 'bool',
        'is_allowed_users': 'bool',
        'is_allowed_groups': 'bool'
    }

    attribute_map = {
        'is_ftp_enabled': 'is_ftp_enabled',
        'is_sftp_enabled': 'is_sftp_enabled',
        'is_smb_authentication_enabled': 'is_smb_authentication_enabled',
        'is_unix_authentication_enabled': 'is_unix_authentication_enabled',
        'is_anonymous_authentication_enabled': 'is_anonymous_authentication_enabled',
        'is_homedir_limit_enabled': 'is_homedir_limit_enabled',
        'default_homedir': 'default_homedir',
        'welcome_message': 'welcome_message',
        'message_of_the_day': 'message_of_the_day',
        'is_audit_enabled': 'is_audit_enabled',
        'audit_dir': 'audit_dir',
        'audit_max_size': 'audit_max_size',
        'hosts': 'hosts',
        'add_hosts': 'add_hosts',
        'remove_hosts': 'remove_hosts',
        'users': 'users',
        'add_users': 'add_users',
        'remove_users': 'remove_users',
        'groups': 'groups',
        'add_groups': 'add_groups',
        'remove_groups': 'remove_groups',
        'is_allowed_hosts': 'is_allowed_hosts',
        'is_allowed_users': 'is_allowed_users',
        'is_allowed_groups': 'is_allowed_groups'
    }

    def __init__(self, is_ftp_enabled=None, is_sftp_enabled=False, is_smb_authentication_enabled=True, is_unix_authentication_enabled=True, is_anonymous_authentication_enabled=True, is_homedir_limit_enabled=None, default_homedir=None, welcome_message=None, message_of_the_day=None, is_audit_enabled=False, audit_dir=None, audit_max_size=None, hosts=None, add_hosts=None, remove_hosts=None, users=None, add_users=None, remove_users=None, groups=None, add_groups=None, remove_groups=None, is_allowed_hosts=True, is_allowed_users=True, is_allowed_groups=True):  # noqa: E501
        """FileFtpModify - a model defined in Swagger"""  # noqa: E501
        self._is_ftp_enabled = None
        self._is_sftp_enabled = None
        self._is_smb_authentication_enabled = None
        self._is_unix_authentication_enabled = None
        self._is_anonymous_authentication_enabled = None
        self._is_homedir_limit_enabled = None
        self._default_homedir = None
        self._welcome_message = None
        self._message_of_the_day = None
        self._is_audit_enabled = None
        self._audit_dir = None
        self._audit_max_size = None
        self._hosts = None
        self._add_hosts = None
        self._remove_hosts = None
        self._users = None
        self._add_users = None
        self._remove_users = None
        self._groups = None
        self._add_groups = None
        self._remove_groups = None
        self._is_allowed_hosts = None
        self._is_allowed_users = None
        self._is_allowed_groups = None
        self.discriminator = None
        if is_ftp_enabled is not None:
            self.is_ftp_enabled = is_ftp_enabled
        if is_sftp_enabled is not None:
            self.is_sftp_enabled = is_sftp_enabled
        if is_smb_authentication_enabled is not None:
            self.is_smb_authentication_enabled = is_smb_authentication_enabled
        if is_unix_authentication_enabled is not None:
            self.is_unix_authentication_enabled = is_unix_authentication_enabled
        if is_anonymous_authentication_enabled is not None:
            self.is_anonymous_authentication_enabled = is_anonymous_authentication_enabled
        if is_homedir_limit_enabled is not None:
            self.is_homedir_limit_enabled = is_homedir_limit_enabled
        if default_homedir is not None:
            self.default_homedir = default_homedir
        if welcome_message is not None:
            self.welcome_message = welcome_message
        if message_of_the_day is not None:
            self.message_of_the_day = message_of_the_day
        if is_audit_enabled is not None:
            self.is_audit_enabled = is_audit_enabled
        if audit_dir is not None:
            self.audit_dir = audit_dir
        if audit_max_size is not None:
            self.audit_max_size = audit_max_size
        if hosts is not None:
            self.hosts = hosts
        if add_hosts is not None:
            self.add_hosts = add_hosts
        if remove_hosts is not None:
            self.remove_hosts = remove_hosts
        if users is not None:
            self.users = users
        if add_users is not None:
            self.add_users = add_users
        if remove_users is not None:
            self.remove_users = remove_users
        if groups is not None:
            self.groups = groups
        if add_groups is not None:
            self.add_groups = add_groups
        if remove_groups is not None:
            self.remove_groups = remove_groups
        if is_allowed_hosts is not None:
            self.is_allowed_hosts = is_allowed_hosts
        if is_allowed_users is not None:
            self.is_allowed_users = is_allowed_users
        if is_allowed_groups is not None:
            self.is_allowed_groups = is_allowed_groups

    @property
    def is_ftp_enabled(self):
        """Gets the is_ftp_enabled of this FileFtpModify.  # noqa: E501

        Indicates whether the FTP server is enabled on the NAS server specified in the nasServer attribute. Values are: - true - FTP server is enabled on the specified NAS server. - false - FTP server is disabled on the specified NAS server.   # noqa: E501

        :return: The is_ftp_enabled of this FileFtpModify.  # noqa: E501
        :rtype: bool
        """
        return self._is_ftp_enabled

    @is_ftp_enabled.setter
    def is_ftp_enabled(self, is_ftp_enabled):
        """Sets the is_ftp_enabled of this FileFtpModify.

        Indicates whether the FTP server is enabled on the NAS server specified in the nasServer attribute. Values are: - true - FTP server is enabled on the specified NAS server. - false - FTP server is disabled on the specified NAS server.   # noqa: E501

        :param is_ftp_enabled: The is_ftp_enabled of this FileFtpModify.  # noqa: E501
        :type: bool
        """

        self._is_ftp_enabled = is_ftp_enabled

    @property
    def is_sftp_enabled(self):
        """Gets the is_sftp_enabled of this FileFtpModify.  # noqa: E501

        Indicates whether the SFTP server is enabled on the NAS server specified in the nasServer attribute. Values are: - true - SFTP server is enabled on the specified NAS server. - false - SFTP server is disabled on the specified NAS server.   # noqa: E501

        :return: The is_sftp_enabled of this FileFtpModify.  # noqa: E501
        :rtype: bool
        """
        return self._is_sftp_enabled

    @is_sftp_enabled.setter
    def is_sftp_enabled(self, is_sftp_enabled):
        """Sets the is_sftp_enabled of this FileFtpModify.

        Indicates whether the SFTP server is enabled on the NAS server specified in the nasServer attribute. Values are: - true - SFTP server is enabled on the specified NAS server. - false - SFTP server is disabled on the specified NAS server.   # noqa: E501

        :param is_sftp_enabled: The is_sftp_enabled of this FileFtpModify.  # noqa: E501
        :type: bool
        """

        self._is_sftp_enabled = is_sftp_enabled

    @property
    def is_smb_authentication_enabled(self):
        """Gets the is_smb_authentication_enabled of this FileFtpModify.  # noqa: E501

        Indicates whether FTP and SFTP clients can be authenticated using an SMB user name. These user names are defined in a Windows domain controller, and their formats are user@domain or domain\\\\user. Values are: - true - SMB user names are accepted for authentication. - false - SMB user names are not accepted for authentication.   # noqa: E501

        :return: The is_smb_authentication_enabled of this FileFtpModify.  # noqa: E501
        :rtype: bool
        """
        return self._is_smb_authentication_enabled

    @is_smb_authentication_enabled.setter
    def is_smb_authentication_enabled(self, is_smb_authentication_enabled):
        """Sets the is_smb_authentication_enabled of this FileFtpModify.

        Indicates whether FTP and SFTP clients can be authenticated using an SMB user name. These user names are defined in a Windows domain controller, and their formats are user@domain or domain\\\\user. Values are: - true - SMB user names are accepted for authentication. - false - SMB user names are not accepted for authentication.   # noqa: E501

        :param is_smb_authentication_enabled: The is_smb_authentication_enabled of this FileFtpModify.  # noqa: E501
        :type: bool
        """

        self._is_smb_authentication_enabled = is_smb_authentication_enabled

    @property
    def is_unix_authentication_enabled(self):
        """Gets the is_unix_authentication_enabled of this FileFtpModify.  # noqa: E501

        Indicates whether FTP and SFTP clients can be authenticated using a Unix user name. Unix user names are defined in LDAP, NIS servers or in local passwd file. Values are: - true - Unix user names are accepted for authentication. - false - Unix user names are not accepted for authentication.   # noqa: E501

        :return: The is_unix_authentication_enabled of this FileFtpModify.  # noqa: E501
        :rtype: bool
        """
        return self._is_unix_authentication_enabled

    @is_unix_authentication_enabled.setter
    def is_unix_authentication_enabled(self, is_unix_authentication_enabled):
        """Sets the is_unix_authentication_enabled of this FileFtpModify.

        Indicates whether FTP and SFTP clients can be authenticated using a Unix user name. Unix user names are defined in LDAP, NIS servers or in local passwd file. Values are: - true - Unix user names are accepted for authentication. - false - Unix user names are not accepted for authentication.   # noqa: E501

        :param is_unix_authentication_enabled: The is_unix_authentication_enabled of this FileFtpModify.  # noqa: E501
        :type: bool
        """

        self._is_unix_authentication_enabled = is_unix_authentication_enabled

    @property
    def is_anonymous_authentication_enabled(self):
        """Gets the is_anonymous_authentication_enabled of this FileFtpModify.  # noqa: E501

        Indicates whether FTP clients can be authenticated anonymously. Values are: - true - Anonymous user name is accepted. - false - Anonymous user name is not accepted.   # noqa: E501

        :return: The is_anonymous_authentication_enabled of this FileFtpModify.  # noqa: E501
        :rtype: bool
        """
        return self._is_anonymous_authentication_enabled

    @is_anonymous_authentication_enabled.setter
    def is_anonymous_authentication_enabled(self, is_anonymous_authentication_enabled):
        """Sets the is_anonymous_authentication_enabled of this FileFtpModify.

        Indicates whether FTP clients can be authenticated anonymously. Values are: - true - Anonymous user name is accepted. - false - Anonymous user name is not accepted.   # noqa: E501

        :param is_anonymous_authentication_enabled: The is_anonymous_authentication_enabled of this FileFtpModify.  # noqa: E501
        :type: bool
        """

        self._is_anonymous_authentication_enabled = is_anonymous_authentication_enabled

    @property
    def is_homedir_limit_enabled(self):
        """Gets the is_homedir_limit_enabled of this FileFtpModify.  # noqa: E501

        Indicates whether an FTP or SFTP user access is limited to the home directory of the user. Values are: - true - An FTP or SFTP user can access only the home directory of the user. - false - FTP and SFTP users can access any NAS server directory, according to NAS server permissions.   # noqa: E501

        :return: The is_homedir_limit_enabled of this FileFtpModify.  # noqa: E501
        :rtype: bool
        """
        return self._is_homedir_limit_enabled

    @is_homedir_limit_enabled.setter
    def is_homedir_limit_enabled(self, is_homedir_limit_enabled):
        """Sets the is_homedir_limit_enabled of this FileFtpModify.

        Indicates whether an FTP or SFTP user access is limited to the home directory of the user. Values are: - true - An FTP or SFTP user can access only the home directory of the user. - false - FTP and SFTP users can access any NAS server directory, according to NAS server permissions.   # noqa: E501

        :param is_homedir_limit_enabled: The is_homedir_limit_enabled of this FileFtpModify.  # noqa: E501
        :type: bool
        """

        self._is_homedir_limit_enabled = is_homedir_limit_enabled

    @property
    def default_homedir(self):
        """Gets the default_homedir of this FileFtpModify.  # noqa: E501

        (Applies when the value of is_homedir_limit_enabled is false.) Default directory of FTP and SFTP clients that have a home directory which is not defined or accessible.  # noqa: E501

        :return: The default_homedir of this FileFtpModify.  # noqa: E501
        :rtype: str
        """
        return self._default_homedir

    @default_homedir.setter
    def default_homedir(self, default_homedir):
        """Sets the default_homedir of this FileFtpModify.

        (Applies when the value of is_homedir_limit_enabled is false.) Default directory of FTP and SFTP clients that have a home directory which is not defined or accessible.  # noqa: E501

        :param default_homedir: The default_homedir of this FileFtpModify.  # noqa: E501
        :type: str
        """

        self._default_homedir = default_homedir

    @property
    def welcome_message(self):
        """Gets the welcome_message of this FileFtpModify.  # noqa: E501

        Welcome message displayed on the console of FTP and SFTP clients before their authentication. The length of this message is limited to 511 bytes of UTF-8 characters, and the length of each line is limited to 80 bytes.  # noqa: E501

        :return: The welcome_message of this FileFtpModify.  # noqa: E501
        :rtype: str
        """
        return self._welcome_message

    @welcome_message.setter
    def welcome_message(self, welcome_message):
        """Sets the welcome_message of this FileFtpModify.

        Welcome message displayed on the console of FTP and SFTP clients before their authentication. The length of this message is limited to 511 bytes of UTF-8 characters, and the length of each line is limited to 80 bytes.  # noqa: E501

        :param welcome_message: The welcome_message of this FileFtpModify.  # noqa: E501
        :type: str
        """

        self._welcome_message = welcome_message

    @property
    def message_of_the_day(self):
        """Gets the message_of_the_day of this FileFtpModify.  # noqa: E501

        Message of the day displayed on the console of FTP clients after their authentication. The length of this message is limited to 511 bytes of UTF-8 characters, and the length of each line is limited to 80 bytes.  # noqa: E501

        :return: The message_of_the_day of this FileFtpModify.  # noqa: E501
        :rtype: str
        """
        return self._message_of_the_day

    @message_of_the_day.setter
    def message_of_the_day(self, message_of_the_day):
        """Sets the message_of_the_day of this FileFtpModify.

        Message of the day displayed on the console of FTP clients after their authentication. The length of this message is limited to 511 bytes of UTF-8 characters, and the length of each line is limited to 80 bytes.  # noqa: E501

        :param message_of_the_day: The message_of_the_day of this FileFtpModify.  # noqa: E501
        :type: str
        """

        self._message_of_the_day = message_of_the_day

    @property
    def is_audit_enabled(self):
        """Gets the is_audit_enabled of this FileFtpModify.  # noqa: E501

        Indicates whether the activity of FTP and SFTP clients is tracked in audit files. Values are: - true - FTP/SFTP activity is tracked. - false - FTP/SFTP activity is not tracked.   # noqa: E501

        :return: The is_audit_enabled of this FileFtpModify.  # noqa: E501
        :rtype: bool
        """
        return self._is_audit_enabled

    @is_audit_enabled.setter
    def is_audit_enabled(self, is_audit_enabled):
        """Sets the is_audit_enabled of this FileFtpModify.

        Indicates whether the activity of FTP and SFTP clients is tracked in audit files. Values are: - true - FTP/SFTP activity is tracked. - false - FTP/SFTP activity is not tracked.   # noqa: E501

        :param is_audit_enabled: The is_audit_enabled of this FileFtpModify.  # noqa: E501
        :type: bool
        """

        self._is_audit_enabled = is_audit_enabled

    @property
    def audit_dir(self):
        """Gets the audit_dir of this FileFtpModify.  # noqa: E501

        (Applies when the value of is_audit_enabled is true.) Directory of FTP/SFTP audit files. Logs are saved in '/' directory (default) or in a mounted file system (Absolute path of the File system directory which should already exist).  # noqa: E501

        :return: The audit_dir of this FileFtpModify.  # noqa: E501
        :rtype: str
        """
        return self._audit_dir

    @audit_dir.setter
    def audit_dir(self, audit_dir):
        """Sets the audit_dir of this FileFtpModify.

        (Applies when the value of is_audit_enabled is true.) Directory of FTP/SFTP audit files. Logs are saved in '/' directory (default) or in a mounted file system (Absolute path of the File system directory which should already exist).  # noqa: E501

        :param audit_dir: The audit_dir of this FileFtpModify.  # noqa: E501
        :type: str
        """

        self._audit_dir = audit_dir

    @property
    def audit_max_size(self):
        """Gets the audit_max_size of this FileFtpModify.  # noqa: E501

        (Applies when the value of is_audit_enabled is true.)  Maximum size of all (current plus archived) FTP/SFTP audit files, in bytes. There is a maximum of 5 audit files, 1 current audit file (ftp.log) and 4 archived audit files. The maximum value for this setting is 5GB (each file of 1GB) if the audit directory belongs to a user file system of the NAS server. If the audit directory is '/', the maximum value is 5MB (each file of 1MB). The minimum value is 40kB (each file of 8KB) on any file system.   # noqa: E501

        :return: The audit_max_size of this FileFtpModify.  # noqa: E501
        :rtype: int
        """
        return self._audit_max_size

    @audit_max_size.setter
    def audit_max_size(self, audit_max_size):
        """Sets the audit_max_size of this FileFtpModify.

        (Applies when the value of is_audit_enabled is true.)  Maximum size of all (current plus archived) FTP/SFTP audit files, in bytes. There is a maximum of 5 audit files, 1 current audit file (ftp.log) and 4 archived audit files. The maximum value for this setting is 5GB (each file of 1GB) if the audit directory belongs to a user file system of the NAS server. If the audit directory is '/', the maximum value is 5MB (each file of 1MB). The minimum value is 40kB (each file of 8KB) on any file system.   # noqa: E501

        :param audit_max_size: The audit_max_size of this FileFtpModify.  # noqa: E501
        :type: int
        """

        self._audit_max_size = audit_max_size

    @property
    def hosts(self):
        """Gets the hosts of this FileFtpModify.  # noqa: E501

        Allowed or denied hosts, depending on the value of the is_allowed_hosts attribute. A host is defined using its IP address. Subnets using CIDR notation are also supported. - If allowed hosts exist, only those hosts and no others can connect to the NAS server through FTP or SFTP. - If denied hosts exist, they always have access denied to the NAS server through FTP or SFTP. - If the list is empty, there is no restriction to NAS server access through FTP or SFTP based on the host IP address. - The addresses may be IPv4 or IPv6.   # noqa: E501

        :return: The hosts of this FileFtpModify.  # noqa: E501
        :rtype: list[str]
        """
        return self._hosts

    @hosts.setter
    def hosts(self, hosts):
        """Sets the hosts of this FileFtpModify.

        Allowed or denied hosts, depending on the value of the is_allowed_hosts attribute. A host is defined using its IP address. Subnets using CIDR notation are also supported. - If allowed hosts exist, only those hosts and no others can connect to the NAS server through FTP or SFTP. - If denied hosts exist, they always have access denied to the NAS server through FTP or SFTP. - If the list is empty, there is no restriction to NAS server access through FTP or SFTP based on the host IP address. - The addresses may be IPv4 or IPv6.   # noqa: E501

        :param hosts: The hosts of this FileFtpModify.  # noqa: E501
        :type: list[str]
        """

        self._hosts = hosts

    @property
    def add_hosts(self):
        """Gets the add_hosts of this FileFtpModify.  # noqa: E501

        Host IP addresses to add to the current hosts. The addresses may be IPv4 or IPv6. Error occurs if the IP address already exists. Cannot be combined with hosts.  # noqa: E501

        :return: The add_hosts of this FileFtpModify.  # noqa: E501
        :rtype: list[str]
        """
        return self._add_hosts

    @add_hosts.setter
    def add_hosts(self, add_hosts):
        """Sets the add_hosts of this FileFtpModify.

        Host IP addresses to add to the current hosts. The addresses may be IPv4 or IPv6. Error occurs if the IP address already exists. Cannot be combined with hosts.  # noqa: E501

        :param add_hosts: The add_hosts of this FileFtpModify.  # noqa: E501
        :type: list[str]
        """

        self._add_hosts = add_hosts

    @property
    def remove_hosts(self):
        """Gets the remove_hosts of this FileFtpModify.  # noqa: E501

        Host IP addresses to remove from the current hosts. The addresses may be IPv4 or IPv6. Error occurs if the IP address is not present. Cannot be combined with hosts.  # noqa: E501

        :return: The remove_hosts of this FileFtpModify.  # noqa: E501
        :rtype: list[str]
        """
        return self._remove_hosts

    @remove_hosts.setter
    def remove_hosts(self, remove_hosts):
        """Sets the remove_hosts of this FileFtpModify.

        Host IP addresses to remove from the current hosts. The addresses may be IPv4 or IPv6. Error occurs if the IP address is not present. Cannot be combined with hosts.  # noqa: E501

        :param remove_hosts: The remove_hosts of this FileFtpModify.  # noqa: E501
        :type: list[str]
        """

        self._remove_hosts = remove_hosts

    @property
    def users(self):
        """Gets the users of this FileFtpModify.  # noqa: E501

        Allowed or denied users, depending on the value of the is_allowed_users attribute. - If allowed users exist, only those users and no others can connect to the NAS server through FTP or SFTP. - If denied users exist, they always have access denied to the NAS server through FTP or SFTP. - If the list is empty, there is no restriction to the NAS server access through FTP or SFTP based on the user name.   # noqa: E501

        :return: The users of this FileFtpModify.  # noqa: E501
        :rtype: list[str]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this FileFtpModify.

        Allowed or denied users, depending on the value of the is_allowed_users attribute. - If allowed users exist, only those users and no others can connect to the NAS server through FTP or SFTP. - If denied users exist, they always have access denied to the NAS server through FTP or SFTP. - If the list is empty, there is no restriction to the NAS server access through FTP or SFTP based on the user name.   # noqa: E501

        :param users: The users of this FileFtpModify.  # noqa: E501
        :type: list[str]
        """

        self._users = users

    @property
    def add_users(self):
        """Gets the add_users of this FileFtpModify.  # noqa: E501

        Users to add to the current users. Error occurs if the user already exist. Cannot be combined with users.  # noqa: E501

        :return: The add_users of this FileFtpModify.  # noqa: E501
        :rtype: list[str]
        """
        return self._add_users

    @add_users.setter
    def add_users(self, add_users):
        """Sets the add_users of this FileFtpModify.

        Users to add to the current users. Error occurs if the user already exist. Cannot be combined with users.  # noqa: E501

        :param add_users: The add_users of this FileFtpModify.  # noqa: E501
        :type: list[str]
        """

        self._add_users = add_users

    @property
    def remove_users(self):
        """Gets the remove_users of this FileFtpModify.  # noqa: E501

        Users to remove from the current users. Error occurs if the user is not present. Cannot be combined with users.  # noqa: E501

        :return: The remove_users of this FileFtpModify.  # noqa: E501
        :rtype: list[str]
        """
        return self._remove_users

    @remove_users.setter
    def remove_users(self, remove_users):
        """Sets the remove_users of this FileFtpModify.

        Users to remove from the current users. Error occurs if the user is not present. Cannot be combined with users.  # noqa: E501

        :param remove_users: The remove_users of this FileFtpModify.  # noqa: E501
        :type: list[str]
        """

        self._remove_users = remove_users

    @property
    def groups(self):
        """Gets the groups of this FileFtpModify.  # noqa: E501

        Allowed or denied user groups, depending on the value of the is_allowed_groups attribute. - If allowed groups exist, only users who are members of these groups and no others can connect to the NAS server through FTP or SFTP. - If denied groups exist, all users who are members of those groups always have access denied to the NAS server through FTP or SFTP. - If the list is empty, there is no restriction to the NAS server access through FTP or SFTP based on the user group.   # noqa: E501

        :return: The groups of this FileFtpModify.  # noqa: E501
        :rtype: list[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this FileFtpModify.

        Allowed or denied user groups, depending on the value of the is_allowed_groups attribute. - If allowed groups exist, only users who are members of these groups and no others can connect to the NAS server through FTP or SFTP. - If denied groups exist, all users who are members of those groups always have access denied to the NAS server through FTP or SFTP. - If the list is empty, there is no restriction to the NAS server access through FTP or SFTP based on the user group.   # noqa: E501

        :param groups: The groups of this FileFtpModify.  # noqa: E501
        :type: list[str]
        """

        self._groups = groups

    @property
    def add_groups(self):
        """Gets the add_groups of this FileFtpModify.  # noqa: E501

        Groups to add to the current groups. Error occurs if the group already exists. Cannot be combined with groups.  # noqa: E501

        :return: The add_groups of this FileFtpModify.  # noqa: E501
        :rtype: list[str]
        """
        return self._add_groups

    @add_groups.setter
    def add_groups(self, add_groups):
        """Sets the add_groups of this FileFtpModify.

        Groups to add to the current groups. Error occurs if the group already exists. Cannot be combined with groups.  # noqa: E501

        :param add_groups: The add_groups of this FileFtpModify.  # noqa: E501
        :type: list[str]
        """

        self._add_groups = add_groups

    @property
    def remove_groups(self):
        """Gets the remove_groups of this FileFtpModify.  # noqa: E501

        Groups to remove from the current groups. Error occurs if the group is not present. Cannot be combined with groups.  # noqa: E501

        :return: The remove_groups of this FileFtpModify.  # noqa: E501
        :rtype: list[str]
        """
        return self._remove_groups

    @remove_groups.setter
    def remove_groups(self, remove_groups):
        """Sets the remove_groups of this FileFtpModify.

        Groups to remove from the current groups. Error occurs if the group is not present. Cannot be combined with groups.  # noqa: E501

        :param remove_groups: The remove_groups of this FileFtpModify.  # noqa: E501
        :type: list[str]
        """

        self._remove_groups = remove_groups

    @property
    def is_allowed_hosts(self):
        """Gets the is_allowed_hosts of this FileFtpModify.  # noqa: E501

        Indicates whether the hosts attribute contains allowed or denied hosts. Values are: true - hosts contains allowed hosts. false - hosts contains denied hosts.   # noqa: E501

        :return: The is_allowed_hosts of this FileFtpModify.  # noqa: E501
        :rtype: bool
        """
        return self._is_allowed_hosts

    @is_allowed_hosts.setter
    def is_allowed_hosts(self, is_allowed_hosts):
        """Sets the is_allowed_hosts of this FileFtpModify.

        Indicates whether the hosts attribute contains allowed or denied hosts. Values are: true - hosts contains allowed hosts. false - hosts contains denied hosts.   # noqa: E501

        :param is_allowed_hosts: The is_allowed_hosts of this FileFtpModify.  # noqa: E501
        :type: bool
        """

        self._is_allowed_hosts = is_allowed_hosts

    @property
    def is_allowed_users(self):
        """Gets the is_allowed_users of this FileFtpModify.  # noqa: E501

        Indicates whether the users attribute contains allowed or denied users. Values are: - true - users contains allowed users. - false - users contains denied users.   # noqa: E501

        :return: The is_allowed_users of this FileFtpModify.  # noqa: E501
        :rtype: bool
        """
        return self._is_allowed_users

    @is_allowed_users.setter
    def is_allowed_users(self, is_allowed_users):
        """Sets the is_allowed_users of this FileFtpModify.

        Indicates whether the users attribute contains allowed or denied users. Values are: - true - users contains allowed users. - false - users contains denied users.   # noqa: E501

        :param is_allowed_users: The is_allowed_users of this FileFtpModify.  # noqa: E501
        :type: bool
        """

        self._is_allowed_users = is_allowed_users

    @property
    def is_allowed_groups(self):
        """Gets the is_allowed_groups of this FileFtpModify.  # noqa: E501

        Indicates whether the groups attribute contains allowed or denied user groups. Values are: - true - groups contains allowed user groups. - false - groups contains denied user groups.   # noqa: E501

        :return: The is_allowed_groups of this FileFtpModify.  # noqa: E501
        :rtype: bool
        """
        return self._is_allowed_groups

    @is_allowed_groups.setter
    def is_allowed_groups(self, is_allowed_groups):
        """Sets the is_allowed_groups of this FileFtpModify.

        Indicates whether the groups attribute contains allowed or denied user groups. Values are: - true - groups contains allowed user groups. - false - groups contains denied user groups.   # noqa: E501

        :param is_allowed_groups: The is_allowed_groups of this FileFtpModify.  # noqa: E501
        :type: bool
        """

        self._is_allowed_groups = is_allowed_groups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileFtpModify, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileFtpModify):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
