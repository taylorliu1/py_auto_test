# coding: utf-8

"""
    PowerFlex NAS Management REST API

    NAS Storage Management REST API definition.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NasNodesFenceCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'requesting_node': 'NasNodeInfo',
        'fencing_node': 'NasNodeInfo',
        'is_deployment_type_software': 'bool'
    }

    attribute_map = {
        'requesting_node': 'requesting_node',
        'fencing_node': 'fencing_node',
        'is_deployment_type_software': 'is_deployment_type_software'
    }

    def __init__(self, requesting_node=None, fencing_node=None, is_deployment_type_software=True):  # noqa: E501
        """NasNodesFenceCreate - a model defined in Swagger"""  # noqa: E501
        self._requesting_node = None
        self._fencing_node = None
        self._is_deployment_type_software = None
        self.discriminator = None
        self.requesting_node = requesting_node
        self.fencing_node = fencing_node
        if is_deployment_type_software is not None:
            self.is_deployment_type_software = is_deployment_type_software

    @property
    def requesting_node(self):
        """Gets the requesting_node of this NasNodesFenceCreate.  # noqa: E501


        :return: The requesting_node of this NasNodesFenceCreate.  # noqa: E501
        :rtype: NasNodeInfo
        """
        return self._requesting_node

    @requesting_node.setter
    def requesting_node(self, requesting_node):
        """Sets the requesting_node of this NasNodesFenceCreate.


        :param requesting_node: The requesting_node of this NasNodesFenceCreate.  # noqa: E501
        :type: NasNodeInfo
        """
        if requesting_node is None:
            raise ValueError("Invalid value for `requesting_node`, must not be `None`")  # noqa: E501

        self._requesting_node = requesting_node

    @property
    def fencing_node(self):
        """Gets the fencing_node of this NasNodesFenceCreate.  # noqa: E501


        :return: The fencing_node of this NasNodesFenceCreate.  # noqa: E501
        :rtype: NasNodeInfo
        """
        return self._fencing_node

    @fencing_node.setter
    def fencing_node(self, fencing_node):
        """Sets the fencing_node of this NasNodesFenceCreate.


        :param fencing_node: The fencing_node of this NasNodesFenceCreate.  # noqa: E501
        :type: NasNodeInfo
        """
        if fencing_node is None:
            raise ValueError("Invalid value for `fencing_node`, must not be `None`")  # noqa: E501

        self._fencing_node = fencing_node

    @property
    def is_deployment_type_software(self):
        """Gets the is_deployment_type_software of this NasNodesFenceCreate.  # noqa: E501

        Indicates if deployment type is software only. Default is true if not specified.  # noqa: E501

        :return: The is_deployment_type_software of this NasNodesFenceCreate.  # noqa: E501
        :rtype: bool
        """
        return self._is_deployment_type_software

    @is_deployment_type_software.setter
    def is_deployment_type_software(self, is_deployment_type_software):
        """Sets the is_deployment_type_software of this NasNodesFenceCreate.

        Indicates if deployment type is software only. Default is true if not specified.  # noqa: E501

        :param is_deployment_type_software: The is_deployment_type_software of this NasNodesFenceCreate.  # noqa: E501
        :type: bool
        """

        self._is_deployment_type_software = is_deployment_type_software

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NasNodesFenceCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NasNodesFenceCreate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
