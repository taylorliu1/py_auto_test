# coding: utf-8

"""
    PowerFlex NAS Management REST API

    NAS Storage Management REST API definition.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.base_response import BaseResponse  # noqa: F401,E501

class JobNasClustersCreateResponse(BaseResponse):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster_id': 'str',
        'cluster_ip': 'str',
        'software_version': 'str',
        'nas_protection_domains': 'list[ProtectionDomainInfo]'
    }
    if hasattr(BaseResponse, "swagger_types"):
        swagger_types.update(BaseResponse.swagger_types)

    attribute_map = {
        'cluster_id': 'cluster_id',
        'cluster_ip': 'cluster_ip',
        'software_version': 'software_version',
        'nas_protection_domains': 'nas_protection_domains'
    }
    if hasattr(BaseResponse, "attribute_map"):
        attribute_map.update(BaseResponse.attribute_map)

    def __init__(self, cluster_id=None, cluster_ip=None, software_version=None, nas_protection_domains=None, *args, **kwargs):  # noqa: E501
        """JobNasClustersCreateResponse - a model defined in Swagger"""  # noqa: E501
        self._cluster_id = None
        self._cluster_ip = None
        self._software_version = None
        self._nas_protection_domains = None
        self.discriminator = None
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if cluster_ip is not None:
            self.cluster_ip = cluster_ip
        if software_version is not None:
            self.software_version = software_version
        if nas_protection_domains is not None:
            self.nas_protection_domains = nas_protection_domains
        BaseResponse.__init__(self, *args, **kwargs)

    @property
    def cluster_id(self):
        """Gets the cluster_id of this JobNasClustersCreateResponse.  # noqa: E501

        Cluster ID of SDNAS.  # noqa: E501

        :return: The cluster_id of this JobNasClustersCreateResponse.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this JobNasClustersCreateResponse.

        Cluster ID of SDNAS.  # noqa: E501

        :param cluster_id: The cluster_id of this JobNasClustersCreateResponse.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def cluster_ip(self):
        """Gets the cluster_ip of this JobNasClustersCreateResponse.  # noqa: E501

        Cluster IP of SDNAS.  # noqa: E501

        :return: The cluster_ip of this JobNasClustersCreateResponse.  # noqa: E501
        :rtype: str
        """
        return self._cluster_ip

    @cluster_ip.setter
    def cluster_ip(self, cluster_ip):
        """Sets the cluster_ip of this JobNasClustersCreateResponse.

        Cluster IP of SDNAS.  # noqa: E501

        :param cluster_ip: The cluster_ip of this JobNasClustersCreateResponse.  # noqa: E501
        :type: str
        """

        self._cluster_ip = cluster_ip

    @property
    def software_version(self):
        """Gets the software_version of this JobNasClustersCreateResponse.  # noqa: E501

        Running Software version of SDNAS.  # noqa: E501

        :return: The software_version of this JobNasClustersCreateResponse.  # noqa: E501
        :rtype: str
        """
        return self._software_version

    @software_version.setter
    def software_version(self, software_version):
        """Sets the software_version of this JobNasClustersCreateResponse.

        Running Software version of SDNAS.  # noqa: E501

        :param software_version: The software_version of this JobNasClustersCreateResponse.  # noqa: E501
        :type: str
        """

        self._software_version = software_version

    @property
    def nas_protection_domains(self):
        """Gets the nas_protection_domains of this JobNasClustersCreateResponse.  # noqa: E501

        The list of sdnas_nodes.  # noqa: E501

        :return: The nas_protection_domains of this JobNasClustersCreateResponse.  # noqa: E501
        :rtype: list[ProtectionDomainInfo]
        """
        return self._nas_protection_domains

    @nas_protection_domains.setter
    def nas_protection_domains(self, nas_protection_domains):
        """Sets the nas_protection_domains of this JobNasClustersCreateResponse.

        The list of sdnas_nodes.  # noqa: E501

        :param nas_protection_domains: The nas_protection_domains of this JobNasClustersCreateResponse.  # noqa: E501
        :type: list[ProtectionDomainInfo]
        """

        self._nas_protection_domains = nas_protection_domains

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobNasClustersCreateResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobNasClustersCreateResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
