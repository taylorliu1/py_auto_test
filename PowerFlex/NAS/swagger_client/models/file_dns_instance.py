# coding: utf-8

"""
    PowerFlex NAS Management REST API

    NAS Storage Management REST API definition.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FileDnsInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'nas_server_id': 'str',
        'domain': 'str',
        'ip_addresses': 'list[str]',
        'transport': 'FileDNSTransportEnum',
        'transport_l10n': 'str',
        'nas_server': 'NasServersInstance'
    }

    attribute_map = {
        'id': 'id',
        'nas_server_id': 'nas_server_id',
        'domain': 'domain',
        'ip_addresses': 'ip_addresses',
        'transport': 'transport',
        'transport_l10n': 'transport_l10n',
        'nas_server': 'nas_server'
    }

    def __init__(self, id=None, nas_server_id=None, domain=None, ip_addresses=None, transport=None, transport_l10n=None, nas_server=None):  # noqa: E501
        """FileDnsInstance - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._nas_server_id = None
        self._domain = None
        self._ip_addresses = None
        self._transport = None
        self._transport_l10n = None
        self._nas_server = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if nas_server_id is not None:
            self.nas_server_id = nas_server_id
        if domain is not None:
            self.domain = domain
        if ip_addresses is not None:
            self.ip_addresses = ip_addresses
        if transport is not None:
            self.transport = transport
        if transport_l10n is not None:
            self.transport_l10n = transport_l10n
        if nas_server is not None:
            self.nas_server = nas_server

    @property
    def id(self):
        """Gets the id of this FileDnsInstance.  # noqa: E501

        Unique identifier of the DNS server.  # noqa: E501

        :return: The id of this FileDnsInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FileDnsInstance.

        Unique identifier of the DNS server.  # noqa: E501

        :param id: The id of this FileDnsInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def nas_server_id(self):
        """Gets the nas_server_id of this FileDnsInstance.  # noqa: E501

        Unique identifier of the associated NAS Server instance that uses this DNS object. Only one DNS object per NAS Server is supported.  # noqa: E501

        :return: The nas_server_id of this FileDnsInstance.  # noqa: E501
        :rtype: str
        """
        return self._nas_server_id

    @nas_server_id.setter
    def nas_server_id(self, nas_server_id):
        """Sets the nas_server_id of this FileDnsInstance.

        Unique identifier of the associated NAS Server instance that uses this DNS object. Only one DNS object per NAS Server is supported.  # noqa: E501

        :param nas_server_id: The nas_server_id of this FileDnsInstance.  # noqa: E501
        :type: str
        """

        self._nas_server_id = nas_server_id

    @property
    def domain(self):
        """Gets the domain of this FileDnsInstance.  # noqa: E501

        Name of the DNS domain, where the NAS Server does host names lookup when an FQDN is not specified in the request.  # noqa: E501

        :return: The domain of this FileDnsInstance.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this FileDnsInstance.

        Name of the DNS domain, where the NAS Server does host names lookup when an FQDN is not specified in the request.  # noqa: E501

        :param domain: The domain of this FileDnsInstance.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def ip_addresses(self):
        """Gets the ip_addresses of this FileDnsInstance.  # noqa: E501

        The list of DNS server IP addresses. The addresses may be IPv4 or IPv6.  # noqa: E501

        :return: The ip_addresses of this FileDnsInstance.  # noqa: E501
        :rtype: list[str]
        """
        return self._ip_addresses

    @ip_addresses.setter
    def ip_addresses(self, ip_addresses):
        """Sets the ip_addresses of this FileDnsInstance.

        The list of DNS server IP addresses. The addresses may be IPv4 or IPv6.  # noqa: E501

        :param ip_addresses: The ip_addresses of this FileDnsInstance.  # noqa: E501
        :type: list[str]
        """

        self._ip_addresses = ip_addresses

    @property
    def transport(self):
        """Gets the transport of this FileDnsInstance.  # noqa: E501


        :return: The transport of this FileDnsInstance.  # noqa: E501
        :rtype: FileDNSTransportEnum
        """
        return self._transport

    @transport.setter
    def transport(self, transport):
        """Sets the transport of this FileDnsInstance.


        :param transport: The transport of this FileDnsInstance.  # noqa: E501
        :type: FileDNSTransportEnum
        """

        self._transport = transport

    @property
    def transport_l10n(self):
        """Gets the transport_l10n of this FileDnsInstance.  # noqa: E501

        Localized message string corresponding to transport  # noqa: E501

        :return: The transport_l10n of this FileDnsInstance.  # noqa: E501
        :rtype: str
        """
        return self._transport_l10n

    @transport_l10n.setter
    def transport_l10n(self, transport_l10n):
        """Sets the transport_l10n of this FileDnsInstance.

        Localized message string corresponding to transport  # noqa: E501

        :param transport_l10n: The transport_l10n of this FileDnsInstance.  # noqa: E501
        :type: str
        """

        self._transport_l10n = transport_l10n

    @property
    def nas_server(self):
        """Gets the nas_server of this FileDnsInstance.  # noqa: E501


        :return: The nas_server of this FileDnsInstance.  # noqa: E501
        :rtype: NasServersInstance
        """
        return self._nas_server

    @nas_server.setter
    def nas_server(self, nas_server):
        """Sets the nas_server of this FileDnsInstance.


        :param nas_server: The nas_server of this FileDnsInstance.  # noqa: E501
        :type: NasServersInstance
        """

        self._nas_server = nas_server

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileDnsInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileDnsInstance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
