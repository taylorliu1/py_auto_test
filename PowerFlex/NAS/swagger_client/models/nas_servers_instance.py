# coding: utf-8

"""
    PowerFlex NAS Management REST API

    NAS Storage Management REST API definition.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NasServersInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'protection_domain_id': 'str',
        'storage_pool_id': 'str',
        'description': 'str',
        'operational_status': 'NASServersOperationalStatusEnum',
        'primary_node_id': 'str',
        'backup_node_id': 'str',
        'default_unix_user': 'str',
        'default_windows_user': 'str',
        'current_unix_directory_service': 'NASServersCurrentUnixDirectoryServiceEnum',
        'is_username_translation_enabled': 'bool',
        'is_auto_user_mapping_enabled': 'bool',
        'production_ipv4_interface_id': 'str',
        'production_ipv6_interface_id': 'str',
        'backup_ipv4_interface_id': 'str',
        'backup_ipv6_interface_id': 'str',
        'current_preferred_ipv4_interface_id': 'str',
        'current_preferred_ipv6_interface_id': 'str',
        'operational_status_l10n': 'str',
        'current_unix_directory_service_l10n': 'str',
        'file_interfaces': 'list[FileInterfaceInstance]',
        'file_ndmps': 'list[FileNdmpInstance]',
        'file_virus_checkers': 'list[FileVirusCheckerInstance]',
        'nfs_servers': 'list[NfsServerInstance]',
        'smb_servers': 'list[SmbServerInstance]',
        'file_dnses': 'list[FileDnsInstance]',
        'file_ftps': 'list[FileFtpInstance]',
        'file_kerberoses': 'list[FileKerberosInstance]',
        'file_ldaps': 'list[FileLdapInstance]',
        'file_nises': 'list[FileNisInstance]',
        'file_systems': 'list[FileSystemInstance]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'protection_domain_id': 'protection_domain_id',
        'storage_pool_id': 'storage_pool_id',
        'description': 'description',
        'operational_status': 'operational_status',
        'primary_node_id': 'primary_node_id',
        'backup_node_id': 'backup_node_id',
        'default_unix_user': 'default_unix_user',
        'default_windows_user': 'default_windows_user',
        'current_unix_directory_service': 'current_unix_directory_service',
        'is_username_translation_enabled': 'is_username_translation_enabled',
        'is_auto_user_mapping_enabled': 'is_auto_user_mapping_enabled',
        'production_ipv4_interface_id': 'production_IPv4_interface_id',
        'production_ipv6_interface_id': 'production_IPv6_interface_id',
        'backup_ipv4_interface_id': 'backup_IPv4_interface_id',
        'backup_ipv6_interface_id': 'backup_IPv6_interface_id',
        'current_preferred_ipv4_interface_id': 'current_preferred_IPv4_interface_id',
        'current_preferred_ipv6_interface_id': 'current_preferred_IPv6_interface_id',
        'operational_status_l10n': 'operational_status_l10n',
        'current_unix_directory_service_l10n': 'current_unix_directory_service_l10n',
        'file_interfaces': 'file_interfaces',
        'file_ndmps': 'file_ndmps',
        'file_virus_checkers': 'file_virus_checkers',
        'nfs_servers': 'nfs_servers',
        'smb_servers': 'smb_servers',
        'file_dnses': 'file_dnses',
        'file_ftps': 'file_ftps',
        'file_kerberoses': 'file_kerberoses',
        'file_ldaps': 'file_ldaps',
        'file_nises': 'file_nises',
        'file_systems': 'file-systems'
    }

    def __init__(self, id=None, name=None, protection_domain_id=None, storage_pool_id=None, description=None, operational_status=None, primary_node_id=None, backup_node_id=None, default_unix_user=None, default_windows_user=None, current_unix_directory_service=None, is_username_translation_enabled=False, is_auto_user_mapping_enabled=False, production_ipv4_interface_id=None, production_ipv6_interface_id=None, backup_ipv4_interface_id=None, backup_ipv6_interface_id=None, current_preferred_ipv4_interface_id=None, current_preferred_ipv6_interface_id=None, operational_status_l10n=None, current_unix_directory_service_l10n=None, file_interfaces=None, file_ndmps=None, file_virus_checkers=None, nfs_servers=None, smb_servers=None, file_dnses=None, file_ftps=None, file_kerberoses=None, file_ldaps=None, file_nises=None, file_systems=None):  # noqa: E501
        """NasServersInstance - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._protection_domain_id = None
        self._storage_pool_id = None
        self._description = None
        self._operational_status = None
        self._primary_node_id = None
        self._backup_node_id = None
        self._default_unix_user = None
        self._default_windows_user = None
        self._current_unix_directory_service = None
        self._is_username_translation_enabled = None
        self._is_auto_user_mapping_enabled = None
        self._production_ipv4_interface_id = None
        self._production_ipv6_interface_id = None
        self._backup_ipv4_interface_id = None
        self._backup_ipv6_interface_id = None
        self._current_preferred_ipv4_interface_id = None
        self._current_preferred_ipv6_interface_id = None
        self._operational_status_l10n = None
        self._current_unix_directory_service_l10n = None
        self._file_interfaces = None
        self._file_ndmps = None
        self._file_virus_checkers = None
        self._nfs_servers = None
        self._smb_servers = None
        self._file_dnses = None
        self._file_ftps = None
        self._file_kerberoses = None
        self._file_ldaps = None
        self._file_nises = None
        self._file_systems = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if protection_domain_id is not None:
            self.protection_domain_id = protection_domain_id
        if storage_pool_id is not None:
            self.storage_pool_id = storage_pool_id
        if description is not None:
            self.description = description
        if operational_status is not None:
            self.operational_status = operational_status
        if primary_node_id is not None:
            self.primary_node_id = primary_node_id
        if backup_node_id is not None:
            self.backup_node_id = backup_node_id
        if default_unix_user is not None:
            self.default_unix_user = default_unix_user
        if default_windows_user is not None:
            self.default_windows_user = default_windows_user
        if current_unix_directory_service is not None:
            self.current_unix_directory_service = current_unix_directory_service
        if is_username_translation_enabled is not None:
            self.is_username_translation_enabled = is_username_translation_enabled
        if is_auto_user_mapping_enabled is not None:
            self.is_auto_user_mapping_enabled = is_auto_user_mapping_enabled
        if production_ipv4_interface_id is not None:
            self.production_ipv4_interface_id = production_ipv4_interface_id
        if production_ipv6_interface_id is not None:
            self.production_ipv6_interface_id = production_ipv6_interface_id
        if backup_ipv4_interface_id is not None:
            self.backup_ipv4_interface_id = backup_ipv4_interface_id
        if backup_ipv6_interface_id is not None:
            self.backup_ipv6_interface_id = backup_ipv6_interface_id
        if current_preferred_ipv4_interface_id is not None:
            self.current_preferred_ipv4_interface_id = current_preferred_ipv4_interface_id
        if current_preferred_ipv6_interface_id is not None:
            self.current_preferred_ipv6_interface_id = current_preferred_ipv6_interface_id
        if operational_status_l10n is not None:
            self.operational_status_l10n = operational_status_l10n
        if current_unix_directory_service_l10n is not None:
            self.current_unix_directory_service_l10n = current_unix_directory_service_l10n
        if file_interfaces is not None:
            self.file_interfaces = file_interfaces
        if file_ndmps is not None:
            self.file_ndmps = file_ndmps
        if file_virus_checkers is not None:
            self.file_virus_checkers = file_virus_checkers
        if nfs_servers is not None:
            self.nfs_servers = nfs_servers
        if smb_servers is not None:
            self.smb_servers = smb_servers
        if file_dnses is not None:
            self.file_dnses = file_dnses
        if file_ftps is not None:
            self.file_ftps = file_ftps
        if file_kerberoses is not None:
            self.file_kerberoses = file_kerberoses
        if file_ldaps is not None:
            self.file_ldaps = file_ldaps
        if file_nises is not None:
            self.file_nises = file_nises
        if file_systems is not None:
            self.file_systems = file_systems

    @property
    def id(self):
        """Gets the id of this NasServersInstance.  # noqa: E501

        Unique identifier of the NAS server.  # noqa: E501

        :return: The id of this NasServersInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NasServersInstance.

        Unique identifier of the NAS server.  # noqa: E501

        :param id: The id of this NasServersInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this NasServersInstance.  # noqa: E501

        Name of the NAS server.  This property supports case-insensitive filtering.  # noqa: E501

        :return: The name of this NasServersInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NasServersInstance.

        Name of the NAS server.  This property supports case-insensitive filtering.  # noqa: E501

        :param name: The name of this NasServersInstance.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def protection_domain_id(self):
        """Gets the protection_domain_id of this NasServersInstance.  # noqa: E501

        Unique identifier of the NAS enabled Protection Domain.  # noqa: E501

        :return: The protection_domain_id of this NasServersInstance.  # noqa: E501
        :rtype: str
        """
        return self._protection_domain_id

    @protection_domain_id.setter
    def protection_domain_id(self, protection_domain_id):
        """Sets the protection_domain_id of this NasServersInstance.

        Unique identifier of the NAS enabled Protection Domain.  # noqa: E501

        :param protection_domain_id: The protection_domain_id of this NasServersInstance.  # noqa: E501
        :type: str
        """

        self._protection_domain_id = protection_domain_id

    @property
    def storage_pool_id(self):
        """Gets the storage_pool_id of this NasServersInstance.  # noqa: E501

        Storage Pool Id of NAS configuration volumes.  # noqa: E501

        :return: The storage_pool_id of this NasServersInstance.  # noqa: E501
        :rtype: str
        """
        return self._storage_pool_id

    @storage_pool_id.setter
    def storage_pool_id(self, storage_pool_id):
        """Sets the storage_pool_id of this NasServersInstance.

        Storage Pool Id of NAS configuration volumes.  # noqa: E501

        :param storage_pool_id: The storage_pool_id of this NasServersInstance.  # noqa: E501
        :type: str
        """

        self._storage_pool_id = storage_pool_id

    @property
    def description(self):
        """Gets the description of this NasServersInstance.  # noqa: E501

        Description of the NAS server.  # noqa: E501

        :return: The description of this NasServersInstance.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NasServersInstance.

        Description of the NAS server.  # noqa: E501

        :param description: The description of this NasServersInstance.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def operational_status(self):
        """Gets the operational_status of this NasServersInstance.  # noqa: E501


        :return: The operational_status of this NasServersInstance.  # noqa: E501
        :rtype: NASServersOperationalStatusEnum
        """
        return self._operational_status

    @operational_status.setter
    def operational_status(self, operational_status):
        """Sets the operational_status of this NasServersInstance.


        :param operational_status: The operational_status of this NasServersInstance.  # noqa: E501
        :type: NASServersOperationalStatusEnum
        """

        self._operational_status = operational_status

    @property
    def primary_node_id(self):
        """Gets the primary_node_id of this NasServersInstance.  # noqa: E501

        Unique identifier of the primary node on which the NAS server is running.  # noqa: E501

        :return: The primary_node_id of this NasServersInstance.  # noqa: E501
        :rtype: str
        """
        return self._primary_node_id

    @primary_node_id.setter
    def primary_node_id(self, primary_node_id):
        """Sets the primary_node_id of this NasServersInstance.

        Unique identifier of the primary node on which the NAS server is running.  # noqa: E501

        :param primary_node_id: The primary_node_id of this NasServersInstance.  # noqa: E501
        :type: str
        """

        self._primary_node_id = primary_node_id

    @property
    def backup_node_id(self):
        """Gets the backup_node_id of this NasServersInstance.  # noqa: E501

        Unique identifier of the backup node of NAS server.  # noqa: E501

        :return: The backup_node_id of this NasServersInstance.  # noqa: E501
        :rtype: str
        """
        return self._backup_node_id

    @backup_node_id.setter
    def backup_node_id(self, backup_node_id):
        """Sets the backup_node_id of this NasServersInstance.

        Unique identifier of the backup node of NAS server.  # noqa: E501

        :param backup_node_id: The backup_node_id of this NasServersInstance.  # noqa: E501
        :type: str
        """

        self._backup_node_id = backup_node_id

    @property
    def default_unix_user(self):
        """Gets the default_unix_user of this NasServersInstance.  # noqa: E501

        Default Unix user name used for granting access in case of Windows to Unix user mapping failure. When empty, access in such case is denied.  # noqa: E501

        :return: The default_unix_user of this NasServersInstance.  # noqa: E501
        :rtype: str
        """
        return self._default_unix_user

    @default_unix_user.setter
    def default_unix_user(self, default_unix_user):
        """Sets the default_unix_user of this NasServersInstance.

        Default Unix user name used for granting access in case of Windows to Unix user mapping failure. When empty, access in such case is denied.  # noqa: E501

        :param default_unix_user: The default_unix_user of this NasServersInstance.  # noqa: E501
        :type: str
        """

        self._default_unix_user = default_unix_user

    @property
    def default_windows_user(self):
        """Gets the default_windows_user of this NasServersInstance.  # noqa: E501

        Default Windows user name used for granting access in case of Unix to Windows user mapping failure. When empty, access in such case is denied.  # noqa: E501

        :return: The default_windows_user of this NasServersInstance.  # noqa: E501
        :rtype: str
        """
        return self._default_windows_user

    @default_windows_user.setter
    def default_windows_user(self, default_windows_user):
        """Sets the default_windows_user of this NasServersInstance.

        Default Windows user name used for granting access in case of Unix to Windows user mapping failure. When empty, access in such case is denied.  # noqa: E501

        :param default_windows_user: The default_windows_user of this NasServersInstance.  # noqa: E501
        :type: str
        """

        self._default_windows_user = default_windows_user

    @property
    def current_unix_directory_service(self):
        """Gets the current_unix_directory_service of this NasServersInstance.  # noqa: E501


        :return: The current_unix_directory_service of this NasServersInstance.  # noqa: E501
        :rtype: NASServersCurrentUnixDirectoryServiceEnum
        """
        return self._current_unix_directory_service

    @current_unix_directory_service.setter
    def current_unix_directory_service(self, current_unix_directory_service):
        """Sets the current_unix_directory_service of this NasServersInstance.


        :param current_unix_directory_service: The current_unix_directory_service of this NasServersInstance.  # noqa: E501
        :type: NASServersCurrentUnixDirectoryServiceEnum
        """

        self._current_unix_directory_service = current_unix_directory_service

    @property
    def is_username_translation_enabled(self):
        """Gets the is_username_translation_enabled of this NasServersInstance.  # noqa: E501

        Enable the possibility to match a windows account to a Unix account with different names.  # noqa: E501

        :return: The is_username_translation_enabled of this NasServersInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_username_translation_enabled

    @is_username_translation_enabled.setter
    def is_username_translation_enabled(self, is_username_translation_enabled):
        """Sets the is_username_translation_enabled of this NasServersInstance.

        Enable the possibility to match a windows account to a Unix account with different names.  # noqa: E501

        :param is_username_translation_enabled: The is_username_translation_enabled of this NasServersInstance.  # noqa: E501
        :type: bool
        """

        self._is_username_translation_enabled = is_username_translation_enabled

    @property
    def is_auto_user_mapping_enabled(self):
        """Gets the is_auto_user_mapping_enabled of this NasServersInstance.  # noqa: E501

        A Windows user must have a corresponding matching Unix user (uid) in order to connect. This attribute enables you to automatically generate this Unix user (uid), if that Windows user does not have any in the configured Unix directory service (UDS). In a pure SMB or non multi-protocol environment, this should be set to true.   # noqa: E501

        :return: The is_auto_user_mapping_enabled of this NasServersInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_auto_user_mapping_enabled

    @is_auto_user_mapping_enabled.setter
    def is_auto_user_mapping_enabled(self, is_auto_user_mapping_enabled):
        """Sets the is_auto_user_mapping_enabled of this NasServersInstance.

        A Windows user must have a corresponding matching Unix user (uid) in order to connect. This attribute enables you to automatically generate this Unix user (uid), if that Windows user does not have any in the configured Unix directory service (UDS). In a pure SMB or non multi-protocol environment, this should be set to true.   # noqa: E501

        :param is_auto_user_mapping_enabled: The is_auto_user_mapping_enabled of this NasServersInstance.  # noqa: E501
        :type: bool
        """

        self._is_auto_user_mapping_enabled = is_auto_user_mapping_enabled

    @property
    def production_ipv4_interface_id(self):
        """Gets the production_ipv4_interface_id of this NasServersInstance.  # noqa: E501

        Unique identifier of the preferred IPv4 production interface.  # noqa: E501

        :return: The production_ipv4_interface_id of this NasServersInstance.  # noqa: E501
        :rtype: str
        """
        return self._production_ipv4_interface_id

    @production_ipv4_interface_id.setter
    def production_ipv4_interface_id(self, production_ipv4_interface_id):
        """Sets the production_ipv4_interface_id of this NasServersInstance.

        Unique identifier of the preferred IPv4 production interface.  # noqa: E501

        :param production_ipv4_interface_id: The production_ipv4_interface_id of this NasServersInstance.  # noqa: E501
        :type: str
        """

        self._production_ipv4_interface_id = production_ipv4_interface_id

    @property
    def production_ipv6_interface_id(self):
        """Gets the production_ipv6_interface_id of this NasServersInstance.  # noqa: E501

        Unique identifier of the preferred IPv6 production interface.  # noqa: E501

        :return: The production_ipv6_interface_id of this NasServersInstance.  # noqa: E501
        :rtype: str
        """
        return self._production_ipv6_interface_id

    @production_ipv6_interface_id.setter
    def production_ipv6_interface_id(self, production_ipv6_interface_id):
        """Sets the production_ipv6_interface_id of this NasServersInstance.

        Unique identifier of the preferred IPv6 production interface.  # noqa: E501

        :param production_ipv6_interface_id: The production_ipv6_interface_id of this NasServersInstance.  # noqa: E501
        :type: str
        """

        self._production_ipv6_interface_id = production_ipv6_interface_id

    @property
    def backup_ipv4_interface_id(self):
        """Gets the backup_ipv4_interface_id of this NasServersInstance.  # noqa: E501

        Unique identifier of the preferred IPv4 backup interface.  # noqa: E501

        :return: The backup_ipv4_interface_id of this NasServersInstance.  # noqa: E501
        :rtype: str
        """
        return self._backup_ipv4_interface_id

    @backup_ipv4_interface_id.setter
    def backup_ipv4_interface_id(self, backup_ipv4_interface_id):
        """Sets the backup_ipv4_interface_id of this NasServersInstance.

        Unique identifier of the preferred IPv4 backup interface.  # noqa: E501

        :param backup_ipv4_interface_id: The backup_ipv4_interface_id of this NasServersInstance.  # noqa: E501
        :type: str
        """

        self._backup_ipv4_interface_id = backup_ipv4_interface_id

    @property
    def backup_ipv6_interface_id(self):
        """Gets the backup_ipv6_interface_id of this NasServersInstance.  # noqa: E501

        Unique identifier of the preferred IPv6 backup interface.  # noqa: E501

        :return: The backup_ipv6_interface_id of this NasServersInstance.  # noqa: E501
        :rtype: str
        """
        return self._backup_ipv6_interface_id

    @backup_ipv6_interface_id.setter
    def backup_ipv6_interface_id(self, backup_ipv6_interface_id):
        """Sets the backup_ipv6_interface_id of this NasServersInstance.

        Unique identifier of the preferred IPv6 backup interface.  # noqa: E501

        :param backup_ipv6_interface_id: The backup_ipv6_interface_id of this NasServersInstance.  # noqa: E501
        :type: str
        """

        self._backup_ipv6_interface_id = backup_ipv6_interface_id

    @property
    def current_preferred_ipv4_interface_id(self):
        """Gets the current_preferred_ipv4_interface_id of this NasServersInstance.  # noqa: E501

        Unique identifier of the current active preferred IPv4 interface.  # noqa: E501

        :return: The current_preferred_ipv4_interface_id of this NasServersInstance.  # noqa: E501
        :rtype: str
        """
        return self._current_preferred_ipv4_interface_id

    @current_preferred_ipv4_interface_id.setter
    def current_preferred_ipv4_interface_id(self, current_preferred_ipv4_interface_id):
        """Sets the current_preferred_ipv4_interface_id of this NasServersInstance.

        Unique identifier of the current active preferred IPv4 interface.  # noqa: E501

        :param current_preferred_ipv4_interface_id: The current_preferred_ipv4_interface_id of this NasServersInstance.  # noqa: E501
        :type: str
        """

        self._current_preferred_ipv4_interface_id = current_preferred_ipv4_interface_id

    @property
    def current_preferred_ipv6_interface_id(self):
        """Gets the current_preferred_ipv6_interface_id of this NasServersInstance.  # noqa: E501

        Unique identifier of the current active preferred IPv6 interface.  # noqa: E501

        :return: The current_preferred_ipv6_interface_id of this NasServersInstance.  # noqa: E501
        :rtype: str
        """
        return self._current_preferred_ipv6_interface_id

    @current_preferred_ipv6_interface_id.setter
    def current_preferred_ipv6_interface_id(self, current_preferred_ipv6_interface_id):
        """Sets the current_preferred_ipv6_interface_id of this NasServersInstance.

        Unique identifier of the current active preferred IPv6 interface.  # noqa: E501

        :param current_preferred_ipv6_interface_id: The current_preferred_ipv6_interface_id of this NasServersInstance.  # noqa: E501
        :type: str
        """

        self._current_preferred_ipv6_interface_id = current_preferred_ipv6_interface_id

    @property
    def operational_status_l10n(self):
        """Gets the operational_status_l10n of this NasServersInstance.  # noqa: E501

        Localized message string corresponding to operational_status  # noqa: E501

        :return: The operational_status_l10n of this NasServersInstance.  # noqa: E501
        :rtype: str
        """
        return self._operational_status_l10n

    @operational_status_l10n.setter
    def operational_status_l10n(self, operational_status_l10n):
        """Sets the operational_status_l10n of this NasServersInstance.

        Localized message string corresponding to operational_status  # noqa: E501

        :param operational_status_l10n: The operational_status_l10n of this NasServersInstance.  # noqa: E501
        :type: str
        """

        self._operational_status_l10n = operational_status_l10n

    @property
    def current_unix_directory_service_l10n(self):
        """Gets the current_unix_directory_service_l10n of this NasServersInstance.  # noqa: E501

        Localized message string corresponding to current_unix_directory_service  # noqa: E501

        :return: The current_unix_directory_service_l10n of this NasServersInstance.  # noqa: E501
        :rtype: str
        """
        return self._current_unix_directory_service_l10n

    @current_unix_directory_service_l10n.setter
    def current_unix_directory_service_l10n(self, current_unix_directory_service_l10n):
        """Sets the current_unix_directory_service_l10n of this NasServersInstance.

        Localized message string corresponding to current_unix_directory_service  # noqa: E501

        :param current_unix_directory_service_l10n: The current_unix_directory_service_l10n of this NasServersInstance.  # noqa: E501
        :type: str
        """

        self._current_unix_directory_service_l10n = current_unix_directory_service_l10n

    @property
    def file_interfaces(self):
        """Gets the file_interfaces of this NasServersInstance.  # noqa: E501

        This is the inverse of the resource type file_interface association.  # noqa: E501

        :return: The file_interfaces of this NasServersInstance.  # noqa: E501
        :rtype: list[FileInterfaceInstance]
        """
        return self._file_interfaces

    @file_interfaces.setter
    def file_interfaces(self, file_interfaces):
        """Sets the file_interfaces of this NasServersInstance.

        This is the inverse of the resource type file_interface association.  # noqa: E501

        :param file_interfaces: The file_interfaces of this NasServersInstance.  # noqa: E501
        :type: list[FileInterfaceInstance]
        """

        self._file_interfaces = file_interfaces

    @property
    def file_ndmps(self):
        """Gets the file_ndmps of this NasServersInstance.  # noqa: E501

        This is the inverse of the resource type file_ndmp association.  # noqa: E501

        :return: The file_ndmps of this NasServersInstance.  # noqa: E501
        :rtype: list[FileNdmpInstance]
        """
        return self._file_ndmps

    @file_ndmps.setter
    def file_ndmps(self, file_ndmps):
        """Sets the file_ndmps of this NasServersInstance.

        This is the inverse of the resource type file_ndmp association.  # noqa: E501

        :param file_ndmps: The file_ndmps of this NasServersInstance.  # noqa: E501
        :type: list[FileNdmpInstance]
        """

        self._file_ndmps = file_ndmps

    @property
    def file_virus_checkers(self):
        """Gets the file_virus_checkers of this NasServersInstance.  # noqa: E501

        This is the inverse of the resource type file_virus_checker association.  # noqa: E501

        :return: The file_virus_checkers of this NasServersInstance.  # noqa: E501
        :rtype: list[FileVirusCheckerInstance]
        """
        return self._file_virus_checkers

    @file_virus_checkers.setter
    def file_virus_checkers(self, file_virus_checkers):
        """Sets the file_virus_checkers of this NasServersInstance.

        This is the inverse of the resource type file_virus_checker association.  # noqa: E501

        :param file_virus_checkers: The file_virus_checkers of this NasServersInstance.  # noqa: E501
        :type: list[FileVirusCheckerInstance]
        """

        self._file_virus_checkers = file_virus_checkers

    @property
    def nfs_servers(self):
        """Gets the nfs_servers of this NasServersInstance.  # noqa: E501

        This is the inverse of the resource type nfs_server association.  # noqa: E501

        :return: The nfs_servers of this NasServersInstance.  # noqa: E501
        :rtype: list[NfsServerInstance]
        """
        return self._nfs_servers

    @nfs_servers.setter
    def nfs_servers(self, nfs_servers):
        """Sets the nfs_servers of this NasServersInstance.

        This is the inverse of the resource type nfs_server association.  # noqa: E501

        :param nfs_servers: The nfs_servers of this NasServersInstance.  # noqa: E501
        :type: list[NfsServerInstance]
        """

        self._nfs_servers = nfs_servers

    @property
    def smb_servers(self):
        """Gets the smb_servers of this NasServersInstance.  # noqa: E501

        This is the inverse of the resource type smb_server association.  # noqa: E501

        :return: The smb_servers of this NasServersInstance.  # noqa: E501
        :rtype: list[SmbServerInstance]
        """
        return self._smb_servers

    @smb_servers.setter
    def smb_servers(self, smb_servers):
        """Sets the smb_servers of this NasServersInstance.

        This is the inverse of the resource type smb_server association.  # noqa: E501

        :param smb_servers: The smb_servers of this NasServersInstance.  # noqa: E501
        :type: list[SmbServerInstance]
        """

        self._smb_servers = smb_servers

    @property
    def file_dnses(self):
        """Gets the file_dnses of this NasServersInstance.  # noqa: E501

        This is the inverse of the resource type file_dns association.  # noqa: E501

        :return: The file_dnses of this NasServersInstance.  # noqa: E501
        :rtype: list[FileDnsInstance]
        """
        return self._file_dnses

    @file_dnses.setter
    def file_dnses(self, file_dnses):
        """Sets the file_dnses of this NasServersInstance.

        This is the inverse of the resource type file_dns association.  # noqa: E501

        :param file_dnses: The file_dnses of this NasServersInstance.  # noqa: E501
        :type: list[FileDnsInstance]
        """

        self._file_dnses = file_dnses

    @property
    def file_ftps(self):
        """Gets the file_ftps of this NasServersInstance.  # noqa: E501

        This is the inverse of the resource type file_ftp association.  # noqa: E501

        :return: The file_ftps of this NasServersInstance.  # noqa: E501
        :rtype: list[FileFtpInstance]
        """
        return self._file_ftps

    @file_ftps.setter
    def file_ftps(self, file_ftps):
        """Sets the file_ftps of this NasServersInstance.

        This is the inverse of the resource type file_ftp association.  # noqa: E501

        :param file_ftps: The file_ftps of this NasServersInstance.  # noqa: E501
        :type: list[FileFtpInstance]
        """

        self._file_ftps = file_ftps

    @property
    def file_kerberoses(self):
        """Gets the file_kerberoses of this NasServersInstance.  # noqa: E501

        This is the inverse of the resource type file_kerberos association.  # noqa: E501

        :return: The file_kerberoses of this NasServersInstance.  # noqa: E501
        :rtype: list[FileKerberosInstance]
        """
        return self._file_kerberoses

    @file_kerberoses.setter
    def file_kerberoses(self, file_kerberoses):
        """Sets the file_kerberoses of this NasServersInstance.

        This is the inverse of the resource type file_kerberos association.  # noqa: E501

        :param file_kerberoses: The file_kerberoses of this NasServersInstance.  # noqa: E501
        :type: list[FileKerberosInstance]
        """

        self._file_kerberoses = file_kerberoses

    @property
    def file_ldaps(self):
        """Gets the file_ldaps of this NasServersInstance.  # noqa: E501

        This is the inverse of the resource type file_ldap association.  # noqa: E501

        :return: The file_ldaps of this NasServersInstance.  # noqa: E501
        :rtype: list[FileLdapInstance]
        """
        return self._file_ldaps

    @file_ldaps.setter
    def file_ldaps(self, file_ldaps):
        """Sets the file_ldaps of this NasServersInstance.

        This is the inverse of the resource type file_ldap association.  # noqa: E501

        :param file_ldaps: The file_ldaps of this NasServersInstance.  # noqa: E501
        :type: list[FileLdapInstance]
        """

        self._file_ldaps = file_ldaps

    @property
    def file_nises(self):
        """Gets the file_nises of this NasServersInstance.  # noqa: E501

        This is the inverse of the resource type file_nis association.  # noqa: E501

        :return: The file_nises of this NasServersInstance.  # noqa: E501
        :rtype: list[FileNisInstance]
        """
        return self._file_nises

    @file_nises.setter
    def file_nises(self, file_nises):
        """Sets the file_nises of this NasServersInstance.

        This is the inverse of the resource type file_nis association.  # noqa: E501

        :param file_nises: The file_nises of this NasServersInstance.  # noqa: E501
        :type: list[FileNisInstance]
        """

        self._file_nises = file_nises

    @property
    def file_systems(self):
        """Gets the file_systems of this NasServersInstance.  # noqa: E501

        This is the inverse of the resource type file_system association.  # noqa: E501

        :return: The file_systems of this NasServersInstance.  # noqa: E501
        :rtype: list[FileSystemInstance]
        """
        return self._file_systems

    @file_systems.setter
    def file_systems(self, file_systems):
        """Sets the file_systems of this NasServersInstance.

        This is the inverse of the resource type file_system association.  # noqa: E501

        :param file_systems: The file_systems of this NasServersInstance.  # noqa: E501
        :type: list[FileSystemInstance]
        """

        self._file_systems = file_systems

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NasServersInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NasServersInstance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
