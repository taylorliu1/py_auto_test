# coding: utf-8

"""
    PowerFlex NAS Management REST API

    NAS Storage Management REST API definition.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NasServersPing(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'destination_address': 'str',
        'is_ipv6': 'bool'
    }

    attribute_map = {
        'destination_address': 'destination_address',
        'is_ipv6': 'is_ipv6'
    }

    def __init__(self, destination_address=None, is_ipv6=False):  # noqa: E501
        """NasServersPing - a model defined in Swagger"""  # noqa: E501
        self._destination_address = None
        self._is_ipv6 = None
        self.discriminator = None
        if destination_address is not None:
            self.destination_address = destination_address
        if is_ipv6 is not None:
            self.is_ipv6 = is_ipv6

    @property
    def destination_address(self):
        """Gets the destination_address of this NasServersPing.  # noqa: E501

        Destination to ping, can be either an IP address (IPv4 or IPv6) or a hostname being resolved by the NAS server name resolvers.  # noqa: E501

        :return: The destination_address of this NasServersPing.  # noqa: E501
        :rtype: str
        """
        return self._destination_address

    @destination_address.setter
    def destination_address(self, destination_address):
        """Sets the destination_address of this NasServersPing.

        Destination to ping, can be either an IP address (IPv4 or IPv6) or a hostname being resolved by the NAS server name resolvers.  # noqa: E501

        :param destination_address: The destination_address of this NasServersPing.  # noqa: E501
        :type: str
        """

        self._destination_address = destination_address

    @property
    def is_ipv6(self):
        """Gets the is_ipv6 of this NasServersPing.  # noqa: E501

        When true, and the destination is a hostname, it will be resolved to IPv6. Otherwise the hostname is resolved preferably to an IPv4 address.  # noqa: E501

        :return: The is_ipv6 of this NasServersPing.  # noqa: E501
        :rtype: bool
        """
        return self._is_ipv6

    @is_ipv6.setter
    def is_ipv6(self, is_ipv6):
        """Sets the is_ipv6 of this NasServersPing.

        When true, and the destination is a hostname, it will be resolved to IPv6. Otherwise the hostname is resolved preferably to an IPv4 address.  # noqa: E501

        :param is_ipv6: The is_ipv6 of this NasServersPing.  # noqa: E501
        :type: bool
        """

        self._is_ipv6 = is_ipv6

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NasServersPing, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NasServersPing):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
