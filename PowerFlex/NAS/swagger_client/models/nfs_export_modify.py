# coding: utf-8

"""
    PowerFlex NAS Management REST API

    NAS Storage Management REST API definition.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NfsExportModify(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'default_access': 'NFSExportDefaultAccessEnum',
        'min_security': 'NFSExportMinSecurityEnum',
        'no_access_hosts': 'list[str]',
        'add_no_access_hosts': 'list[str]',
        'remove_no_access_hosts': 'list[str]',
        'read_only_hosts': 'list[str]',
        'add_read_only_hosts': 'list[str]',
        'remove_read_only_hosts': 'list[str]',
        'read_only_root_hosts': 'list[str]',
        'add_read_only_root_hosts': 'list[str]',
        'remove_read_only_root_hosts': 'list[str]',
        'read_write_hosts': 'list[str]',
        'add_read_write_hosts': 'list[str]',
        'remove_read_write_hosts': 'list[str]',
        'read_write_root_hosts': 'list[str]',
        'add_read_write_root_hosts': 'list[str]',
        'remove_read_write_root_hosts': 'list[str]',
        'anonymous_uid': 'int',
        'anonymous_gid': 'int',
        'is_no_suid': 'bool'
    }

    attribute_map = {
        'description': 'description',
        'default_access': 'default_access',
        'min_security': 'min_security',
        'no_access_hosts': 'no_access_hosts',
        'add_no_access_hosts': 'add_no_access_hosts',
        'remove_no_access_hosts': 'remove_no_access_hosts',
        'read_only_hosts': 'read_only_hosts',
        'add_read_only_hosts': 'add_read_only_hosts',
        'remove_read_only_hosts': 'remove_read_only_hosts',
        'read_only_root_hosts': 'read_only_root_hosts',
        'add_read_only_root_hosts': 'add_read_only_root_hosts',
        'remove_read_only_root_hosts': 'remove_read_only_root_hosts',
        'read_write_hosts': 'read_write_hosts',
        'add_read_write_hosts': 'add_read_write_hosts',
        'remove_read_write_hosts': 'remove_read_write_hosts',
        'read_write_root_hosts': 'read_write_root_hosts',
        'add_read_write_root_hosts': 'add_read_write_root_hosts',
        'remove_read_write_root_hosts': 'remove_read_write_root_hosts',
        'anonymous_uid': 'anonymous_UID',
        'anonymous_gid': 'anonymous_GID',
        'is_no_suid': 'is_no_SUID'
    }

    def __init__(self, description=None, default_access=None, min_security=None, no_access_hosts=None, add_no_access_hosts=None, remove_no_access_hosts=None, read_only_hosts=None, add_read_only_hosts=None, remove_read_only_hosts=None, read_only_root_hosts=None, add_read_only_root_hosts=None, remove_read_only_root_hosts=None, read_write_hosts=None, add_read_write_hosts=None, remove_read_write_hosts=None, read_write_root_hosts=None, add_read_write_root_hosts=None, remove_read_write_root_hosts=None, anonymous_uid=-2, anonymous_gid=-2, is_no_suid=None):  # noqa: E501
        """NfsExportModify - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._default_access = None
        self._min_security = None
        self._no_access_hosts = None
        self._add_no_access_hosts = None
        self._remove_no_access_hosts = None
        self._read_only_hosts = None
        self._add_read_only_hosts = None
        self._remove_read_only_hosts = None
        self._read_only_root_hosts = None
        self._add_read_only_root_hosts = None
        self._remove_read_only_root_hosts = None
        self._read_write_hosts = None
        self._add_read_write_hosts = None
        self._remove_read_write_hosts = None
        self._read_write_root_hosts = None
        self._add_read_write_root_hosts = None
        self._remove_read_write_root_hosts = None
        self._anonymous_uid = None
        self._anonymous_gid = None
        self._is_no_suid = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if default_access is not None:
            self.default_access = default_access
        if min_security is not None:
            self.min_security = min_security
        if no_access_hosts is not None:
            self.no_access_hosts = no_access_hosts
        if add_no_access_hosts is not None:
            self.add_no_access_hosts = add_no_access_hosts
        if remove_no_access_hosts is not None:
            self.remove_no_access_hosts = remove_no_access_hosts
        if read_only_hosts is not None:
            self.read_only_hosts = read_only_hosts
        if add_read_only_hosts is not None:
            self.add_read_only_hosts = add_read_only_hosts
        if remove_read_only_hosts is not None:
            self.remove_read_only_hosts = remove_read_only_hosts
        if read_only_root_hosts is not None:
            self.read_only_root_hosts = read_only_root_hosts
        if add_read_only_root_hosts is not None:
            self.add_read_only_root_hosts = add_read_only_root_hosts
        if remove_read_only_root_hosts is not None:
            self.remove_read_only_root_hosts = remove_read_only_root_hosts
        if read_write_hosts is not None:
            self.read_write_hosts = read_write_hosts
        if add_read_write_hosts is not None:
            self.add_read_write_hosts = add_read_write_hosts
        if remove_read_write_hosts is not None:
            self.remove_read_write_hosts = remove_read_write_hosts
        if read_write_root_hosts is not None:
            self.read_write_root_hosts = read_write_root_hosts
        if add_read_write_root_hosts is not None:
            self.add_read_write_root_hosts = add_read_write_root_hosts
        if remove_read_write_root_hosts is not None:
            self.remove_read_write_root_hosts = remove_read_write_root_hosts
        if anonymous_uid is not None:
            self.anonymous_uid = anonymous_uid
        if anonymous_gid is not None:
            self.anonymous_gid = anonymous_gid
        if is_no_suid is not None:
            self.is_no_suid = is_no_suid

    @property
    def description(self):
        """Gets the description of this NfsExportModify.  # noqa: E501

        NFS Export description.  # noqa: E501

        :return: The description of this NfsExportModify.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NfsExportModify.

        NFS Export description.  # noqa: E501

        :param description: The description of this NfsExportModify.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def default_access(self):
        """Gets the default_access of this NfsExportModify.  # noqa: E501


        :return: The default_access of this NfsExportModify.  # noqa: E501
        :rtype: NFSExportDefaultAccessEnum
        """
        return self._default_access

    @default_access.setter
    def default_access(self, default_access):
        """Sets the default_access of this NfsExportModify.


        :param default_access: The default_access of this NfsExportModify.  # noqa: E501
        :type: NFSExportDefaultAccessEnum
        """

        self._default_access = default_access

    @property
    def min_security(self):
        """Gets the min_security of this NfsExportModify.  # noqa: E501


        :return: The min_security of this NfsExportModify.  # noqa: E501
        :rtype: NFSExportMinSecurityEnum
        """
        return self._min_security

    @min_security.setter
    def min_security(self, min_security):
        """Sets the min_security of this NfsExportModify.


        :param min_security: The min_security of this NfsExportModify.  # noqa: E501
        :type: NFSExportMinSecurityEnum
        """

        self._min_security = min_security

    @property
    def no_access_hosts(self):
        """Gets the no_access_hosts of this NfsExportModify.  # noqa: E501

        Hosts with no access to the NFS export or its snapshots. Hosts can be entered by Hostname, IP addresses (IPv4, IPv6, IPv4/PrefixLength, IPv6/PrefixLenght, or IPv4/subnetmask), or Netgroups prefixed with @.  # noqa: E501

        :return: The no_access_hosts of this NfsExportModify.  # noqa: E501
        :rtype: list[str]
        """
        return self._no_access_hosts

    @no_access_hosts.setter
    def no_access_hosts(self, no_access_hosts):
        """Sets the no_access_hosts of this NfsExportModify.

        Hosts with no access to the NFS export or its snapshots. Hosts can be entered by Hostname, IP addresses (IPv4, IPv6, IPv4/PrefixLength, IPv6/PrefixLenght, or IPv4/subnetmask), or Netgroups prefixed with @.  # noqa: E501

        :param no_access_hosts: The no_access_hosts of this NfsExportModify.  # noqa: E501
        :type: list[str]
        """

        self._no_access_hosts = no_access_hosts

    @property
    def add_no_access_hosts(self):
        """Gets the add_no_access_hosts of this NfsExportModify.  # noqa: E501

        Hosts to add to the no_access_host list. Hosts can be entered by Hostname, IP addresses (IPv4, IPv6, IPv4/PrefixLength, IPv6/PrefixLenght, or IPv4/subnetmask), or Netgroups prefixed with @. Error if the host already exists in the list. Cannot be combined with no_access_hosts.  # noqa: E501

        :return: The add_no_access_hosts of this NfsExportModify.  # noqa: E501
        :rtype: list[str]
        """
        return self._add_no_access_hosts

    @add_no_access_hosts.setter
    def add_no_access_hosts(self, add_no_access_hosts):
        """Sets the add_no_access_hosts of this NfsExportModify.

        Hosts to add to the no_access_host list. Hosts can be entered by Hostname, IP addresses (IPv4, IPv6, IPv4/PrefixLength, IPv6/PrefixLenght, or IPv4/subnetmask), or Netgroups prefixed with @. Error if the host already exists in the list. Cannot be combined with no_access_hosts.  # noqa: E501

        :param add_no_access_hosts: The add_no_access_hosts of this NfsExportModify.  # noqa: E501
        :type: list[str]
        """

        self._add_no_access_hosts = add_no_access_hosts

    @property
    def remove_no_access_hosts(self):
        """Gets the remove_no_access_hosts of this NfsExportModify.  # noqa: E501

        Hosts to remove from the current no_access_hosts list. Hosts can be entered by Hostname, IP addresses (IPv4, IPv6, IPv4/PrefixLength, IPv6/PrefixLenght, or IPv4/subnetmask), or Netgroups prefixed with @. Error if the host is not present. Cannot combine with no_access_hosts.  # noqa: E501

        :return: The remove_no_access_hosts of this NfsExportModify.  # noqa: E501
        :rtype: list[str]
        """
        return self._remove_no_access_hosts

    @remove_no_access_hosts.setter
    def remove_no_access_hosts(self, remove_no_access_hosts):
        """Sets the remove_no_access_hosts of this NfsExportModify.

        Hosts to remove from the current no_access_hosts list. Hosts can be entered by Hostname, IP addresses (IPv4, IPv6, IPv4/PrefixLength, IPv6/PrefixLenght, or IPv4/subnetmask), or Netgroups prefixed with @. Error if the host is not present. Cannot combine with no_access_hosts.  # noqa: E501

        :param remove_no_access_hosts: The remove_no_access_hosts of this NfsExportModify.  # noqa: E501
        :type: list[str]
        """

        self._remove_no_access_hosts = remove_no_access_hosts

    @property
    def read_only_hosts(self):
        """Gets the read_only_hosts of this NfsExportModify.  # noqa: E501

        Hosts with read-only access to the NFS export and its snapshots. Hosts can be entered by Hostname, IP addresses (IPv4, IPv6, IPv4/PrefixLength, IPv6/PrefixLenght, or IPv4/subnetmask), or Netgroups prefixed with @.  # noqa: E501

        :return: The read_only_hosts of this NfsExportModify.  # noqa: E501
        :rtype: list[str]
        """
        return self._read_only_hosts

    @read_only_hosts.setter
    def read_only_hosts(self, read_only_hosts):
        """Sets the read_only_hosts of this NfsExportModify.

        Hosts with read-only access to the NFS export and its snapshots. Hosts can be entered by Hostname, IP addresses (IPv4, IPv6, IPv4/PrefixLength, IPv6/PrefixLenght, or IPv4/subnetmask), or Netgroups prefixed with @.  # noqa: E501

        :param read_only_hosts: The read_only_hosts of this NfsExportModify.  # noqa: E501
        :type: list[str]
        """

        self._read_only_hosts = read_only_hosts

    @property
    def add_read_only_hosts(self):
        """Gets the add_read_only_hosts of this NfsExportModify.  # noqa: E501

        Hosts to add to the current read_only_hosts list. Hosts can be entered by Hostname, IP addresses (IPv4, IPv6, IPv4/PrefixLength, IPv6/PrefixLenght, or IPv4/subnetmask), or Netgroups prefixed with @. Error if the host already exists. Cannot combine with read_only_hosts.  # noqa: E501

        :return: The add_read_only_hosts of this NfsExportModify.  # noqa: E501
        :rtype: list[str]
        """
        return self._add_read_only_hosts

    @add_read_only_hosts.setter
    def add_read_only_hosts(self, add_read_only_hosts):
        """Sets the add_read_only_hosts of this NfsExportModify.

        Hosts to add to the current read_only_hosts list. Hosts can be entered by Hostname, IP addresses (IPv4, IPv6, IPv4/PrefixLength, IPv6/PrefixLenght, or IPv4/subnetmask), or Netgroups prefixed with @. Error if the host already exists. Cannot combine with read_only_hosts.  # noqa: E501

        :param add_read_only_hosts: The add_read_only_hosts of this NfsExportModify.  # noqa: E501
        :type: list[str]
        """

        self._add_read_only_hosts = add_read_only_hosts

    @property
    def remove_read_only_hosts(self):
        """Gets the remove_read_only_hosts of this NfsExportModify.  # noqa: E501

        Hosts to remove from the current read_only_hosts list. Hosts can be entered by Hostname, IP addresses (IPv4, IPv6, IPv4/PrefixLength, IPv6/PrefixLenght, or IPv4/subnetmask), or Netgroups prefixed with @. Error if the host is not present. Cannot combine with read_only_hosts.  # noqa: E501

        :return: The remove_read_only_hosts of this NfsExportModify.  # noqa: E501
        :rtype: list[str]
        """
        return self._remove_read_only_hosts

    @remove_read_only_hosts.setter
    def remove_read_only_hosts(self, remove_read_only_hosts):
        """Sets the remove_read_only_hosts of this NfsExportModify.

        Hosts to remove from the current read_only_hosts list. Hosts can be entered by Hostname, IP addresses (IPv4, IPv6, IPv4/PrefixLength, IPv6/PrefixLenght, or IPv4/subnetmask), or Netgroups prefixed with @. Error if the host is not present. Cannot combine with read_only_hosts.  # noqa: E501

        :param remove_read_only_hosts: The remove_read_only_hosts of this NfsExportModify.  # noqa: E501
        :type: list[str]
        """

        self._remove_read_only_hosts = remove_read_only_hosts

    @property
    def read_only_root_hosts(self):
        """Gets the read_only_root_hosts of this NfsExportModify.  # noqa: E501

        Hosts with read-only and ready-only for root user access to the NFS Export and its snapshots. Hosts can be entered by Hostname, IP addresses (IPv4, IPv6, IPv4/PrefixLength, IPv6/PrefixLenght, or IPv4/subnetmask), Netgroups prefixed with @.  # noqa: E501

        :return: The read_only_root_hosts of this NfsExportModify.  # noqa: E501
        :rtype: list[str]
        """
        return self._read_only_root_hosts

    @read_only_root_hosts.setter
    def read_only_root_hosts(self, read_only_root_hosts):
        """Sets the read_only_root_hosts of this NfsExportModify.

        Hosts with read-only and ready-only for root user access to the NFS Export and its snapshots. Hosts can be entered by Hostname, IP addresses (IPv4, IPv6, IPv4/PrefixLength, IPv6/PrefixLenght, or IPv4/subnetmask), Netgroups prefixed with @.  # noqa: E501

        :param read_only_root_hosts: The read_only_root_hosts of this NfsExportModify.  # noqa: E501
        :type: list[str]
        """

        self._read_only_root_hosts = read_only_root_hosts

    @property
    def add_read_only_root_hosts(self):
        """Gets the add_read_only_root_hosts of this NfsExportModify.  # noqa: E501

        Hosts to add to the current read_only_root_hosts list. Hosts can be entered by Hostname, IP addresses (IPv4, IPv6, IPv4/PrefixLength, IPv6/PrefixLenght, or IPv4/subnetmask), or Netgroups prefixed with @. Error if the host already exists. Cannot combine with read_only_root_hosts.  # noqa: E501

        :return: The add_read_only_root_hosts of this NfsExportModify.  # noqa: E501
        :rtype: list[str]
        """
        return self._add_read_only_root_hosts

    @add_read_only_root_hosts.setter
    def add_read_only_root_hosts(self, add_read_only_root_hosts):
        """Sets the add_read_only_root_hosts of this NfsExportModify.

        Hosts to add to the current read_only_root_hosts list. Hosts can be entered by Hostname, IP addresses (IPv4, IPv6, IPv4/PrefixLength, IPv6/PrefixLenght, or IPv4/subnetmask), or Netgroups prefixed with @. Error if the host already exists. Cannot combine with read_only_root_hosts.  # noqa: E501

        :param add_read_only_root_hosts: The add_read_only_root_hosts of this NfsExportModify.  # noqa: E501
        :type: list[str]
        """

        self._add_read_only_root_hosts = add_read_only_root_hosts

    @property
    def remove_read_only_root_hosts(self):
        """Gets the remove_read_only_root_hosts of this NfsExportModify.  # noqa: E501

        Hosts to remove from the current read_only_root_hosts list. Hosts can be entered by Hostname, IP addresses (IPv4, IPv6, IPv4/PrefixLength, IPv6/PrefixLenght, or IPv4/subnetmask), or Netgroups prefixed with @. Error if The host is not present. Cannot combine with read_only_root_hosts.  # noqa: E501

        :return: The remove_read_only_root_hosts of this NfsExportModify.  # noqa: E501
        :rtype: list[str]
        """
        return self._remove_read_only_root_hosts

    @remove_read_only_root_hosts.setter
    def remove_read_only_root_hosts(self, remove_read_only_root_hosts):
        """Sets the remove_read_only_root_hosts of this NfsExportModify.

        Hosts to remove from the current read_only_root_hosts list. Hosts can be entered by Hostname, IP addresses (IPv4, IPv6, IPv4/PrefixLength, IPv6/PrefixLenght, or IPv4/subnetmask), or Netgroups prefixed with @. Error if The host is not present. Cannot combine with read_only_root_hosts.  # noqa: E501

        :param remove_read_only_root_hosts: The remove_read_only_root_hosts of this NfsExportModify.  # noqa: E501
        :type: list[str]
        """

        self._remove_read_only_root_hosts = remove_read_only_root_hosts

    @property
    def read_write_hosts(self):
        """Gets the read_write_hosts of this NfsExportModify.  # noqa: E501

        Hosts with read and write access to the NFS export and its snapshots. Hosts can be entered by Hostname, IP addresses (IPv4, IPv6, IPv4/PrefixLength, IPv6/PrefixLenght, or IPv4/subnetmask) or, Netgroups prefixed with @.  # noqa: E501

        :return: The read_write_hosts of this NfsExportModify.  # noqa: E501
        :rtype: list[str]
        """
        return self._read_write_hosts

    @read_write_hosts.setter
    def read_write_hosts(self, read_write_hosts):
        """Sets the read_write_hosts of this NfsExportModify.

        Hosts with read and write access to the NFS export and its snapshots. Hosts can be entered by Hostname, IP addresses (IPv4, IPv6, IPv4/PrefixLength, IPv6/PrefixLenght, or IPv4/subnetmask) or, Netgroups prefixed with @.  # noqa: E501

        :param read_write_hosts: The read_write_hosts of this NfsExportModify.  # noqa: E501
        :type: list[str]
        """

        self._read_write_hosts = read_write_hosts

    @property
    def add_read_write_hosts(self):
        """Gets the add_read_write_hosts of this NfsExportModify.  # noqa: E501

        Hosts to add to the current read_write_hosts list. Hosts can be entered by Hostname, IP addresses (IPv4, IPv6, IPv4/PrefixLength, IPv6/PrefixLenght, or IPv4/subnetmask), or Netgroups prefixed with @. Error if Host is already exists. Cannot combine with read_write_hosts.  # noqa: E501

        :return: The add_read_write_hosts of this NfsExportModify.  # noqa: E501
        :rtype: list[str]
        """
        return self._add_read_write_hosts

    @add_read_write_hosts.setter
    def add_read_write_hosts(self, add_read_write_hosts):
        """Sets the add_read_write_hosts of this NfsExportModify.

        Hosts to add to the current read_write_hosts list. Hosts can be entered by Hostname, IP addresses (IPv4, IPv6, IPv4/PrefixLength, IPv6/PrefixLenght, or IPv4/subnetmask), or Netgroups prefixed with @. Error if Host is already exists. Cannot combine with read_write_hosts.  # noqa: E501

        :param add_read_write_hosts: The add_read_write_hosts of this NfsExportModify.  # noqa: E501
        :type: list[str]
        """

        self._add_read_write_hosts = add_read_write_hosts

    @property
    def remove_read_write_hosts(self):
        """Gets the remove_read_write_hosts of this NfsExportModify.  # noqa: E501

        Hosts to remove from the current read_write_hosts list. Hosts can be entered by Hostname, IP addresses (IPv4, IPv6, IPv4/PrefixLength, IPv6/PrefixLenght, or IPv4/subnetmask), or Netgroups prefixed with @. Error if Host is not present. Cannot combine with read_write_hosts.  # noqa: E501

        :return: The remove_read_write_hosts of this NfsExportModify.  # noqa: E501
        :rtype: list[str]
        """
        return self._remove_read_write_hosts

    @remove_read_write_hosts.setter
    def remove_read_write_hosts(self, remove_read_write_hosts):
        """Sets the remove_read_write_hosts of this NfsExportModify.

        Hosts to remove from the current read_write_hosts list. Hosts can be entered by Hostname, IP addresses (IPv4, IPv6, IPv4/PrefixLength, IPv6/PrefixLenght, or IPv4/subnetmask), or Netgroups prefixed with @. Error if Host is not present. Cannot combine with read_write_hosts.  # noqa: E501

        :param remove_read_write_hosts: The remove_read_write_hosts of this NfsExportModify.  # noqa: E501
        :type: list[str]
        """

        self._remove_read_write_hosts = remove_read_write_hosts

    @property
    def read_write_root_hosts(self):
        """Gets the read_write_root_hosts of this NfsExportModify.  # noqa: E501

        Hosts with read and write and read and write for root user access to the NFS Export and its snapshots. Hosts can be entered by Hostname, IP addresses (IPv4, IPv6, IPv4/PrefixLength, IPv6/PrefixLenght, or IPv4/subnetmask), or Netgroups prefixed with @.  # noqa: E501

        :return: The read_write_root_hosts of this NfsExportModify.  # noqa: E501
        :rtype: list[str]
        """
        return self._read_write_root_hosts

    @read_write_root_hosts.setter
    def read_write_root_hosts(self, read_write_root_hosts):
        """Sets the read_write_root_hosts of this NfsExportModify.

        Hosts with read and write and read and write for root user access to the NFS Export and its snapshots. Hosts can be entered by Hostname, IP addresses (IPv4, IPv6, IPv4/PrefixLength, IPv6/PrefixLenght, or IPv4/subnetmask), or Netgroups prefixed with @.  # noqa: E501

        :param read_write_root_hosts: The read_write_root_hosts of this NfsExportModify.  # noqa: E501
        :type: list[str]
        """

        self._read_write_root_hosts = read_write_root_hosts

    @property
    def add_read_write_root_hosts(self):
        """Gets the add_read_write_root_hosts of this NfsExportModify.  # noqa: E501

        Hosts to add to the current read_write_root_hosts list. Hosts can be entered by Hostname, IP addresses (IPv4, IPv6, IPv4/PrefixLength, IPv6/PrefixLenght, or IPv4/subnetmask), or Netgroups prefixed with @. Error if the host already exists. Cannot combine with read_write_root_hosts.  # noqa: E501

        :return: The add_read_write_root_hosts of this NfsExportModify.  # noqa: E501
        :rtype: list[str]
        """
        return self._add_read_write_root_hosts

    @add_read_write_root_hosts.setter
    def add_read_write_root_hosts(self, add_read_write_root_hosts):
        """Sets the add_read_write_root_hosts of this NfsExportModify.

        Hosts to add to the current read_write_root_hosts list. Hosts can be entered by Hostname, IP addresses (IPv4, IPv6, IPv4/PrefixLength, IPv6/PrefixLenght, or IPv4/subnetmask), or Netgroups prefixed with @. Error if the host already exists. Cannot combine with read_write_root_hosts.  # noqa: E501

        :param add_read_write_root_hosts: The add_read_write_root_hosts of this NfsExportModify.  # noqa: E501
        :type: list[str]
        """

        self._add_read_write_root_hosts = add_read_write_root_hosts

    @property
    def remove_read_write_root_hosts(self):
        """Gets the remove_read_write_root_hosts of this NfsExportModify.  # noqa: E501

        Hosts to remove from the current read_write_root_hosts list. Hosts can be entered by Hostname, IP addresses (IPv4, IPv6, IPv4/PrefixLength, IPv6/PrefixLenght, or IPv4/subnetmask), or Netgroups prefixed with @. Error if the host is not present. Cannot combine with read_write_root_hosts.  # noqa: E501

        :return: The remove_read_write_root_hosts of this NfsExportModify.  # noqa: E501
        :rtype: list[str]
        """
        return self._remove_read_write_root_hosts

    @remove_read_write_root_hosts.setter
    def remove_read_write_root_hosts(self, remove_read_write_root_hosts):
        """Sets the remove_read_write_root_hosts of this NfsExportModify.

        Hosts to remove from the current read_write_root_hosts list. Hosts can be entered by Hostname, IP addresses (IPv4, IPv6, IPv4/PrefixLength, IPv6/PrefixLenght, or IPv4/subnetmask), or Netgroups prefixed with @. Error if the host is not present. Cannot combine with read_write_root_hosts.  # noqa: E501

        :param remove_read_write_root_hosts: The remove_read_write_root_hosts of this NfsExportModify.  # noqa: E501
        :type: list[str]
        """

        self._remove_read_write_root_hosts = remove_read_write_root_hosts

    @property
    def anonymous_uid(self):
        """Gets the anonymous_uid of this NfsExportModify.  # noqa: E501

        Specifies the user ID of the anonymous account.  # noqa: E501

        :return: The anonymous_uid of this NfsExportModify.  # noqa: E501
        :rtype: int
        """
        return self._anonymous_uid

    @anonymous_uid.setter
    def anonymous_uid(self, anonymous_uid):
        """Sets the anonymous_uid of this NfsExportModify.

        Specifies the user ID of the anonymous account.  # noqa: E501

        :param anonymous_uid: The anonymous_uid of this NfsExportModify.  # noqa: E501
        :type: int
        """

        self._anonymous_uid = anonymous_uid

    @property
    def anonymous_gid(self):
        """Gets the anonymous_gid of this NfsExportModify.  # noqa: E501

        Specifies the group ID of the anonymous account.  # noqa: E501

        :return: The anonymous_gid of this NfsExportModify.  # noqa: E501
        :rtype: int
        """
        return self._anonymous_gid

    @anonymous_gid.setter
    def anonymous_gid(self, anonymous_gid):
        """Sets the anonymous_gid of this NfsExportModify.

        Specifies the group ID of the anonymous account.  # noqa: E501

        :param anonymous_gid: The anonymous_gid of this NfsExportModify.  # noqa: E501
        :type: int
        """

        self._anonymous_gid = anonymous_gid

    @property
    def is_no_suid(self):
        """Gets the is_no_suid of this NfsExportModify.  # noqa: E501

        If set, do not allow access to set SUID. Otherwise, allow access.  # noqa: E501

        :return: The is_no_suid of this NfsExportModify.  # noqa: E501
        :rtype: bool
        """
        return self._is_no_suid

    @is_no_suid.setter
    def is_no_suid(self, is_no_suid):
        """Sets the is_no_suid of this NfsExportModify.

        If set, do not allow access to set SUID. Otherwise, allow access.  # noqa: E501

        :param is_no_suid: The is_no_suid of this NfsExportModify.  # noqa: E501
        :type: bool
        """

        self._is_no_suid = is_no_suid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NfsExportModify, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NfsExportModify):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
