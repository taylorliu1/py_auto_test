# coding: utf-8

"""
    PowerFlex NAS Management REST API

    NAS Storage Management REST API definition.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResourceTypeEnum(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    FILE_DNS_SERVERS = "file-dns-servers"
    FILE_FTP_SERVERS = "file-ftp-servers"
    FILE_INTERFACE_ROUTES = "file-interface-routes"
    FILE_INTERFACES = "file-interfaces"
    FILE_KERBEROS_SERVERS = "file-kerberos-servers"
    FILE_LDAP_SERVERS = "file-ldap-servers"
    FILE_NDMP_SERVERS = "file-ndmp-servers"
    FILE_NIS_SERVERS = "file-nis-servers"
    FILE_SYSTEMS = "file-systems"
    FILE_TREE_QUOTAS = "file-tree-quotas"
    FILE_USER_QUOTAS = "file-user-quotas"
    FILE_VIRUS_CHECKERS = "file-virus-checkers"
    NAS_CLUSTERS = "nas-clusters"
    NAS_NODES = "nas-nodes"
    NAS_NODES_MAINTENANCE = "nas-nodes-maintenance"
    NAS_PROTECTION_POLICIES = "nas-protection-policies"
    NAS_SERVERS = "nas-servers"
    NAS_SNAPSHOT_RULES = "nas-snapshot-rules"
    NDU = "ndu"
    NFS_EXPORTS = "nfs-exports"
    NFS_SERVERS = "nfs-servers"
    SCHEDULER = "scheduler"
    SDNAS_JOBS = "sdnas-jobs"
    SMB_SERVERS = "smb-servers"
    SMB_SHARES = "smb-shares"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """ResourceTypeEnum - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResourceTypeEnum, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourceTypeEnum):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
