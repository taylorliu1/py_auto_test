# coding: utf-8

"""
    PowerFlex NAS Management REST API

    NAS Storage Management REST API definition.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NasServersCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'protection_domain_id': 'str',
        'description': 'str',
        'current_unix_directory_service': 'NASServersCurrentUnixDirectoryServiceEnum',
        'default_unix_user': 'str',
        'default_windows_user': 'str',
        'is_username_translation_enabled': 'bool',
        'is_auto_user_mapping_enabled': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'protection_domain_id': 'protection_domain_id',
        'description': 'description',
        'current_unix_directory_service': 'current_unix_directory_service',
        'default_unix_user': 'default_unix_user',
        'default_windows_user': 'default_windows_user',
        'is_username_translation_enabled': 'is_username_translation_enabled',
        'is_auto_user_mapping_enabled': 'is_auto_user_mapping_enabled'
    }

    def __init__(self, name=None, protection_domain_id=None, description=None, current_unix_directory_service=None, default_unix_user=None, default_windows_user=None, is_username_translation_enabled=False, is_auto_user_mapping_enabled=False):  # noqa: E501
        """NasServersCreate - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._protection_domain_id = None
        self._description = None
        self._current_unix_directory_service = None
        self._default_unix_user = None
        self._default_windows_user = None
        self._is_username_translation_enabled = None
        self._is_auto_user_mapping_enabled = None
        self.discriminator = None
        self.name = name
        self.protection_domain_id = protection_domain_id
        if description is not None:
            self.description = description
        if current_unix_directory_service is not None:
            self.current_unix_directory_service = current_unix_directory_service
        if default_unix_user is not None:
            self.default_unix_user = default_unix_user
        if default_windows_user is not None:
            self.default_windows_user = default_windows_user
        if is_username_translation_enabled is not None:
            self.is_username_translation_enabled = is_username_translation_enabled
        if is_auto_user_mapping_enabled is not None:
            self.is_auto_user_mapping_enabled = is_auto_user_mapping_enabled

    @property
    def name(self):
        """Gets the name of this NasServersCreate.  # noqa: E501

        Name of the NAS server. Use alphanumeric characters only.  # noqa: E501

        :return: The name of this NasServersCreate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NasServersCreate.

        Name of the NAS server. Use alphanumeric characters only.  # noqa: E501

        :param name: The name of this NasServersCreate.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def protection_domain_id(self):
        """Gets the protection_domain_id of this NasServersCreate.  # noqa: E501

        Unique identifier of the NAS enabled Protection Domain.  # noqa: E501

        :return: The protection_domain_id of this NasServersCreate.  # noqa: E501
        :rtype: str
        """
        return self._protection_domain_id

    @protection_domain_id.setter
    def protection_domain_id(self, protection_domain_id):
        """Sets the protection_domain_id of this NasServersCreate.

        Unique identifier of the NAS enabled Protection Domain.  # noqa: E501

        :param protection_domain_id: The protection_domain_id of this NasServersCreate.  # noqa: E501
        :type: str
        """
        if protection_domain_id is None:
            raise ValueError("Invalid value for `protection_domain_id`, must not be `None`")  # noqa: E501

        self._protection_domain_id = protection_domain_id

    @property
    def description(self):
        """Gets the description of this NasServersCreate.  # noqa: E501

        Description of the NAS server.  # noqa: E501

        :return: The description of this NasServersCreate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NasServersCreate.

        Description of the NAS server.  # noqa: E501

        :param description: The description of this NasServersCreate.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def current_unix_directory_service(self):
        """Gets the current_unix_directory_service of this NasServersCreate.  # noqa: E501


        :return: The current_unix_directory_service of this NasServersCreate.  # noqa: E501
        :rtype: NASServersCurrentUnixDirectoryServiceEnum
        """
        return self._current_unix_directory_service

    @current_unix_directory_service.setter
    def current_unix_directory_service(self, current_unix_directory_service):
        """Sets the current_unix_directory_service of this NasServersCreate.


        :param current_unix_directory_service: The current_unix_directory_service of this NasServersCreate.  # noqa: E501
        :type: NASServersCurrentUnixDirectoryServiceEnum
        """

        self._current_unix_directory_service = current_unix_directory_service

    @property
    def default_unix_user(self):
        """Gets the default_unix_user of this NasServersCreate.  # noqa: E501

        Default Unix user name used for granting access in case of Windows to Unix user mapping failure. When empty, access in such case is denied.  # noqa: E501

        :return: The default_unix_user of this NasServersCreate.  # noqa: E501
        :rtype: str
        """
        return self._default_unix_user

    @default_unix_user.setter
    def default_unix_user(self, default_unix_user):
        """Sets the default_unix_user of this NasServersCreate.

        Default Unix user name used for granting access in case of Windows to Unix user mapping failure. When empty, access in such case is denied.  # noqa: E501

        :param default_unix_user: The default_unix_user of this NasServersCreate.  # noqa: E501
        :type: str
        """

        self._default_unix_user = default_unix_user

    @property
    def default_windows_user(self):
        """Gets the default_windows_user of this NasServersCreate.  # noqa: E501

        Default Windows user name used for granting access in case of Unix to Windows user mapping failure. When empty, access in such case is denied.  # noqa: E501

        :return: The default_windows_user of this NasServersCreate.  # noqa: E501
        :rtype: str
        """
        return self._default_windows_user

    @default_windows_user.setter
    def default_windows_user(self, default_windows_user):
        """Sets the default_windows_user of this NasServersCreate.

        Default Windows user name used for granting access in case of Unix to Windows user mapping failure. When empty, access in such case is denied.  # noqa: E501

        :param default_windows_user: The default_windows_user of this NasServersCreate.  # noqa: E501
        :type: str
        """

        self._default_windows_user = default_windows_user

    @property
    def is_username_translation_enabled(self):
        """Gets the is_username_translation_enabled of this NasServersCreate.  # noqa: E501

        Enable the possibility to match a Windows account with an Unix account with different names.  # noqa: E501

        :return: The is_username_translation_enabled of this NasServersCreate.  # noqa: E501
        :rtype: bool
        """
        return self._is_username_translation_enabled

    @is_username_translation_enabled.setter
    def is_username_translation_enabled(self, is_username_translation_enabled):
        """Sets the is_username_translation_enabled of this NasServersCreate.

        Enable the possibility to match a Windows account with an Unix account with different names.  # noqa: E501

        :param is_username_translation_enabled: The is_username_translation_enabled of this NasServersCreate.  # noqa: E501
        :type: bool
        """

        self._is_username_translation_enabled = is_username_translation_enabled

    @property
    def is_auto_user_mapping_enabled(self):
        """Gets the is_auto_user_mapping_enabled of this NasServersCreate.  # noqa: E501

        A Windows user must have a corresponding matching Unix user (uid) in order to connect. This attribute enables you to automatically generates this Unix user (uid), if that Windows user does not have any in the configured Unix directory service (UDS). In a pure SMB or non multi-protocol environment, this should be set to true.   # noqa: E501

        :return: The is_auto_user_mapping_enabled of this NasServersCreate.  # noqa: E501
        :rtype: bool
        """
        return self._is_auto_user_mapping_enabled

    @is_auto_user_mapping_enabled.setter
    def is_auto_user_mapping_enabled(self, is_auto_user_mapping_enabled):
        """Sets the is_auto_user_mapping_enabled of this NasServersCreate.

        A Windows user must have a corresponding matching Unix user (uid) in order to connect. This attribute enables you to automatically generates this Unix user (uid), if that Windows user does not have any in the configured Unix directory service (UDS). In a pure SMB or non multi-protocol environment, this should be set to true.   # noqa: E501

        :param is_auto_user_mapping_enabled: The is_auto_user_mapping_enabled of this NasServersCreate.  # noqa: E501
        :type: bool
        """

        self._is_auto_user_mapping_enabled = is_auto_user_mapping_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NasServersCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NasServersCreate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
