# coding: utf-8

"""
    PowerFlex NAS Management REST API

    NAS Storage Management REST API definition.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FileSystemRestore(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'snapshot_id': 'str',
        'copy_name': 'str'
    }

    attribute_map = {
        'snapshot_id': 'snapshot_id',
        'copy_name': 'copy_name'
    }

    def __init__(self, snapshot_id=None, copy_name=None):  # noqa: E501
        """FileSystemRestore - a model defined in Swagger"""  # noqa: E501
        self._snapshot_id = None
        self._copy_name = None
        self.discriminator = None
        if snapshot_id is not None:
            self.snapshot_id = snapshot_id
        if copy_name is not None:
            self.copy_name = copy_name

    @property
    def snapshot_id(self):
        """Gets the snapshot_id of this FileSystemRestore.  # noqa: E501

         Snapshot Id  to restore from  # noqa: E501

        :return: The snapshot_id of this FileSystemRestore.  # noqa: E501
        :rtype: str
        """
        return self._snapshot_id

    @snapshot_id.setter
    def snapshot_id(self, snapshot_id):
        """Sets the snapshot_id of this FileSystemRestore.

         Snapshot Id  to restore from  # noqa: E501

        :param snapshot_id: The snapshot_id of this FileSystemRestore.  # noqa: E501
        :type: str
        """

        self._snapshot_id = snapshot_id

    @property
    def copy_name(self):
        """Gets the copy_name of this FileSystemRestore.  # noqa: E501

        Name of the backup snap to be created before the Restore operation occurs.  If no name is specified no backup copy will be made.  # noqa: E501

        :return: The copy_name of this FileSystemRestore.  # noqa: E501
        :rtype: str
        """
        return self._copy_name

    @copy_name.setter
    def copy_name(self, copy_name):
        """Sets the copy_name of this FileSystemRestore.

        Name of the backup snap to be created before the Restore operation occurs.  If no name is specified no backup copy will be made.  # noqa: E501

        :param copy_name: The copy_name of this FileSystemRestore.  # noqa: E501
        :type: str
        """

        self._copy_name = copy_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileSystemRestore, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileSystemRestore):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
