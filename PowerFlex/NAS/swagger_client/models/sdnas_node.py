# coding: utf-8

"""
    PowerFlex NAS Management REST API

    NAS Storage Management REST API definition.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SDNASNode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'volume_wwn': 'str',
        'platform_management_ip': 'str',
        'platform_id': 'str',
        'node_name': 'str'
    }

    attribute_map = {
        'volume_wwn': 'volume_wwn',
        'platform_management_ip': 'platform_management_ip',
        'platform_id': 'platform_id',
        'node_name': 'node_name'
    }

    def __init__(self, volume_wwn=None, platform_management_ip=None, platform_id=None, node_name=None):  # noqa: E501
        """SDNASNode - a model defined in Swagger"""  # noqa: E501
        self._volume_wwn = None
        self._platform_management_ip = None
        self._platform_id = None
        self._node_name = None
        self.discriminator = None
        self.volume_wwn = volume_wwn
        self.platform_management_ip = platform_management_ip
        self.platform_id = platform_id
        if node_name is not None:
            self.node_name = node_name

    @property
    def volume_wwn(self):
        """Gets the volume_wwn of this SDNASNode.  # noqa: E501

        wwn of Volume hosting System VDM.  # noqa: E501

        :return: The volume_wwn of this SDNASNode.  # noqa: E501
        :rtype: str
        """
        return self._volume_wwn

    @volume_wwn.setter
    def volume_wwn(self, volume_wwn):
        """Sets the volume_wwn of this SDNASNode.

        wwn of Volume hosting System VDM.  # noqa: E501

        :param volume_wwn: The volume_wwn of this SDNASNode.  # noqa: E501
        :type: str
        """
        if volume_wwn is None:
            raise ValueError("Invalid value for `volume_wwn`, must not be `None`")  # noqa: E501

        self._volume_wwn = volume_wwn

    @property
    def platform_management_ip(self):
        """Gets the platform_management_ip of this SDNASNode.  # noqa: E501

        Platform node management IP.  # noqa: E501

        :return: The platform_management_ip of this SDNASNode.  # noqa: E501
        :rtype: str
        """
        return self._platform_management_ip

    @platform_management_ip.setter
    def platform_management_ip(self, platform_management_ip):
        """Sets the platform_management_ip of this SDNASNode.

        Platform node management IP.  # noqa: E501

        :param platform_management_ip: The platform_management_ip of this SDNASNode.  # noqa: E501
        :type: str
        """
        if platform_management_ip is None:
            raise ValueError("Invalid value for `platform_management_ip`, must not be `None`")  # noqa: E501

        self._platform_management_ip = platform_management_ip

    @property
    def platform_id(self):
        """Gets the platform_id of this SDNASNode.  # noqa: E501

        Platform node ID where NAS node is hosted  # noqa: E501

        :return: The platform_id of this SDNASNode.  # noqa: E501
        :rtype: str
        """
        return self._platform_id

    @platform_id.setter
    def platform_id(self, platform_id):
        """Sets the platform_id of this SDNASNode.

        Platform node ID where NAS node is hosted  # noqa: E501

        :param platform_id: The platform_id of this SDNASNode.  # noqa: E501
        :type: str
        """
        if platform_id is None:
            raise ValueError("Invalid value for `platform_id`, must not be `None`")  # noqa: E501

        self._platform_id = platform_id

    @property
    def node_name(self):
        """Gets the node_name of this SDNASNode.  # noqa: E501

        Name of the NAS node.  # noqa: E501

        :return: The node_name of this SDNASNode.  # noqa: E501
        :rtype: str
        """
        return self._node_name

    @node_name.setter
    def node_name(self, node_name):
        """Sets the node_name of this SDNASNode.

        Name of the NAS node.  # noqa: E501

        :param node_name: The node_name of this SDNASNode.  # noqa: E501
        :type: str
        """

        self._node_name = node_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SDNASNode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SDNASNode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
