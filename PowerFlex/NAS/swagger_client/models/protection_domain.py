# coding: utf-8

"""
    PowerFlex NAS Management REST API

    NAS Storage Management REST API definition.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProtectionDomain(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'is_primary': 'bool',
        'storage_pool_id': 'str',
        'mgmt_interface': 'str',
        'data_interfaces': 'list[str]',
        'nas_nodes': 'list[SDNASNode]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'is_primary': 'is_primary',
        'storage_pool_id': 'storage_pool_id',
        'mgmt_interface': 'mgmt_interface',
        'data_interfaces': 'data_interfaces',
        'nas_nodes': 'nas_nodes'
    }

    def __init__(self, id=None, name=None, is_primary=False, storage_pool_id=None, mgmt_interface=None, data_interfaces=None, nas_nodes=None):  # noqa: E501
        """ProtectionDomain - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._is_primary = None
        self._storage_pool_id = None
        self._mgmt_interface = None
        self._data_interfaces = None
        self._nas_nodes = None
        self.discriminator = None
        self.id = id
        self.name = name
        if is_primary is not None:
            self.is_primary = is_primary
        self.storage_pool_id = storage_pool_id
        self.mgmt_interface = mgmt_interface
        self.data_interfaces = data_interfaces
        self.nas_nodes = nas_nodes

    @property
    def id(self):
        """Gets the id of this ProtectionDomain.  # noqa: E501

        Unique identifier of the NAS enabled Protection Domain.  # noqa: E501

        :return: The id of this ProtectionDomain.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProtectionDomain.

        Unique identifier of the NAS enabled Protection Domain.  # noqa: E501

        :param id: The id of this ProtectionDomain.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this ProtectionDomain.  # noqa: E501

        Name of NAS enabled Protection Domain.  # noqa: E501

        :return: The name of this ProtectionDomain.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProtectionDomain.

        Name of NAS enabled Protection Domain.  # noqa: E501

        :param name: The name of this ProtectionDomain.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def is_primary(self):
        """Gets the is_primary of this ProtectionDomain.  # noqa: E501

        Indicates if this Protection Domains hosts cluster and postgres VDM.Default false if not specified.  # noqa: E501

        :return: The is_primary of this ProtectionDomain.  # noqa: E501
        :rtype: bool
        """
        return self._is_primary

    @is_primary.setter
    def is_primary(self, is_primary):
        """Sets the is_primary of this ProtectionDomain.

        Indicates if this Protection Domains hosts cluster and postgres VDM.Default false if not specified.  # noqa: E501

        :param is_primary: The is_primary of this ProtectionDomain.  # noqa: E501
        :type: bool
        """

        self._is_primary = is_primary

    @property
    def storage_pool_id(self):
        """Gets the storage_pool_id of this ProtectionDomain.  # noqa: E501

        Storage Pool Id of NAS configuration volumes.  # noqa: E501

        :return: The storage_pool_id of this ProtectionDomain.  # noqa: E501
        :rtype: str
        """
        return self._storage_pool_id

    @storage_pool_id.setter
    def storage_pool_id(self, storage_pool_id):
        """Sets the storage_pool_id of this ProtectionDomain.

        Storage Pool Id of NAS configuration volumes.  # noqa: E501

        :param storage_pool_id: The storage_pool_id of this ProtectionDomain.  # noqa: E501
        :type: str
        """
        if storage_pool_id is None:
            raise ValueError("Invalid value for `storage_pool_id`, must not be `None`")  # noqa: E501

        self._storage_pool_id = storage_pool_id

    @property
    def mgmt_interface(self):
        """Gets the mgmt_interface of this ProtectionDomain.  # noqa: E501

        Networking interface available for management.  # noqa: E501

        :return: The mgmt_interface of this ProtectionDomain.  # noqa: E501
        :rtype: str
        """
        return self._mgmt_interface

    @mgmt_interface.setter
    def mgmt_interface(self, mgmt_interface):
        """Sets the mgmt_interface of this ProtectionDomain.

        Networking interface available for management.  # noqa: E501

        :param mgmt_interface: The mgmt_interface of this ProtectionDomain.  # noqa: E501
        :type: str
        """
        if mgmt_interface is None:
            raise ValueError("Invalid value for `mgmt_interface`, must not be `None`")  # noqa: E501

        self._mgmt_interface = mgmt_interface

    @property
    def data_interfaces(self):
        """Gets the data_interfaces of this ProtectionDomain.  # noqa: E501

        Networking interfaces available for data.  # noqa: E501

        :return: The data_interfaces of this ProtectionDomain.  # noqa: E501
        :rtype: list[str]
        """
        return self._data_interfaces

    @data_interfaces.setter
    def data_interfaces(self, data_interfaces):
        """Sets the data_interfaces of this ProtectionDomain.

        Networking interfaces available for data.  # noqa: E501

        :param data_interfaces: The data_interfaces of this ProtectionDomain.  # noqa: E501
        :type: list[str]
        """
        if data_interfaces is None:
            raise ValueError("Invalid value for `data_interfaces`, must not be `None`")  # noqa: E501

        self._data_interfaces = data_interfaces

    @property
    def nas_nodes(self):
        """Gets the nas_nodes of this ProtectionDomain.  # noqa: E501

        List of all NAS nodes belong to this cluster  # noqa: E501

        :return: The nas_nodes of this ProtectionDomain.  # noqa: E501
        :rtype: list[SDNASNode]
        """
        return self._nas_nodes

    @nas_nodes.setter
    def nas_nodes(self, nas_nodes):
        """Sets the nas_nodes of this ProtectionDomain.

        List of all NAS nodes belong to this cluster  # noqa: E501

        :param nas_nodes: The nas_nodes of this ProtectionDomain.  # noqa: E501
        :type: list[SDNASNode]
        """
        if nas_nodes is None:
            raise ValueError("Invalid value for `nas_nodes`, must not be `None`")  # noqa: E501

        self._nas_nodes = nas_nodes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProtectionDomain, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProtectionDomain):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
