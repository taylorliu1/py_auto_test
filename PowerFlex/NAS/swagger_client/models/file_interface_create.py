# coding: utf-8

"""
    PowerFlex NAS Management REST API

    NAS Storage Management REST API definition.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FileInterfaceCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nas_server_id': 'str',
        'ip_address': 'str',
        'prefix_length': 'int',
        'gateway': 'str',
        'vlan_id': 'int',
        'role': 'FileInterfaceRoleEnum',
        'is_disabled': 'bool'
    }

    attribute_map = {
        'nas_server_id': 'nas_server_id',
        'ip_address': 'ip_address',
        'prefix_length': 'prefix_length',
        'gateway': 'gateway',
        'vlan_id': 'vlan_id',
        'role': 'role',
        'is_disabled': 'is_disabled'
    }

    def __init__(self, nas_server_id=None, ip_address=None, prefix_length=None, gateway=None, vlan_id=0, role=None, is_disabled=False):  # noqa: E501
        """FileInterfaceCreate - a model defined in Swagger"""  # noqa: E501
        self._nas_server_id = None
        self._ip_address = None
        self._prefix_length = None
        self._gateway = None
        self._vlan_id = None
        self._role = None
        self._is_disabled = None
        self.discriminator = None
        self.nas_server_id = nas_server_id
        self.ip_address = ip_address
        self.prefix_length = prefix_length
        if gateway is not None:
            self.gateway = gateway
        if vlan_id is not None:
            self.vlan_id = vlan_id
        if role is not None:
            self.role = role
        if is_disabled is not None:
            self.is_disabled = is_disabled

    @property
    def nas_server_id(self):
        """Gets the nas_server_id of this FileInterfaceCreate.  # noqa: E501

        Unique identifier of the NAS server to which the network interface belongs, as defined by the nas_server resource type.  # noqa: E501

        :return: The nas_server_id of this FileInterfaceCreate.  # noqa: E501
        :rtype: str
        """
        return self._nas_server_id

    @nas_server_id.setter
    def nas_server_id(self, nas_server_id):
        """Sets the nas_server_id of this FileInterfaceCreate.

        Unique identifier of the NAS server to which the network interface belongs, as defined by the nas_server resource type.  # noqa: E501

        :param nas_server_id: The nas_server_id of this FileInterfaceCreate.  # noqa: E501
        :type: str
        """
        if nas_server_id is None:
            raise ValueError("Invalid value for `nas_server_id`, must not be `None`")  # noqa: E501

        self._nas_server_id = nas_server_id

    @property
    def ip_address(self):
        """Gets the ip_address of this FileInterfaceCreate.  # noqa: E501

        IP address of the network interface. IPv4 and IPv6 are supported.  # noqa: E501

        :return: The ip_address of this FileInterfaceCreate.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this FileInterfaceCreate.

        IP address of the network interface. IPv4 and IPv6 are supported.  # noqa: E501

        :param ip_address: The ip_address of this FileInterfaceCreate.  # noqa: E501
        :type: str
        """
        if ip_address is None:
            raise ValueError("Invalid value for `ip_address`, must not be `None`")  # noqa: E501

        self._ip_address = ip_address

    @property
    def prefix_length(self):
        """Gets the prefix_length of this FileInterfaceCreate.  # noqa: E501

        Prefix length for the interface. IPv4 and IPv6 are supported.  # noqa: E501

        :return: The prefix_length of this FileInterfaceCreate.  # noqa: E501
        :rtype: int
        """
        return self._prefix_length

    @prefix_length.setter
    def prefix_length(self, prefix_length):
        """Sets the prefix_length of this FileInterfaceCreate.

        Prefix length for the interface. IPv4 and IPv6 are supported.  # noqa: E501

        :param prefix_length: The prefix_length of this FileInterfaceCreate.  # noqa: E501
        :type: int
        """
        if prefix_length is None:
            raise ValueError("Invalid value for `prefix_length`, must not be `None`")  # noqa: E501

        self._prefix_length = prefix_length

    @property
    def gateway(self):
        """Gets the gateway of this FileInterfaceCreate.  # noqa: E501

        Gateway address for the network interface. IPv4 and IPv6 are supported.  # noqa: E501

        :return: The gateway of this FileInterfaceCreate.  # noqa: E501
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this FileInterfaceCreate.

        Gateway address for the network interface. IPv4 and IPv6 are supported.  # noqa: E501

        :param gateway: The gateway of this FileInterfaceCreate.  # noqa: E501
        :type: str
        """

        self._gateway = gateway

    @property
    def vlan_id(self):
        """Gets the vlan_id of this FileInterfaceCreate.  # noqa: E501

        Virtual Local Area Network (VLAN) identifier for the interface. The interface uses the identifier to accept packets that have matching VLAN tags.  # noqa: E501

        :return: The vlan_id of this FileInterfaceCreate.  # noqa: E501
        :rtype: int
        """
        return self._vlan_id

    @vlan_id.setter
    def vlan_id(self, vlan_id):
        """Sets the vlan_id of this FileInterfaceCreate.

        Virtual Local Area Network (VLAN) identifier for the interface. The interface uses the identifier to accept packets that have matching VLAN tags.  # noqa: E501

        :param vlan_id: The vlan_id of this FileInterfaceCreate.  # noqa: E501
        :type: int
        """

        self._vlan_id = vlan_id

    @property
    def role(self):
        """Gets the role of this FileInterfaceCreate.  # noqa: E501


        :return: The role of this FileInterfaceCreate.  # noqa: E501
        :rtype: FileInterfaceRoleEnum
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this FileInterfaceCreate.


        :param role: The role of this FileInterfaceCreate.  # noqa: E501
        :type: FileInterfaceRoleEnum
        """

        self._role = role

    @property
    def is_disabled(self):
        """Gets the is_disabled of this FileInterfaceCreate.  # noqa: E501

        Indicates whether the network interface is disabled.  # noqa: E501

        :return: The is_disabled of this FileInterfaceCreate.  # noqa: E501
        :rtype: bool
        """
        return self._is_disabled

    @is_disabled.setter
    def is_disabled(self, is_disabled):
        """Sets the is_disabled of this FileInterfaceCreate.

        Indicates whether the network interface is disabled.  # noqa: E501

        :param is_disabled: The is_disabled of this FileInterfaceCreate.  # noqa: E501
        :type: bool
        """

        self._is_disabled = is_disabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileInterfaceCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileInterfaceCreate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
