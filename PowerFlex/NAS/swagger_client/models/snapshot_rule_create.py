# coding: utf-8

"""
    PowerFlex NAS Management REST API

    NAS Storage Management REST API definition.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SnapshotRuleCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'interval': 'NasSnapshotRulesIntervalEnum',
        'time_of_day': 'str',
        'days_of_week': 'list[NasSnapshotRulesDaysOfWeekEnum]',
        'retention': 'int',
        'type': 'NasSnapshotRulesTypeEnum'
    }

    attribute_map = {
        'name': 'name',
        'interval': 'interval',
        'time_of_day': 'time_of_day',
        'days_of_week': 'days_of_week',
        'retention': 'retention',
        'type': 'type'
    }

    def __init__(self, name=None, interval=None, time_of_day=None, days_of_week=None, retention=1, type=None):  # noqa: E501
        """SnapshotRuleCreate - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._interval = None
        self._time_of_day = None
        self._days_of_week = None
        self._retention = None
        self._type = None
        self.discriminator = None
        self.name = name
        if interval is not None:
            self.interval = interval
        if time_of_day is not None:
            self.time_of_day = time_of_day
        if days_of_week is not None:
            self.days_of_week = days_of_week
        if retention is not None:
            self.retention = retention
        if type is not None:
            self.type = type

    @property
    def name(self):
        """Gets the name of this SnapshotRuleCreate.  # noqa: E501

        Snapshot rule name. Use only AlphaNumeric chars.  # noqa: E501

        :return: The name of this SnapshotRuleCreate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SnapshotRuleCreate.

        Snapshot rule name. Use only AlphaNumeric chars.  # noqa: E501

        :param name: The name of this SnapshotRuleCreate.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def interval(self):
        """Gets the interval of this SnapshotRuleCreate.  # noqa: E501


        :return: The interval of this SnapshotRuleCreate.  # noqa: E501
        :rtype: NasSnapshotRulesIntervalEnum
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this SnapshotRuleCreate.


        :param interval: The interval of this SnapshotRuleCreate.  # noqa: E501
        :type: NasSnapshotRulesIntervalEnum
        """

        self._interval = interval

    @property
    def time_of_day(self):
        """Gets the time_of_day of this SnapshotRuleCreate.  # noqa: E501

        Time of the day to take a snapshot, with format \"hh:mm\" in 24 hour time format. Either the interval parameter or the time_of_day parameter may be set, but not both. if time_of_day specified, days_of_week also need to be specified.  # noqa: E501

        :return: The time_of_day of this SnapshotRuleCreate.  # noqa: E501
        :rtype: str
        """
        return self._time_of_day

    @time_of_day.setter
    def time_of_day(self, time_of_day):
        """Sets the time_of_day of this SnapshotRuleCreate.

        Time of the day to take a snapshot, with format \"hh:mm\" in 24 hour time format. Either the interval parameter or the time_of_day parameter may be set, but not both. if time_of_day specified, days_of_week also need to be specified.  # noqa: E501

        :param time_of_day: The time_of_day of this SnapshotRuleCreate.  # noqa: E501
        :type: str
        """

        self._time_of_day = time_of_day

    @property
    def days_of_week(self):
        """Gets the days_of_week of this SnapshotRuleCreate.  # noqa: E501

        Days of the week on which the rule should be applied. Applies only for rules where the time_of_day parameter is set.  # noqa: E501

        :return: The days_of_week of this SnapshotRuleCreate.  # noqa: E501
        :rtype: list[NasSnapshotRulesDaysOfWeekEnum]
        """
        return self._days_of_week

    @days_of_week.setter
    def days_of_week(self, days_of_week):
        """Sets the days_of_week of this SnapshotRuleCreate.

        Days of the week on which the rule should be applied. Applies only for rules where the time_of_day parameter is set.  # noqa: E501

        :param days_of_week: The days_of_week of this SnapshotRuleCreate.  # noqa: E501
        :type: list[NasSnapshotRulesDaysOfWeekEnum]
        """

        self._days_of_week = days_of_week

    @property
    def retention(self):
        """Gets the retention of this SnapshotRuleCreate.  # noqa: E501

        Number of hours since creation of snapshot, must be retained in the system.  # noqa: E501

        :return: The retention of this SnapshotRuleCreate.  # noqa: E501
        :rtype: int
        """
        return self._retention

    @retention.setter
    def retention(self, retention):
        """Sets the retention of this SnapshotRuleCreate.

        Number of hours since creation of snapshot, must be retained in the system.  # noqa: E501

        :param retention: The retention of this SnapshotRuleCreate.  # noqa: E501
        :type: int
        """

        self._retention = retention

    @property
    def type(self):
        """Gets the type of this SnapshotRuleCreate.  # noqa: E501


        :return: The type of this SnapshotRuleCreate.  # noqa: E501
        :rtype: NasSnapshotRulesTypeEnum
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SnapshotRuleCreate.


        :param type: The type of this SnapshotRuleCreate.  # noqa: E501
        :type: NasSnapshotRulesTypeEnum
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SnapshotRuleCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SnapshotRuleCreate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
