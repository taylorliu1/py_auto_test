# coding: utf-8

"""
    PowerFlex NAS Management REST API

    NAS Storage Management REST API definition.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FileDnsModify(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'domain': 'str',
        'ip_addresses': 'list[str]',
        'add_ip_addresses': 'list[str]',
        'remove_ip_addresses': 'list[str]',
        'transport': 'FileDNSTransportEnum'
    }

    attribute_map = {
        'domain': 'domain',
        'ip_addresses': 'ip_addresses',
        'add_ip_addresses': 'add_ip_addresses',
        'remove_ip_addresses': 'remove_ip_addresses',
        'transport': 'transport'
    }

    def __init__(self, domain=None, ip_addresses=None, add_ip_addresses=None, remove_ip_addresses=None, transport=None):  # noqa: E501
        """FileDnsModify - a model defined in Swagger"""  # noqa: E501
        self._domain = None
        self._ip_addresses = None
        self._add_ip_addresses = None
        self._remove_ip_addresses = None
        self._transport = None
        self.discriminator = None
        if domain is not None:
            self.domain = domain
        if ip_addresses is not None:
            self.ip_addresses = ip_addresses
        if add_ip_addresses is not None:
            self.add_ip_addresses = add_ip_addresses
        if remove_ip_addresses is not None:
            self.remove_ip_addresses = remove_ip_addresses
        if transport is not None:
            self.transport = transport

    @property
    def domain(self):
        """Gets the domain of this FileDnsModify.  # noqa: E501

        Name of the DNS domain, where the NAS Server does host names lookup when an FQDN is not specified in the request.  # noqa: E501

        :return: The domain of this FileDnsModify.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this FileDnsModify.

        Name of the DNS domain, where the NAS Server does host names lookup when an FQDN is not specified in the request.  # noqa: E501

        :param domain: The domain of this FileDnsModify.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def ip_addresses(self):
        """Gets the ip_addresses of this FileDnsModify.  # noqa: E501

        A new list of DNS server IP addresses to replace the existing list. The addresses may be IPv4 or IPv6.  # noqa: E501

        :return: The ip_addresses of this FileDnsModify.  # noqa: E501
        :rtype: list[str]
        """
        return self._ip_addresses

    @ip_addresses.setter
    def ip_addresses(self, ip_addresses):
        """Sets the ip_addresses of this FileDnsModify.

        A new list of DNS server IP addresses to replace the existing list. The addresses may be IPv4 or IPv6.  # noqa: E501

        :param ip_addresses: The ip_addresses of this FileDnsModify.  # noqa: E501
        :type: list[str]
        """

        self._ip_addresses = ip_addresses

    @property
    def add_ip_addresses(self):
        """Gets the add_ip_addresses of this FileDnsModify.  # noqa: E501

        IP addresses to add to the current list. The addresses may be IPv4 or IPv6. Error occurs if an IP address already exists. Cannot be combined with ip_addresses.  # noqa: E501

        :return: The add_ip_addresses of this FileDnsModify.  # noqa: E501
        :rtype: list[str]
        """
        return self._add_ip_addresses

    @add_ip_addresses.setter
    def add_ip_addresses(self, add_ip_addresses):
        """Sets the add_ip_addresses of this FileDnsModify.

        IP addresses to add to the current list. The addresses may be IPv4 or IPv6. Error occurs if an IP address already exists. Cannot be combined with ip_addresses.  # noqa: E501

        :param add_ip_addresses: The add_ip_addresses of this FileDnsModify.  # noqa: E501
        :type: list[str]
        """

        self._add_ip_addresses = add_ip_addresses

    @property
    def remove_ip_addresses(self):
        """Gets the remove_ip_addresses of this FileDnsModify.  # noqa: E501

        IP addresses to remove from the current list. The addresses may be IPv4 or IPv6. Error occurs if IP address is not present. Cannot be combined with ip_addresses.  # noqa: E501

        :return: The remove_ip_addresses of this FileDnsModify.  # noqa: E501
        :rtype: list[str]
        """
        return self._remove_ip_addresses

    @remove_ip_addresses.setter
    def remove_ip_addresses(self, remove_ip_addresses):
        """Sets the remove_ip_addresses of this FileDnsModify.

        IP addresses to remove from the current list. The addresses may be IPv4 or IPv6. Error occurs if IP address is not present. Cannot be combined with ip_addresses.  # noqa: E501

        :param remove_ip_addresses: The remove_ip_addresses of this FileDnsModify.  # noqa: E501
        :type: list[str]
        """

        self._remove_ip_addresses = remove_ip_addresses

    @property
    def transport(self):
        """Gets the transport of this FileDnsModify.  # noqa: E501


        :return: The transport of this FileDnsModify.  # noqa: E501
        :rtype: FileDNSTransportEnum
        """
        return self._transport

    @transport.setter
    def transport(self, transport):
        """Sets the transport of this FileDnsModify.


        :param transport: The transport of this FileDnsModify.  # noqa: E501
        :type: FileDNSTransportEnum
        """

        self._transport = transport

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileDnsModify, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileDnsModify):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
