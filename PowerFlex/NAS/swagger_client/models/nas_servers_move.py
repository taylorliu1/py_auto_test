# coding: utf-8

"""
    PowerFlex NAS Management REST API

    NAS Storage Management REST API definition.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NasServersMove(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'primary_node': 'str',
        'backup_node': 'str'
    }

    attribute_map = {
        'primary_node': 'primary_node',
        'backup_node': 'backup_node'
    }

    def __init__(self, primary_node=None, backup_node=None):  # noqa: E501
        """NasServersMove - a model defined in Swagger"""  # noqa: E501
        self._primary_node = None
        self._backup_node = None
        self.discriminator = None
        if primary_node is not None:
            self.primary_node = primary_node
        if backup_node is not None:
            self.backup_node = backup_node

    @property
    def primary_node(self):
        """Gets the primary_node of this NasServersMove.  # noqa: E501

        New Primary node to where the Nas servers to be moved on.  # noqa: E501

        :return: The primary_node of this NasServersMove.  # noqa: E501
        :rtype: str
        """
        return self._primary_node

    @primary_node.setter
    def primary_node(self, primary_node):
        """Sets the primary_node of this NasServersMove.

        New Primary node to where the Nas servers to be moved on.  # noqa: E501

        :param primary_node: The primary_node of this NasServersMove.  # noqa: E501
        :type: str
        """

        self._primary_node = primary_node

    @property
    def backup_node(self):
        """Gets the backup_node of this NasServersMove.  # noqa: E501

        New backup node to be assigned to Nas Server.  # noqa: E501

        :return: The backup_node of this NasServersMove.  # noqa: E501
        :rtype: str
        """
        return self._backup_node

    @backup_node.setter
    def backup_node(self, backup_node):
        """Sets the backup_node of this NasServersMove.

        New backup node to be assigned to Nas Server.  # noqa: E501

        :param backup_node: The backup_node of this NasServersMove.  # noqa: E501
        :type: str
        """

        self._backup_node = backup_node

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NasServersMove, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NasServersMove):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
