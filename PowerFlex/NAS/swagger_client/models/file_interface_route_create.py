# coding: utf-8

"""
    PowerFlex NAS Management REST API

    NAS Storage Management REST API definition.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FileInterfaceRouteCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file_interface_id': 'str',
        'destination': 'str',
        'prefix_length': 'int',
        'gateway': 'str'
    }

    attribute_map = {
        'file_interface_id': 'file_interface_id',
        'destination': 'destination',
        'prefix_length': 'prefix_length',
        'gateway': 'gateway'
    }

    def __init__(self, file_interface_id=None, destination=None, prefix_length=None, gateway=None):  # noqa: E501
        """FileInterfaceRouteCreate - a model defined in Swagger"""  # noqa: E501
        self._file_interface_id = None
        self._destination = None
        self._prefix_length = None
        self._gateway = None
        self.discriminator = None
        self.file_interface_id = file_interface_id
        if destination is not None:
            self.destination = destination
        if prefix_length is not None:
            self.prefix_length = prefix_length
        if gateway is not None:
            self.gateway = gateway

    @property
    def file_interface_id(self):
        """Gets the file_interface_id of this FileInterfaceRouteCreate.  # noqa: E501

        Unique identifier of the associated file interface.  # noqa: E501

        :return: The file_interface_id of this FileInterfaceRouteCreate.  # noqa: E501
        :rtype: str
        """
        return self._file_interface_id

    @file_interface_id.setter
    def file_interface_id(self, file_interface_id):
        """Sets the file_interface_id of this FileInterfaceRouteCreate.

        Unique identifier of the associated file interface.  # noqa: E501

        :param file_interface_id: The file_interface_id of this FileInterfaceRouteCreate.  # noqa: E501
        :type: str
        """
        if file_interface_id is None:
            raise ValueError("Invalid value for `file_interface_id`, must not be `None`")  # noqa: E501

        self._file_interface_id = file_interface_id

    @property
    def destination(self):
        """Gets the destination of this FileInterfaceRouteCreate.  # noqa: E501

        IPv4 or IPv6 address of the target network node based on the specific route type. Values are: * For a default route, there is no value because the system will use the specified gateway IP address. * For a host route, the value is the host IP address. * For a subnet route, the value is a subnet IP address.   # noqa: E501

        :return: The destination of this FileInterfaceRouteCreate.  # noqa: E501
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this FileInterfaceRouteCreate.

        IPv4 or IPv6 address of the target network node based on the specific route type. Values are: * For a default route, there is no value because the system will use the specified gateway IP address. * For a host route, the value is the host IP address. * For a subnet route, the value is a subnet IP address.   # noqa: E501

        :param destination: The destination of this FileInterfaceRouteCreate.  # noqa: E501
        :type: str
        """

        self._destination = destination

    @property
    def prefix_length(self):
        """Gets the prefix_length of this FileInterfaceRouteCreate.  # noqa: E501

        IPv4 or IPv6 prefix length for the route.  # noqa: E501

        :return: The prefix_length of this FileInterfaceRouteCreate.  # noqa: E501
        :rtype: int
        """
        return self._prefix_length

    @prefix_length.setter
    def prefix_length(self, prefix_length):
        """Sets the prefix_length of this FileInterfaceRouteCreate.

        IPv4 or IPv6 prefix length for the route.  # noqa: E501

        :param prefix_length: The prefix_length of this FileInterfaceRouteCreate.  # noqa: E501
        :type: int
        """

        self._prefix_length = prefix_length

    @property
    def gateway(self):
        """Gets the gateway of this FileInterfaceRouteCreate.  # noqa: E501

        IP address of the gateway associated with the route.  # noqa: E501

        :return: The gateway of this FileInterfaceRouteCreate.  # noqa: E501
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this FileInterfaceRouteCreate.

        IP address of the gateway associated with the route.  # noqa: E501

        :param gateway: The gateway of this FileInterfaceRouteCreate.  # noqa: E501
        :type: str
        """

        self._gateway = gateway

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileInterfaceRouteCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileInterfaceRouteCreate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
