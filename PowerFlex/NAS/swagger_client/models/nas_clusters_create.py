# coding: utf-8

"""
    PowerFlex NAS Management REST API

    NAS Storage Management REST API definition.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NasClustersCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster_ip': 'str',
        'cluster_port': 'int',
        'cluster_name': 'str',
        'system_id': 'str',
        'is_deployment_type_software': 'bool',
        'nas_enabled_protection_domains': 'list[ProtectionDomain]'
    }

    attribute_map = {
        'cluster_ip': 'cluster_ip',
        'cluster_port': 'cluster_port',
        'cluster_name': 'cluster_name',
        'system_id': 'system_id',
        'is_deployment_type_software': 'is_deployment_type_software',
        'nas_enabled_protection_domains': 'nas_enabled_protection_domains'
    }

    def __init__(self, cluster_ip=None, cluster_port=3085, cluster_name=None, system_id=None, is_deployment_type_software=False, nas_enabled_protection_domains=None):  # noqa: E501
        """NasClustersCreate - a model defined in Swagger"""  # noqa: E501
        self._cluster_ip = None
        self._cluster_port = None
        self._cluster_name = None
        self._system_id = None
        self._is_deployment_type_software = None
        self._nas_enabled_protection_domains = None
        self.discriminator = None
        self.cluster_ip = cluster_ip
        if cluster_port is not None:
            self.cluster_port = cluster_port
        if cluster_name is not None:
            self.cluster_name = cluster_name
        self.system_id = system_id
        if is_deployment_type_software is not None:
            self.is_deployment_type_software = is_deployment_type_software
        self.nas_enabled_protection_domains = nas_enabled_protection_domains

    @property
    def cluster_ip(self):
        """Gets the cluster_ip of this NasClustersCreate.  # noqa: E501

        IP-address of SDNAS cluster.  # noqa: E501

        :return: The cluster_ip of this NasClustersCreate.  # noqa: E501
        :rtype: str
        """
        return self._cluster_ip

    @cluster_ip.setter
    def cluster_ip(self, cluster_ip):
        """Sets the cluster_ip of this NasClustersCreate.

        IP-address of SDNAS cluster.  # noqa: E501

        :param cluster_ip: The cluster_ip of this NasClustersCreate.  # noqa: E501
        :type: str
        """
        if cluster_ip is None:
            raise ValueError("Invalid value for `cluster_ip`, must not be `None`")  # noqa: E501

        self._cluster_ip = cluster_ip

    @property
    def cluster_port(self):
        """Gets the cluster_port of this NasClustersCreate.  # noqa: E501

        Port of the SDNAS cluster.Default 3085 if not specified.  # noqa: E501

        :return: The cluster_port of this NasClustersCreate.  # noqa: E501
        :rtype: int
        """
        return self._cluster_port

    @cluster_port.setter
    def cluster_port(self, cluster_port):
        """Sets the cluster_port of this NasClustersCreate.

        Port of the SDNAS cluster.Default 3085 if not specified.  # noqa: E501

        :param cluster_port: The cluster_port of this NasClustersCreate.  # noqa: E501
        :type: int
        """

        self._cluster_port = cluster_port

    @property
    def cluster_name(self):
        """Gets the cluster_name of this NasClustersCreate.  # noqa: E501

        Name of the cluster.  # noqa: E501

        :return: The cluster_name of this NasClustersCreate.  # noqa: E501
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this NasClustersCreate.

        Name of the cluster.  # noqa: E501

        :param cluster_name: The cluster_name of this NasClustersCreate.  # noqa: E501
        :type: str
        """

        self._cluster_name = cluster_name

    @property
    def system_id(self):
        """Gets the system_id of this NasClustersCreate.  # noqa: E501

        Id of the Powerflex system.  # noqa: E501

        :return: The system_id of this NasClustersCreate.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this NasClustersCreate.

        Id of the Powerflex system.  # noqa: E501

        :param system_id: The system_id of this NasClustersCreate.  # noqa: E501
        :type: str
        """
        if system_id is None:
            raise ValueError("Invalid value for `system_id`, must not be `None`")  # noqa: E501

        self._system_id = system_id

    @property
    def is_deployment_type_software(self):
        """Gets the is_deployment_type_software of this NasClustersCreate.  # noqa: E501

        Indicates if SDNAS deployment type is software only. Default false if not specified.  # noqa: E501

        :return: The is_deployment_type_software of this NasClustersCreate.  # noqa: E501
        :rtype: bool
        """
        return self._is_deployment_type_software

    @is_deployment_type_software.setter
    def is_deployment_type_software(self, is_deployment_type_software):
        """Sets the is_deployment_type_software of this NasClustersCreate.

        Indicates if SDNAS deployment type is software only. Default false if not specified.  # noqa: E501

        :param is_deployment_type_software: The is_deployment_type_software of this NasClustersCreate.  # noqa: E501
        :type: bool
        """

        self._is_deployment_type_software = is_deployment_type_software

    @property
    def nas_enabled_protection_domains(self):
        """Gets the nas_enabled_protection_domains of this NasClustersCreate.  # noqa: E501

        List of all NAS nodes belong to this cluster  # noqa: E501

        :return: The nas_enabled_protection_domains of this NasClustersCreate.  # noqa: E501
        :rtype: list[ProtectionDomain]
        """
        return self._nas_enabled_protection_domains

    @nas_enabled_protection_domains.setter
    def nas_enabled_protection_domains(self, nas_enabled_protection_domains):
        """Sets the nas_enabled_protection_domains of this NasClustersCreate.

        List of all NAS nodes belong to this cluster  # noqa: E501

        :param nas_enabled_protection_domains: The nas_enabled_protection_domains of this NasClustersCreate.  # noqa: E501
        :type: list[ProtectionDomain]
        """
        if nas_enabled_protection_domains is None:
            raise ValueError("Invalid value for `nas_enabled_protection_domains`, must not be `None`")  # noqa: E501

        self._nas_enabled_protection_domains = nas_enabled_protection_domains

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NasClustersCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NasClustersCreate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
