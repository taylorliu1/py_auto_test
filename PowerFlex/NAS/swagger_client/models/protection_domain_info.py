# coding: utf-8

"""
    PowerFlex NAS Management REST API

    NAS Storage Management REST API definition.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProtectionDomainInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'is_primary': 'bool',
        'nas_nodes': 'list[NASNode]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'is_primary': 'is_primary',
        'nas_nodes': 'nas_nodes'
    }

    def __init__(self, id=None, name=None, is_primary=None, nas_nodes=None):  # noqa: E501
        """ProtectionDomainInfo - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._is_primary = None
        self._nas_nodes = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if is_primary is not None:
            self.is_primary = is_primary
        if nas_nodes is not None:
            self.nas_nodes = nas_nodes

    @property
    def id(self):
        """Gets the id of this ProtectionDomainInfo.  # noqa: E501

        Unique identifier of the NAS Enabled Protection Domain.  # noqa: E501

        :return: The id of this ProtectionDomainInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProtectionDomainInfo.

        Unique identifier of the NAS Enabled Protection Domain.  # noqa: E501

        :param id: The id of this ProtectionDomainInfo.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ProtectionDomainInfo.  # noqa: E501

        Name of NAS Enabled Protection Domain  # noqa: E501

        :return: The name of this ProtectionDomainInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProtectionDomainInfo.

        Name of NAS Enabled Protection Domain  # noqa: E501

        :param name: The name of this ProtectionDomainInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def is_primary(self):
        """Gets the is_primary of this ProtectionDomainInfo.  # noqa: E501

        Is this primary NAS enabled Protection Domain containing Cluster and PostGress VDMs  # noqa: E501

        :return: The is_primary of this ProtectionDomainInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_primary

    @is_primary.setter
    def is_primary(self, is_primary):
        """Sets the is_primary of this ProtectionDomainInfo.

        Is this primary NAS enabled Protection Domain containing Cluster and PostGress VDMs  # noqa: E501

        :param is_primary: The is_primary of this ProtectionDomainInfo.  # noqa: E501
        :type: bool
        """

        self._is_primary = is_primary

    @property
    def nas_nodes(self):
        """Gets the nas_nodes of this ProtectionDomainInfo.  # noqa: E501

        The list of sdnas_nodes.  # noqa: E501

        :return: The nas_nodes of this ProtectionDomainInfo.  # noqa: E501
        :rtype: list[NASNode]
        """
        return self._nas_nodes

    @nas_nodes.setter
    def nas_nodes(self, nas_nodes):
        """Sets the nas_nodes of this ProtectionDomainInfo.

        The list of sdnas_nodes.  # noqa: E501

        :param nas_nodes: The nas_nodes of this ProtectionDomainInfo.  # noqa: E501
        :type: list[NASNode]
        """

        self._nas_nodes = nas_nodes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProtectionDomainInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProtectionDomainInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
