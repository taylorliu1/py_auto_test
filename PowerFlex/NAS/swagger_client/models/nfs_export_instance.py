# coding: utf-8

"""
    PowerFlex NAS Management REST API

    NAS Storage Management REST API definition.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NfsExportInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'file_system_id': 'str',
        'name': 'str',
        'path': 'str',
        'description': 'str',
        'default_access': 'NFSExportDefaultAccessEnum',
        'min_security': 'NFSExportMinSecurityEnum',
        'nfs_owner_username': 'str',
        'no_access_hosts': 'list[str]',
        'read_only_hosts': 'list[str]',
        'read_only_root_hosts': 'list[str]',
        'read_write_hosts': 'list[str]',
        'read_write_root_hosts': 'list[str]',
        'anonymous_uid': 'int',
        'anonymous_gid': 'int',
        'is_no_suid': 'bool',
        'default_access_l10n': 'str',
        'min_security_l10n': 'str',
        'file_system': 'FileSystemInstance'
    }

    attribute_map = {
        'id': 'id',
        'file_system_id': 'file_system_id',
        'name': 'name',
        'path': 'path',
        'description': 'description',
        'default_access': 'default_access',
        'min_security': 'min_security',
        'nfs_owner_username': 'nfs_owner_username',
        'no_access_hosts': 'no_access_hosts',
        'read_only_hosts': 'read_only_hosts',
        'read_only_root_hosts': 'read_only_root_hosts',
        'read_write_hosts': 'read_write_hosts',
        'read_write_root_hosts': 'read_write_root_hosts',
        'anonymous_uid': 'anonymous_UID',
        'anonymous_gid': 'anonymous_GID',
        'is_no_suid': 'is_no_SUID',
        'default_access_l10n': 'default_access_l10n',
        'min_security_l10n': 'min_security_l10n',
        'file_system': 'file_system'
    }

    def __init__(self, id=None, file_system_id=None, name=None, path=None, description=None, default_access=None, min_security=None, nfs_owner_username=None, no_access_hosts=None, read_only_hosts=None, read_only_root_hosts=None, read_write_hosts=None, read_write_root_hosts=None, anonymous_uid=-2, anonymous_gid=-2, is_no_suid=None, default_access_l10n=None, min_security_l10n=None, file_system=None):  # noqa: E501
        """NfsExportInstance - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._file_system_id = None
        self._name = None
        self._path = None
        self._description = None
        self._default_access = None
        self._min_security = None
        self._nfs_owner_username = None
        self._no_access_hosts = None
        self._read_only_hosts = None
        self._read_only_root_hosts = None
        self._read_write_hosts = None
        self._read_write_root_hosts = None
        self._anonymous_uid = None
        self._anonymous_gid = None
        self._is_no_suid = None
        self._default_access_l10n = None
        self._min_security_l10n = None
        self._file_system = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if file_system_id is not None:
            self.file_system_id = file_system_id
        if name is not None:
            self.name = name
        if path is not None:
            self.path = path
        if description is not None:
            self.description = description
        if default_access is not None:
            self.default_access = default_access
        if min_security is not None:
            self.min_security = min_security
        if nfs_owner_username is not None:
            self.nfs_owner_username = nfs_owner_username
        if no_access_hosts is not None:
            self.no_access_hosts = no_access_hosts
        if read_only_hosts is not None:
            self.read_only_hosts = read_only_hosts
        if read_only_root_hosts is not None:
            self.read_only_root_hosts = read_only_root_hosts
        if read_write_hosts is not None:
            self.read_write_hosts = read_write_hosts
        if read_write_root_hosts is not None:
            self.read_write_root_hosts = read_write_root_hosts
        if anonymous_uid is not None:
            self.anonymous_uid = anonymous_uid
        if anonymous_gid is not None:
            self.anonymous_gid = anonymous_gid
        if is_no_suid is not None:
            self.is_no_suid = is_no_suid
        if default_access_l10n is not None:
            self.default_access_l10n = default_access_l10n
        if min_security_l10n is not None:
            self.min_security_l10n = min_security_l10n
        if file_system is not None:
            self.file_system = file_system

    @property
    def id(self):
        """Gets the id of this NfsExportInstance.  # noqa: E501

        Unique id of the NFS Export.  # noqa: E501

        :return: The id of this NfsExportInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NfsExportInstance.

        Unique id of the NFS Export.  # noqa: E501

        :param id: The id of this NfsExportInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def file_system_id(self):
        """Gets the file_system_id of this NfsExportInstance.  # noqa: E501

        Unique identifier of the file system on which the NFS Export was created.  # noqa: E501

        :return: The file_system_id of this NfsExportInstance.  # noqa: E501
        :rtype: str
        """
        return self._file_system_id

    @file_system_id.setter
    def file_system_id(self, file_system_id):
        """Sets the file_system_id of this NfsExportInstance.

        Unique identifier of the file system on which the NFS Export was created.  # noqa: E501

        :param file_system_id: The file_system_id of this NfsExportInstance.  # noqa: E501
        :type: str
        """

        self._file_system_id = file_system_id

    @property
    def name(self):
        """Gets the name of this NfsExportInstance.  # noqa: E501

        NFS Export name.  This property supports case-insensitive filtering.  # noqa: E501

        :return: The name of this NfsExportInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NfsExportInstance.

        NFS Export name.  This property supports case-insensitive filtering.  # noqa: E501

        :param name: The name of this NfsExportInstance.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def path(self):
        """Gets the path of this NfsExportInstance.  # noqa: E501

        Local path to a location within the file system. With NFS, each export must have a unique local path. By default, the system exports the root of the file system (top-most directory) at the time the file system is created. This path specifies the unique location of the file system on the storage system. Before you can create additional exports within an NFS shared folder, you must create directories within it from a Linux/Unix host that is connected to the file system. After a directory has been created from a mounted host, you can create a corresponding export and set access permissions accordingly.   # noqa: E501

        :return: The path of this NfsExportInstance.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this NfsExportInstance.

        Local path to a location within the file system. With NFS, each export must have a unique local path. By default, the system exports the root of the file system (top-most directory) at the time the file system is created. This path specifies the unique location of the file system on the storage system. Before you can create additional exports within an NFS shared folder, you must create directories within it from a Linux/Unix host that is connected to the file system. After a directory has been created from a mounted host, you can create a corresponding export and set access permissions accordingly.   # noqa: E501

        :param path: The path of this NfsExportInstance.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def description(self):
        """Gets the description of this NfsExportInstance.  # noqa: E501

        NFS Export description.  # noqa: E501

        :return: The description of this NfsExportInstance.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NfsExportInstance.

        NFS Export description.  # noqa: E501

        :param description: The description of this NfsExportInstance.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def default_access(self):
        """Gets the default_access of this NfsExportInstance.  # noqa: E501


        :return: The default_access of this NfsExportInstance.  # noqa: E501
        :rtype: NFSExportDefaultAccessEnum
        """
        return self._default_access

    @default_access.setter
    def default_access(self, default_access):
        """Sets the default_access of this NfsExportInstance.


        :param default_access: The default_access of this NfsExportInstance.  # noqa: E501
        :type: NFSExportDefaultAccessEnum
        """

        self._default_access = default_access

    @property
    def min_security(self):
        """Gets the min_security of this NfsExportInstance.  # noqa: E501


        :return: The min_security of this NfsExportInstance.  # noqa: E501
        :rtype: NFSExportMinSecurityEnum
        """
        return self._min_security

    @min_security.setter
    def min_security(self, min_security):
        """Sets the min_security of this NfsExportInstance.


        :param min_security: The min_security of this NfsExportInstance.  # noqa: E501
        :type: NFSExportMinSecurityEnum
        """

        self._min_security = min_security

    @property
    def nfs_owner_username(self):
        """Gets the nfs_owner_username of this NfsExportInstance.  # noqa: E501

        (*Applies to NFS shares of VMware NFS storage resources.*) Default owner of the NFS Export associated with the datastore. Required if secure NFS enabled. For NFSv3 or NFSv4 without Kerberos, the default owner is root.  # noqa: E501

        :return: The nfs_owner_username of this NfsExportInstance.  # noqa: E501
        :rtype: str
        """
        return self._nfs_owner_username

    @nfs_owner_username.setter
    def nfs_owner_username(self, nfs_owner_username):
        """Sets the nfs_owner_username of this NfsExportInstance.

        (*Applies to NFS shares of VMware NFS storage resources.*) Default owner of the NFS Export associated with the datastore. Required if secure NFS enabled. For NFSv3 or NFSv4 without Kerberos, the default owner is root.  # noqa: E501

        :param nfs_owner_username: The nfs_owner_username of this NfsExportInstance.  # noqa: E501
        :type: str
        """

        self._nfs_owner_username = nfs_owner_username

    @property
    def no_access_hosts(self):
        """Gets the no_access_hosts of this NfsExportInstance.  # noqa: E501

        Hosts with no access to the NFS export or its snapshots. Hosts can be entered by Hostname, IP addresses (IPv4, IPv6, IPv4/PrefixLength, IPv6/PrefixLenght, or IPv4/subnetmask), or Netgroups prefixed with @.  # noqa: E501

        :return: The no_access_hosts of this NfsExportInstance.  # noqa: E501
        :rtype: list[str]
        """
        return self._no_access_hosts

    @no_access_hosts.setter
    def no_access_hosts(self, no_access_hosts):
        """Sets the no_access_hosts of this NfsExportInstance.

        Hosts with no access to the NFS export or its snapshots. Hosts can be entered by Hostname, IP addresses (IPv4, IPv6, IPv4/PrefixLength, IPv6/PrefixLenght, or IPv4/subnetmask), or Netgroups prefixed with @.  # noqa: E501

        :param no_access_hosts: The no_access_hosts of this NfsExportInstance.  # noqa: E501
        :type: list[str]
        """

        self._no_access_hosts = no_access_hosts

    @property
    def read_only_hosts(self):
        """Gets the read_only_hosts of this NfsExportInstance.  # noqa: E501

        Hosts with read-only access to the NFS export and its snapshots. Hosts can be entered by Hostname, IP addresses (IPv4, IPv6, IPv4/PrefixLength, IPv6/PrefixLenght, or IPv4/subnetmask), or Netgroups prefixed with @.  # noqa: E501

        :return: The read_only_hosts of this NfsExportInstance.  # noqa: E501
        :rtype: list[str]
        """
        return self._read_only_hosts

    @read_only_hosts.setter
    def read_only_hosts(self, read_only_hosts):
        """Sets the read_only_hosts of this NfsExportInstance.

        Hosts with read-only access to the NFS export and its snapshots. Hosts can be entered by Hostname, IP addresses (IPv4, IPv6, IPv4/PrefixLength, IPv6/PrefixLenght, or IPv4/subnetmask), or Netgroups prefixed with @.  # noqa: E501

        :param read_only_hosts: The read_only_hosts of this NfsExportInstance.  # noqa: E501
        :type: list[str]
        """

        self._read_only_hosts = read_only_hosts

    @property
    def read_only_root_hosts(self):
        """Gets the read_only_root_hosts of this NfsExportInstance.  # noqa: E501

        Hosts with read-only and ready-only for root user access to the NFS Export and its snapshots. Hosts can be entered by Hostname, IP addresses (IPv4, IPv6, IPv4/PrefixLength, IPv6/PrefixLenght, or IPv4/subnetmask), or Netgroups prefixed with @.  # noqa: E501

        :return: The read_only_root_hosts of this NfsExportInstance.  # noqa: E501
        :rtype: list[str]
        """
        return self._read_only_root_hosts

    @read_only_root_hosts.setter
    def read_only_root_hosts(self, read_only_root_hosts):
        """Sets the read_only_root_hosts of this NfsExportInstance.

        Hosts with read-only and ready-only for root user access to the NFS Export and its snapshots. Hosts can be entered by Hostname, IP addresses (IPv4, IPv6, IPv4/PrefixLength, IPv6/PrefixLenght, or IPv4/subnetmask), or Netgroups prefixed with @.  # noqa: E501

        :param read_only_root_hosts: The read_only_root_hosts of this NfsExportInstance.  # noqa: E501
        :type: list[str]
        """

        self._read_only_root_hosts = read_only_root_hosts

    @property
    def read_write_hosts(self):
        """Gets the read_write_hosts of this NfsExportInstance.  # noqa: E501

        Hosts with read and write access to the NFS export and its snapshots. Hosts can be entered by Hostname, IP addresses (IPv4, IPv6, IPv4/PrefixLength, IPv6/PrefixLenght, or IPv4/subnetmask), or Netgroups prefixed with @.  # noqa: E501

        :return: The read_write_hosts of this NfsExportInstance.  # noqa: E501
        :rtype: list[str]
        """
        return self._read_write_hosts

    @read_write_hosts.setter
    def read_write_hosts(self, read_write_hosts):
        """Sets the read_write_hosts of this NfsExportInstance.

        Hosts with read and write access to the NFS export and its snapshots. Hosts can be entered by Hostname, IP addresses (IPv4, IPv6, IPv4/PrefixLength, IPv6/PrefixLenght, or IPv4/subnetmask), or Netgroups prefixed with @.  # noqa: E501

        :param read_write_hosts: The read_write_hosts of this NfsExportInstance.  # noqa: E501
        :type: list[str]
        """

        self._read_write_hosts = read_write_hosts

    @property
    def read_write_root_hosts(self):
        """Gets the read_write_root_hosts of this NfsExportInstance.  # noqa: E501

        Hosts with read and write and read and write for root user access to the NFS Export and its snapshots. Hosts can be entered by Hostname, IP addresses (IPv4, IPv6, IPv4/PrefixLength, IPv6/PrefixLenght, or IPv4/subnetmask), or Netgroups prefixed with @.  # noqa: E501

        :return: The read_write_root_hosts of this NfsExportInstance.  # noqa: E501
        :rtype: list[str]
        """
        return self._read_write_root_hosts

    @read_write_root_hosts.setter
    def read_write_root_hosts(self, read_write_root_hosts):
        """Sets the read_write_root_hosts of this NfsExportInstance.

        Hosts with read and write and read and write for root user access to the NFS Export and its snapshots. Hosts can be entered by Hostname, IP addresses (IPv4, IPv6, IPv4/PrefixLength, IPv6/PrefixLenght, or IPv4/subnetmask), or Netgroups prefixed with @.  # noqa: E501

        :param read_write_root_hosts: The read_write_root_hosts of this NfsExportInstance.  # noqa: E501
        :type: list[str]
        """

        self._read_write_root_hosts = read_write_root_hosts

    @property
    def anonymous_uid(self):
        """Gets the anonymous_uid of this NfsExportInstance.  # noqa: E501

        Specifies the user ID of the anonymous account.  # noqa: E501

        :return: The anonymous_uid of this NfsExportInstance.  # noqa: E501
        :rtype: int
        """
        return self._anonymous_uid

    @anonymous_uid.setter
    def anonymous_uid(self, anonymous_uid):
        """Sets the anonymous_uid of this NfsExportInstance.

        Specifies the user ID of the anonymous account.  # noqa: E501

        :param anonymous_uid: The anonymous_uid of this NfsExportInstance.  # noqa: E501
        :type: int
        """

        self._anonymous_uid = anonymous_uid

    @property
    def anonymous_gid(self):
        """Gets the anonymous_gid of this NfsExportInstance.  # noqa: E501

        Specifies the group ID of the anonymous account.  # noqa: E501

        :return: The anonymous_gid of this NfsExportInstance.  # noqa: E501
        :rtype: int
        """
        return self._anonymous_gid

    @anonymous_gid.setter
    def anonymous_gid(self, anonymous_gid):
        """Sets the anonymous_gid of this NfsExportInstance.

        Specifies the group ID of the anonymous account.  # noqa: E501

        :param anonymous_gid: The anonymous_gid of this NfsExportInstance.  # noqa: E501
        :type: int
        """

        self._anonymous_gid = anonymous_gid

    @property
    def is_no_suid(self):
        """Gets the is_no_suid of this NfsExportInstance.  # noqa: E501

        If set, do not allow access to set SUID. Otherwise, allow access.  # noqa: E501

        :return: The is_no_suid of this NfsExportInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_no_suid

    @is_no_suid.setter
    def is_no_suid(self, is_no_suid):
        """Sets the is_no_suid of this NfsExportInstance.

        If set, do not allow access to set SUID. Otherwise, allow access.  # noqa: E501

        :param is_no_suid: The is_no_suid of this NfsExportInstance.  # noqa: E501
        :type: bool
        """

        self._is_no_suid = is_no_suid

    @property
    def default_access_l10n(self):
        """Gets the default_access_l10n of this NfsExportInstance.  # noqa: E501

        Localized message string corresponding to default_access  # noqa: E501

        :return: The default_access_l10n of this NfsExportInstance.  # noqa: E501
        :rtype: str
        """
        return self._default_access_l10n

    @default_access_l10n.setter
    def default_access_l10n(self, default_access_l10n):
        """Sets the default_access_l10n of this NfsExportInstance.

        Localized message string corresponding to default_access  # noqa: E501

        :param default_access_l10n: The default_access_l10n of this NfsExportInstance.  # noqa: E501
        :type: str
        """

        self._default_access_l10n = default_access_l10n

    @property
    def min_security_l10n(self):
        """Gets the min_security_l10n of this NfsExportInstance.  # noqa: E501

        Localized message string corresponding to min_security  # noqa: E501

        :return: The min_security_l10n of this NfsExportInstance.  # noqa: E501
        :rtype: str
        """
        return self._min_security_l10n

    @min_security_l10n.setter
    def min_security_l10n(self, min_security_l10n):
        """Sets the min_security_l10n of this NfsExportInstance.

        Localized message string corresponding to min_security  # noqa: E501

        :param min_security_l10n: The min_security_l10n of this NfsExportInstance.  # noqa: E501
        :type: str
        """

        self._min_security_l10n = min_security_l10n

    @property
    def file_system(self):
        """Gets the file_system of this NfsExportInstance.  # noqa: E501


        :return: The file_system of this NfsExportInstance.  # noqa: E501
        :rtype: FileSystemInstance
        """
        return self._file_system

    @file_system.setter
    def file_system(self, file_system):
        """Sets the file_system of this NfsExportInstance.


        :param file_system: The file_system of this NfsExportInstance.  # noqa: E501
        :type: FileSystemInstance
        """

        self._file_system = file_system

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NfsExportInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NfsExportInstance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
