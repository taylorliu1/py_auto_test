# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class MigrationRecommendationInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'created_timestamp': 'datetime',
        'state': 'MigrationRecommendationStateEnum',
        'estimated_cost': 'int',
        'type': 'MigrationRecommendationTypeEnum',
        'request_parameters': 'MigrationRecommendationCreate',
        'sessions_created_timestamp': 'datetime',
        'sessions_completed_timestamp': 'datetime',
        'rescan_host_list': 'list[str]',
        'migration_actions': 'list[MigrationRecommendationAction]',
        'state_l10n': 'str',
        'type_l10n': 'str'
    }

    attribute_map = {
        'id': 'id',
        'created_timestamp': 'created_timestamp',
        'state': 'state',
        'estimated_cost': 'estimated_cost',
        'type': 'type',
        'request_parameters': 'request_parameters',
        'sessions_created_timestamp': 'sessions_created_timestamp',
        'sessions_completed_timestamp': 'sessions_completed_timestamp',
        'rescan_host_list': 'rescan_host_list',
        'migration_actions': 'migration_actions',
        'state_l10n': 'state_l10n',
        'type_l10n': 'type_l10n'
    }

    def __init__(self, id=None, created_timestamp=None, state=None, estimated_cost=None, type=None, request_parameters=None, sessions_created_timestamp=None, sessions_completed_timestamp=None, rescan_host_list=None, migration_actions=None, state_l10n=None, type_l10n=None, _configuration=None):  # noqa: E501
        """MigrationRecommendationInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._created_timestamp = None
        self._state = None
        self._estimated_cost = None
        self._type = None
        self._request_parameters = None
        self._sessions_created_timestamp = None
        self._sessions_completed_timestamp = None
        self._rescan_host_list = None
        self._migration_actions = None
        self._state_l10n = None
        self._type_l10n = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if created_timestamp is not None:
            self.created_timestamp = created_timestamp
        if state is not None:
            self.state = state
        if estimated_cost is not None:
            self.estimated_cost = estimated_cost
        if type is not None:
            self.type = type
        if request_parameters is not None:
            self.request_parameters = request_parameters
        if sessions_created_timestamp is not None:
            self.sessions_created_timestamp = sessions_created_timestamp
        if sessions_completed_timestamp is not None:
            self.sessions_completed_timestamp = sessions_completed_timestamp
        if rescan_host_list is not None:
            self.rescan_host_list = rescan_host_list
        if migration_actions is not None:
            self.migration_actions = migration_actions
        if state_l10n is not None:
            self.state_l10n = state_l10n
        if type_l10n is not None:
            self.type_l10n = type_l10n

    @property
    def id(self):
        """Gets the id of this MigrationRecommendationInstance.  # noqa: E501

        Unique ID of recommendation.  # noqa: E501

        :return: The id of this MigrationRecommendationInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MigrationRecommendationInstance.

        Unique ID of recommendation.  # noqa: E501

        :param id: The id of this MigrationRecommendationInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def created_timestamp(self):
        """Gets the created_timestamp of this MigrationRecommendationInstance.  # noqa: E501

        Time at which recommendation was created.  # noqa: E501

        :return: The created_timestamp of this MigrationRecommendationInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._created_timestamp

    @created_timestamp.setter
    def created_timestamp(self, created_timestamp):
        """Sets the created_timestamp of this MigrationRecommendationInstance.

        Time at which recommendation was created.  # noqa: E501

        :param created_timestamp: The created_timestamp of this MigrationRecommendationInstance.  # noqa: E501
        :type: datetime
        """

        self._created_timestamp = created_timestamp

    @property
    def state(self):
        """Gets the state of this MigrationRecommendationInstance.  # noqa: E501


        :return: The state of this MigrationRecommendationInstance.  # noqa: E501
        :rtype: MigrationRecommendationStateEnum
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this MigrationRecommendationInstance.


        :param state: The state of this MigrationRecommendationInstance.  # noqa: E501
        :type: MigrationRecommendationStateEnum
        """

        self._state = state

    @property
    def estimated_cost(self):
        """Gets the estimated_cost of this MigrationRecommendationInstance.  # noqa: E501

        Unitless value describing estimated cost to migrate all volumes for this recommendation relative to other recommendations.  # noqa: E501

        :return: The estimated_cost of this MigrationRecommendationInstance.  # noqa: E501
        :rtype: int
        """
        return self._estimated_cost

    @estimated_cost.setter
    def estimated_cost(self, estimated_cost):
        """Sets the estimated_cost of this MigrationRecommendationInstance.

        Unitless value describing estimated cost to migrate all volumes for this recommendation relative to other recommendations.  # noqa: E501

        :param estimated_cost: The estimated_cost of this MigrationRecommendationInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                estimated_cost is not None and estimated_cost > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `estimated_cost`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                estimated_cost is not None and estimated_cost < 0):  # noqa: E501
            raise ValueError("Invalid value for `estimated_cost`, must be a value greater than or equal to `0`")  # noqa: E501

        self._estimated_cost = estimated_cost

    @property
    def type(self):
        """Gets the type of this MigrationRecommendationInstance.  # noqa: E501

        Type of request that generated a migration recommendation. Evacuate_Appliance - A recommendation to evacuate space by auto selecting storage objects from an appliance using specified size.   # noqa: E501

        :return: The type of this MigrationRecommendationInstance.  # noqa: E501
        :rtype: MigrationRecommendationTypeEnum
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MigrationRecommendationInstance.

        Type of request that generated a migration recommendation. Evacuate_Appliance - A recommendation to evacuate space by auto selecting storage objects from an appliance using specified size.   # noqa: E501

        :param type: The type of this MigrationRecommendationInstance.  # noqa: E501
        :type: MigrationRecommendationTypeEnum
        """

        self._type = type

    @property
    def request_parameters(self):
        """Gets the request_parameters of this MigrationRecommendationInstance.  # noqa: E501


        :return: The request_parameters of this MigrationRecommendationInstance.  # noqa: E501
        :rtype: MigrationRecommendationCreate
        """
        return self._request_parameters

    @request_parameters.setter
    def request_parameters(self, request_parameters):
        """Sets the request_parameters of this MigrationRecommendationInstance.


        :param request_parameters: The request_parameters of this MigrationRecommendationInstance.  # noqa: E501
        :type: MigrationRecommendationCreate
        """

        self._request_parameters = request_parameters

    @property
    def sessions_created_timestamp(self):
        """Gets the sessions_created_timestamp of this MigrationRecommendationInstance.  # noqa: E501

        Time at which migration sessions were created for the recommendation.  Null if migration sessions have not been created.  # noqa: E501

        :return: The sessions_created_timestamp of this MigrationRecommendationInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._sessions_created_timestamp

    @sessions_created_timestamp.setter
    def sessions_created_timestamp(self, sessions_created_timestamp):
        """Sets the sessions_created_timestamp of this MigrationRecommendationInstance.

        Time at which migration sessions were created for the recommendation.  Null if migration sessions have not been created.  # noqa: E501

        :param sessions_created_timestamp: The sessions_created_timestamp of this MigrationRecommendationInstance.  # noqa: E501
        :type: datetime
        """

        self._sessions_created_timestamp = sessions_created_timestamp

    @property
    def sessions_completed_timestamp(self):
        """Gets the sessions_completed_timestamp of this MigrationRecommendationInstance.  # noqa: E501

        Time at which all migration sessions for the recommendation were complete. Null if migration sessions have not been created/started or if any migration pursuant to the recommendation is still ongoing.   # noqa: E501

        :return: The sessions_completed_timestamp of this MigrationRecommendationInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._sessions_completed_timestamp

    @sessions_completed_timestamp.setter
    def sessions_completed_timestamp(self, sessions_completed_timestamp):
        """Sets the sessions_completed_timestamp of this MigrationRecommendationInstance.

        Time at which all migration sessions for the recommendation were complete. Null if migration sessions have not been created/started or if any migration pursuant to the recommendation is still ongoing.   # noqa: E501

        :param sessions_completed_timestamp: The sessions_completed_timestamp of this MigrationRecommendationInstance.  # noqa: E501
        :type: datetime
        """

        self._sessions_completed_timestamp = sessions_completed_timestamp

    @property
    def rescan_host_list(self):
        """Gets the rescan_host_list of this MigrationRecommendationInstance.  # noqa: E501

        IDs of hosts that must be rescanned after migration sessions are created but before migration sessions are started.  # noqa: E501

        :return: The rescan_host_list of this MigrationRecommendationInstance.  # noqa: E501
        :rtype: list[str]
        """
        return self._rescan_host_list

    @rescan_host_list.setter
    def rescan_host_list(self, rescan_host_list):
        """Sets the rescan_host_list of this MigrationRecommendationInstance.

        IDs of hosts that must be rescanned after migration sessions are created but before migration sessions are started.  # noqa: E501

        :param rescan_host_list: The rescan_host_list of this MigrationRecommendationInstance.  # noqa: E501
        :type: list[str]
        """

        self._rescan_host_list = rescan_host_list

    @property
    def migration_actions(self):
        """Gets the migration_actions of this MigrationRecommendationInstance.  # noqa: E501

        Filtering on the fields of this embedded resource is not supported.  # noqa: E501

        :return: The migration_actions of this MigrationRecommendationInstance.  # noqa: E501
        :rtype: list[MigrationRecommendationAction]
        """
        return self._migration_actions

    @migration_actions.setter
    def migration_actions(self, migration_actions):
        """Sets the migration_actions of this MigrationRecommendationInstance.

        Filtering on the fields of this embedded resource is not supported.  # noqa: E501

        :param migration_actions: The migration_actions of this MigrationRecommendationInstance.  # noqa: E501
        :type: list[MigrationRecommendationAction]
        """

        self._migration_actions = migration_actions

    @property
    def state_l10n(self):
        """Gets the state_l10n of this MigrationRecommendationInstance.  # noqa: E501

        Localized message string corresponding to state  # noqa: E501

        :return: The state_l10n of this MigrationRecommendationInstance.  # noqa: E501
        :rtype: str
        """
        return self._state_l10n

    @state_l10n.setter
    def state_l10n(self, state_l10n):
        """Sets the state_l10n of this MigrationRecommendationInstance.

        Localized message string corresponding to state  # noqa: E501

        :param state_l10n: The state_l10n of this MigrationRecommendationInstance.  # noqa: E501
        :type: str
        """

        self._state_l10n = state_l10n

    @property
    def type_l10n(self):
        """Gets the type_l10n of this MigrationRecommendationInstance.  # noqa: E501

        Localized message string corresponding to type  # noqa: E501

        :return: The type_l10n of this MigrationRecommendationInstance.  # noqa: E501
        :rtype: str
        """
        return self._type_l10n

    @type_l10n.setter
    def type_l10n(self, type_l10n):
        """Sets the type_l10n of this MigrationRecommendationInstance.

        Localized message string corresponding to type  # noqa: E501

        :param type_l10n: The type_l10n of this MigrationRecommendationInstance.  # noqa: E501
        :type: str
        """

        self._type_l10n = type_l10n

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MigrationRecommendationInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MigrationRecommendationInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MigrationRecommendationInstance):
            return True

        return self.to_dict() != other.to_dict()
