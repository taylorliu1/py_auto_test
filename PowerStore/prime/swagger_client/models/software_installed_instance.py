# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class SoftwareInstalledInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'is_cluster': 'bool',
        'release_version': 'str',
        'build_version': 'str',
        'release_timestamp': 'datetime',
        'installed_date': 'datetime',
        'build_flavor': 'SoftwareInstalledBuildFlavorEnum',
        'build_type': 'SoftwareInstalledBuildTypeEnum',
        'build_id': 'str',
        'build_flavor_l10n': 'str',
        'build_type_l10n': 'str',
        'appliance': 'ApplianceInstance'
    }

    attribute_map = {
        'id': 'id',
        'is_cluster': 'is_cluster',
        'release_version': 'release_version',
        'build_version': 'build_version',
        'release_timestamp': 'release_timestamp',
        'installed_date': 'installed_date',
        'build_flavor': 'build_flavor',
        'build_type': 'build_type',
        'build_id': 'build_id',
        'build_flavor_l10n': 'build_flavor_l10n',
        'build_type_l10n': 'build_type_l10n',
        'appliance': 'appliance'
    }

    def __init__(self, id=None, is_cluster=None, release_version=None, build_version=None, release_timestamp=None, installed_date=None, build_flavor=None, build_type=None, build_id=None, build_flavor_l10n=None, build_type_l10n=None, appliance=None, _configuration=None):  # noqa: E501
        """SoftwareInstalledInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._is_cluster = None
        self._release_version = None
        self._build_version = None
        self._release_timestamp = None
        self._installed_date = None
        self._build_flavor = None
        self._build_type = None
        self._build_id = None
        self._build_flavor_l10n = None
        self._build_type_l10n = None
        self._appliance = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if is_cluster is not None:
            self.is_cluster = is_cluster
        if release_version is not None:
            self.release_version = release_version
        if build_version is not None:
            self.build_version = build_version
        if release_timestamp is not None:
            self.release_timestamp = release_timestamp
        if installed_date is not None:
            self.installed_date = installed_date
        if build_flavor is not None:
            self.build_flavor = build_flavor
        if build_type is not None:
            self.build_type = build_type
        if build_id is not None:
            self.build_id = build_id
        if build_flavor_l10n is not None:
            self.build_flavor_l10n = build_flavor_l10n
        if build_type_l10n is not None:
            self.build_type_l10n = build_type_l10n
        if appliance is not None:
            self.appliance = appliance

    @property
    def id(self):
        """Gets the id of this SoftwareInstalledInstance.  # noqa: E501

        Unique identifier of the installed software instance.  # noqa: E501

        :return: The id of this SoftwareInstalledInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SoftwareInstalledInstance.

        Unique identifier of the installed software instance.  # noqa: E501

        :param id: The id of this SoftwareInstalledInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_cluster(self):
        """Gets the is_cluster of this SoftwareInstalledInstance.  # noqa: E501

        Whether this information represents the common software release version that is supported on all appliances in the cluster. The value is true for the instance representing the cluster. The value is false for appliance software instances.  # noqa: E501

        :return: The is_cluster of this SoftwareInstalledInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_cluster

    @is_cluster.setter
    def is_cluster(self, is_cluster):
        """Sets the is_cluster of this SoftwareInstalledInstance.

        Whether this information represents the common software release version that is supported on all appliances in the cluster. The value is true for the instance representing the cluster. The value is false for appliance software instances.  # noqa: E501

        :param is_cluster: The is_cluster of this SoftwareInstalledInstance.  # noqa: E501
        :type: bool
        """

        self._is_cluster = is_cluster

    @property
    def release_version(self):
        """Gets the release_version of this SoftwareInstalledInstance.  # noqa: E501

        Version of the installed release software package release.  # noqa: E501

        :return: The release_version of this SoftwareInstalledInstance.  # noqa: E501
        :rtype: str
        """
        return self._release_version

    @release_version.setter
    def release_version(self, release_version):
        """Sets the release_version of this SoftwareInstalledInstance.

        Version of the installed release software package release.  # noqa: E501

        :param release_version: The release_version of this SoftwareInstalledInstance.  # noqa: E501
        :type: str
        """

        self._release_version = release_version

    @property
    def build_version(self):
        """Gets the build_version of this SoftwareInstalledInstance.  # noqa: E501

        Build version of the installed software package release. Was added in version 2.0.0.0.  # noqa: E501

        :return: The build_version of this SoftwareInstalledInstance.  # noqa: E501
        :rtype: str
        """
        return self._build_version

    @build_version.setter
    def build_version(self, build_version):
        """Sets the build_version of this SoftwareInstalledInstance.

        Build version of the installed software package release. Was added in version 2.0.0.0.  # noqa: E501

        :param build_version: The build_version of this SoftwareInstalledInstance.  # noqa: E501
        :type: str
        """

        self._build_version = build_version

    @property
    def release_timestamp(self):
        """Gets the release_timestamp of this SoftwareInstalledInstance.  # noqa: E501

        Date and time when this software package was produced.  # noqa: E501

        :return: The release_timestamp of this SoftwareInstalledInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._release_timestamp

    @release_timestamp.setter
    def release_timestamp(self, release_timestamp):
        """Sets the release_timestamp of this SoftwareInstalledInstance.

        Date and time when this software package was produced.  # noqa: E501

        :param release_timestamp: The release_timestamp of this SoftwareInstalledInstance.  # noqa: E501
        :type: datetime
        """

        self._release_timestamp = release_timestamp

    @property
    def installed_date(self):
        """Gets the installed_date of this SoftwareInstalledInstance.  # noqa: E501

        Date and time when the software was successfully installed and committed on the cluster. If the software package has not been commited, this value is null.  # noqa: E501

        :return: The installed_date of this SoftwareInstalledInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._installed_date

    @installed_date.setter
    def installed_date(self, installed_date):
        """Sets the installed_date of this SoftwareInstalledInstance.

        Date and time when the software was successfully installed and committed on the cluster. If the software package has not been commited, this value is null.  # noqa: E501

        :param installed_date: The installed_date of this SoftwareInstalledInstance.  # noqa: E501
        :type: datetime
        """

        self._installed_date = installed_date

    @property
    def build_flavor(self):
        """Gets the build_flavor of this SoftwareInstalledInstance.  # noqa: E501

         Was added in version 2.0.0.0.  # noqa: E501

        :return: The build_flavor of this SoftwareInstalledInstance.  # noqa: E501
        :rtype: SoftwareInstalledBuildFlavorEnum
        """
        return self._build_flavor

    @build_flavor.setter
    def build_flavor(self, build_flavor):
        """Sets the build_flavor of this SoftwareInstalledInstance.

         Was added in version 2.0.0.0.  # noqa: E501

        :param build_flavor: The build_flavor of this SoftwareInstalledInstance.  # noqa: E501
        :type: SoftwareInstalledBuildFlavorEnum
        """

        self._build_flavor = build_flavor

    @property
    def build_type(self):
        """Gets the build_type of this SoftwareInstalledInstance.  # noqa: E501

         Was added in version 2.0.0.0.  # noqa: E501

        :return: The build_type of this SoftwareInstalledInstance.  # noqa: E501
        :rtype: SoftwareInstalledBuildTypeEnum
        """
        return self._build_type

    @build_type.setter
    def build_type(self, build_type):
        """Sets the build_type of this SoftwareInstalledInstance.

         Was added in version 2.0.0.0.  # noqa: E501

        :param build_type: The build_type of this SoftwareInstalledInstance.  # noqa: E501
        :type: SoftwareInstalledBuildTypeEnum
        """

        self._build_type = build_type

    @property
    def build_id(self):
        """Gets the build_id of this SoftwareInstalledInstance.  # noqa: E501

        Unique identifier of this build. Was added in version 2.0.0.0.  # noqa: E501

        :return: The build_id of this SoftwareInstalledInstance.  # noqa: E501
        :rtype: str
        """
        return self._build_id

    @build_id.setter
    def build_id(self, build_id):
        """Sets the build_id of this SoftwareInstalledInstance.

        Unique identifier of this build. Was added in version 2.0.0.0.  # noqa: E501

        :param build_id: The build_id of this SoftwareInstalledInstance.  # noqa: E501
        :type: str
        """

        self._build_id = build_id

    @property
    def build_flavor_l10n(self):
        """Gets the build_flavor_l10n of this SoftwareInstalledInstance.  # noqa: E501

        Localized message string corresponding to build_flavor Was added in version 2.0.0.0.  # noqa: E501

        :return: The build_flavor_l10n of this SoftwareInstalledInstance.  # noqa: E501
        :rtype: str
        """
        return self._build_flavor_l10n

    @build_flavor_l10n.setter
    def build_flavor_l10n(self, build_flavor_l10n):
        """Sets the build_flavor_l10n of this SoftwareInstalledInstance.

        Localized message string corresponding to build_flavor Was added in version 2.0.0.0.  # noqa: E501

        :param build_flavor_l10n: The build_flavor_l10n of this SoftwareInstalledInstance.  # noqa: E501
        :type: str
        """

        self._build_flavor_l10n = build_flavor_l10n

    @property
    def build_type_l10n(self):
        """Gets the build_type_l10n of this SoftwareInstalledInstance.  # noqa: E501

        Localized message string corresponding to build_type Was added in version 2.0.0.0.  # noqa: E501

        :return: The build_type_l10n of this SoftwareInstalledInstance.  # noqa: E501
        :rtype: str
        """
        return self._build_type_l10n

    @build_type_l10n.setter
    def build_type_l10n(self, build_type_l10n):
        """Sets the build_type_l10n of this SoftwareInstalledInstance.

        Localized message string corresponding to build_type Was added in version 2.0.0.0.  # noqa: E501

        :param build_type_l10n: The build_type_l10n of this SoftwareInstalledInstance.  # noqa: E501
        :type: str
        """

        self._build_type_l10n = build_type_l10n

    @property
    def appliance(self):
        """Gets the appliance of this SoftwareInstalledInstance.  # noqa: E501

        This is the embeddable reference form of appliance_id attribute.  # noqa: E501

        :return: The appliance of this SoftwareInstalledInstance.  # noqa: E501
        :rtype: ApplianceInstance
        """
        return self._appliance

    @appliance.setter
    def appliance(self, appliance):
        """Sets the appliance of this SoftwareInstalledInstance.

        This is the embeddable reference form of appliance_id attribute.  # noqa: E501

        :param appliance: The appliance of this SoftwareInstalledInstance.  # noqa: E501
        :type: ApplianceInstance
        """

        self._appliance = appliance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SoftwareInstalledInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SoftwareInstalledInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SoftwareInstalledInstance):
            return True

        return self.to_dict() != other.to_dict()
