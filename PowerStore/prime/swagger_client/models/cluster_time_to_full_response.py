# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class ClusterTimeToFullResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster_id': 'str',
        'end_of_forecast': 'datetime',
        'time_to_full': 'datetime',
        'time_to_full_pessimistic': 'datetime',
        'time_to_full_optimistic': 'datetime',
        'time_to_full_status': 'ForecastTimeToFullStatusEnum',
        'time_to_full_status_l10n': 'str'
    }

    attribute_map = {
        'cluster_id': 'cluster_id',
        'end_of_forecast': 'end_of_forecast',
        'time_to_full': 'time_to_full',
        'time_to_full_pessimistic': 'time_to_full_pessimistic',
        'time_to_full_optimistic': 'time_to_full_optimistic',
        'time_to_full_status': 'time_to_full_status',
        'time_to_full_status_l10n': 'time_to_full_status_l10n'
    }

    def __init__(self, cluster_id=None, end_of_forecast=None, time_to_full=None, time_to_full_pessimistic=None, time_to_full_optimistic=None, time_to_full_status=None, time_to_full_status_l10n=None, _configuration=None):  # noqa: E501
        """ClusterTimeToFullResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._cluster_id = None
        self._end_of_forecast = None
        self._time_to_full = None
        self._time_to_full_pessimistic = None
        self._time_to_full_optimistic = None
        self._time_to_full_status = None
        self._time_to_full_status_l10n = None
        self.discriminator = None

        if cluster_id is not None:
            self.cluster_id = cluster_id
        if end_of_forecast is not None:
            self.end_of_forecast = end_of_forecast
        if time_to_full is not None:
            self.time_to_full = time_to_full
        if time_to_full_pessimistic is not None:
            self.time_to_full_pessimistic = time_to_full_pessimistic
        if time_to_full_optimistic is not None:
            self.time_to_full_optimistic = time_to_full_optimistic
        if time_to_full_status is not None:
            self.time_to_full_status = time_to_full_status
        if time_to_full_status_l10n is not None:
            self.time_to_full_status_l10n = time_to_full_status_l10n

    @property
    def cluster_id(self):
        """Gets the cluster_id of this ClusterTimeToFullResponse.  # noqa: E501

        Unique ID of the cluster.  # noqa: E501

        :return: The cluster_id of this ClusterTimeToFullResponse.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this ClusterTimeToFullResponse.

        Unique ID of the cluster.  # noqa: E501

        :param cluster_id: The cluster_id of this ClusterTimeToFullResponse.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def end_of_forecast(self):
        """Gets the end_of_forecast of this ClusterTimeToFullResponse.  # noqa: E501

        Timestamp of the end of the capacity forecast. If time to full estimates are null, the relevant forecast does not reach full capacity before it ends.  In this case the end of the forecast can be used as a minimum for time to full.   # noqa: E501

        :return: The end_of_forecast of this ClusterTimeToFullResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._end_of_forecast

    @end_of_forecast.setter
    def end_of_forecast(self, end_of_forecast):
        """Sets the end_of_forecast of this ClusterTimeToFullResponse.

        Timestamp of the end of the capacity forecast. If time to full estimates are null, the relevant forecast does not reach full capacity before it ends.  In this case the end of the forecast can be used as a minimum for time to full.   # noqa: E501

        :param end_of_forecast: The end_of_forecast of this ClusterTimeToFullResponse.  # noqa: E501
        :type: datetime
        """

        self._end_of_forecast = end_of_forecast

    @property
    def time_to_full(self):
        """Gets the time_to_full of this ClusterTimeToFullResponse.  # noqa: E501

        Estimated date-time at which the forecast value will reach full capacity.  # noqa: E501

        :return: The time_to_full of this ClusterTimeToFullResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._time_to_full

    @time_to_full.setter
    def time_to_full(self, time_to_full):
        """Sets the time_to_full of this ClusterTimeToFullResponse.

        Estimated date-time at which the forecast value will reach full capacity.  # noqa: E501

        :param time_to_full: The time_to_full of this ClusterTimeToFullResponse.  # noqa: E501
        :type: datetime
        """

        self._time_to_full = time_to_full

    @property
    def time_to_full_pessimistic(self):
        """Gets the time_to_full_pessimistic of this ClusterTimeToFullResponse.  # noqa: E501

        Pessimistic date-time for time to full based on the upper bound of the forecast 95% confidence interval.  # noqa: E501

        :return: The time_to_full_pessimistic of this ClusterTimeToFullResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._time_to_full_pessimistic

    @time_to_full_pessimistic.setter
    def time_to_full_pessimistic(self, time_to_full_pessimistic):
        """Sets the time_to_full_pessimistic of this ClusterTimeToFullResponse.

        Pessimistic date-time for time to full based on the upper bound of the forecast 95% confidence interval.  # noqa: E501

        :param time_to_full_pessimistic: The time_to_full_pessimistic of this ClusterTimeToFullResponse.  # noqa: E501
        :type: datetime
        """

        self._time_to_full_pessimistic = time_to_full_pessimistic

    @property
    def time_to_full_optimistic(self):
        """Gets the time_to_full_optimistic of this ClusterTimeToFullResponse.  # noqa: E501

        Optimistic date-time for time to full based on the lower bound of the forecast 95% confidence interval.  # noqa: E501

        :return: The time_to_full_optimistic of this ClusterTimeToFullResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._time_to_full_optimistic

    @time_to_full_optimistic.setter
    def time_to_full_optimistic(self, time_to_full_optimistic):
        """Sets the time_to_full_optimistic of this ClusterTimeToFullResponse.

        Optimistic date-time for time to full based on the lower bound of the forecast 95% confidence interval.  # noqa: E501

        :param time_to_full_optimistic: The time_to_full_optimistic of this ClusterTimeToFullResponse.  # noqa: E501
        :type: datetime
        """

        self._time_to_full_optimistic = time_to_full_optimistic

    @property
    def time_to_full_status(self):
        """Gets the time_to_full_status of this ClusterTimeToFullResponse.  # noqa: E501


        :return: The time_to_full_status of this ClusterTimeToFullResponse.  # noqa: E501
        :rtype: ForecastTimeToFullStatusEnum
        """
        return self._time_to_full_status

    @time_to_full_status.setter
    def time_to_full_status(self, time_to_full_status):
        """Sets the time_to_full_status of this ClusterTimeToFullResponse.


        :param time_to_full_status: The time_to_full_status of this ClusterTimeToFullResponse.  # noqa: E501
        :type: ForecastTimeToFullStatusEnum
        """

        self._time_to_full_status = time_to_full_status

    @property
    def time_to_full_status_l10n(self):
        """Gets the time_to_full_status_l10n of this ClusterTimeToFullResponse.  # noqa: E501

        Localized message string corresponding to time_to_full_status  # noqa: E501

        :return: The time_to_full_status_l10n of this ClusterTimeToFullResponse.  # noqa: E501
        :rtype: str
        """
        return self._time_to_full_status_l10n

    @time_to_full_status_l10n.setter
    def time_to_full_status_l10n(self, time_to_full_status_l10n):
        """Sets the time_to_full_status_l10n of this ClusterTimeToFullResponse.

        Localized message string corresponding to time_to_full_status  # noqa: E501

        :param time_to_full_status_l10n: The time_to_full_status_l10n of this ClusterTimeToFullResponse.  # noqa: E501
        :type: str
        """

        self._time_to_full_status_l10n = time_to_full_status_l10n

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClusterTimeToFullResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterTimeToFullResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ClusterTimeToFullResponse):
            return True

        return self.to_dict() != other.to_dict()
