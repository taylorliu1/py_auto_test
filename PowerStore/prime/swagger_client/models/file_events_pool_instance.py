# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class FileEventsPoolInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'file_events_publisher_servers': 'list[str]',
        'destination_file_events_publisher_servers': 'list[str]',
        'file_events_settings': 'list[FileEventsSettingsInstance]',
        'is_replica': 'bool',
        'file_events_publishers': 'list[FileEventsPublisherInstance]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'file_events_publisher_servers': 'file_events_publisher_servers',
        'destination_file_events_publisher_servers': 'destination_file_events_publisher_servers',
        'file_events_settings': 'file_events_settings',
        'is_replica': 'is_replica',
        'file_events_publishers': 'file_events_publishers'
    }

    def __init__(self, id=None, name=None, file_events_publisher_servers=None, destination_file_events_publisher_servers=None, file_events_settings=None, is_replica=False, file_events_publishers=None, _configuration=None):  # noqa: E501
        """FileEventsPoolInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._file_events_publisher_servers = None
        self._destination_file_events_publisher_servers = None
        self._file_events_settings = None
        self._is_replica = None
        self._file_events_publishers = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if file_events_publisher_servers is not None:
            self.file_events_publisher_servers = file_events_publisher_servers
        if destination_file_events_publisher_servers is not None:
            self.destination_file_events_publisher_servers = destination_file_events_publisher_servers
        if file_events_settings is not None:
            self.file_events_settings = file_events_settings
        if is_replica is not None:
            self.is_replica = is_replica
        if file_events_publishers is not None:
            self.file_events_publishers = file_events_publishers

    @property
    def id(self):
        """Gets the id of this FileEventsPoolInstance.  # noqa: E501

        Unique identifier of the file event pool instance.  # noqa: E501

        :return: The id of this FileEventsPoolInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FileEventsPoolInstance.

        Unique identifier of the file event pool instance.  # noqa: E501

        :param id: The id of this FileEventsPoolInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this FileEventsPoolInstance.  # noqa: E501

        Name assigned to the set of Windows servers where file event service software is installed.   This property supports case-insensitive filtering.  # noqa: E501

        :return: The name of this FileEventsPoolInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FileEventsPoolInstance.

        Name assigned to the set of Windows servers where file event service software is installed.   This property supports case-insensitive filtering.  # noqa: E501

        :param name: The name of this FileEventsPoolInstance.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 80):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `80`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def file_events_publisher_servers(self):
        """Gets the file_events_publisher_servers of this FileEventsPoolInstance.  # noqa: E501

        File event service server addresses, in IPv4, IPv6, or FQDN format. Up to five file event service servers may be set per file events pool.   # noqa: E501

        :return: The file_events_publisher_servers of this FileEventsPoolInstance.  # noqa: E501
        :rtype: list[str]
        """
        return self._file_events_publisher_servers

    @file_events_publisher_servers.setter
    def file_events_publisher_servers(self, file_events_publisher_servers):
        """Sets the file_events_publisher_servers of this FileEventsPoolInstance.

        File event service server addresses, in IPv4, IPv6, or FQDN format. Up to five file event service servers may be set per file events pool.   # noqa: E501

        :param file_events_publisher_servers: The file_events_publisher_servers of this FileEventsPoolInstance.  # noqa: E501
        :type: list[str]
        """

        self._file_events_publisher_servers = file_events_publisher_servers

    @property
    def destination_file_events_publisher_servers(self):
        """Gets the destination_file_events_publisher_servers of this FileEventsPoolInstance.  # noqa: E501

        This value is used to modify file event service server addresses of this resource when the associated NAS server is a replication destination i.e, is_replica is set.  - If this value is set, file event service server addresses on the destination will be overridden with these values. - If this value is empty, file event service server addresses on the destination will be reset to the ones from the source.  File event service server addresses, in IPv4, IPv6, or FQDN format. Up to five file event service servers may be set per file events pool.   # noqa: E501

        :return: The destination_file_events_publisher_servers of this FileEventsPoolInstance.  # noqa: E501
        :rtype: list[str]
        """
        return self._destination_file_events_publisher_servers

    @destination_file_events_publisher_servers.setter
    def destination_file_events_publisher_servers(self, destination_file_events_publisher_servers):
        """Sets the destination_file_events_publisher_servers of this FileEventsPoolInstance.

        This value is used to modify file event service server addresses of this resource when the associated NAS server is a replication destination i.e, is_replica is set.  - If this value is set, file event service server addresses on the destination will be overridden with these values. - If this value is empty, file event service server addresses on the destination will be reset to the ones from the source.  File event service server addresses, in IPv4, IPv6, or FQDN format. Up to five file event service servers may be set per file events pool.   # noqa: E501

        :param destination_file_events_publisher_servers: The destination_file_events_publisher_servers of this FileEventsPoolInstance.  # noqa: E501
        :type: list[str]
        """

        self._destination_file_events_publisher_servers = destination_file_events_publisher_servers

    @property
    def file_events_settings(self):
        """Gets the file_events_settings of this FileEventsPoolInstance.  # noqa: E501

        List of up to three (one per category) sets of file event settings.   Filtering on the fields of this embedded resource is not supported.  # noqa: E501

        :return: The file_events_settings of this FileEventsPoolInstance.  # noqa: E501
        :rtype: list[FileEventsSettingsInstance]
        """
        return self._file_events_settings

    @file_events_settings.setter
    def file_events_settings(self, file_events_settings):
        """Sets the file_events_settings of this FileEventsPoolInstance.

        List of up to three (one per category) sets of file event settings.   Filtering on the fields of this embedded resource is not supported.  # noqa: E501

        :param file_events_settings: The file_events_settings of this FileEventsPoolInstance.  # noqa: E501
        :type: list[FileEventsSettingsInstance]
        """

        self._file_events_settings = file_events_settings

    @property
    def is_replica(self):
        """Gets the is_replica of this FileEventsPoolInstance.  # noqa: E501

        Flag indicates if the file events pool is a replicated pool.   # noqa: E501

        :return: The is_replica of this FileEventsPoolInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_replica

    @is_replica.setter
    def is_replica(self, is_replica):
        """Sets the is_replica of this FileEventsPoolInstance.

        Flag indicates if the file events pool is a replicated pool.   # noqa: E501

        :param is_replica: The is_replica of this FileEventsPoolInstance.  # noqa: E501
        :type: bool
        """

        self._is_replica = is_replica

    @property
    def file_events_publishers(self):
        """Gets the file_events_publishers of this FileEventsPoolInstance.  # noqa: E501

        List of the file_events_publishers that are associated with this file_events_pool.  # noqa: E501

        :return: The file_events_publishers of this FileEventsPoolInstance.  # noqa: E501
        :rtype: list[FileEventsPublisherInstance]
        """
        return self._file_events_publishers

    @file_events_publishers.setter
    def file_events_publishers(self, file_events_publishers):
        """Sets the file_events_publishers of this FileEventsPoolInstance.

        List of the file_events_publishers that are associated with this file_events_pool.  # noqa: E501

        :param file_events_publishers: The file_events_publishers of this FileEventsPoolInstance.  # noqa: E501
        :type: list[FileEventsPublisherInstance]
        """

        self._file_events_publishers = file_events_publishers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileEventsPoolInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileEventsPoolInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FileEventsPoolInstance):
            return True

        return self.to_dict() != other.to_dict()
