# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class FileVirusCheckerInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'nas_server_id': 'str',
        'is_enabled': 'bool',
        'is_config_file_uploaded': 'bool',
        'is_destination_override_enabled': 'bool',
        'nas_server': 'NasServerInstance'
    }

    attribute_map = {
        'id': 'id',
        'nas_server_id': 'nas_server_id',
        'is_enabled': 'is_enabled',
        'is_config_file_uploaded': 'is_config_file_uploaded',
        'is_destination_override_enabled': 'is_destination_override_enabled',
        'nas_server': 'nas_server'
    }

    def __init__(self, id=None, nas_server_id=None, is_enabled=None, is_config_file_uploaded=False, is_destination_override_enabled=False, nas_server=None, _configuration=None):  # noqa: E501
        """FileVirusCheckerInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._nas_server_id = None
        self._is_enabled = None
        self._is_config_file_uploaded = None
        self._is_destination_override_enabled = None
        self._nas_server = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if nas_server_id is not None:
            self.nas_server_id = nas_server_id
        if is_enabled is not None:
            self.is_enabled = is_enabled
        if is_config_file_uploaded is not None:
            self.is_config_file_uploaded = is_config_file_uploaded
        if is_destination_override_enabled is not None:
            self.is_destination_override_enabled = is_destination_override_enabled
        if nas_server is not None:
            self.nas_server = nas_server

    @property
    def id(self):
        """Gets the id of this FileVirusCheckerInstance.  # noqa: E501

        Unique identifier of the virus checker instance.  # noqa: E501

        :return: The id of this FileVirusCheckerInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FileVirusCheckerInstance.

        Unique identifier of the virus checker instance.  # noqa: E501

        :param id: The id of this FileVirusCheckerInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def nas_server_id(self):
        """Gets the nas_server_id of this FileVirusCheckerInstance.  # noqa: E501

        NAS server that is configured with these anti-virus settings.  # noqa: E501

        :return: The nas_server_id of this FileVirusCheckerInstance.  # noqa: E501
        :rtype: str
        """
        return self._nas_server_id

    @nas_server_id.setter
    def nas_server_id(self, nas_server_id):
        """Sets the nas_server_id of this FileVirusCheckerInstance.

        NAS server that is configured with these anti-virus settings.  # noqa: E501

        :param nas_server_id: The nas_server_id of this FileVirusCheckerInstance.  # noqa: E501
        :type: str
        """

        self._nas_server_id = nas_server_id

    @property
    def is_enabled(self):
        """Gets the is_enabled of this FileVirusCheckerInstance.  # noqa: E501

        Indicates whether the anti-virus service is enabled on this NAS server. Value are: - true - Anti-virus service is enabled. Each file created or modified by an SMB client is scanned by the third-party anti-virus servers. If a virus is detected, the access to the file system is denied. If third-party anti-virus servers are not available, according the policy, the access to the file systems is denied to prevent potential viruses propagation. - false - Anti-virus service is disabled. File systems of the NAS servers are available for access without virus checking   # noqa: E501

        :return: The is_enabled of this FileVirusCheckerInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this FileVirusCheckerInstance.

        Indicates whether the anti-virus service is enabled on this NAS server. Value are: - true - Anti-virus service is enabled. Each file created or modified by an SMB client is scanned by the third-party anti-virus servers. If a virus is detected, the access to the file system is denied. If third-party anti-virus servers are not available, according the policy, the access to the file systems is denied to prevent potential viruses propagation. - false - Anti-virus service is disabled. File systems of the NAS servers are available for access without virus checking   # noqa: E501

        :param is_enabled: The is_enabled of this FileVirusCheckerInstance.  # noqa: E501
        :type: bool
        """

        self._is_enabled = is_enabled

    @property
    def is_config_file_uploaded(self):
        """Gets the is_config_file_uploaded of this FileVirusCheckerInstance.  # noqa: E501

        Indicates whether a virus checker configuration file has been uploaded.  # noqa: E501

        :return: The is_config_file_uploaded of this FileVirusCheckerInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_config_file_uploaded

    @is_config_file_uploaded.setter
    def is_config_file_uploaded(self, is_config_file_uploaded):
        """Sets the is_config_file_uploaded of this FileVirusCheckerInstance.

        Indicates whether a virus checker configuration file has been uploaded.  # noqa: E501

        :param is_config_file_uploaded: The is_config_file_uploaded of this FileVirusCheckerInstance.  # noqa: E501
        :type: bool
        """

        self._is_config_file_uploaded = is_config_file_uploaded

    @property
    def is_destination_override_enabled(self):
        """Gets the is_destination_override_enabled of this FileVirusCheckerInstance.  # noqa: E501

        In order to modify the configuration of this resource when the associated NAS server is a replication destination, the is_destination_override_enabled flag must be set to true. When true, a virus checker config file may be uploaded on the destination to override the source virus checker config file. Values are:   true - Enable locally set configuration. A virus checker config file may be uploaded on the destination to override the source virus checker config file.   false - Revert to use the source configuration file. Source configuration file changes will propagate directly to this resource.  Was added in version 3.0.0.0.  # noqa: E501

        :return: The is_destination_override_enabled of this FileVirusCheckerInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_destination_override_enabled

    @is_destination_override_enabled.setter
    def is_destination_override_enabled(self, is_destination_override_enabled):
        """Sets the is_destination_override_enabled of this FileVirusCheckerInstance.

        In order to modify the configuration of this resource when the associated NAS server is a replication destination, the is_destination_override_enabled flag must be set to true. When true, a virus checker config file may be uploaded on the destination to override the source virus checker config file. Values are:   true - Enable locally set configuration. A virus checker config file may be uploaded on the destination to override the source virus checker config file.   false - Revert to use the source configuration file. Source configuration file changes will propagate directly to this resource.  Was added in version 3.0.0.0.  # noqa: E501

        :param is_destination_override_enabled: The is_destination_override_enabled of this FileVirusCheckerInstance.  # noqa: E501
        :type: bool
        """

        self._is_destination_override_enabled = is_destination_override_enabled

    @property
    def nas_server(self):
        """Gets the nas_server of this FileVirusCheckerInstance.  # noqa: E501

        This is the embeddable reference form of nas_server_id attribute.  # noqa: E501

        :return: The nas_server of this FileVirusCheckerInstance.  # noqa: E501
        :rtype: NasServerInstance
        """
        return self._nas_server

    @nas_server.setter
    def nas_server(self, nas_server):
        """Sets the nas_server of this FileVirusCheckerInstance.

        This is the embeddable reference form of nas_server_id attribute.  # noqa: E501

        :param nas_server: The nas_server of this FileVirusCheckerInstance.  # noqa: E501
        :type: NasServerInstance
        """

        self._nas_server = nas_server

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileVirusCheckerInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileVirusCheckerInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FileVirusCheckerInstance):
            return True

        return self.to_dict() != other.to_dict()
