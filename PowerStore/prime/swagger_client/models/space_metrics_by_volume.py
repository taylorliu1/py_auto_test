# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class SpaceMetricsByVolume(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'appliance_id': 'str',
        'volume_id': 'str',
        'timestamp': 'datetime',
        'logical_provisioned': 'int',
        'logical_used': 'int',
        'thin_savings': 'float',
        'repeat_count': 'int'
    }

    attribute_map = {
        'appliance_id': 'appliance_id',
        'volume_id': 'volume_id',
        'timestamp': 'timestamp',
        'logical_provisioned': 'logical_provisioned',
        'logical_used': 'logical_used',
        'thin_savings': 'thin_savings',
        'repeat_count': 'repeat_count'
    }

    def __init__(self, appliance_id=None, volume_id=None, timestamp=None, logical_provisioned=None, logical_used=None, thin_savings=None, repeat_count=None, _configuration=None):  # noqa: E501
        """SpaceMetricsByVolume - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._appliance_id = None
        self._volume_id = None
        self._timestamp = None
        self._logical_provisioned = None
        self._logical_used = None
        self._thin_savings = None
        self._repeat_count = None
        self.discriminator = None

        if appliance_id is not None:
            self.appliance_id = appliance_id
        if volume_id is not None:
            self.volume_id = volume_id
        if timestamp is not None:
            self.timestamp = timestamp
        if logical_provisioned is not None:
            self.logical_provisioned = logical_provisioned
        if logical_used is not None:
            self.logical_used = logical_used
        if thin_savings is not None:
            self.thin_savings = thin_savings
        if repeat_count is not None:
            self.repeat_count = repeat_count

    @property
    def appliance_id(self):
        """Gets the appliance_id of this SpaceMetricsByVolume.  # noqa: E501

        Reference to the associated appliance on which these metrics were recorded.  # noqa: E501

        :return: The appliance_id of this SpaceMetricsByVolume.  # noqa: E501
        :rtype: str
        """
        return self._appliance_id

    @appliance_id.setter
    def appliance_id(self, appliance_id):
        """Sets the appliance_id of this SpaceMetricsByVolume.

        Reference to the associated appliance on which these metrics were recorded.  # noqa: E501

        :param appliance_id: The appliance_id of this SpaceMetricsByVolume.  # noqa: E501
        :type: str
        """

        self._appliance_id = appliance_id

    @property
    def volume_id(self):
        """Gets the volume_id of this SpaceMetricsByVolume.  # noqa: E501

        ID of the volume.  # noqa: E501

        :return: The volume_id of this SpaceMetricsByVolume.  # noqa: E501
        :rtype: str
        """
        return self._volume_id

    @volume_id.setter
    def volume_id(self, volume_id):
        """Sets the volume_id of this SpaceMetricsByVolume.

        ID of the volume.  # noqa: E501

        :param volume_id: The volume_id of this SpaceMetricsByVolume.  # noqa: E501
        :type: str
        """

        self._volume_id = volume_id

    @property
    def timestamp(self):
        """Gets the timestamp of this SpaceMetricsByVolume.  # noqa: E501

        End of sample period.  # noqa: E501

        :return: The timestamp of this SpaceMetricsByVolume.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this SpaceMetricsByVolume.

        End of sample period.  # noqa: E501

        :param timestamp: The timestamp of this SpaceMetricsByVolume.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def logical_provisioned(self):
        """Gets the logical_provisioned of this SpaceMetricsByVolume.  # noqa: E501

        Configured size in bytes of a volume which amount of data can be written to. This metric includes primaries, snaps and clones.  # noqa: E501

        :return: The logical_provisioned of this SpaceMetricsByVolume.  # noqa: E501
        :rtype: int
        """
        return self._logical_provisioned

    @logical_provisioned.setter
    def logical_provisioned(self, logical_provisioned):
        """Sets the logical_provisioned of this SpaceMetricsByVolume.

        Configured size in bytes of a volume which amount of data can be written to. This metric includes primaries, snaps and clones.  # noqa: E501

        :param logical_provisioned: The logical_provisioned of this SpaceMetricsByVolume.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                logical_provisioned is not None and logical_provisioned > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `logical_provisioned`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                logical_provisioned is not None and logical_provisioned < 0):  # noqa: E501
            raise ValueError("Invalid value for `logical_provisioned`, must be a value greater than or equal to `0`")  # noqa: E501

        self._logical_provisioned = logical_provisioned

    @property
    def logical_used(self):
        """Gets the logical_used of this SpaceMetricsByVolume.  # noqa: E501

        Amount of data in bytes host has written to a volume without any deduplication, compression or sharing. This metric includes primaries, snaps and clones.  # noqa: E501

        :return: The logical_used of this SpaceMetricsByVolume.  # noqa: E501
        :rtype: int
        """
        return self._logical_used

    @logical_used.setter
    def logical_used(self, logical_used):
        """Sets the logical_used of this SpaceMetricsByVolume.

        Amount of data in bytes host has written to a volume without any deduplication, compression or sharing. This metric includes primaries, snaps and clones.  # noqa: E501

        :param logical_used: The logical_used of this SpaceMetricsByVolume.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                logical_used is not None and logical_used > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `logical_used`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                logical_used is not None and logical_used < 0):  # noqa: E501
            raise ValueError("Invalid value for `logical_used`, must be a value greater than or equal to `0`")  # noqa: E501

        self._logical_used = logical_used

    @property
    def thin_savings(self):
        """Gets the thin_savings of this SpaceMetricsByVolume.  # noqa: E501

        Ratio of all the volumes provisioned to data being written to them. For example, an appliance has two 2 GB volumes and have written 500 MB of data to them. The thin savings would be (2 GB * 2) / (0.5 GB * 2) or 4:1, so the thin_savings value would be 4.0.  # noqa: E501

        :return: The thin_savings of this SpaceMetricsByVolume.  # noqa: E501
        :rtype: float
        """
        return self._thin_savings

    @thin_savings.setter
    def thin_savings(self, thin_savings):
        """Sets the thin_savings of this SpaceMetricsByVolume.

        Ratio of all the volumes provisioned to data being written to them. For example, an appliance has two 2 GB volumes and have written 500 MB of data to them. The thin savings would be (2 GB * 2) / (0.5 GB * 2) or 4:1, so the thin_savings value would be 4.0.  # noqa: E501

        :param thin_savings: The thin_savings of this SpaceMetricsByVolume.  # noqa: E501
        :type: float
        """

        self._thin_savings = thin_savings

    @property
    def repeat_count(self):
        """Gets the repeat_count of this SpaceMetricsByVolume.  # noqa: E501

        Number of times the metrics are repeated.  # noqa: E501

        :return: The repeat_count of this SpaceMetricsByVolume.  # noqa: E501
        :rtype: int
        """
        return self._repeat_count

    @repeat_count.setter
    def repeat_count(self, repeat_count):
        """Sets the repeat_count of this SpaceMetricsByVolume.

        Number of times the metrics are repeated.  # noqa: E501

        :param repeat_count: The repeat_count of this SpaceMetricsByVolume.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                repeat_count is not None and repeat_count > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `repeat_count`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                repeat_count is not None and repeat_count < 0):  # noqa: E501
            raise ValueError("Invalid value for `repeat_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._repeat_count = repeat_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SpaceMetricsByVolume, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpaceMetricsByVolume):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SpaceMetricsByVolume):
            return True

        return self.to_dict() != other.to_dict()
