# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class ApplianceInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'service_tag': 'str',
        'express_service_code': 'str',
        'model': 'str',
        'node_count': 'int',
        'drive_failure_tolerance_level': 'DriveFailureToleranceLevelEnum',
        'drive_failure_tolerance_level_l10n': 'str',
        'nodes': 'list[NodeInstance]',
        'ip_pool_addresses': 'list[IpPoolAddressInstance]',
        'veth_ports': 'list[VethPortInstance]',
        'virtual_volumes': 'list[VirtualVolumeInstance]',
        'maintenance_windows': 'list[MaintenanceWindowInstance]',
        'fc_ports': 'list[FcPortInstance]',
        'sas_ports': 'list[SasPortInstance]',
        'eth_ports': 'list[EthPortInstance]',
        'eth_be_ports': 'list[EthBePortInstance]',
        'software_installed': 'list[SoftwareInstalledInstance]',
        'hardware': 'list[HardwareInstance]',
        'volumes': 'list[VolumeInstance]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'service_tag': 'service_tag',
        'express_service_code': 'express_service_code',
        'model': 'model',
        'node_count': 'node_count',
        'drive_failure_tolerance_level': 'drive_failure_tolerance_level',
        'drive_failure_tolerance_level_l10n': 'drive_failure_tolerance_level_l10n',
        'nodes': 'nodes',
        'ip_pool_addresses': 'ip_pool_addresses',
        'veth_ports': 'veth_ports',
        'virtual_volumes': 'virtual_volumes',
        'maintenance_windows': 'maintenance_windows',
        'fc_ports': 'fc_ports',
        'sas_ports': 'sas_ports',
        'eth_ports': 'eth_ports',
        'eth_be_ports': 'eth_be_ports',
        'software_installed': 'software_installed',
        'hardware': 'hardware',
        'volumes': 'volumes'
    }

    def __init__(self, id=None, name=None, service_tag=None, express_service_code=None, model=None, node_count=2, drive_failure_tolerance_level=None, drive_failure_tolerance_level_l10n=None, nodes=None, ip_pool_addresses=None, veth_ports=None, virtual_volumes=None, maintenance_windows=None, fc_ports=None, sas_ports=None, eth_ports=None, eth_be_ports=None, software_installed=None, hardware=None, volumes=None, _configuration=None):  # noqa: E501
        """ApplianceInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._service_tag = None
        self._express_service_code = None
        self._model = None
        self._node_count = None
        self._drive_failure_tolerance_level = None
        self._drive_failure_tolerance_level_l10n = None
        self._nodes = None
        self._ip_pool_addresses = None
        self._veth_ports = None
        self._virtual_volumes = None
        self._maintenance_windows = None
        self._fc_ports = None
        self._sas_ports = None
        self._eth_ports = None
        self._eth_be_ports = None
        self._software_installed = None
        self._hardware = None
        self._volumes = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if service_tag is not None:
            self.service_tag = service_tag
        if express_service_code is not None:
            self.express_service_code = express_service_code
        if model is not None:
            self.model = model
        if node_count is not None:
            self.node_count = node_count
        if drive_failure_tolerance_level is not None:
            self.drive_failure_tolerance_level = drive_failure_tolerance_level
        if drive_failure_tolerance_level_l10n is not None:
            self.drive_failure_tolerance_level_l10n = drive_failure_tolerance_level_l10n
        if nodes is not None:
            self.nodes = nodes
        if ip_pool_addresses is not None:
            self.ip_pool_addresses = ip_pool_addresses
        if veth_ports is not None:
            self.veth_ports = veth_ports
        if virtual_volumes is not None:
            self.virtual_volumes = virtual_volumes
        if maintenance_windows is not None:
            self.maintenance_windows = maintenance_windows
        if fc_ports is not None:
            self.fc_ports = fc_ports
        if sas_ports is not None:
            self.sas_ports = sas_ports
        if eth_ports is not None:
            self.eth_ports = eth_ports
        if eth_be_ports is not None:
            self.eth_be_ports = eth_be_ports
        if software_installed is not None:
            self.software_installed = software_installed
        if hardware is not None:
            self.hardware = hardware
        if volumes is not None:
            self.volumes = volumes

    @property
    def id(self):
        """Gets the id of this ApplianceInstance.  # noqa: E501

        Unique identifier of the appliance.  # noqa: E501

        :return: The id of this ApplianceInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApplianceInstance.

        Unique identifier of the appliance.  # noqa: E501

        :param id: The id of this ApplianceInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ApplianceInstance.  # noqa: E501

        Name of the appliance.  This property supports case-insensitive filtering.  # noqa: E501

        :return: The name of this ApplianceInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApplianceInstance.

        Name of the appliance.  This property supports case-insensitive filtering.  # noqa: E501

        :param name: The name of this ApplianceInstance.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def service_tag(self):
        """Gets the service_tag of this ApplianceInstance.  # noqa: E501

        Dell Service Tag.  # noqa: E501

        :return: The service_tag of this ApplianceInstance.  # noqa: E501
        :rtype: str
        """
        return self._service_tag

    @service_tag.setter
    def service_tag(self, service_tag):
        """Sets the service_tag of this ApplianceInstance.

        Dell Service Tag.  # noqa: E501

        :param service_tag: The service_tag of this ApplianceInstance.  # noqa: E501
        :type: str
        """

        self._service_tag = service_tag

    @property
    def express_service_code(self):
        """Gets the express_service_code of this ApplianceInstance.  # noqa: E501

        Express Service Code.  # noqa: E501

        :return: The express_service_code of this ApplianceInstance.  # noqa: E501
        :rtype: str
        """
        return self._express_service_code

    @express_service_code.setter
    def express_service_code(self, express_service_code):
        """Sets the express_service_code of this ApplianceInstance.

        Express Service Code.  # noqa: E501

        :param express_service_code: The express_service_code of this ApplianceInstance.  # noqa: E501
        :type: str
        """

        self._express_service_code = express_service_code

    @property
    def model(self):
        """Gets the model of this ApplianceInstance.  # noqa: E501

        Model of the appliance.  # noqa: E501

        :return: The model of this ApplianceInstance.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this ApplianceInstance.

        Model of the appliance.  # noqa: E501

        :param model: The model of this ApplianceInstance.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def node_count(self):
        """Gets the node_count of this ApplianceInstance.  # noqa: E501

        The number of nodes deployed on an appliance. Was added in version 3.0.0.0.  # noqa: E501

        :return: The node_count of this ApplianceInstance.  # noqa: E501
        :rtype: int
        """
        return self._node_count

    @node_count.setter
    def node_count(self, node_count):
        """Sets the node_count of this ApplianceInstance.

        The number of nodes deployed on an appliance. Was added in version 3.0.0.0.  # noqa: E501

        :param node_count: The node_count of this ApplianceInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                node_count is not None and node_count > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `node_count`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                node_count is not None and node_count < 0):  # noqa: E501
            raise ValueError("Invalid value for `node_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._node_count = node_count

    @property
    def drive_failure_tolerance_level(self):
        """Gets the drive_failure_tolerance_level of this ApplianceInstance.  # noqa: E501

         Was added in version 2.0.0.0.  # noqa: E501

        :return: The drive_failure_tolerance_level of this ApplianceInstance.  # noqa: E501
        :rtype: DriveFailureToleranceLevelEnum
        """
        return self._drive_failure_tolerance_level

    @drive_failure_tolerance_level.setter
    def drive_failure_tolerance_level(self, drive_failure_tolerance_level):
        """Sets the drive_failure_tolerance_level of this ApplianceInstance.

         Was added in version 2.0.0.0.  # noqa: E501

        :param drive_failure_tolerance_level: The drive_failure_tolerance_level of this ApplianceInstance.  # noqa: E501
        :type: DriveFailureToleranceLevelEnum
        """

        self._drive_failure_tolerance_level = drive_failure_tolerance_level

    @property
    def drive_failure_tolerance_level_l10n(self):
        """Gets the drive_failure_tolerance_level_l10n of this ApplianceInstance.  # noqa: E501

        Localized message string corresponding to drive_failure_tolerance_level Was added in version 2.0.0.0.  # noqa: E501

        :return: The drive_failure_tolerance_level_l10n of this ApplianceInstance.  # noqa: E501
        :rtype: str
        """
        return self._drive_failure_tolerance_level_l10n

    @drive_failure_tolerance_level_l10n.setter
    def drive_failure_tolerance_level_l10n(self, drive_failure_tolerance_level_l10n):
        """Sets the drive_failure_tolerance_level_l10n of this ApplianceInstance.

        Localized message string corresponding to drive_failure_tolerance_level Was added in version 2.0.0.0.  # noqa: E501

        :param drive_failure_tolerance_level_l10n: The drive_failure_tolerance_level_l10n of this ApplianceInstance.  # noqa: E501
        :type: str
        """

        self._drive_failure_tolerance_level_l10n = drive_failure_tolerance_level_l10n

    @property
    def nodes(self):
        """Gets the nodes of this ApplianceInstance.  # noqa: E501

        This is the inverse of the resource type node association.  # noqa: E501

        :return: The nodes of this ApplianceInstance.  # noqa: E501
        :rtype: list[NodeInstance]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this ApplianceInstance.

        This is the inverse of the resource type node association.  # noqa: E501

        :param nodes: The nodes of this ApplianceInstance.  # noqa: E501
        :type: list[NodeInstance]
        """

        self._nodes = nodes

    @property
    def ip_pool_addresses(self):
        """Gets the ip_pool_addresses of this ApplianceInstance.  # noqa: E501

        This is the inverse of the resource type ip_pool_address association.  # noqa: E501

        :return: The ip_pool_addresses of this ApplianceInstance.  # noqa: E501
        :rtype: list[IpPoolAddressInstance]
        """
        return self._ip_pool_addresses

    @ip_pool_addresses.setter
    def ip_pool_addresses(self, ip_pool_addresses):
        """Sets the ip_pool_addresses of this ApplianceInstance.

        This is the inverse of the resource type ip_pool_address association.  # noqa: E501

        :param ip_pool_addresses: The ip_pool_addresses of this ApplianceInstance.  # noqa: E501
        :type: list[IpPoolAddressInstance]
        """

        self._ip_pool_addresses = ip_pool_addresses

    @property
    def veth_ports(self):
        """Gets the veth_ports of this ApplianceInstance.  # noqa: E501

        This is the inverse of the resource type veth_port association.  # noqa: E501

        :return: The veth_ports of this ApplianceInstance.  # noqa: E501
        :rtype: list[VethPortInstance]
        """
        return self._veth_ports

    @veth_ports.setter
    def veth_ports(self, veth_ports):
        """Sets the veth_ports of this ApplianceInstance.

        This is the inverse of the resource type veth_port association.  # noqa: E501

        :param veth_ports: The veth_ports of this ApplianceInstance.  # noqa: E501
        :type: list[VethPortInstance]
        """

        self._veth_ports = veth_ports

    @property
    def virtual_volumes(self):
        """Gets the virtual_volumes of this ApplianceInstance.  # noqa: E501

        This is the inverse of the resource type virtual_volume association.  # noqa: E501

        :return: The virtual_volumes of this ApplianceInstance.  # noqa: E501
        :rtype: list[VirtualVolumeInstance]
        """
        return self._virtual_volumes

    @virtual_volumes.setter
    def virtual_volumes(self, virtual_volumes):
        """Sets the virtual_volumes of this ApplianceInstance.

        This is the inverse of the resource type virtual_volume association.  # noqa: E501

        :param virtual_volumes: The virtual_volumes of this ApplianceInstance.  # noqa: E501
        :type: list[VirtualVolumeInstance]
        """

        self._virtual_volumes = virtual_volumes

    @property
    def maintenance_windows(self):
        """Gets the maintenance_windows of this ApplianceInstance.  # noqa: E501

        This is the inverse of the resource type maintenance_window association.  # noqa: E501

        :return: The maintenance_windows of this ApplianceInstance.  # noqa: E501
        :rtype: list[MaintenanceWindowInstance]
        """
        return self._maintenance_windows

    @maintenance_windows.setter
    def maintenance_windows(self, maintenance_windows):
        """Sets the maintenance_windows of this ApplianceInstance.

        This is the inverse of the resource type maintenance_window association.  # noqa: E501

        :param maintenance_windows: The maintenance_windows of this ApplianceInstance.  # noqa: E501
        :type: list[MaintenanceWindowInstance]
        """

        self._maintenance_windows = maintenance_windows

    @property
    def fc_ports(self):
        """Gets the fc_ports of this ApplianceInstance.  # noqa: E501

        This is the inverse of the resource type fc_port association.  # noqa: E501

        :return: The fc_ports of this ApplianceInstance.  # noqa: E501
        :rtype: list[FcPortInstance]
        """
        return self._fc_ports

    @fc_ports.setter
    def fc_ports(self, fc_ports):
        """Sets the fc_ports of this ApplianceInstance.

        This is the inverse of the resource type fc_port association.  # noqa: E501

        :param fc_ports: The fc_ports of this ApplianceInstance.  # noqa: E501
        :type: list[FcPortInstance]
        """

        self._fc_ports = fc_ports

    @property
    def sas_ports(self):
        """Gets the sas_ports of this ApplianceInstance.  # noqa: E501

        This is the inverse of the resource type sas_port association.  # noqa: E501

        :return: The sas_ports of this ApplianceInstance.  # noqa: E501
        :rtype: list[SasPortInstance]
        """
        return self._sas_ports

    @sas_ports.setter
    def sas_ports(self, sas_ports):
        """Sets the sas_ports of this ApplianceInstance.

        This is the inverse of the resource type sas_port association.  # noqa: E501

        :param sas_ports: The sas_ports of this ApplianceInstance.  # noqa: E501
        :type: list[SasPortInstance]
        """

        self._sas_ports = sas_ports

    @property
    def eth_ports(self):
        """Gets the eth_ports of this ApplianceInstance.  # noqa: E501

        This is the inverse of the resource type eth_port association.  # noqa: E501

        :return: The eth_ports of this ApplianceInstance.  # noqa: E501
        :rtype: list[EthPortInstance]
        """
        return self._eth_ports

    @eth_ports.setter
    def eth_ports(self, eth_ports):
        """Sets the eth_ports of this ApplianceInstance.

        This is the inverse of the resource type eth_port association.  # noqa: E501

        :param eth_ports: The eth_ports of this ApplianceInstance.  # noqa: E501
        :type: list[EthPortInstance]
        """

        self._eth_ports = eth_ports

    @property
    def eth_be_ports(self):
        """Gets the eth_be_ports of this ApplianceInstance.  # noqa: E501

        This is the inverse of the resource type eth_be_port association.  # noqa: E501

        :return: The eth_be_ports of this ApplianceInstance.  # noqa: E501
        :rtype: list[EthBePortInstance]
        """
        return self._eth_be_ports

    @eth_be_ports.setter
    def eth_be_ports(self, eth_be_ports):
        """Sets the eth_be_ports of this ApplianceInstance.

        This is the inverse of the resource type eth_be_port association.  # noqa: E501

        :param eth_be_ports: The eth_be_ports of this ApplianceInstance.  # noqa: E501
        :type: list[EthBePortInstance]
        """

        self._eth_be_ports = eth_be_ports

    @property
    def software_installed(self):
        """Gets the software_installed of this ApplianceInstance.  # noqa: E501

        This is the inverse of the resource type software_installed association.  # noqa: E501

        :return: The software_installed of this ApplianceInstance.  # noqa: E501
        :rtype: list[SoftwareInstalledInstance]
        """
        return self._software_installed

    @software_installed.setter
    def software_installed(self, software_installed):
        """Sets the software_installed of this ApplianceInstance.

        This is the inverse of the resource type software_installed association.  # noqa: E501

        :param software_installed: The software_installed of this ApplianceInstance.  # noqa: E501
        :type: list[SoftwareInstalledInstance]
        """

        self._software_installed = software_installed

    @property
    def hardware(self):
        """Gets the hardware of this ApplianceInstance.  # noqa: E501

        This is the inverse of the resource type hardware association.  # noqa: E501

        :return: The hardware of this ApplianceInstance.  # noqa: E501
        :rtype: list[HardwareInstance]
        """
        return self._hardware

    @hardware.setter
    def hardware(self, hardware):
        """Sets the hardware of this ApplianceInstance.

        This is the inverse of the resource type hardware association.  # noqa: E501

        :param hardware: The hardware of this ApplianceInstance.  # noqa: E501
        :type: list[HardwareInstance]
        """

        self._hardware = hardware

    @property
    def volumes(self):
        """Gets the volumes of this ApplianceInstance.  # noqa: E501

        This is the inverse of the resource type volume association.  # noqa: E501

        :return: The volumes of this ApplianceInstance.  # noqa: E501
        :rtype: list[VolumeInstance]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this ApplianceInstance.

        This is the inverse of the resource type volume association.  # noqa: E501

        :param volumes: The volumes of this ApplianceInstance.  # noqa: E501
        :type: list[VolumeInstance]
        """

        self._volumes = volumes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplianceInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplianceInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApplianceInstance):
            return True

        return self.to_dict() != other.to_dict()
