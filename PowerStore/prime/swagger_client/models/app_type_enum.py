# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class AppTypeEnum(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    RELATIONAL_DATABASES_OTHER = "Relational_Databases_Other"
    RELATIONAL_DATABASES_ORACLE = "Relational_Databases_Oracle"
    RELATIONAL_DATABASES_SQL_SERVER = "Relational_Databases_SQL_Server"
    RELATIONAL_DATABASES_POSTGRESQL = "Relational_Databases_PostgreSQL"
    RELATIONAL_DATABASES_MYSQL = "Relational_Databases_MySQL"
    RELATIONAL_DATABASES_IBM_DB2 = "Relational_Databases_IBM_DB2"
    BIG_DATA_ANALYTICS_OTHER = "Big_Data_Analytics_Other"
    BIG_DATA_ANALYTICS_MONGODB = "Big_Data_Analytics_MongoDB"
    BIG_DATA_ANALYTICS_CASSANDRA = "Big_Data_Analytics_Cassandra"
    BIG_DATA_ANALYTICS_SAP_HANA = "Big_Data_Analytics_SAP_HANA"
    BIG_DATA_ANALYTICS_SPARK = "Big_Data_Analytics_Spark"
    BIG_DATA_ANALYTICS_SPLUNK = "Big_Data_Analytics_Splunk"
    BIG_DATA_ANALYTICS_ELASTICSEARCH = "Big_Data_Analytics_ElasticSearch"
    BUSINESS_APPLICATIONS_OTHER = "Business_Applications_Other"
    BUSINESS_APPLICATIONS_ERP_SAP = "Business_Applications_ERP_SAP"
    BUSINESS_APPLICATIONS_CRM = "Business_Applications_CRM"
    BUSINESS_APPLICATIONS_EXCHANGE = "Business_Applications_Exchange"
    BUSINESS_APPLICATIONS_SHAREPOINT = "Business_Applications_Sharepoint"
    HEALTHCARE_OTHER = "Healthcare_Other"
    HEALTHCARE_EPIC = "Healthcare_EPIC"
    HEALTHCARE_MEDITECH = "Healthcare_Meditech"
    HEALTHCARE_ALLSCRIPTS = "Healthcare_Allscripts"
    HEALTHCARE_CERNER = "Healthcare_Cerner"
    VIRTUALIZATION_OTHER = "Virtualization_Other"
    VIRTUALIZATION_VIRTUAL_SERVERS_VSI = "Virtualization_Virtual_Servers_VSI"
    VIRTUALIZATION_CONTAINERS_KUBERNETES = "Virtualization_Containers_Kubernetes"
    VIRTUALIZATION_VIRTUAL_DESKTOPS_VDI = "Virtualization_Virtual_Desktops_VDI"
    OTHER = "Other"

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self, _configuration=None):  # noqa: E501
        """AppTypeEnum - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppTypeEnum, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppTypeEnum):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AppTypeEnum):
            return True

        return self.to_dict() != other.to_dict()
