# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class NetworkInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'type': 'NetworkTypeEnum',
        'name': 'str',
        'ip_version': 'IpVersionTypeEnum',
        'purposes': 'list[NetworkPurposeEnum]',
        'vlan_id': 'int',
        'prefix_length': 'int',
        'gateway': 'str',
        'mtu': 'int',
        'nvme_discovery_mode': 'NVMeDiscoveryModeEnum',
        'nvme_cdc_address': 'str',
        'nvme_cdc_port': 'int',
        'type_l10n': 'str',
        'ip_version_l10n': 'str',
        'purposes_l10n': 'list[str]',
        'nvme_discovery_mode_l10n': 'str',
        'ip_pool_addresses': 'list[IpPoolAddressInstance]'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'name': 'name',
        'ip_version': 'ip_version',
        'purposes': 'purposes',
        'vlan_id': 'vlan_id',
        'prefix_length': 'prefix_length',
        'gateway': 'gateway',
        'mtu': 'mtu',
        'nvme_discovery_mode': 'nvme_discovery_mode',
        'nvme_cdc_address': 'nvme_cdc_address',
        'nvme_cdc_port': 'nvme_cdc_port',
        'type_l10n': 'type_l10n',
        'ip_version_l10n': 'ip_version_l10n',
        'purposes_l10n': 'purposes_l10n',
        'nvme_discovery_mode_l10n': 'nvme_discovery_mode_l10n',
        'ip_pool_addresses': 'ip_pool_addresses'
    }

    def __init__(self, id=None, type=None, name=None, ip_version=None, purposes=None, vlan_id=None, prefix_length=None, gateway=None, mtu=None, nvme_discovery_mode=None, nvme_cdc_address=None, nvme_cdc_port=8009, type_l10n=None, ip_version_l10n=None, purposes_l10n=None, nvme_discovery_mode_l10n=None, ip_pool_addresses=None, _configuration=None):  # noqa: E501
        """NetworkInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._type = None
        self._name = None
        self._ip_version = None
        self._purposes = None
        self._vlan_id = None
        self._prefix_length = None
        self._gateway = None
        self._mtu = None
        self._nvme_discovery_mode = None
        self._nvme_cdc_address = None
        self._nvme_cdc_port = None
        self._type_l10n = None
        self._ip_version_l10n = None
        self._purposes_l10n = None
        self._nvme_discovery_mode_l10n = None
        self._ip_pool_addresses = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if name is not None:
            self.name = name
        if ip_version is not None:
            self.ip_version = ip_version
        if purposes is not None:
            self.purposes = purposes
        if vlan_id is not None:
            self.vlan_id = vlan_id
        if prefix_length is not None:
            self.prefix_length = prefix_length
        if gateway is not None:
            self.gateway = gateway
        if mtu is not None:
            self.mtu = mtu
        if nvme_discovery_mode is not None:
            self.nvme_discovery_mode = nvme_discovery_mode
        if nvme_cdc_address is not None:
            self.nvme_cdc_address = nvme_cdc_address
        if nvme_cdc_port is not None:
            self.nvme_cdc_port = nvme_cdc_port
        if type_l10n is not None:
            self.type_l10n = type_l10n
        if ip_version_l10n is not None:
            self.ip_version_l10n = ip_version_l10n
        if purposes_l10n is not None:
            self.purposes_l10n = purposes_l10n
        if nvme_discovery_mode_l10n is not None:
            self.nvme_discovery_mode_l10n = nvme_discovery_mode_l10n
        if ip_pool_addresses is not None:
            self.ip_pool_addresses = ip_pool_addresses

    @property
    def id(self):
        """Gets the id of this NetworkInstance.  # noqa: E501

        Unique identifier of the network.  # noqa: E501

        :return: The id of this NetworkInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NetworkInstance.

        Unique identifier of the network.  # noqa: E501

        :param id: The id of this NetworkInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this NetworkInstance.  # noqa: E501


        :return: The type of this NetworkInstance.  # noqa: E501
        :rtype: NetworkTypeEnum
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NetworkInstance.


        :param type: The type of this NetworkInstance.  # noqa: E501
        :type: NetworkTypeEnum
        """

        self._type = type

    @property
    def name(self):
        """Gets the name of this NetworkInstance.  # noqa: E501

        Name of the network.  This property supports case-insensitive filtering. Was added in version 2.0.0.0.  # noqa: E501

        :return: The name of this NetworkInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NetworkInstance.

        Name of the network.  This property supports case-insensitive filtering. Was added in version 2.0.0.0.  # noqa: E501

        :param name: The name of this NetworkInstance.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 128):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def ip_version(self):
        """Gets the ip_version of this NetworkInstance.  # noqa: E501


        :return: The ip_version of this NetworkInstance.  # noqa: E501
        :rtype: IpVersionTypeEnum
        """
        return self._ip_version

    @ip_version.setter
    def ip_version(self, ip_version):
        """Sets the ip_version of this NetworkInstance.


        :param ip_version: The ip_version of this NetworkInstance.  # noqa: E501
        :type: IpVersionTypeEnum
        """

        self._ip_version = ip_version

    @property
    def purposes(self):
        """Gets the purposes of this NetworkInstance.  # noqa: E501

        Purposes of the network. This returns a list of purposes for the networks that support multiple purposes per network, like storage network. Empty list is returned for single purposed networks, like management, vMotion, ICD and ICM.  Was added in version 2.0.0.0.  # noqa: E501

        :return: The purposes of this NetworkInstance.  # noqa: E501
        :rtype: list[NetworkPurposeEnum]
        """
        return self._purposes

    @purposes.setter
    def purposes(self, purposes):
        """Sets the purposes of this NetworkInstance.

        Purposes of the network. This returns a list of purposes for the networks that support multiple purposes per network, like storage network. Empty list is returned for single purposed networks, like management, vMotion, ICD and ICM.  Was added in version 2.0.0.0.  # noqa: E501

        :param purposes: The purposes of this NetworkInstance.  # noqa: E501
        :type: list[NetworkPurposeEnum]
        """

        self._purposes = purposes

    @property
    def vlan_id(self):
        """Gets the vlan_id of this NetworkInstance.  # noqa: E501

        VLAN identifier.  # noqa: E501

        :return: The vlan_id of this NetworkInstance.  # noqa: E501
        :rtype: int
        """
        return self._vlan_id

    @vlan_id.setter
    def vlan_id(self, vlan_id):
        """Sets the vlan_id of this NetworkInstance.

        VLAN identifier.  # noqa: E501

        :param vlan_id: The vlan_id of this NetworkInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                vlan_id is not None and vlan_id > 4094):  # noqa: E501
            raise ValueError("Invalid value for `vlan_id`, must be a value less than or equal to `4094`")  # noqa: E501
        if (self._configuration.client_side_validation and
                vlan_id is not None and vlan_id < 0):  # noqa: E501
            raise ValueError("Invalid value for `vlan_id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._vlan_id = vlan_id

    @property
    def prefix_length(self):
        """Gets the prefix_length of this NetworkInstance.  # noqa: E501

        Network prefix length, used for both IPv4 and IPv6.  # noqa: E501

        :return: The prefix_length of this NetworkInstance.  # noqa: E501
        :rtype: int
        """
        return self._prefix_length

    @prefix_length.setter
    def prefix_length(self, prefix_length):
        """Sets the prefix_length of this NetworkInstance.

        Network prefix length, used for both IPv4 and IPv6.  # noqa: E501

        :param prefix_length: The prefix_length of this NetworkInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                prefix_length is not None and prefix_length > 127):  # noqa: E501
            raise ValueError("Invalid value for `prefix_length`, must be a value less than or equal to `127`")  # noqa: E501
        if (self._configuration.client_side_validation and
                prefix_length is not None and prefix_length < 1):  # noqa: E501
            raise ValueError("Invalid value for `prefix_length`, must be a value greater than or equal to `1`")  # noqa: E501

        self._prefix_length = prefix_length

    @property
    def gateway(self):
        """Gets the gateway of this NetworkInstance.  # noqa: E501

        Network gateway in IPv4 or IPv6 format, corresponding to the network's IP version.  # noqa: E501

        :return: The gateway of this NetworkInstance.  # noqa: E501
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this NetworkInstance.

        Network gateway in IPv4 or IPv6 format, corresponding to the network's IP version.  # noqa: E501

        :param gateway: The gateway of this NetworkInstance.  # noqa: E501
        :type: str
        """

        self._gateway = gateway

    @property
    def mtu(self):
        """Gets the mtu of this NetworkInstance.  # noqa: E501

        Maximum Transmission Unit (MTU) packet size set on network interfaces, in bytes.  # noqa: E501

        :return: The mtu of this NetworkInstance.  # noqa: E501
        :rtype: int
        """
        return self._mtu

    @mtu.setter
    def mtu(self, mtu):
        """Sets the mtu of this NetworkInstance.

        Maximum Transmission Unit (MTU) packet size set on network interfaces, in bytes.  # noqa: E501

        :param mtu: The mtu of this NetworkInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                mtu is not None and mtu > 9000):  # noqa: E501
            raise ValueError("Invalid value for `mtu`, must be a value less than or equal to `9000`")  # noqa: E501
        if (self._configuration.client_side_validation and
                mtu is not None and mtu < 1280):  # noqa: E501
            raise ValueError("Invalid value for `mtu`, must be a value greater than or equal to `1280`")  # noqa: E501

        self._mtu = mtu

    @property
    def nvme_discovery_mode(self):
        """Gets the nvme_discovery_mode of this NetworkInstance.  # noqa: E501

         Was added in version 3.0.0.0.  # noqa: E501

        :return: The nvme_discovery_mode of this NetworkInstance.  # noqa: E501
        :rtype: NVMeDiscoveryModeEnum
        """
        return self._nvme_discovery_mode

    @nvme_discovery_mode.setter
    def nvme_discovery_mode(self, nvme_discovery_mode):
        """Sets the nvme_discovery_mode of this NetworkInstance.

         Was added in version 3.0.0.0.  # noqa: E501

        :param nvme_discovery_mode: The nvme_discovery_mode of this NetworkInstance.  # noqa: E501
        :type: NVMeDiscoveryModeEnum
        """

        self._nvme_discovery_mode = nvme_discovery_mode

    @property
    def nvme_cdc_address(self):
        """Gets the nvme_cdc_address of this NetworkInstance.  # noqa: E501

        IP address of the NVMe Centralized Discovery Controller (CDC). This is only applicable if network contains NVMe_TCP among its purposes, and nvme_discovery_mode is set to Manual_CDC.  Was added in version 3.0.0.0.  # noqa: E501

        :return: The nvme_cdc_address of this NetworkInstance.  # noqa: E501
        :rtype: str
        """
        return self._nvme_cdc_address

    @nvme_cdc_address.setter
    def nvme_cdc_address(self, nvme_cdc_address):
        """Sets the nvme_cdc_address of this NetworkInstance.

        IP address of the NVMe Centralized Discovery Controller (CDC). This is only applicable if network contains NVMe_TCP among its purposes, and nvme_discovery_mode is set to Manual_CDC.  Was added in version 3.0.0.0.  # noqa: E501

        :param nvme_cdc_address: The nvme_cdc_address of this NetworkInstance.  # noqa: E501
        :type: str
        """

        self._nvme_cdc_address = nvme_cdc_address

    @property
    def nvme_cdc_port(self):
        """Gets the nvme_cdc_port of this NetworkInstance.  # noqa: E501

        TCP port of the NVMe Centralized Discovery Controller (CDC). This is only applicable if network contains NVMe_TCP among its purposes, and nvme_discovery_mode is set to Manual_CDC. The valid values: 8009 or from 49152 to 49999 or 50100 to 65535.  Was added in version 3.0.0.0.  # noqa: E501

        :return: The nvme_cdc_port of this NetworkInstance.  # noqa: E501
        :rtype: int
        """
        return self._nvme_cdc_port

    @nvme_cdc_port.setter
    def nvme_cdc_port(self, nvme_cdc_port):
        """Sets the nvme_cdc_port of this NetworkInstance.

        TCP port of the NVMe Centralized Discovery Controller (CDC). This is only applicable if network contains NVMe_TCP among its purposes, and nvme_discovery_mode is set to Manual_CDC. The valid values: 8009 or from 49152 to 49999 or 50100 to 65535.  Was added in version 3.0.0.0.  # noqa: E501

        :param nvme_cdc_port: The nvme_cdc_port of this NetworkInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                nvme_cdc_port is not None and nvme_cdc_port > 65535):  # noqa: E501
            raise ValueError("Invalid value for `nvme_cdc_port`, must be a value less than or equal to `65535`")  # noqa: E501
        if (self._configuration.client_side_validation and
                nvme_cdc_port is not None and nvme_cdc_port < 8009):  # noqa: E501
            raise ValueError("Invalid value for `nvme_cdc_port`, must be a value greater than or equal to `8009`")  # noqa: E501

        self._nvme_cdc_port = nvme_cdc_port

    @property
    def type_l10n(self):
        """Gets the type_l10n of this NetworkInstance.  # noqa: E501

        Localized message string corresponding to type  # noqa: E501

        :return: The type_l10n of this NetworkInstance.  # noqa: E501
        :rtype: str
        """
        return self._type_l10n

    @type_l10n.setter
    def type_l10n(self, type_l10n):
        """Sets the type_l10n of this NetworkInstance.

        Localized message string corresponding to type  # noqa: E501

        :param type_l10n: The type_l10n of this NetworkInstance.  # noqa: E501
        :type: str
        """

        self._type_l10n = type_l10n

    @property
    def ip_version_l10n(self):
        """Gets the ip_version_l10n of this NetworkInstance.  # noqa: E501

        Localized message string corresponding to ip_version  # noqa: E501

        :return: The ip_version_l10n of this NetworkInstance.  # noqa: E501
        :rtype: str
        """
        return self._ip_version_l10n

    @ip_version_l10n.setter
    def ip_version_l10n(self, ip_version_l10n):
        """Sets the ip_version_l10n of this NetworkInstance.

        Localized message string corresponding to ip_version  # noqa: E501

        :param ip_version_l10n: The ip_version_l10n of this NetworkInstance.  # noqa: E501
        :type: str
        """

        self._ip_version_l10n = ip_version_l10n

    @property
    def purposes_l10n(self):
        """Gets the purposes_l10n of this NetworkInstance.  # noqa: E501

        Localized message array corresponding to purposes Was added in version 2.0.0.0.  # noqa: E501

        :return: The purposes_l10n of this NetworkInstance.  # noqa: E501
        :rtype: list[str]
        """
        return self._purposes_l10n

    @purposes_l10n.setter
    def purposes_l10n(self, purposes_l10n):
        """Sets the purposes_l10n of this NetworkInstance.

        Localized message array corresponding to purposes Was added in version 2.0.0.0.  # noqa: E501

        :param purposes_l10n: The purposes_l10n of this NetworkInstance.  # noqa: E501
        :type: list[str]
        """

        self._purposes_l10n = purposes_l10n

    @property
    def nvme_discovery_mode_l10n(self):
        """Gets the nvme_discovery_mode_l10n of this NetworkInstance.  # noqa: E501

        Localized message string corresponding to nvme_discovery_mode Was added in version 3.0.0.0.  # noqa: E501

        :return: The nvme_discovery_mode_l10n of this NetworkInstance.  # noqa: E501
        :rtype: str
        """
        return self._nvme_discovery_mode_l10n

    @nvme_discovery_mode_l10n.setter
    def nvme_discovery_mode_l10n(self, nvme_discovery_mode_l10n):
        """Sets the nvme_discovery_mode_l10n of this NetworkInstance.

        Localized message string corresponding to nvme_discovery_mode Was added in version 3.0.0.0.  # noqa: E501

        :param nvme_discovery_mode_l10n: The nvme_discovery_mode_l10n of this NetworkInstance.  # noqa: E501
        :type: str
        """

        self._nvme_discovery_mode_l10n = nvme_discovery_mode_l10n

    @property
    def ip_pool_addresses(self):
        """Gets the ip_pool_addresses of this NetworkInstance.  # noqa: E501

        This is the inverse of the resource type ip_pool_address association.  # noqa: E501

        :return: The ip_pool_addresses of this NetworkInstance.  # noqa: E501
        :rtype: list[IpPoolAddressInstance]
        """
        return self._ip_pool_addresses

    @ip_pool_addresses.setter
    def ip_pool_addresses(self, ip_pool_addresses):
        """Sets the ip_pool_addresses of this NetworkInstance.

        This is the inverse of the resource type ip_pool_address association.  # noqa: E501

        :param ip_pool_addresses: The ip_pool_addresses of this NetworkInstance.  # noqa: E501
        :type: list[IpPoolAddressInstance]
        """

        self._ip_pool_addresses = ip_pool_addresses

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetworkInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NetworkInstance):
            return True

        return self.to_dict() != other.to_dict()
