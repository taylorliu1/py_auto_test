# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class FileSystemCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'size_total': 'int',
        'nas_server_id': 'str',
        'config_type': 'FileSystemConfigTypeEnum',
        'access_policy': 'FileSystemAccessPolicyEnum',
        'locking_policy': 'FileSystemLockingPolicyEnum',
        'folder_rename_policy': 'FileSystemFolderRenamePolicyEnum',
        'is_smb_sync_writes_enabled': 'bool',
        'is_smb_no_notify_enabled': 'bool',
        'is_smb_op_locks_enabled': 'bool',
        'is_smb_notify_on_access_enabled': 'bool',
        'is_smb_notify_on_write_enabled': 'bool',
        'smb_notify_on_change_dir_depth': 'int',
        'is_async_m_time_enabled': 'bool',
        'protection_policy_id': 'str',
        'file_events_publishing_mode': 'FileEventsPublishingModeEnum',
        'flr_attributes': 'FlrCreate',
        'host_io_size': 'FileSystemHostIoSizeEnum'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'size_total': 'size_total',
        'nas_server_id': 'nas_server_id',
        'config_type': 'config_type',
        'access_policy': 'access_policy',
        'locking_policy': 'locking_policy',
        'folder_rename_policy': 'folder_rename_policy',
        'is_smb_sync_writes_enabled': 'is_smb_sync_writes_enabled',
        'is_smb_no_notify_enabled': 'is_smb_no_notify_enabled',
        'is_smb_op_locks_enabled': 'is_smb_op_locks_enabled',
        'is_smb_notify_on_access_enabled': 'is_smb_notify_on_access_enabled',
        'is_smb_notify_on_write_enabled': 'is_smb_notify_on_write_enabled',
        'smb_notify_on_change_dir_depth': 'smb_notify_on_change_dir_depth',
        'is_async_m_time_enabled': 'is_async_MTime_enabled',
        'protection_policy_id': 'protection_policy_id',
        'file_events_publishing_mode': 'file_events_publishing_mode',
        'flr_attributes': 'flr_attributes',
        'host_io_size': 'host_io_size'
    }

    def __init__(self, name=None, description=None, size_total=None, nas_server_id=None, config_type=None, access_policy=None, locking_policy=None, folder_rename_policy=None, is_smb_sync_writes_enabled=False, is_smb_no_notify_enabled=False, is_smb_op_locks_enabled=True, is_smb_notify_on_access_enabled=False, is_smb_notify_on_write_enabled=False, smb_notify_on_change_dir_depth=None, is_async_m_time_enabled=False, protection_policy_id=None, file_events_publishing_mode=None, flr_attributes=None, host_io_size=None, _configuration=None):  # noqa: E501
        """FileSystemCreate - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._description = None
        self._size_total = None
        self._nas_server_id = None
        self._config_type = None
        self._access_policy = None
        self._locking_policy = None
        self._folder_rename_policy = None
        self._is_smb_sync_writes_enabled = None
        self._is_smb_no_notify_enabled = None
        self._is_smb_op_locks_enabled = None
        self._is_smb_notify_on_access_enabled = None
        self._is_smb_notify_on_write_enabled = None
        self._smb_notify_on_change_dir_depth = None
        self._is_async_m_time_enabled = None
        self._protection_policy_id = None
        self._file_events_publishing_mode = None
        self._flr_attributes = None
        self._host_io_size = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        self.size_total = size_total
        self.nas_server_id = nas_server_id
        if config_type is not None:
            self.config_type = config_type
        if access_policy is not None:
            self.access_policy = access_policy
        if locking_policy is not None:
            self.locking_policy = locking_policy
        if folder_rename_policy is not None:
            self.folder_rename_policy = folder_rename_policy
        if is_smb_sync_writes_enabled is not None:
            self.is_smb_sync_writes_enabled = is_smb_sync_writes_enabled
        if is_smb_no_notify_enabled is not None:
            self.is_smb_no_notify_enabled = is_smb_no_notify_enabled
        if is_smb_op_locks_enabled is not None:
            self.is_smb_op_locks_enabled = is_smb_op_locks_enabled
        if is_smb_notify_on_access_enabled is not None:
            self.is_smb_notify_on_access_enabled = is_smb_notify_on_access_enabled
        if is_smb_notify_on_write_enabled is not None:
            self.is_smb_notify_on_write_enabled = is_smb_notify_on_write_enabled
        if smb_notify_on_change_dir_depth is not None:
            self.smb_notify_on_change_dir_depth = smb_notify_on_change_dir_depth
        if is_async_m_time_enabled is not None:
            self.is_async_m_time_enabled = is_async_m_time_enabled
        if protection_policy_id is not None:
            self.protection_policy_id = protection_policy_id
        if file_events_publishing_mode is not None:
            self.file_events_publishing_mode = file_events_publishing_mode
        if flr_attributes is not None:
            self.flr_attributes = flr_attributes
        if host_io_size is not None:
            self.host_io_size = host_io_size

    @property
    def name(self):
        """Gets the name of this FileSystemCreate.  # noqa: E501

        Name of the file system. (255 UTF-8 characters).  # noqa: E501

        :return: The name of this FileSystemCreate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FileSystemCreate.

        Name of the file system. (255 UTF-8 characters).  # noqa: E501

        :param name: The name of this FileSystemCreate.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 255):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this FileSystemCreate.  # noqa: E501

        File system description. (255 UTF-8 characters).  # noqa: E501

        :return: The description of this FileSystemCreate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FileSystemCreate.

        File system description. (255 UTF-8 characters).  # noqa: E501

        :param description: The description of this FileSystemCreate.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                description is not None and len(description) > 255):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                description is not None and len(description) < 0):
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")  # noqa: E501

        self._description = description

    @property
    def size_total(self):
        """Gets the size_total of this FileSystemCreate.  # noqa: E501

        Size that the file system presents to the host or end user. (Bytes) Value is always rounded up to next MB.   # noqa: E501

        :return: The size_total of this FileSystemCreate.  # noqa: E501
        :rtype: int
        """
        return self._size_total

    @size_total.setter
    def size_total(self, size_total):
        """Sets the size_total of this FileSystemCreate.

        Size that the file system presents to the host or end user. (Bytes) Value is always rounded up to next MB.   # noqa: E501

        :param size_total: The size_total of this FileSystemCreate.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and size_total is None:
            raise ValueError("Invalid value for `size_total`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                size_total is not None and size_total > 281474976710656):  # noqa: E501
            raise ValueError("Invalid value for `size_total`, must be a value less than or equal to `281474976710656`")  # noqa: E501
        if (self._configuration.client_side_validation and
                size_total is not None and size_total < 3221225472):  # noqa: E501
            raise ValueError("Invalid value for `size_total`, must be a value greater than or equal to `3221225472`")  # noqa: E501

        self._size_total = size_total

    @property
    def nas_server_id(self):
        """Gets the nas_server_id of this FileSystemCreate.  # noqa: E501

        Unique identifier of the NAS Server on which the file system is mounted. name:{name} can be used instead of {id}. For example:'nas_server_id':'name:nas_server_name'  # noqa: E501

        :return: The nas_server_id of this FileSystemCreate.  # noqa: E501
        :rtype: str
        """
        return self._nas_server_id

    @nas_server_id.setter
    def nas_server_id(self, nas_server_id):
        """Sets the nas_server_id of this FileSystemCreate.

        Unique identifier of the NAS Server on which the file system is mounted. name:{name} can be used instead of {id}. For example:'nas_server_id':'name:nas_server_name'  # noqa: E501

        :param nas_server_id: The nas_server_id of this FileSystemCreate.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and nas_server_id is None:
            raise ValueError("Invalid value for `nas_server_id`, must not be `None`")  # noqa: E501

        self._nas_server_id = nas_server_id

    @property
    def config_type(self):
        """Gets the config_type of this FileSystemCreate.  # noqa: E501

         Was added in version 3.0.0.0.  # noqa: E501

        :return: The config_type of this FileSystemCreate.  # noqa: E501
        :rtype: FileSystemConfigTypeEnum
        """
        return self._config_type

    @config_type.setter
    def config_type(self, config_type):
        """Sets the config_type of this FileSystemCreate.

         Was added in version 3.0.0.0.  # noqa: E501

        :param config_type: The config_type of this FileSystemCreate.  # noqa: E501
        :type: FileSystemConfigTypeEnum
        """

        self._config_type = config_type

    @property
    def access_policy(self):
        """Gets the access_policy of this FileSystemCreate.  # noqa: E501


        :return: The access_policy of this FileSystemCreate.  # noqa: E501
        :rtype: FileSystemAccessPolicyEnum
        """
        return self._access_policy

    @access_policy.setter
    def access_policy(self, access_policy):
        """Sets the access_policy of this FileSystemCreate.


        :param access_policy: The access_policy of this FileSystemCreate.  # noqa: E501
        :type: FileSystemAccessPolicyEnum
        """

        self._access_policy = access_policy

    @property
    def locking_policy(self):
        """Gets the locking_policy of this FileSystemCreate.  # noqa: E501


        :return: The locking_policy of this FileSystemCreate.  # noqa: E501
        :rtype: FileSystemLockingPolicyEnum
        """
        return self._locking_policy

    @locking_policy.setter
    def locking_policy(self, locking_policy):
        """Sets the locking_policy of this FileSystemCreate.


        :param locking_policy: The locking_policy of this FileSystemCreate.  # noqa: E501
        :type: FileSystemLockingPolicyEnum
        """

        self._locking_policy = locking_policy

    @property
    def folder_rename_policy(self):
        """Gets the folder_rename_policy of this FileSystemCreate.  # noqa: E501


        :return: The folder_rename_policy of this FileSystemCreate.  # noqa: E501
        :rtype: FileSystemFolderRenamePolicyEnum
        """
        return self._folder_rename_policy

    @folder_rename_policy.setter
    def folder_rename_policy(self, folder_rename_policy):
        """Sets the folder_rename_policy of this FileSystemCreate.


        :param folder_rename_policy: The folder_rename_policy of this FileSystemCreate.  # noqa: E501
        :type: FileSystemFolderRenamePolicyEnum
        """

        self._folder_rename_policy = folder_rename_policy

    @property
    def is_smb_sync_writes_enabled(self):
        """Gets the is_smb_sync_writes_enabled of this FileSystemCreate.  # noqa: E501

        Indicates whether the synchronous writes option is enabled on the file system. Cannot change value from default for VMware Config Type. Values are: * true - Synchronous writes option is enabled on the file system. * false - Synchronous writes option is disabled on the file system.   # noqa: E501

        :return: The is_smb_sync_writes_enabled of this FileSystemCreate.  # noqa: E501
        :rtype: bool
        """
        return self._is_smb_sync_writes_enabled

    @is_smb_sync_writes_enabled.setter
    def is_smb_sync_writes_enabled(self, is_smb_sync_writes_enabled):
        """Sets the is_smb_sync_writes_enabled of this FileSystemCreate.

        Indicates whether the synchronous writes option is enabled on the file system. Cannot change value from default for VMware Config Type. Values are: * true - Synchronous writes option is enabled on the file system. * false - Synchronous writes option is disabled on the file system.   # noqa: E501

        :param is_smb_sync_writes_enabled: The is_smb_sync_writes_enabled of this FileSystemCreate.  # noqa: E501
        :type: bool
        """

        self._is_smb_sync_writes_enabled = is_smb_sync_writes_enabled

    @property
    def is_smb_no_notify_enabled(self):
        """Gets the is_smb_no_notify_enabled of this FileSystemCreate.  # noqa: E501

        Indicates whether notifications of changes to directory file structure are enabled. * true - Change directory notifications are disabled. * false - Change directory notifications are enabled.   # noqa: E501

        :return: The is_smb_no_notify_enabled of this FileSystemCreate.  # noqa: E501
        :rtype: bool
        """
        return self._is_smb_no_notify_enabled

    @is_smb_no_notify_enabled.setter
    def is_smb_no_notify_enabled(self, is_smb_no_notify_enabled):
        """Sets the is_smb_no_notify_enabled of this FileSystemCreate.

        Indicates whether notifications of changes to directory file structure are enabled. * true - Change directory notifications are disabled. * false - Change directory notifications are enabled.   # noqa: E501

        :param is_smb_no_notify_enabled: The is_smb_no_notify_enabled of this FileSystemCreate.  # noqa: E501
        :type: bool
        """

        self._is_smb_no_notify_enabled = is_smb_no_notify_enabled

    @property
    def is_smb_op_locks_enabled(self):
        """Gets the is_smb_op_locks_enabled of this FileSystemCreate.  # noqa: E501

        Indicates whether opportunistic file locking is enabled on the file system. Cannot change value from default for VMware Config Type. Values are: * true - Opportunistic file locking is enabled on the file system. * false - Opportunistic file locking is disabled on the file system.   # noqa: E501

        :return: The is_smb_op_locks_enabled of this FileSystemCreate.  # noqa: E501
        :rtype: bool
        """
        return self._is_smb_op_locks_enabled

    @is_smb_op_locks_enabled.setter
    def is_smb_op_locks_enabled(self, is_smb_op_locks_enabled):
        """Sets the is_smb_op_locks_enabled of this FileSystemCreate.

        Indicates whether opportunistic file locking is enabled on the file system. Cannot change value from default for VMware Config Type. Values are: * true - Opportunistic file locking is enabled on the file system. * false - Opportunistic file locking is disabled on the file system.   # noqa: E501

        :param is_smb_op_locks_enabled: The is_smb_op_locks_enabled of this FileSystemCreate.  # noqa: E501
        :type: bool
        """

        self._is_smb_op_locks_enabled = is_smb_op_locks_enabled

    @property
    def is_smb_notify_on_access_enabled(self):
        """Gets the is_smb_notify_on_access_enabled of this FileSystemCreate.  # noqa: E501

        Indicates whether file access notifications are enabled on the file system. Cannot change value from default for VMware Config Type. Values are: * true - File access notifications are enabled on the file system. * false - File access notifications are disabled on the file system.   # noqa: E501

        :return: The is_smb_notify_on_access_enabled of this FileSystemCreate.  # noqa: E501
        :rtype: bool
        """
        return self._is_smb_notify_on_access_enabled

    @is_smb_notify_on_access_enabled.setter
    def is_smb_notify_on_access_enabled(self, is_smb_notify_on_access_enabled):
        """Sets the is_smb_notify_on_access_enabled of this FileSystemCreate.

        Indicates whether file access notifications are enabled on the file system. Cannot change value from default for VMware Config Type. Values are: * true - File access notifications are enabled on the file system. * false - File access notifications are disabled on the file system.   # noqa: E501

        :param is_smb_notify_on_access_enabled: The is_smb_notify_on_access_enabled of this FileSystemCreate.  # noqa: E501
        :type: bool
        """

        self._is_smb_notify_on_access_enabled = is_smb_notify_on_access_enabled

    @property
    def is_smb_notify_on_write_enabled(self):
        """Gets the is_smb_notify_on_write_enabled of this FileSystemCreate.  # noqa: E501

        Indicates whether file writes notifications are enabled on the file system. Cannot change value from default for VMware Config Type. Values are: * true - File writes notifications are enabled on the file system. * false - File writes notifications are disabled on the file system.   # noqa: E501

        :return: The is_smb_notify_on_write_enabled of this FileSystemCreate.  # noqa: E501
        :rtype: bool
        """
        return self._is_smb_notify_on_write_enabled

    @is_smb_notify_on_write_enabled.setter
    def is_smb_notify_on_write_enabled(self, is_smb_notify_on_write_enabled):
        """Sets the is_smb_notify_on_write_enabled of this FileSystemCreate.

        Indicates whether file writes notifications are enabled on the file system. Cannot change value from default for VMware Config Type. Values are: * true - File writes notifications are enabled on the file system. * false - File writes notifications are disabled on the file system.   # noqa: E501

        :param is_smb_notify_on_write_enabled: The is_smb_notify_on_write_enabled of this FileSystemCreate.  # noqa: E501
        :type: bool
        """

        self._is_smb_notify_on_write_enabled = is_smb_notify_on_write_enabled

    @property
    def smb_notify_on_change_dir_depth(self):
        """Gets the smb_notify_on_change_dir_depth of this FileSystemCreate.  # noqa: E501

        Lowest directory level to which the enabled notifications apply, if any. Cannot change value from default for VMware Config Type.  # noqa: E501

        :return: The smb_notify_on_change_dir_depth of this FileSystemCreate.  # noqa: E501
        :rtype: int
        """
        return self._smb_notify_on_change_dir_depth

    @smb_notify_on_change_dir_depth.setter
    def smb_notify_on_change_dir_depth(self, smb_notify_on_change_dir_depth):
        """Sets the smb_notify_on_change_dir_depth of this FileSystemCreate.

        Lowest directory level to which the enabled notifications apply, if any. Cannot change value from default for VMware Config Type.  # noqa: E501

        :param smb_notify_on_change_dir_depth: The smb_notify_on_change_dir_depth of this FileSystemCreate.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                smb_notify_on_change_dir_depth is not None and smb_notify_on_change_dir_depth > 512):  # noqa: E501
            raise ValueError("Invalid value for `smb_notify_on_change_dir_depth`, must be a value less than or equal to `512`")  # noqa: E501
        if (self._configuration.client_side_validation and
                smb_notify_on_change_dir_depth is not None and smb_notify_on_change_dir_depth < 1):  # noqa: E501
            raise ValueError("Invalid value for `smb_notify_on_change_dir_depth`, must be a value greater than or equal to `1`")  # noqa: E501

        self._smb_notify_on_change_dir_depth = smb_notify_on_change_dir_depth

    @property
    def is_async_m_time_enabled(self):
        """Gets the is_async_m_time_enabled of this FileSystemCreate.  # noqa: E501

        Indicates whether asynchronous MTIME is enabled on the file system or protocol snaps that are mounted writeable. Values are: * true - Asynchronous MTIME is enabled on the file system. * false - Asynchronous MTIME is disabled on the file system.   # noqa: E501

        :return: The is_async_m_time_enabled of this FileSystemCreate.  # noqa: E501
        :rtype: bool
        """
        return self._is_async_m_time_enabled

    @is_async_m_time_enabled.setter
    def is_async_m_time_enabled(self, is_async_m_time_enabled):
        """Sets the is_async_m_time_enabled of this FileSystemCreate.

        Indicates whether asynchronous MTIME is enabled on the file system or protocol snaps that are mounted writeable. Values are: * true - Asynchronous MTIME is enabled on the file system. * false - Asynchronous MTIME is disabled on the file system.   # noqa: E501

        :param is_async_m_time_enabled: The is_async_m_time_enabled of this FileSystemCreate.  # noqa: E501
        :type: bool
        """

        self._is_async_m_time_enabled = is_async_m_time_enabled

    @property
    def protection_policy_id(self):
        """Gets the protection_policy_id of this FileSystemCreate.  # noqa: E501

        Unique identifier of the protection policy applied to the file system.  # noqa: E501

        :return: The protection_policy_id of this FileSystemCreate.  # noqa: E501
        :rtype: str
        """
        return self._protection_policy_id

    @protection_policy_id.setter
    def protection_policy_id(self, protection_policy_id):
        """Sets the protection_policy_id of this FileSystemCreate.

        Unique identifier of the protection policy applied to the file system.  # noqa: E501

        :param protection_policy_id: The protection_policy_id of this FileSystemCreate.  # noqa: E501
        :type: str
        """

        self._protection_policy_id = protection_policy_id

    @property
    def file_events_publishing_mode(self):
        """Gets the file_events_publishing_mode of this FileSystemCreate.  # noqa: E501

         Was added in version 3.0.0.0.  # noqa: E501

        :return: The file_events_publishing_mode of this FileSystemCreate.  # noqa: E501
        :rtype: FileEventsPublishingModeEnum
        """
        return self._file_events_publishing_mode

    @file_events_publishing_mode.setter
    def file_events_publishing_mode(self, file_events_publishing_mode):
        """Sets the file_events_publishing_mode of this FileSystemCreate.

         Was added in version 3.0.0.0.  # noqa: E501

        :param file_events_publishing_mode: The file_events_publishing_mode of this FileSystemCreate.  # noqa: E501
        :type: FileEventsPublishingModeEnum
        """

        self._file_events_publishing_mode = file_events_publishing_mode

    @property
    def flr_attributes(self):
        """Gets the flr_attributes of this FileSystemCreate.  # noqa: E501

         Was added in version 3.0.0.0.  # noqa: E501

        :return: The flr_attributes of this FileSystemCreate.  # noqa: E501
        :rtype: FlrCreate
        """
        return self._flr_attributes

    @flr_attributes.setter
    def flr_attributes(self, flr_attributes):
        """Sets the flr_attributes of this FileSystemCreate.

         Was added in version 3.0.0.0.  # noqa: E501

        :param flr_attributes: The flr_attributes of this FileSystemCreate.  # noqa: E501
        :type: FlrCreate
        """

        self._flr_attributes = flr_attributes

    @property
    def host_io_size(self):
        """Gets the host_io_size of this FileSystemCreate.  # noqa: E501

         Was added in version 3.0.0.0.  # noqa: E501

        :return: The host_io_size of this FileSystemCreate.  # noqa: E501
        :rtype: FileSystemHostIoSizeEnum
        """
        return self._host_io_size

    @host_io_size.setter
    def host_io_size(self, host_io_size):
        """Sets the host_io_size of this FileSystemCreate.

         Was added in version 3.0.0.0.  # noqa: E501

        :param host_io_size: The host_io_size of this FileSystemCreate.  # noqa: E501
        :type: FileSystemHostIoSizeEnum
        """

        self._host_io_size = host_io_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileSystemCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileSystemCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FileSystemCreate):
            return True

        return self.to_dict() != other.to_dict()
