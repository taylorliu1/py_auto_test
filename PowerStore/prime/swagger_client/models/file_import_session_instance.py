# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class FileImportSessionInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'remote_system_id': 'str',
        'source_resource_id': 'str',
        'destination_resource_id': 'str',
        'destination_resource_type': 'FileImportDestinationResourceTypeEnum',
        'import_file_interface_id': 'str',
        'nas_server_id': 'str',
        'last_update_timestamp': 'datetime',
        'scheduled_timestamp': 'datetime',
        'state': 'FileImportSessionStateEnum',
        'current_operation': 'FileImportSessionCurrentOperationEnum',
        'current_operation_progress_percentage': 'int',
        'estimated_completion_timestamp': 'int',
        'protection_policy_id': 'str',
        'source_smb_admin_username': 'str',
        'source_dhsm_username': 'str',
        'error': 'str',
        'destination_resource_type_l10n': 'str',
        'state_l10n': 'str',
        'current_operation_l10n': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'remote_system_id': 'remote_system_id',
        'source_resource_id': 'source_resource_id',
        'destination_resource_id': 'destination_resource_id',
        'destination_resource_type': 'destination_resource_type',
        'import_file_interface_id': 'import_file_interface_id',
        'nas_server_id': 'nas_server_id',
        'last_update_timestamp': 'last_update_timestamp',
        'scheduled_timestamp': 'scheduled_timestamp',
        'state': 'state',
        'current_operation': 'current_operation',
        'current_operation_progress_percentage': 'current_operation_progress_percentage',
        'estimated_completion_timestamp': 'estimated_completion_timestamp',
        'protection_policy_id': 'protection_policy_id',
        'source_smb_admin_username': 'source_smb_admin_username',
        'source_dhsm_username': 'source_dhsm_username',
        'error': 'error',
        'destination_resource_type_l10n': 'destination_resource_type_l10n',
        'state_l10n': 'state_l10n',
        'current_operation_l10n': 'current_operation_l10n'
    }

    def __init__(self, id=None, name=None, description=None, remote_system_id=None, source_resource_id=None, destination_resource_id=None, destination_resource_type=None, import_file_interface_id=None, nas_server_id=None, last_update_timestamp=None, scheduled_timestamp=None, state=None, current_operation=None, current_operation_progress_percentage=None, estimated_completion_timestamp=None, protection_policy_id=None, source_smb_admin_username=None, source_dhsm_username=None, error=None, destination_resource_type_l10n=None, state_l10n=None, current_operation_l10n=None, _configuration=None):  # noqa: E501
        """FileImportSessionInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._description = None
        self._remote_system_id = None
        self._source_resource_id = None
        self._destination_resource_id = None
        self._destination_resource_type = None
        self._import_file_interface_id = None
        self._nas_server_id = None
        self._last_update_timestamp = None
        self._scheduled_timestamp = None
        self._state = None
        self._current_operation = None
        self._current_operation_progress_percentage = None
        self._estimated_completion_timestamp = None
        self._protection_policy_id = None
        self._source_smb_admin_username = None
        self._source_dhsm_username = None
        self._error = None
        self._destination_resource_type_l10n = None
        self._state_l10n = None
        self._current_operation_l10n = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if remote_system_id is not None:
            self.remote_system_id = remote_system_id
        if source_resource_id is not None:
            self.source_resource_id = source_resource_id
        if destination_resource_id is not None:
            self.destination_resource_id = destination_resource_id
        if destination_resource_type is not None:
            self.destination_resource_type = destination_resource_type
        if import_file_interface_id is not None:
            self.import_file_interface_id = import_file_interface_id
        if nas_server_id is not None:
            self.nas_server_id = nas_server_id
        if last_update_timestamp is not None:
            self.last_update_timestamp = last_update_timestamp
        if scheduled_timestamp is not None:
            self.scheduled_timestamp = scheduled_timestamp
        if state is not None:
            self.state = state
        if current_operation is not None:
            self.current_operation = current_operation
        if current_operation_progress_percentage is not None:
            self.current_operation_progress_percentage = current_operation_progress_percentage
        if estimated_completion_timestamp is not None:
            self.estimated_completion_timestamp = estimated_completion_timestamp
        if protection_policy_id is not None:
            self.protection_policy_id = protection_policy_id
        if source_smb_admin_username is not None:
            self.source_smb_admin_username = source_smb_admin_username
        if source_dhsm_username is not None:
            self.source_dhsm_username = source_dhsm_username
        if error is not None:
            self.error = error
        if destination_resource_type_l10n is not None:
            self.destination_resource_type_l10n = destination_resource_type_l10n
        if state_l10n is not None:
            self.state_l10n = state_l10n
        if current_operation_l10n is not None:
            self.current_operation_l10n = current_operation_l10n

    @property
    def id(self):
        """Gets the id of this FileImportSessionInstance.  # noqa: E501

        Unique identifier of the file import session.  # noqa: E501

        :return: The id of this FileImportSessionInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FileImportSessionInstance.

        Unique identifier of the file import session.  # noqa: E501

        :param id: The id of this FileImportSessionInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this FileImportSessionInstance.  # noqa: E501

        User-specified name of the file import session.  This property supports case-insensitive filtering.  # noqa: E501

        :return: The name of this FileImportSessionInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FileImportSessionInstance.

        User-specified name of the file import session.  This property supports case-insensitive filtering.  # noqa: E501

        :param name: The name of this FileImportSessionInstance.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this FileImportSessionInstance.  # noqa: E501

        User-specified description of the file import session.  # noqa: E501

        :return: The description of this FileImportSessionInstance.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FileImportSessionInstance.

        User-specified description of the file import session.  # noqa: E501

        :param description: The description of this FileImportSessionInstance.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def remote_system_id(self):
        """Gets the remote_system_id of this FileImportSessionInstance.  # noqa: E501

        Unique identifer of the storage system that contains the source NAS Server to be imported.  # noqa: E501

        :return: The remote_system_id of this FileImportSessionInstance.  # noqa: E501
        :rtype: str
        """
        return self._remote_system_id

    @remote_system_id.setter
    def remote_system_id(self, remote_system_id):
        """Sets the remote_system_id of this FileImportSessionInstance.

        Unique identifer of the storage system that contains the source NAS Server to be imported.  # noqa: E501

        :param remote_system_id: The remote_system_id of this FileImportSessionInstance.  # noqa: E501
        :type: str
        """

        self._remote_system_id = remote_system_id

    @property
    def source_resource_id(self):
        """Gets the source_resource_id of this FileImportSessionInstance.  # noqa: E501

        Unique identifier of the source NAS server which is being imported by the file import session.  # noqa: E501

        :return: The source_resource_id of this FileImportSessionInstance.  # noqa: E501
        :rtype: str
        """
        return self._source_resource_id

    @source_resource_id.setter
    def source_resource_id(self, source_resource_id):
        """Sets the source_resource_id of this FileImportSessionInstance.

        Unique identifier of the source NAS server which is being imported by the file import session.  # noqa: E501

        :param source_resource_id: The source_resource_id of this FileImportSessionInstance.  # noqa: E501
        :type: str
        """

        self._source_resource_id = source_resource_id

    @property
    def destination_resource_id(self):
        """Gets the destination_resource_id of this FileImportSessionInstance.  # noqa: E501

        Unique identifier of the destination NAS server or filesystem created as part of the import process.  # noqa: E501

        :return: The destination_resource_id of this FileImportSessionInstance.  # noqa: E501
        :rtype: str
        """
        return self._destination_resource_id

    @destination_resource_id.setter
    def destination_resource_id(self, destination_resource_id):
        """Sets the destination_resource_id of this FileImportSessionInstance.

        Unique identifier of the destination NAS server or filesystem created as part of the import process.  # noqa: E501

        :param destination_resource_id: The destination_resource_id of this FileImportSessionInstance.  # noqa: E501
        :type: str
        """

        self._destination_resource_id = destination_resource_id

    @property
    def destination_resource_type(self):
        """Gets the destination_resource_type of this FileImportSessionInstance.  # noqa: E501


        :return: The destination_resource_type of this FileImportSessionInstance.  # noqa: E501
        :rtype: FileImportDestinationResourceTypeEnum
        """
        return self._destination_resource_type

    @destination_resource_type.setter
    def destination_resource_type(self, destination_resource_type):
        """Sets the destination_resource_type of this FileImportSessionInstance.


        :param destination_resource_type: The destination_resource_type of this FileImportSessionInstance.  # noqa: E501
        :type: FileImportDestinationResourceTypeEnum
        """

        self._destination_resource_type = destination_resource_type

    @property
    def import_file_interface_id(self):
        """Gets the import_file_interface_id of this FileImportSessionInstance.  # noqa: E501

        Unique identifier of the destination file interface used for importing data from the source system.  # noqa: E501

        :return: The import_file_interface_id of this FileImportSessionInstance.  # noqa: E501
        :rtype: str
        """
        return self._import_file_interface_id

    @import_file_interface_id.setter
    def import_file_interface_id(self, import_file_interface_id):
        """Sets the import_file_interface_id of this FileImportSessionInstance.

        Unique identifier of the destination file interface used for importing data from the source system.  # noqa: E501

        :param import_file_interface_id: The import_file_interface_id of this FileImportSessionInstance.  # noqa: E501
        :type: str
        """

        self._import_file_interface_id = import_file_interface_id

    @property
    def nas_server_id(self):
        """Gets the nas_server_id of this FileImportSessionInstance.  # noqa: E501

        Unique identifier of the destination NAS server to which the destination filesystem will be added.  # noqa: E501

        :return: The nas_server_id of this FileImportSessionInstance.  # noqa: E501
        :rtype: str
        """
        return self._nas_server_id

    @nas_server_id.setter
    def nas_server_id(self, nas_server_id):
        """Sets the nas_server_id of this FileImportSessionInstance.

        Unique identifier of the destination NAS server to which the destination filesystem will be added.  # noqa: E501

        :param nas_server_id: The nas_server_id of this FileImportSessionInstance.  # noqa: E501
        :type: str
        """

        self._nas_server_id = nas_server_id

    @property
    def last_update_timestamp(self):
        """Gets the last_update_timestamp of this FileImportSessionInstance.  # noqa: E501

        The Date and time when the import session has been updated. This date is sepcified in ISO 8601 format with time expressed in UTC.  # noqa: E501

        :return: The last_update_timestamp of this FileImportSessionInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update_timestamp

    @last_update_timestamp.setter
    def last_update_timestamp(self, last_update_timestamp):
        """Sets the last_update_timestamp of this FileImportSessionInstance.

        The Date and time when the import session has been updated. This date is sepcified in ISO 8601 format with time expressed in UTC.  # noqa: E501

        :param last_update_timestamp: The last_update_timestamp of this FileImportSessionInstance.  # noqa: E501
        :type: datetime
        """

        self._last_update_timestamp = last_update_timestamp

    @property
    def scheduled_timestamp(self):
        """Gets the scheduled_timestamp of this FileImportSessionInstance.  # noqa: E501

        Indicates the Date and time at which the file import session is scheduled to run. The date is specified in ISO 8601 format with the time expressed in UTC format.  # noqa: E501

        :return: The scheduled_timestamp of this FileImportSessionInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._scheduled_timestamp

    @scheduled_timestamp.setter
    def scheduled_timestamp(self, scheduled_timestamp):
        """Sets the scheduled_timestamp of this FileImportSessionInstance.

        Indicates the Date and time at which the file import session is scheduled to run. The date is specified in ISO 8601 format with the time expressed in UTC format.  # noqa: E501

        :param scheduled_timestamp: The scheduled_timestamp of this FileImportSessionInstance.  # noqa: E501
        :type: datetime
        """

        self._scheduled_timestamp = scheduled_timestamp

    @property
    def state(self):
        """Gets the state of this FileImportSessionInstance.  # noqa: E501


        :return: The state of this FileImportSessionInstance.  # noqa: E501
        :rtype: FileImportSessionStateEnum
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this FileImportSessionInstance.


        :param state: The state of this FileImportSessionInstance.  # noqa: E501
        :type: FileImportSessionStateEnum
        """

        self._state = state

    @property
    def current_operation(self):
        """Gets the current_operation of this FileImportSessionInstance.  # noqa: E501


        :return: The current_operation of this FileImportSessionInstance.  # noqa: E501
        :rtype: FileImportSessionCurrentOperationEnum
        """
        return self._current_operation

    @current_operation.setter
    def current_operation(self, current_operation):
        """Sets the current_operation of this FileImportSessionInstance.


        :param current_operation: The current_operation of this FileImportSessionInstance.  # noqa: E501
        :type: FileImportSessionCurrentOperationEnum
        """

        self._current_operation = current_operation

    @property
    def current_operation_progress_percentage(self):
        """Gets the current_operation_progress_percentage of this FileImportSessionInstance.  # noqa: E501

        When the import is in the 'Initial_Copy_In_Progress' or 'Incremental_Copy_In_Progress' state, this value indicates the completion percent for the import. Before the import is in the copy state, this value is 0. After the cutover or if there is a failure, this value is null.  # noqa: E501

        :return: The current_operation_progress_percentage of this FileImportSessionInstance.  # noqa: E501
        :rtype: int
        """
        return self._current_operation_progress_percentage

    @current_operation_progress_percentage.setter
    def current_operation_progress_percentage(self, current_operation_progress_percentage):
        """Sets the current_operation_progress_percentage of this FileImportSessionInstance.

        When the import is in the 'Initial_Copy_In_Progress' or 'Incremental_Copy_In_Progress' state, this value indicates the completion percent for the import. Before the import is in the copy state, this value is 0. After the cutover or if there is a failure, this value is null.  # noqa: E501

        :param current_operation_progress_percentage: The current_operation_progress_percentage of this FileImportSessionInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                current_operation_progress_percentage is not None and current_operation_progress_percentage > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `current_operation_progress_percentage`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                current_operation_progress_percentage is not None and current_operation_progress_percentage < 0):  # noqa: E501
            raise ValueError("Invalid value for `current_operation_progress_percentage`, must be a value greater than or equal to `0`")  # noqa: E501

        self._current_operation_progress_percentage = current_operation_progress_percentage

    @property
    def estimated_completion_timestamp(self):
        """Gets the estimated_completion_timestamp of this FileImportSessionInstance.  # noqa: E501

        When the import is in the 'Initial_Copy_In_Progress' or 'Incremental_Copy_In_Progress' state, this value indicates the estimated time at which the data copy will complete. Before the import is in the copy state, the value is null.  # noqa: E501

        :return: The estimated_completion_timestamp of this FileImportSessionInstance.  # noqa: E501
        :rtype: int
        """
        return self._estimated_completion_timestamp

    @estimated_completion_timestamp.setter
    def estimated_completion_timestamp(self, estimated_completion_timestamp):
        """Sets the estimated_completion_timestamp of this FileImportSessionInstance.

        When the import is in the 'Initial_Copy_In_Progress' or 'Incremental_Copy_In_Progress' state, this value indicates the estimated time at which the data copy will complete. Before the import is in the copy state, the value is null.  # noqa: E501

        :param estimated_completion_timestamp: The estimated_completion_timestamp of this FileImportSessionInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                estimated_completion_timestamp is not None and estimated_completion_timestamp > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `estimated_completion_timestamp`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                estimated_completion_timestamp is not None and estimated_completion_timestamp < 0):  # noqa: E501
            raise ValueError("Invalid value for `estimated_completion_timestamp`, must be a value greater than or equal to `0`")  # noqa: E501

        self._estimated_completion_timestamp = estimated_completion_timestamp

    @property
    def protection_policy_id(self):
        """Gets the protection_policy_id of this FileImportSessionInstance.  # noqa: E501

        Unique identifier of the local protection policy in the PowerStore storage system that will be applied on an imported destination NAS server or filesystem after commit. Only snapshot policies are supported in an import. Once the import completes, you can add a replication policy.  # noqa: E501

        :return: The protection_policy_id of this FileImportSessionInstance.  # noqa: E501
        :rtype: str
        """
        return self._protection_policy_id

    @protection_policy_id.setter
    def protection_policy_id(self, protection_policy_id):
        """Sets the protection_policy_id of this FileImportSessionInstance.

        Unique identifier of the local protection policy in the PowerStore storage system that will be applied on an imported destination NAS server or filesystem after commit. Only snapshot policies are supported in an import. Once the import completes, you can add a replication policy.  # noqa: E501

        :param protection_policy_id: The protection_policy_id of this FileImportSessionInstance.  # noqa: E501
        :type: str
        """

        self._protection_policy_id = protection_policy_id

    @property
    def source_smb_admin_username(self):
        """Gets the source_smb_admin_username of this FileImportSessionInstance.  # noqa: E501

        User name for authentication to SMB Server on the source NAS Server with administrator previlege.  # noqa: E501

        :return: The source_smb_admin_username of this FileImportSessionInstance.  # noqa: E501
        :rtype: str
        """
        return self._source_smb_admin_username

    @source_smb_admin_username.setter
    def source_smb_admin_username(self, source_smb_admin_username):
        """Sets the source_smb_admin_username of this FileImportSessionInstance.

        User name for authentication to SMB Server on the source NAS Server with administrator previlege.  # noqa: E501

        :param source_smb_admin_username: The source_smb_admin_username of this FileImportSessionInstance.  # noqa: E501
        :type: str
        """

        self._source_smb_admin_username = source_smb_admin_username

    @property
    def source_dhsm_username(self):
        """Gets the source_dhsm_username of this FileImportSessionInstance.  # noqa: E501

        The username for authentication to DHSM Server on the source NAS Server required for importing FLR filesystems.  # noqa: E501

        :return: The source_dhsm_username of this FileImportSessionInstance.  # noqa: E501
        :rtype: str
        """
        return self._source_dhsm_username

    @source_dhsm_username.setter
    def source_dhsm_username(self, source_dhsm_username):
        """Sets the source_dhsm_username of this FileImportSessionInstance.

        The username for authentication to DHSM Server on the source NAS Server required for importing FLR filesystems.  # noqa: E501

        :param source_dhsm_username: The source_dhsm_username of this FileImportSessionInstance.  # noqa: E501
        :type: str
        """

        self._source_dhsm_username = source_dhsm_username

    @property
    def error(self):
        """Gets the error of this FileImportSessionInstance.  # noqa: E501

        File Import Session error.  # noqa: E501

        :return: The error of this FileImportSessionInstance.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this FileImportSessionInstance.

        File Import Session error.  # noqa: E501

        :param error: The error of this FileImportSessionInstance.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def destination_resource_type_l10n(self):
        """Gets the destination_resource_type_l10n of this FileImportSessionInstance.  # noqa: E501

        Localized message string corresponding to destination_resource_type Was added in version 3.0.0.0.  # noqa: E501

        :return: The destination_resource_type_l10n of this FileImportSessionInstance.  # noqa: E501
        :rtype: str
        """
        return self._destination_resource_type_l10n

    @destination_resource_type_l10n.setter
    def destination_resource_type_l10n(self, destination_resource_type_l10n):
        """Sets the destination_resource_type_l10n of this FileImportSessionInstance.

        Localized message string corresponding to destination_resource_type Was added in version 3.0.0.0.  # noqa: E501

        :param destination_resource_type_l10n: The destination_resource_type_l10n of this FileImportSessionInstance.  # noqa: E501
        :type: str
        """

        self._destination_resource_type_l10n = destination_resource_type_l10n

    @property
    def state_l10n(self):
        """Gets the state_l10n of this FileImportSessionInstance.  # noqa: E501

        Localized message string corresponding to state Was added in version 3.0.0.0.  # noqa: E501

        :return: The state_l10n of this FileImportSessionInstance.  # noqa: E501
        :rtype: str
        """
        return self._state_l10n

    @state_l10n.setter
    def state_l10n(self, state_l10n):
        """Sets the state_l10n of this FileImportSessionInstance.

        Localized message string corresponding to state Was added in version 3.0.0.0.  # noqa: E501

        :param state_l10n: The state_l10n of this FileImportSessionInstance.  # noqa: E501
        :type: str
        """

        self._state_l10n = state_l10n

    @property
    def current_operation_l10n(self):
        """Gets the current_operation_l10n of this FileImportSessionInstance.  # noqa: E501

        Localized message string corresponding to current_operation Was added in version 3.0.0.0.  # noqa: E501

        :return: The current_operation_l10n of this FileImportSessionInstance.  # noqa: E501
        :rtype: str
        """
        return self._current_operation_l10n

    @current_operation_l10n.setter
    def current_operation_l10n(self, current_operation_l10n):
        """Sets the current_operation_l10n of this FileImportSessionInstance.

        Localized message string corresponding to current_operation Was added in version 3.0.0.0.  # noqa: E501

        :param current_operation_l10n: The current_operation_l10n of this FileImportSessionInstance.  # noqa: E501
        :type: str
        """

        self._current_operation_l10n = current_operation_l10n

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileImportSessionInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileImportSessionInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FileImportSessionInstance):
            return True

        return self.to_dict() != other.to_dict()
