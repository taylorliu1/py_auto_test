# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class ClusterCreateNetworks(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'NetworkTypeEnum',
        'vlan_id': 'int',
        'prefix_length': 'int',
        'gateway': 'str',
        'cluster_mgmt_address': 'str',
        'storage_discovery_address': 'str',
        'addresses': 'list[str]',
        'purposes': 'list[NetworkPurposeEnum]'
    }

    attribute_map = {
        'type': 'type',
        'vlan_id': 'vlan_id',
        'prefix_length': 'prefix_length',
        'gateway': 'gateway',
        'cluster_mgmt_address': 'cluster_mgmt_address',
        'storage_discovery_address': 'storage_discovery_address',
        'addresses': 'addresses',
        'purposes': 'purposes'
    }

    def __init__(self, type=None, vlan_id=0, prefix_length=None, gateway='', cluster_mgmt_address=None, storage_discovery_address=None, addresses=None, purposes=None, _configuration=None):  # noqa: E501
        """ClusterCreateNetworks - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._type = None
        self._vlan_id = None
        self._prefix_length = None
        self._gateway = None
        self._cluster_mgmt_address = None
        self._storage_discovery_address = None
        self._addresses = None
        self._purposes = None
        self.discriminator = None

        self.type = type
        if vlan_id is not None:
            self.vlan_id = vlan_id
        self.prefix_length = prefix_length
        if gateway is not None:
            self.gateway = gateway
        if cluster_mgmt_address is not None:
            self.cluster_mgmt_address = cluster_mgmt_address
        if storage_discovery_address is not None:
            self.storage_discovery_address = storage_discovery_address
        self.addresses = addresses
        if purposes is not None:
            self.purposes = purposes

    @property
    def type(self):
        """Gets the type of this ClusterCreateNetworks.  # noqa: E501


        :return: The type of this ClusterCreateNetworks.  # noqa: E501
        :rtype: NetworkTypeEnum
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ClusterCreateNetworks.


        :param type: The type of this ClusterCreateNetworks.  # noqa: E501
        :type: NetworkTypeEnum
        """
        if self._configuration.client_side_validation and type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def vlan_id(self):
        """Gets the vlan_id of this ClusterCreateNetworks.  # noqa: E501

        VLAN identifier.  # noqa: E501

        :return: The vlan_id of this ClusterCreateNetworks.  # noqa: E501
        :rtype: int
        """
        return self._vlan_id

    @vlan_id.setter
    def vlan_id(self, vlan_id):
        """Sets the vlan_id of this ClusterCreateNetworks.

        VLAN identifier.  # noqa: E501

        :param vlan_id: The vlan_id of this ClusterCreateNetworks.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                vlan_id is not None and vlan_id > 4094):  # noqa: E501
            raise ValueError("Invalid value for `vlan_id`, must be a value less than or equal to `4094`")  # noqa: E501
        if (self._configuration.client_side_validation and
                vlan_id is not None and vlan_id < 0):  # noqa: E501
            raise ValueError("Invalid value for `vlan_id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._vlan_id = vlan_id

    @property
    def prefix_length(self):
        """Gets the prefix_length of this ClusterCreateNetworks.  # noqa: E501

        Network prefix length, used for both IPv4 and IPv6.  # noqa: E501

        :return: The prefix_length of this ClusterCreateNetworks.  # noqa: E501
        :rtype: int
        """
        return self._prefix_length

    @prefix_length.setter
    def prefix_length(self, prefix_length):
        """Sets the prefix_length of this ClusterCreateNetworks.

        Network prefix length, used for both IPv4 and IPv6.  # noqa: E501

        :param prefix_length: The prefix_length of this ClusterCreateNetworks.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and prefix_length is None:
            raise ValueError("Invalid value for `prefix_length`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                prefix_length is not None and prefix_length > 128):  # noqa: E501
            raise ValueError("Invalid value for `prefix_length`, must be a value less than or equal to `128`")  # noqa: E501
        if (self._configuration.client_side_validation and
                prefix_length is not None and prefix_length < 0):  # noqa: E501
            raise ValueError("Invalid value for `prefix_length`, must be a value greater than or equal to `0`")  # noqa: E501

        self._prefix_length = prefix_length

    @property
    def gateway(self):
        """Gets the gateway of this ClusterCreateNetworks.  # noqa: E501

        Network gateway in IPv4 or IPv6 format, corresponding to the network's IP version.  # noqa: E501

        :return: The gateway of this ClusterCreateNetworks.  # noqa: E501
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this ClusterCreateNetworks.

        Network gateway in IPv4 or IPv6 format, corresponding to the network's IP version.  # noqa: E501

        :param gateway: The gateway of this ClusterCreateNetworks.  # noqa: E501
        :type: str
        """

        self._gateway = gateway

    @property
    def cluster_mgmt_address(self):
        """Gets the cluster_mgmt_address of this ClusterCreateNetworks.  # noqa: E501

        New cluster management IP address in IPv4 or IPv6 format, corresponding to the network's IP version. This can only be specified only when configuring the management type network.  # noqa: E501

        :return: The cluster_mgmt_address of this ClusterCreateNetworks.  # noqa: E501
        :rtype: str
        """
        return self._cluster_mgmt_address

    @cluster_mgmt_address.setter
    def cluster_mgmt_address(self, cluster_mgmt_address):
        """Sets the cluster_mgmt_address of this ClusterCreateNetworks.

        New cluster management IP address in IPv4 or IPv6 format, corresponding to the network's IP version. This can only be specified only when configuring the management type network.  # noqa: E501

        :param cluster_mgmt_address: The cluster_mgmt_address of this ClusterCreateNetworks.  # noqa: E501
        :type: str
        """

        self._cluster_mgmt_address = cluster_mgmt_address

    @property
    def storage_discovery_address(self):
        """Gets the storage_discovery_address of this ClusterCreateNetworks.  # noqa: E501

        New storage discovery IP address in IPv4 or IPv6 format, corresponding to the network's IP version. This can only be specified only when configuring the storage type network.  # noqa: E501

        :return: The storage_discovery_address of this ClusterCreateNetworks.  # noqa: E501
        :rtype: str
        """
        return self._storage_discovery_address

    @storage_discovery_address.setter
    def storage_discovery_address(self, storage_discovery_address):
        """Sets the storage_discovery_address of this ClusterCreateNetworks.

        New storage discovery IP address in IPv4 or IPv6 format, corresponding to the network's IP version. This can only be specified only when configuring the storage type network.  # noqa: E501

        :param storage_discovery_address: The storage_discovery_address of this ClusterCreateNetworks.  # noqa: E501
        :type: str
        """

        self._storage_discovery_address = storage_discovery_address

    @property
    def addresses(self):
        """Gets the addresses of this ClusterCreateNetworks.  # noqa: E501

        IP addresses in IPv4 or IPv6 format.  # noqa: E501

        :return: The addresses of this ClusterCreateNetworks.  # noqa: E501
        :rtype: list[str]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this ClusterCreateNetworks.

        IP addresses in IPv4 or IPv6 format.  # noqa: E501

        :param addresses: The addresses of this ClusterCreateNetworks.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and addresses is None:
            raise ValueError("Invalid value for `addresses`, must not be `None`")  # noqa: E501

        self._addresses = addresses

    @property
    def purposes(self):
        """Gets the purposes of this ClusterCreateNetworks.  # noqa: E501

        Purposes of the network. Only applicable to storage networks. Omitting the property is equivalent to providing all applicable purposes, which are: ISCSI, NVMe/TCP. If provided, must include iSCSI to enable the internal host storage access. Was added in version 2.1.0.0.  # noqa: E501

        :return: The purposes of this ClusterCreateNetworks.  # noqa: E501
        :rtype: list[NetworkPurposeEnum]
        """
        return self._purposes

    @purposes.setter
    def purposes(self, purposes):
        """Sets the purposes of this ClusterCreateNetworks.

        Purposes of the network. Only applicable to storage networks. Omitting the property is equivalent to providing all applicable purposes, which are: ISCSI, NVMe/TCP. If provided, must include iSCSI to enable the internal host storage access. Was added in version 2.1.0.0.  # noqa: E501

        :param purposes: The purposes of this ClusterCreateNetworks.  # noqa: E501
        :type: list[NetworkPurposeEnum]
        """

        self._purposes = purposes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClusterCreateNetworks, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterCreateNetworks):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ClusterCreateNetworks):
            return True

        return self.to_dict() != other.to_dict()
