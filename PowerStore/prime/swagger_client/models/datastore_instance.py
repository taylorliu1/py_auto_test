# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class DatastoreInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'instance_uuid': 'str',
        'name': 'str',
        'type': 'DatastoreTypeEnum',
        'vsphere_object_id': 'str',
        'vcenter_id': 'str',
        'storage_container_id': 'str',
        'nfs_export_id': 'str',
        'type_l10n': 'str',
        'vcenter': 'VcenterInstance',
        'storage_container': 'StorageContainerInstance',
        'nfs_export': 'NfsExportInstance',
        'virtual_machines': 'list[VirtualMachineInstance]',
        'volumes': 'list[VolumeInstance]',
        'vsphere_hosts': 'list[VsphereHostInstance]'
    }

    attribute_map = {
        'id': 'id',
        'instance_uuid': 'instance_uuid',
        'name': 'name',
        'type': 'type',
        'vsphere_object_id': 'vsphere_object_id',
        'vcenter_id': 'vcenter_id',
        'storage_container_id': 'storage_container_id',
        'nfs_export_id': 'nfs_export_id',
        'type_l10n': 'type_l10n',
        'vcenter': 'vcenter',
        'storage_container': 'storage_container',
        'nfs_export': 'nfs_export',
        'virtual_machines': 'virtual_machines',
        'volumes': 'volumes',
        'vsphere_hosts': 'vsphere_hosts'
    }

    def __init__(self, id=None, instance_uuid=None, name=None, type=None, vsphere_object_id=None, vcenter_id=None, storage_container_id=None, nfs_export_id=None, type_l10n=None, vcenter=None, storage_container=None, nfs_export=None, virtual_machines=None, volumes=None, vsphere_hosts=None, _configuration=None):  # noqa: E501
        """DatastoreInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._instance_uuid = None
        self._name = None
        self._type = None
        self._vsphere_object_id = None
        self._vcenter_id = None
        self._storage_container_id = None
        self._nfs_export_id = None
        self._type_l10n = None
        self._vcenter = None
        self._storage_container = None
        self._nfs_export = None
        self._virtual_machines = None
        self._volumes = None
        self._vsphere_hosts = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if instance_uuid is not None:
            self.instance_uuid = instance_uuid
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if vsphere_object_id is not None:
            self.vsphere_object_id = vsphere_object_id
        if vcenter_id is not None:
            self.vcenter_id = vcenter_id
        if storage_container_id is not None:
            self.storage_container_id = storage_container_id
        if nfs_export_id is not None:
            self.nfs_export_id = nfs_export_id
        if type_l10n is not None:
            self.type_l10n = type_l10n
        if vcenter is not None:
            self.vcenter = vcenter
        if storage_container is not None:
            self.storage_container = storage_container
        if nfs_export is not None:
            self.nfs_export = nfs_export
        if virtual_machines is not None:
            self.virtual_machines = virtual_machines
        if volumes is not None:
            self.volumes = volumes
        if vsphere_hosts is not None:
            self.vsphere_hosts = vsphere_hosts

    @property
    def id(self):
        """Gets the id of this DatastoreInstance.  # noqa: E501

        Unique identifier of the datastore instance.  # noqa: E501

        :return: The id of this DatastoreInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DatastoreInstance.

        Unique identifier of the datastore instance.  # noqa: E501

        :param id: The id of this DatastoreInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def instance_uuid(self):
        """Gets the instance_uuid of this DatastoreInstance.  # noqa: E501

        UUID instance of the datastore in vCenter.  # noqa: E501

        :return: The instance_uuid of this DatastoreInstance.  # noqa: E501
        :rtype: str
        """
        return self._instance_uuid

    @instance_uuid.setter
    def instance_uuid(self, instance_uuid):
        """Sets the instance_uuid of this DatastoreInstance.

        UUID instance of the datastore in vCenter.  # noqa: E501

        :param instance_uuid: The instance_uuid of this DatastoreInstance.  # noqa: E501
        :type: str
        """

        self._instance_uuid = instance_uuid

    @property
    def name(self):
        """Gets the name of this DatastoreInstance.  # noqa: E501

        User-assigned name of the datastore in vCenter.  This property supports case-insensitive filtering.  # noqa: E501

        :return: The name of this DatastoreInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DatastoreInstance.

        User-assigned name of the datastore in vCenter.  This property supports case-insensitive filtering.  # noqa: E501

        :param name: The name of this DatastoreInstance.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this DatastoreInstance.  # noqa: E501


        :return: The type of this DatastoreInstance.  # noqa: E501
        :rtype: DatastoreTypeEnum
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DatastoreInstance.


        :param type: The type of this DatastoreInstance.  # noqa: E501
        :type: DatastoreTypeEnum
        """

        self._type = type

    @property
    def vsphere_object_id(self):
        """Gets the vsphere_object_id of this DatastoreInstance.  # noqa: E501

        Unique identifier of the datastore in vCenter.  # noqa: E501

        :return: The vsphere_object_id of this DatastoreInstance.  # noqa: E501
        :rtype: str
        """
        return self._vsphere_object_id

    @vsphere_object_id.setter
    def vsphere_object_id(self, vsphere_object_id):
        """Sets the vsphere_object_id of this DatastoreInstance.

        Unique identifier of the datastore in vCenter.  # noqa: E501

        :param vsphere_object_id: The vsphere_object_id of this DatastoreInstance.  # noqa: E501
        :type: str
        """

        self._vsphere_object_id = vsphere_object_id

    @property
    def vcenter_id(self):
        """Gets the vcenter_id of this DatastoreInstance.  # noqa: E501

        Unique identifier of a vCenter instance.  # noqa: E501

        :return: The vcenter_id of this DatastoreInstance.  # noqa: E501
        :rtype: str
        """
        return self._vcenter_id

    @vcenter_id.setter
    def vcenter_id(self, vcenter_id):
        """Sets the vcenter_id of this DatastoreInstance.

        Unique identifier of a vCenter instance.  # noqa: E501

        :param vcenter_id: The vcenter_id of this DatastoreInstance.  # noqa: E501
        :type: str
        """

        self._vcenter_id = vcenter_id

    @property
    def storage_container_id(self):
        """Gets the storage_container_id of this DatastoreInstance.  # noqa: E501

        Unique identifier of a backing storage_container instance (for vVol type only).  # noqa: E501

        :return: The storage_container_id of this DatastoreInstance.  # noqa: E501
        :rtype: str
        """
        return self._storage_container_id

    @storage_container_id.setter
    def storage_container_id(self, storage_container_id):
        """Sets the storage_container_id of this DatastoreInstance.

        Unique identifier of a backing storage_container instance (for vVol type only).  # noqa: E501

        :param storage_container_id: The storage_container_id of this DatastoreInstance.  # noqa: E501
        :type: str
        """

        self._storage_container_id = storage_container_id

    @property
    def nfs_export_id(self):
        """Gets the nfs_export_id of this DatastoreInstance.  # noqa: E501

        Unique identifier of a backing nfs_export instance (for NFS type only).  # noqa: E501

        :return: The nfs_export_id of this DatastoreInstance.  # noqa: E501
        :rtype: str
        """
        return self._nfs_export_id

    @nfs_export_id.setter
    def nfs_export_id(self, nfs_export_id):
        """Sets the nfs_export_id of this DatastoreInstance.

        Unique identifier of a backing nfs_export instance (for NFS type only).  # noqa: E501

        :param nfs_export_id: The nfs_export_id of this DatastoreInstance.  # noqa: E501
        :type: str
        """

        self._nfs_export_id = nfs_export_id

    @property
    def type_l10n(self):
        """Gets the type_l10n of this DatastoreInstance.  # noqa: E501

        Localized message string corresponding to type Was added in version 3.0.0.0.  # noqa: E501

        :return: The type_l10n of this DatastoreInstance.  # noqa: E501
        :rtype: str
        """
        return self._type_l10n

    @type_l10n.setter
    def type_l10n(self, type_l10n):
        """Sets the type_l10n of this DatastoreInstance.

        Localized message string corresponding to type Was added in version 3.0.0.0.  # noqa: E501

        :param type_l10n: The type_l10n of this DatastoreInstance.  # noqa: E501
        :type: str
        """

        self._type_l10n = type_l10n

    @property
    def vcenter(self):
        """Gets the vcenter of this DatastoreInstance.  # noqa: E501

        This is the embeddable reference form of vcenter_id attribute.  # noqa: E501

        :return: The vcenter of this DatastoreInstance.  # noqa: E501
        :rtype: VcenterInstance
        """
        return self._vcenter

    @vcenter.setter
    def vcenter(self, vcenter):
        """Sets the vcenter of this DatastoreInstance.

        This is the embeddable reference form of vcenter_id attribute.  # noqa: E501

        :param vcenter: The vcenter of this DatastoreInstance.  # noqa: E501
        :type: VcenterInstance
        """

        self._vcenter = vcenter

    @property
    def storage_container(self):
        """Gets the storage_container of this DatastoreInstance.  # noqa: E501

        This is the embeddable reference form of storage_container_id attribute.  # noqa: E501

        :return: The storage_container of this DatastoreInstance.  # noqa: E501
        :rtype: StorageContainerInstance
        """
        return self._storage_container

    @storage_container.setter
    def storage_container(self, storage_container):
        """Sets the storage_container of this DatastoreInstance.

        This is the embeddable reference form of storage_container_id attribute.  # noqa: E501

        :param storage_container: The storage_container of this DatastoreInstance.  # noqa: E501
        :type: StorageContainerInstance
        """

        self._storage_container = storage_container

    @property
    def nfs_export(self):
        """Gets the nfs_export of this DatastoreInstance.  # noqa: E501

        This is the embeddable reference form of nfs_export_id attribute.  # noqa: E501

        :return: The nfs_export of this DatastoreInstance.  # noqa: E501
        :rtype: NfsExportInstance
        """
        return self._nfs_export

    @nfs_export.setter
    def nfs_export(self, nfs_export):
        """Sets the nfs_export of this DatastoreInstance.

        This is the embeddable reference form of nfs_export_id attribute.  # noqa: E501

        :param nfs_export: The nfs_export of this DatastoreInstance.  # noqa: E501
        :type: NfsExportInstance
        """

        self._nfs_export = nfs_export

    @property
    def virtual_machines(self):
        """Gets the virtual_machines of this DatastoreInstance.  # noqa: E501

        List of the virtual_machines that are associated with this datastore.  # noqa: E501

        :return: The virtual_machines of this DatastoreInstance.  # noqa: E501
        :rtype: list[VirtualMachineInstance]
        """
        return self._virtual_machines

    @virtual_machines.setter
    def virtual_machines(self, virtual_machines):
        """Sets the virtual_machines of this DatastoreInstance.

        List of the virtual_machines that are associated with this datastore.  # noqa: E501

        :param virtual_machines: The virtual_machines of this DatastoreInstance.  # noqa: E501
        :type: list[VirtualMachineInstance]
        """

        self._virtual_machines = virtual_machines

    @property
    def volumes(self):
        """Gets the volumes of this DatastoreInstance.  # noqa: E501

        List of the volumes that are associated with this datastore.  # noqa: E501

        :return: The volumes of this DatastoreInstance.  # noqa: E501
        :rtype: list[VolumeInstance]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this DatastoreInstance.

        List of the volumes that are associated with this datastore.  # noqa: E501

        :param volumes: The volumes of this DatastoreInstance.  # noqa: E501
        :type: list[VolumeInstance]
        """

        self._volumes = volumes

    @property
    def vsphere_hosts(self):
        """Gets the vsphere_hosts of this DatastoreInstance.  # noqa: E501

        List of the vsphere_hosts that are associated with this datastore.  # noqa: E501

        :return: The vsphere_hosts of this DatastoreInstance.  # noqa: E501
        :rtype: list[VsphereHostInstance]
        """
        return self._vsphere_hosts

    @vsphere_hosts.setter
    def vsphere_hosts(self, vsphere_hosts):
        """Sets the vsphere_hosts of this DatastoreInstance.

        List of the vsphere_hosts that are associated with this datastore.  # noqa: E501

        :param vsphere_hosts: The vsphere_hosts of this DatastoreInstance.  # noqa: E501
        :type: list[VsphereHostInstance]
        """

        self._vsphere_hosts = vsphere_hosts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DatastoreInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DatastoreInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DatastoreInstance):
            return True

        return self.to_dict() != other.to_dict()
