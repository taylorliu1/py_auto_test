# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class NetworkReplace(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vlan_id': 'int',
        'gateway': 'str',
        'prefix_length': 'int',
        'cluster_mgmt_address': 'str',
        'vasa_provider_credentials': 'object',
        'esxi_credentials': 'EsxiCredentials',
        'mtu': 'int',
        'ip_pool_addresses': 'list[str]',
        'dns_addresses': 'list[str]',
        'ntp_addresses': 'list[str]',
        'vcenter_address': 'str',
        'smtp_config': 'NetworkReplaceSmtpConfig',
        'physical_switches': 'list[NetworkReplacePhysicalSwitch]',
        'force': 'bool'
    }

    attribute_map = {
        'vlan_id': 'vlan_id',
        'gateway': 'gateway',
        'prefix_length': 'prefix_length',
        'cluster_mgmt_address': 'cluster_mgmt_address',
        'vasa_provider_credentials': 'vasa_provider_credentials',
        'esxi_credentials': 'esxi_credentials',
        'mtu': 'mtu',
        'ip_pool_addresses': 'ip_pool_addresses',
        'dns_addresses': 'dns_addresses',
        'ntp_addresses': 'ntp_addresses',
        'vcenter_address': 'vcenter_address',
        'smtp_config': 'smtp_config',
        'physical_switches': 'physical_switches',
        'force': 'force'
    }

    def __init__(self, vlan_id=None, gateway=None, prefix_length=None, cluster_mgmt_address=None, vasa_provider_credentials=None, esxi_credentials=None, mtu=None, ip_pool_addresses=None, dns_addresses=None, ntp_addresses=None, vcenter_address=None, smtp_config=None, physical_switches=None, force=False, _configuration=None):  # noqa: E501
        """NetworkReplace - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._vlan_id = None
        self._gateway = None
        self._prefix_length = None
        self._cluster_mgmt_address = None
        self._vasa_provider_credentials = None
        self._esxi_credentials = None
        self._mtu = None
        self._ip_pool_addresses = None
        self._dns_addresses = None
        self._ntp_addresses = None
        self._vcenter_address = None
        self._smtp_config = None
        self._physical_switches = None
        self._force = None
        self.discriminator = None

        self.vlan_id = vlan_id
        self.gateway = gateway
        self.prefix_length = prefix_length
        self.cluster_mgmt_address = cluster_mgmt_address
        if vasa_provider_credentials is not None:
            self.vasa_provider_credentials = vasa_provider_credentials
        if esxi_credentials is not None:
            self.esxi_credentials = esxi_credentials
        self.mtu = mtu
        self.ip_pool_addresses = ip_pool_addresses
        self.dns_addresses = dns_addresses
        self.ntp_addresses = ntp_addresses
        if vcenter_address is not None:
            self.vcenter_address = vcenter_address
        if smtp_config is not None:
            self.smtp_config = smtp_config
        if physical_switches is not None:
            self.physical_switches = physical_switches
        if force is not None:
            self.force = force

    @property
    def vlan_id(self):
        """Gets the vlan_id of this NetworkReplace.  # noqa: E501

        VLAN identifier.  # noqa: E501

        :return: The vlan_id of this NetworkReplace.  # noqa: E501
        :rtype: int
        """
        return self._vlan_id

    @vlan_id.setter
    def vlan_id(self, vlan_id):
        """Sets the vlan_id of this NetworkReplace.

        VLAN identifier.  # noqa: E501

        :param vlan_id: The vlan_id of this NetworkReplace.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and vlan_id is None:
            raise ValueError("Invalid value for `vlan_id`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                vlan_id is not None and vlan_id > 4094):  # noqa: E501
            raise ValueError("Invalid value for `vlan_id`, must be a value less than or equal to `4094`")  # noqa: E501
        if (self._configuration.client_side_validation and
                vlan_id is not None and vlan_id < 0):  # noqa: E501
            raise ValueError("Invalid value for `vlan_id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._vlan_id = vlan_id

    @property
    def gateway(self):
        """Gets the gateway of this NetworkReplace.  # noqa: E501

        Network gateway in IPv4 or IPv6 format, corresponding to the network's IP version. Specify empty string to remove the gateway.   # noqa: E501

        :return: The gateway of this NetworkReplace.  # noqa: E501
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this NetworkReplace.

        Network gateway in IPv4 or IPv6 format, corresponding to the network's IP version. Specify empty string to remove the gateway.   # noqa: E501

        :param gateway: The gateway of this NetworkReplace.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and gateway is None:
            raise ValueError("Invalid value for `gateway`, must not be `None`")  # noqa: E501

        self._gateway = gateway

    @property
    def prefix_length(self):
        """Gets the prefix_length of this NetworkReplace.  # noqa: E501

        Network prefix length. (Used for both IPv4 and IPv6).  # noqa: E501

        :return: The prefix_length of this NetworkReplace.  # noqa: E501
        :rtype: int
        """
        return self._prefix_length

    @prefix_length.setter
    def prefix_length(self, prefix_length):
        """Sets the prefix_length of this NetworkReplace.

        Network prefix length. (Used for both IPv4 and IPv6).  # noqa: E501

        :param prefix_length: The prefix_length of this NetworkReplace.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and prefix_length is None:
            raise ValueError("Invalid value for `prefix_length`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                prefix_length is not None and prefix_length > 127):  # noqa: E501
            raise ValueError("Invalid value for `prefix_length`, must be a value less than or equal to `127`")  # noqa: E501
        if (self._configuration.client_side_validation and
                prefix_length is not None and prefix_length < 1):  # noqa: E501
            raise ValueError("Invalid value for `prefix_length`, must be a value greater than or equal to `1`")  # noqa: E501

        self._prefix_length = prefix_length

    @property
    def cluster_mgmt_address(self):
        """Gets the cluster_mgmt_address of this NetworkReplace.  # noqa: E501

        New cluster management IP address in IPv4 or IPv6 format, corresponding to the network's IP version.  # noqa: E501

        :return: The cluster_mgmt_address of this NetworkReplace.  # noqa: E501
        :rtype: str
        """
        return self._cluster_mgmt_address

    @cluster_mgmt_address.setter
    def cluster_mgmt_address(self, cluster_mgmt_address):
        """Sets the cluster_mgmt_address of this NetworkReplace.

        New cluster management IP address in IPv4 or IPv6 format, corresponding to the network's IP version.  # noqa: E501

        :param cluster_mgmt_address: The cluster_mgmt_address of this NetworkReplace.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and cluster_mgmt_address is None:
            raise ValueError("Invalid value for `cluster_mgmt_address`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                cluster_mgmt_address is not None and len(cluster_mgmt_address) < 1):
            raise ValueError("Invalid value for `cluster_mgmt_address`, length must be greater than or equal to `1`")  # noqa: E501

        self._cluster_mgmt_address = cluster_mgmt_address

    @property
    def vasa_provider_credentials(self):
        """Gets the vasa_provider_credentials of this NetworkReplace.  # noqa: E501

        Credentials required for re-registering the VASA vendor provider during the replacement of the cluster management IP address. Should be passed only when reconfiguring PowerStoreX cluster.   # noqa: E501

        :return: The vasa_provider_credentials of this NetworkReplace.  # noqa: E501
        :rtype: object
        """
        return self._vasa_provider_credentials

    @vasa_provider_credentials.setter
    def vasa_provider_credentials(self, vasa_provider_credentials):
        """Sets the vasa_provider_credentials of this NetworkReplace.

        Credentials required for re-registering the VASA vendor provider during the replacement of the cluster management IP address. Should be passed only when reconfiguring PowerStoreX cluster.   # noqa: E501

        :param vasa_provider_credentials: The vasa_provider_credentials of this NetworkReplace.  # noqa: E501
        :type: object
        """

        self._vasa_provider_credentials = vasa_provider_credentials

    @property
    def esxi_credentials(self):
        """Gets the esxi_credentials of this NetworkReplace.  # noqa: E501


        :return: The esxi_credentials of this NetworkReplace.  # noqa: E501
        :rtype: EsxiCredentials
        """
        return self._esxi_credentials

    @esxi_credentials.setter
    def esxi_credentials(self, esxi_credentials):
        """Sets the esxi_credentials of this NetworkReplace.


        :param esxi_credentials: The esxi_credentials of this NetworkReplace.  # noqa: E501
        :type: EsxiCredentials
        """

        self._esxi_credentials = esxi_credentials

    @property
    def mtu(self):
        """Gets the mtu of this NetworkReplace.  # noqa: E501

        Maximum Transmission Unit (MTU) packet size set on network interfaces, in bytes.  # noqa: E501

        :return: The mtu of this NetworkReplace.  # noqa: E501
        :rtype: int
        """
        return self._mtu

    @mtu.setter
    def mtu(self, mtu):
        """Sets the mtu of this NetworkReplace.

        Maximum Transmission Unit (MTU) packet size set on network interfaces, in bytes.  # noqa: E501

        :param mtu: The mtu of this NetworkReplace.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and mtu is None:
            raise ValueError("Invalid value for `mtu`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                mtu is not None and mtu > 9000):  # noqa: E501
            raise ValueError("Invalid value for `mtu`, must be a value less than or equal to `9000`")  # noqa: E501
        if (self._configuration.client_side_validation and
                mtu is not None and mtu < 1280):  # noqa: E501
            raise ValueError("Invalid value for `mtu`, must be a value greater than or equal to `1280`")  # noqa: E501

        self._mtu = mtu

    @property
    def ip_pool_addresses(self):
        """Gets the ip_pool_addresses of this NetworkReplace.  # noqa: E501

        List of new IP addresses in IPv4 or IPv6 format.  # noqa: E501

        :return: The ip_pool_addresses of this NetworkReplace.  # noqa: E501
        :rtype: list[str]
        """
        return self._ip_pool_addresses

    @ip_pool_addresses.setter
    def ip_pool_addresses(self, ip_pool_addresses):
        """Sets the ip_pool_addresses of this NetworkReplace.

        List of new IP addresses in IPv4 or IPv6 format.  # noqa: E501

        :param ip_pool_addresses: The ip_pool_addresses of this NetworkReplace.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and ip_pool_addresses is None:
            raise ValueError("Invalid value for `ip_pool_addresses`, must not be `None`")  # noqa: E501

        self._ip_pool_addresses = ip_pool_addresses

    @property
    def dns_addresses(self):
        """Gets the dns_addresses of this NetworkReplace.  # noqa: E501

        List of new DNS server IP addresses in IPv4 or IPv6 format.  # noqa: E501

        :return: The dns_addresses of this NetworkReplace.  # noqa: E501
        :rtype: list[str]
        """
        return self._dns_addresses

    @dns_addresses.setter
    def dns_addresses(self, dns_addresses):
        """Sets the dns_addresses of this NetworkReplace.

        List of new DNS server IP addresses in IPv4 or IPv6 format.  # noqa: E501

        :param dns_addresses: The dns_addresses of this NetworkReplace.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and dns_addresses is None:
            raise ValueError("Invalid value for `dns_addresses`, must not be `None`")  # noqa: E501

        self._dns_addresses = dns_addresses

    @property
    def ntp_addresses(self):
        """Gets the ntp_addresses of this NetworkReplace.  # noqa: E501

        List of new NTP server FQDNs or IP addresses in IPv4 or IPv6 format.  # noqa: E501

        :return: The ntp_addresses of this NetworkReplace.  # noqa: E501
        :rtype: list[str]
        """
        return self._ntp_addresses

    @ntp_addresses.setter
    def ntp_addresses(self, ntp_addresses):
        """Sets the ntp_addresses of this NetworkReplace.

        List of new NTP server FQDNs or IP addresses in IPv4 or IPv6 format.  # noqa: E501

        :param ntp_addresses: The ntp_addresses of this NetworkReplace.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and ntp_addresses is None:
            raise ValueError("Invalid value for `ntp_addresses`, must not be `None`")  # noqa: E501

        self._ntp_addresses = ntp_addresses

    @property
    def vcenter_address(self):
        """Gets the vcenter_address of this NetworkReplace.  # noqa: E501

        New vCenter FQDNs or IP address in IPv4 or IPv6 format. Required only when reconfiguring PowerStoreX cluster.  # noqa: E501

        :return: The vcenter_address of this NetworkReplace.  # noqa: E501
        :rtype: str
        """
        return self._vcenter_address

    @vcenter_address.setter
    def vcenter_address(self, vcenter_address):
        """Sets the vcenter_address of this NetworkReplace.

        New vCenter FQDNs or IP address in IPv4 or IPv6 format. Required only when reconfiguring PowerStoreX cluster.  # noqa: E501

        :param vcenter_address: The vcenter_address of this NetworkReplace.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                vcenter_address is not None and len(vcenter_address) < 1):
            raise ValueError("Invalid value for `vcenter_address`, length must be greater than or equal to `1`")  # noqa: E501

        self._vcenter_address = vcenter_address

    @property
    def smtp_config(self):
        """Gets the smtp_config of this NetworkReplace.  # noqa: E501


        :return: The smtp_config of this NetworkReplace.  # noqa: E501
        :rtype: NetworkReplaceSmtpConfig
        """
        return self._smtp_config

    @smtp_config.setter
    def smtp_config(self, smtp_config):
        """Sets the smtp_config of this NetworkReplace.


        :param smtp_config: The smtp_config of this NetworkReplace.  # noqa: E501
        :type: NetworkReplaceSmtpConfig
        """

        self._smtp_config = smtp_config

    @property
    def physical_switches(self):
        """Gets the physical_switches of this NetworkReplace.  # noqa: E501

        List of new physical switches settings. If this property is omitted, physical switches configuration will not be modified.  # noqa: E501

        :return: The physical_switches of this NetworkReplace.  # noqa: E501
        :rtype: list[NetworkReplacePhysicalSwitch]
        """
        return self._physical_switches

    @physical_switches.setter
    def physical_switches(self, physical_switches):
        """Sets the physical_switches of this NetworkReplace.

        List of new physical switches settings. If this property is omitted, physical switches configuration will not be modified.  # noqa: E501

        :param physical_switches: The physical_switches of this NetworkReplace.  # noqa: E501
        :type: list[NetworkReplacePhysicalSwitch]
        """

        self._physical_switches = physical_switches

    @property
    def force(self):
        """Gets the force of this NetworkReplace.  # noqa: E501

        Indicates whether to suppress network validation errors. The option is intended to suppress false errors caused by network environment constraints.  Normally the command will fail with an error when: - some of system network ports are in degraded state or have cabling issues, - system top-of-rack switches have configuration issues leading to network unreachability, - network IP addresses have duplicates in the network environment, - or network gateway is unreachable.  When force is true, the command will proceed instead.  Caution: Only use this option when you are certain your requested settings are correct and you understand why they are failing at this time, and you want to apply the settings anyway. Improper network settings can make the system unreachable for data and management.   # noqa: E501

        :return: The force of this NetworkReplace.  # noqa: E501
        :rtype: bool
        """
        return self._force

    @force.setter
    def force(self, force):
        """Sets the force of this NetworkReplace.

        Indicates whether to suppress network validation errors. The option is intended to suppress false errors caused by network environment constraints.  Normally the command will fail with an error when: - some of system network ports are in degraded state or have cabling issues, - system top-of-rack switches have configuration issues leading to network unreachability, - network IP addresses have duplicates in the network environment, - or network gateway is unreachable.  When force is true, the command will proceed instead.  Caution: Only use this option when you are certain your requested settings are correct and you understand why they are failing at this time, and you want to apply the settings anyway. Improper network settings can make the system unreachable for data and management.   # noqa: E501

        :param force: The force of this NetworkReplace.  # noqa: E501
        :type: bool
        """

        self._force = force

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetworkReplace, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkReplace):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NetworkReplace):
            return True

        return self.to_dict() != other.to_dict()
