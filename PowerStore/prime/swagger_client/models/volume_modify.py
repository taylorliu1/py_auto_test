# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class VolumeModify(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'size': 'int',
        'expiration_timestamp': 'datetime',
        'protection_policy_id': 'str',
        'performance_policy_id': 'str',
        'is_replication_destination': 'bool',
        'force': 'bool',
        'node_affinity': 'NodeAffinityEnum',
        'app_type': 'AppTypeEnum',
        'app_type_other': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'size': 'size',
        'expiration_timestamp': 'expiration_timestamp',
        'protection_policy_id': 'protection_policy_id',
        'performance_policy_id': 'performance_policy_id',
        'is_replication_destination': 'is_replication_destination',
        'force': 'force',
        'node_affinity': 'node_affinity',
        'app_type': 'app_type',
        'app_type_other': 'app_type_other'
    }

    def __init__(self, name=None, description=None, size=None, expiration_timestamp=None, protection_policy_id=None, performance_policy_id=None, is_replication_destination=None, force=False, node_affinity=None, app_type=None, app_type_other=None, _configuration=None):  # noqa: E501
        """VolumeModify - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._description = None
        self._size = None
        self._expiration_timestamp = None
        self._protection_policy_id = None
        self._performance_policy_id = None
        self._is_replication_destination = None
        self._force = None
        self._node_affinity = None
        self._app_type = None
        self._app_type_other = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if size is not None:
            self.size = size
        if expiration_timestamp is not None:
            self.expiration_timestamp = expiration_timestamp
        if protection_policy_id is not None:
            self.protection_policy_id = protection_policy_id
        if performance_policy_id is not None:
            self.performance_policy_id = performance_policy_id
        if is_replication_destination is not None:
            self.is_replication_destination = is_replication_destination
        if force is not None:
            self.force = force
        if node_affinity is not None:
            self.node_affinity = node_affinity
        if app_type is not None:
            self.app_type = app_type
        if app_type_other is not None:
            self.app_type_other = app_type_other

    @property
    def name(self):
        """Gets the name of this VolumeModify.  # noqa: E501

        New name of the volume. This value must contain 128 or fewer printable Unicode characters.  # noqa: E501

        :return: The name of this VolumeModify.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VolumeModify.

        New name of the volume. This value must contain 128 or fewer printable Unicode characters.  # noqa: E501

        :param name: The name of this VolumeModify.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 128):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this VolumeModify.  # noqa: E501

        New description of the volume. This value must contain 128 or fewer printable Unicode characters.  # noqa: E501

        :return: The description of this VolumeModify.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VolumeModify.

        New description of the volume. This value must contain 128 or fewer printable Unicode characters.  # noqa: E501

        :param description: The description of this VolumeModify.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                description is not None and len(description) > 128):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `128`")  # noqa: E501

        self._description = description

    @property
    def size(self):
        """Gets the size of this VolumeModify.  # noqa: E501

        New size of the volume in bytes,  must be a multiple of 8192, must be bigger than the current volume size. Maximum volume size is 256TB.  # noqa: E501

        :return: The size of this VolumeModify.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this VolumeModify.

        New size of the volume in bytes,  must be a multiple of 8192, must be bigger than the current volume size. Maximum volume size is 256TB.  # noqa: E501

        :param size: The size of this VolumeModify.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                size is not None and size > 281474976710656):  # noqa: E501
            raise ValueError("Invalid value for `size`, must be a value less than or equal to `281474976710656`")  # noqa: E501
        if (self._configuration.client_side_validation and
                size is not None and size < 1048576):  # noqa: E501
            raise ValueError("Invalid value for `size`, must be a value greater than or equal to `1048576`")  # noqa: E501

        self._size = size

    @property
    def expiration_timestamp(self):
        """Gets the expiration_timestamp of this VolumeModify.  # noqa: E501

        New expiration time of the snapshot. Expired snapshots are deleted by the snapshot aging service that runs periodically in the background. If not specified, the snapshot never expires. Use a maximum timestamp value or null to set an expiration to never expire.  # noqa: E501

        :return: The expiration_timestamp of this VolumeModify.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_timestamp

    @expiration_timestamp.setter
    def expiration_timestamp(self, expiration_timestamp):
        """Sets the expiration_timestamp of this VolumeModify.

        New expiration time of the snapshot. Expired snapshots are deleted by the snapshot aging service that runs periodically in the background. If not specified, the snapshot never expires. Use a maximum timestamp value or null to set an expiration to never expire.  # noqa: E501

        :param expiration_timestamp: The expiration_timestamp of this VolumeModify.  # noqa: E501
        :type: datetime
        """

        self._expiration_timestamp = expiration_timestamp

    @property
    def protection_policy_id(self):
        """Gets the protection_policy_id of this VolumeModify.  # noqa: E501

        Unique identifier of the protection policy assigned to the volume.  # noqa: E501

        :return: The protection_policy_id of this VolumeModify.  # noqa: E501
        :rtype: str
        """
        return self._protection_policy_id

    @protection_policy_id.setter
    def protection_policy_id(self, protection_policy_id):
        """Sets the protection_policy_id of this VolumeModify.

        Unique identifier of the protection policy assigned to the volume.  # noqa: E501

        :param protection_policy_id: The protection_policy_id of this VolumeModify.  # noqa: E501
        :type: str
        """

        self._protection_policy_id = protection_policy_id

    @property
    def performance_policy_id(self):
        """Gets the performance_policy_id of this VolumeModify.  # noqa: E501

        Unique identifier of the performance policy assigned to the volume.  # noqa: E501

        :return: The performance_policy_id of this VolumeModify.  # noqa: E501
        :rtype: str
        """
        return self._performance_policy_id

    @performance_policy_id.setter
    def performance_policy_id(self, performance_policy_id):
        """Sets the performance_policy_id of this VolumeModify.

        Unique identifier of the performance policy assigned to the volume.  # noqa: E501

        :param performance_policy_id: The performance_policy_id of this VolumeModify.  # noqa: E501
        :type: str
        """

        self._performance_policy_id = performance_policy_id

    @property
    def is_replication_destination(self):
        """Gets the is_replication_destination of this VolumeModify.  # noqa: E501

        New value for is_replication_destination property. The modification is only supported for primary and clone volume, only when the current value is true and there is no longer a replication session using this volume as a destination, and only to false.  # noqa: E501

        :return: The is_replication_destination of this VolumeModify.  # noqa: E501
        :rtype: bool
        """
        return self._is_replication_destination

    @is_replication_destination.setter
    def is_replication_destination(self, is_replication_destination):
        """Sets the is_replication_destination of this VolumeModify.

        New value for is_replication_destination property. The modification is only supported for primary and clone volume, only when the current value is true and there is no longer a replication session using this volume as a destination, and only to false.  # noqa: E501

        :param is_replication_destination: The is_replication_destination of this VolumeModify.  # noqa: E501
        :type: bool
        """

        self._is_replication_destination = is_replication_destination

    @property
    def force(self):
        """Gets the force of this VolumeModify.  # noqa: E501

        Normally a replication destination volume cannot be modified since it is controlled by replication. However, there can be cases where replication has failed or is no longer active and the replication destination volume needs to be cleaned up. With the force option, the user will be allowed to remove the protection policy from the replication destination volume provided that the replication session has never been synchronized and the last_sync_timestamp property is empty. This parameter defaults to false, if not specified.  # noqa: E501

        :return: The force of this VolumeModify.  # noqa: E501
        :rtype: bool
        """
        return self._force

    @force.setter
    def force(self, force):
        """Sets the force of this VolumeModify.

        Normally a replication destination volume cannot be modified since it is controlled by replication. However, there can be cases where replication has failed or is no longer active and the replication destination volume needs to be cleaned up. With the force option, the user will be allowed to remove the protection policy from the replication destination volume provided that the replication session has never been synchronized and the last_sync_timestamp property is empty. This parameter defaults to false, if not specified.  # noqa: E501

        :param force: The force of this VolumeModify.  # noqa: E501
        :type: bool
        """

        self._force = force

    @property
    def node_affinity(self):
        """Gets the node_affinity of this VolumeModify.  # noqa: E501

        Set which node will optimized for IO.  # noqa: E501

        :return: The node_affinity of this VolumeModify.  # noqa: E501
        :rtype: NodeAffinityEnum
        """
        return self._node_affinity

    @node_affinity.setter
    def node_affinity(self, node_affinity):
        """Sets the node_affinity of this VolumeModify.

        Set which node will optimized for IO.  # noqa: E501

        :param node_affinity: The node_affinity of this VolumeModify.  # noqa: E501
        :type: NodeAffinityEnum
        """

        self._node_affinity = node_affinity

    @property
    def app_type(self):
        """Gets the app_type of this VolumeModify.  # noqa: E501

         Was added in version 2.1.0.0.  # noqa: E501

        :return: The app_type of this VolumeModify.  # noqa: E501
        :rtype: AppTypeEnum
        """
        return self._app_type

    @app_type.setter
    def app_type(self, app_type):
        """Sets the app_type of this VolumeModify.

         Was added in version 2.1.0.0.  # noqa: E501

        :param app_type: The app_type of this VolumeModify.  # noqa: E501
        :type: AppTypeEnum
        """

        self._app_type = app_type

    @property
    def app_type_other(self):
        """Gets the app_type_other of this VolumeModify.  # noqa: E501

        An optional field used to describe application type usage for a volume. This field can only be set if app_type is set to Relational_Databases_Other, Big_Data_Analytics_Other, Business_Applications_Other, Healthcare_Other, Virtualization_Other or Other. If the app_type attribute is set to anything other than one of these values, the attribute will be cleared. Was added in version 2.1.0.0.  # noqa: E501

        :return: The app_type_other of this VolumeModify.  # noqa: E501
        :rtype: str
        """
        return self._app_type_other

    @app_type_other.setter
    def app_type_other(self, app_type_other):
        """Sets the app_type_other of this VolumeModify.

        An optional field used to describe application type usage for a volume. This field can only be set if app_type is set to Relational_Databases_Other, Big_Data_Analytics_Other, Business_Applications_Other, Healthcare_Other, Virtualization_Other or Other. If the app_type attribute is set to anything other than one of these values, the attribute will be cleared. Was added in version 2.1.0.0.  # noqa: E501

        :param app_type_other: The app_type_other of this VolumeModify.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                app_type_other is not None and len(app_type_other) > 32):
            raise ValueError("Invalid value for `app_type_other`, length must be less than or equal to `32`")  # noqa: E501

        self._app_type_other = app_type_other

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VolumeModify, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VolumeModify):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VolumeModify):
            return True

        return self.to_dict() != other.to_dict()
