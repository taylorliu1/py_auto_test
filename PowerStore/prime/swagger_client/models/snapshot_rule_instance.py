# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class SnapshotRuleInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'interval': 'SnapRuleIntervalEnum',
        'time_of_day': 'str',
        'timezone': 'TimeZoneEnum',
        'days_of_week': 'list[DaysOfWeekEnum]',
        'desired_retention': 'int',
        'is_replica': 'bool',
        'is_read_only': 'bool',
        'managed_by': 'PolicyManagedByEnum',
        'managed_by_id': 'str',
        'interval_l10n': 'str',
        'timezone_l10n': 'str',
        'days_of_week_l10n': 'list[str]',
        'managed_by_l10n': 'str',
        'policies': 'list[PolicyInstance]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'interval': 'interval',
        'time_of_day': 'time_of_day',
        'timezone': 'timezone',
        'days_of_week': 'days_of_week',
        'desired_retention': 'desired_retention',
        'is_replica': 'is_replica',
        'is_read_only': 'is_read_only',
        'managed_by': 'managed_by',
        'managed_by_id': 'managed_by_id',
        'interval_l10n': 'interval_l10n',
        'timezone_l10n': 'timezone_l10n',
        'days_of_week_l10n': 'days_of_week_l10n',
        'managed_by_l10n': 'managed_by_l10n',
        'policies': 'policies'
    }

    def __init__(self, id=None, name=None, interval=None, time_of_day=None, timezone=None, days_of_week=None, desired_retention=None, is_replica=False, is_read_only=False, managed_by=None, managed_by_id=None, interval_l10n=None, timezone_l10n=None, days_of_week_l10n=None, managed_by_l10n=None, policies=None, _configuration=None):  # noqa: E501
        """SnapshotRuleInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._interval = None
        self._time_of_day = None
        self._timezone = None
        self._days_of_week = None
        self._desired_retention = None
        self._is_replica = None
        self._is_read_only = None
        self._managed_by = None
        self._managed_by_id = None
        self._interval_l10n = None
        self._timezone_l10n = None
        self._days_of_week_l10n = None
        self._managed_by_l10n = None
        self._policies = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if interval is not None:
            self.interval = interval
        if time_of_day is not None:
            self.time_of_day = time_of_day
        if timezone is not None:
            self.timezone = timezone
        if days_of_week is not None:
            self.days_of_week = days_of_week
        if desired_retention is not None:
            self.desired_retention = desired_retention
        if is_replica is not None:
            self.is_replica = is_replica
        if is_read_only is not None:
            self.is_read_only = is_read_only
        if managed_by is not None:
            self.managed_by = managed_by
        if managed_by_id is not None:
            self.managed_by_id = managed_by_id
        if interval_l10n is not None:
            self.interval_l10n = interval_l10n
        if timezone_l10n is not None:
            self.timezone_l10n = timezone_l10n
        if days_of_week_l10n is not None:
            self.days_of_week_l10n = days_of_week_l10n
        if managed_by_l10n is not None:
            self.managed_by_l10n = managed_by_l10n
        if policies is not None:
            self.policies = policies

    @property
    def id(self):
        """Gets the id of this SnapshotRuleInstance.  # noqa: E501

        Unique identifier of the snapshot rule.  # noqa: E501

        :return: The id of this SnapshotRuleInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SnapshotRuleInstance.

        Unique identifier of the snapshot rule.  # noqa: E501

        :param id: The id of this SnapshotRuleInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this SnapshotRuleInstance.  # noqa: E501

        Snapshot rule name.  This property supports case-insensitive filtering.  # noqa: E501

        :return: The name of this SnapshotRuleInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SnapshotRuleInstance.

        Snapshot rule name.  This property supports case-insensitive filtering.  # noqa: E501

        :param name: The name of this SnapshotRuleInstance.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def interval(self):
        """Gets the interval of this SnapshotRuleInstance.  # noqa: E501


        :return: The interval of this SnapshotRuleInstance.  # noqa: E501
        :rtype: SnapRuleIntervalEnum
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this SnapshotRuleInstance.


        :param interval: The interval of this SnapshotRuleInstance.  # noqa: E501
        :type: SnapRuleIntervalEnum
        """

        self._interval = interval

    @property
    def time_of_day(self):
        """Gets the time_of_day of this SnapshotRuleInstance.  # noqa: E501

        Time of the day to take a daily snapshot, with format \"hh:mm\" using a 24 hour clock. Either the interval parameter or the time_of_day parameter will be set, but not both.   # noqa: E501

        :return: The time_of_day of this SnapshotRuleInstance.  # noqa: E501
        :rtype: str
        """
        return self._time_of_day

    @time_of_day.setter
    def time_of_day(self, time_of_day):
        """Sets the time_of_day of this SnapshotRuleInstance.

        Time of the day to take a daily snapshot, with format \"hh:mm\" using a 24 hour clock. Either the interval parameter or the time_of_day parameter will be set, but not both.   # noqa: E501

        :param time_of_day: The time_of_day of this SnapshotRuleInstance.  # noqa: E501
        :type: str
        """

        self._time_of_day = time_of_day

    @property
    def timezone(self):
        """Gets the timezone of this SnapshotRuleInstance.  # noqa: E501

         Was added in version 2.0.0.0.  # noqa: E501

        :return: The timezone of this SnapshotRuleInstance.  # noqa: E501
        :rtype: TimeZoneEnum
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this SnapshotRuleInstance.

         Was added in version 2.0.0.0.  # noqa: E501

        :param timezone: The timezone of this SnapshotRuleInstance.  # noqa: E501
        :type: TimeZoneEnum
        """

        self._timezone = timezone

    @property
    def days_of_week(self):
        """Gets the days_of_week of this SnapshotRuleInstance.  # noqa: E501

        Days of the week when the snapshot rule should be applied. Days are determined based on the UTC time zone, unless the time_of_day and timezone properties are set.   # noqa: E501

        :return: The days_of_week of this SnapshotRuleInstance.  # noqa: E501
        :rtype: list[DaysOfWeekEnum]
        """
        return self._days_of_week

    @days_of_week.setter
    def days_of_week(self, days_of_week):
        """Sets the days_of_week of this SnapshotRuleInstance.

        Days of the week when the snapshot rule should be applied. Days are determined based on the UTC time zone, unless the time_of_day and timezone properties are set.   # noqa: E501

        :param days_of_week: The days_of_week of this SnapshotRuleInstance.  # noqa: E501
        :type: list[DaysOfWeekEnum]
        """

        self._days_of_week = days_of_week

    @property
    def desired_retention(self):
        """Gets the desired_retention of this SnapshotRuleInstance.  # noqa: E501

        Desired snapshot retention period in hours. The system will retain snapshots for this time period.   # noqa: E501

        :return: The desired_retention of this SnapshotRuleInstance.  # noqa: E501
        :rtype: int
        """
        return self._desired_retention

    @desired_retention.setter
    def desired_retention(self, desired_retention):
        """Sets the desired_retention of this SnapshotRuleInstance.

        Desired snapshot retention period in hours. The system will retain snapshots for this time period.   # noqa: E501

        :param desired_retention: The desired_retention of this SnapshotRuleInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                desired_retention is not None and desired_retention > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `desired_retention`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                desired_retention is not None and desired_retention < 0):  # noqa: E501
            raise ValueError("Invalid value for `desired_retention`, must be a value greater than or equal to `0`")  # noqa: E501

        self._desired_retention = desired_retention

    @property
    def is_replica(self):
        """Gets the is_replica of this SnapshotRuleInstance.  # noqa: E501

        Indicates whether this is a replica of a snapshot rule on a remote system that is the source of a replication session replicating a storage resource to the local system.   # noqa: E501

        :return: The is_replica of this SnapshotRuleInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_replica

    @is_replica.setter
    def is_replica(self, is_replica):
        """Sets the is_replica of this SnapshotRuleInstance.

        Indicates whether this is a replica of a snapshot rule on a remote system that is the source of a replication session replicating a storage resource to the local system.   # noqa: E501

        :param is_replica: The is_replica of this SnapshotRuleInstance.  # noqa: E501
        :type: bool
        """

        self._is_replica = is_replica

    @property
    def is_read_only(self):
        """Gets the is_read_only of this SnapshotRuleInstance.  # noqa: E501

        Indicates whether this snapshot rule can be modified.  Was added in version 3.0.0.0.  # noqa: E501

        :return: The is_read_only of this SnapshotRuleInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_read_only

    @is_read_only.setter
    def is_read_only(self, is_read_only):
        """Sets the is_read_only of this SnapshotRuleInstance.

        Indicates whether this snapshot rule can be modified.  Was added in version 3.0.0.0.  # noqa: E501

        :param is_read_only: The is_read_only of this SnapshotRuleInstance.  # noqa: E501
        :type: bool
        """

        self._is_read_only = is_read_only

    @property
    def managed_by(self):
        """Gets the managed_by of this SnapshotRuleInstance.  # noqa: E501

         Was added in version 3.0.0.0.  # noqa: E501

        :return: The managed_by of this SnapshotRuleInstance.  # noqa: E501
        :rtype: PolicyManagedByEnum
        """
        return self._managed_by

    @managed_by.setter
    def managed_by(self, managed_by):
        """Sets the managed_by of this SnapshotRuleInstance.

         Was added in version 3.0.0.0.  # noqa: E501

        :param managed_by: The managed_by of this SnapshotRuleInstance.  # noqa: E501
        :type: PolicyManagedByEnum
        """

        self._managed_by = managed_by

    @property
    def managed_by_id(self):
        """Gets the managed_by_id of this SnapshotRuleInstance.  # noqa: E501

        Unique identifier of the managing entity based on the value of the managed_by property, as shown below:   * User - Empty   * Metro - Unique identifier of the remote system where the policy was assigned.   * Replication - Unique identifier of the source remote system.   * VMware_vSphere - Unique identifier of the owning VMware vSphere/vCenter.  Was added in version 3.0.0.0.  # noqa: E501

        :return: The managed_by_id of this SnapshotRuleInstance.  # noqa: E501
        :rtype: str
        """
        return self._managed_by_id

    @managed_by_id.setter
    def managed_by_id(self, managed_by_id):
        """Sets the managed_by_id of this SnapshotRuleInstance.

        Unique identifier of the managing entity based on the value of the managed_by property, as shown below:   * User - Empty   * Metro - Unique identifier of the remote system where the policy was assigned.   * Replication - Unique identifier of the source remote system.   * VMware_vSphere - Unique identifier of the owning VMware vSphere/vCenter.  Was added in version 3.0.0.0.  # noqa: E501

        :param managed_by_id: The managed_by_id of this SnapshotRuleInstance.  # noqa: E501
        :type: str
        """

        self._managed_by_id = managed_by_id

    @property
    def interval_l10n(self):
        """Gets the interval_l10n of this SnapshotRuleInstance.  # noqa: E501

        Localized message string corresponding to interval  # noqa: E501

        :return: The interval_l10n of this SnapshotRuleInstance.  # noqa: E501
        :rtype: str
        """
        return self._interval_l10n

    @interval_l10n.setter
    def interval_l10n(self, interval_l10n):
        """Sets the interval_l10n of this SnapshotRuleInstance.

        Localized message string corresponding to interval  # noqa: E501

        :param interval_l10n: The interval_l10n of this SnapshotRuleInstance.  # noqa: E501
        :type: str
        """

        self._interval_l10n = interval_l10n

    @property
    def timezone_l10n(self):
        """Gets the timezone_l10n of this SnapshotRuleInstance.  # noqa: E501

        Localized message string corresponding to timezone Was added in version 2.0.0.0.  # noqa: E501

        :return: The timezone_l10n of this SnapshotRuleInstance.  # noqa: E501
        :rtype: str
        """
        return self._timezone_l10n

    @timezone_l10n.setter
    def timezone_l10n(self, timezone_l10n):
        """Sets the timezone_l10n of this SnapshotRuleInstance.

        Localized message string corresponding to timezone Was added in version 2.0.0.0.  # noqa: E501

        :param timezone_l10n: The timezone_l10n of this SnapshotRuleInstance.  # noqa: E501
        :type: str
        """

        self._timezone_l10n = timezone_l10n

    @property
    def days_of_week_l10n(self):
        """Gets the days_of_week_l10n of this SnapshotRuleInstance.  # noqa: E501

        Localized message array corresponding to days_of_week  # noqa: E501

        :return: The days_of_week_l10n of this SnapshotRuleInstance.  # noqa: E501
        :rtype: list[str]
        """
        return self._days_of_week_l10n

    @days_of_week_l10n.setter
    def days_of_week_l10n(self, days_of_week_l10n):
        """Sets the days_of_week_l10n of this SnapshotRuleInstance.

        Localized message array corresponding to days_of_week  # noqa: E501

        :param days_of_week_l10n: The days_of_week_l10n of this SnapshotRuleInstance.  # noqa: E501
        :type: list[str]
        """

        self._days_of_week_l10n = days_of_week_l10n

    @property
    def managed_by_l10n(self):
        """Gets the managed_by_l10n of this SnapshotRuleInstance.  # noqa: E501

        Localized message string corresponding to managed_by Was added in version 3.0.0.0.  # noqa: E501

        :return: The managed_by_l10n of this SnapshotRuleInstance.  # noqa: E501
        :rtype: str
        """
        return self._managed_by_l10n

    @managed_by_l10n.setter
    def managed_by_l10n(self, managed_by_l10n):
        """Sets the managed_by_l10n of this SnapshotRuleInstance.

        Localized message string corresponding to managed_by Was added in version 3.0.0.0.  # noqa: E501

        :param managed_by_l10n: The managed_by_l10n of this SnapshotRuleInstance.  # noqa: E501
        :type: str
        """

        self._managed_by_l10n = managed_by_l10n

    @property
    def policies(self):
        """Gets the policies of this SnapshotRuleInstance.  # noqa: E501

        List of the policies that are associated with this snapshot_rule.  # noqa: E501

        :return: The policies of this SnapshotRuleInstance.  # noqa: E501
        :rtype: list[PolicyInstance]
        """
        return self._policies

    @policies.setter
    def policies(self, policies):
        """Sets the policies of this SnapshotRuleInstance.

        List of the policies that are associated with this snapshot_rule.  # noqa: E501

        :param policies: The policies of this SnapshotRuleInstance.  # noqa: E501
        :type: list[PolicyInstance]
        """

        self._policies = policies

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SnapshotRuleInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SnapshotRuleInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SnapshotRuleInstance):
            return True

        return self.to_dict() != other.to_dict()
