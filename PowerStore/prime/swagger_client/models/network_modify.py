# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class NetworkModify(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vlan_id': 'int',
        'name': 'str',
        'gateway': 'str',
        'prefix_length': 'int',
        'cluster_mgmt_address': 'str',
        'storage_discovery_address': 'str',
        'vasa_provider_credentials': 'object',
        'esxi_credentials': 'EsxiCredentials',
        'mtu': 'int',
        'add_addresses': 'list[str]',
        'remove_addresses': 'list[str]',
        'add_purposes': 'list[NetworkPurposeEnum]',
        'remove_purposes': 'list[NetworkPurposeEnum]',
        'nvme_discovery_mode': 'NVMeDiscoveryModeEnum',
        'nvme_cdc_address': 'str',
        'nvme_cdc_port': 'int',
        'force': 'bool'
    }

    attribute_map = {
        'vlan_id': 'vlan_id',
        'name': 'name',
        'gateway': 'gateway',
        'prefix_length': 'prefix_length',
        'cluster_mgmt_address': 'cluster_mgmt_address',
        'storage_discovery_address': 'storage_discovery_address',
        'vasa_provider_credentials': 'vasa_provider_credentials',
        'esxi_credentials': 'esxi_credentials',
        'mtu': 'mtu',
        'add_addresses': 'add_addresses',
        'remove_addresses': 'remove_addresses',
        'add_purposes': 'add_purposes',
        'remove_purposes': 'remove_purposes',
        'nvme_discovery_mode': 'nvme_discovery_mode',
        'nvme_cdc_address': 'nvme_cdc_address',
        'nvme_cdc_port': 'nvme_cdc_port',
        'force': 'force'
    }

    def __init__(self, vlan_id=None, name=None, gateway=None, prefix_length=None, cluster_mgmt_address=None, storage_discovery_address=None, vasa_provider_credentials=None, esxi_credentials=None, mtu=None, add_addresses=None, remove_addresses=None, add_purposes=None, remove_purposes=None, nvme_discovery_mode=None, nvme_cdc_address=None, nvme_cdc_port=8009, force=False, _configuration=None):  # noqa: E501
        """NetworkModify - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._vlan_id = None
        self._name = None
        self._gateway = None
        self._prefix_length = None
        self._cluster_mgmt_address = None
        self._storage_discovery_address = None
        self._vasa_provider_credentials = None
        self._esxi_credentials = None
        self._mtu = None
        self._add_addresses = None
        self._remove_addresses = None
        self._add_purposes = None
        self._remove_purposes = None
        self._nvme_discovery_mode = None
        self._nvme_cdc_address = None
        self._nvme_cdc_port = None
        self._force = None
        self.discriminator = None

        if vlan_id is not None:
            self.vlan_id = vlan_id
        if name is not None:
            self.name = name
        if gateway is not None:
            self.gateway = gateway
        if prefix_length is not None:
            self.prefix_length = prefix_length
        if cluster_mgmt_address is not None:
            self.cluster_mgmt_address = cluster_mgmt_address
        if storage_discovery_address is not None:
            self.storage_discovery_address = storage_discovery_address
        if vasa_provider_credentials is not None:
            self.vasa_provider_credentials = vasa_provider_credentials
        if esxi_credentials is not None:
            self.esxi_credentials = esxi_credentials
        if mtu is not None:
            self.mtu = mtu
        if add_addresses is not None:
            self.add_addresses = add_addresses
        if remove_addresses is not None:
            self.remove_addresses = remove_addresses
        if add_purposes is not None:
            self.add_purposes = add_purposes
        if remove_purposes is not None:
            self.remove_purposes = remove_purposes
        if nvme_discovery_mode is not None:
            self.nvme_discovery_mode = nvme_discovery_mode
        if nvme_cdc_address is not None:
            self.nvme_cdc_address = nvme_cdc_address
        if nvme_cdc_port is not None:
            self.nvme_cdc_port = nvme_cdc_port
        if force is not None:
            self.force = force

    @property
    def vlan_id(self):
        """Gets the vlan_id of this NetworkModify.  # noqa: E501

        VLAN identifier.  # noqa: E501

        :return: The vlan_id of this NetworkModify.  # noqa: E501
        :rtype: int
        """
        return self._vlan_id

    @vlan_id.setter
    def vlan_id(self, vlan_id):
        """Sets the vlan_id of this NetworkModify.

        VLAN identifier.  # noqa: E501

        :param vlan_id: The vlan_id of this NetworkModify.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                vlan_id is not None and vlan_id > 4094):  # noqa: E501
            raise ValueError("Invalid value for `vlan_id`, must be a value less than or equal to `4094`")  # noqa: E501
        if (self._configuration.client_side_validation and
                vlan_id is not None and vlan_id < 0):  # noqa: E501
            raise ValueError("Invalid value for `vlan_id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._vlan_id = vlan_id

    @property
    def name(self):
        """Gets the name of this NetworkModify.  # noqa: E501

        Name of the network. Was added in version 2.0.0.0.  # noqa: E501

        :return: The name of this NetworkModify.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NetworkModify.

        Name of the network. Was added in version 2.0.0.0.  # noqa: E501

        :param name: The name of this NetworkModify.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 128):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def gateway(self):
        """Gets the gateway of this NetworkModify.  # noqa: E501

        * Network gateway in IPv4 or IPv6 format, corresponding to the network's IP version. * Specify empty string to remove the gateway.   # noqa: E501

        :return: The gateway of this NetworkModify.  # noqa: E501
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this NetworkModify.

        * Network gateway in IPv4 or IPv6 format, corresponding to the network's IP version. * Specify empty string to remove the gateway.   # noqa: E501

        :param gateway: The gateway of this NetworkModify.  # noqa: E501
        :type: str
        """

        self._gateway = gateway

    @property
    def prefix_length(self):
        """Gets the prefix_length of this NetworkModify.  # noqa: E501

        Network prefix length. (Used for both IPv4 and IPv6).  # noqa: E501

        :return: The prefix_length of this NetworkModify.  # noqa: E501
        :rtype: int
        """
        return self._prefix_length

    @prefix_length.setter
    def prefix_length(self, prefix_length):
        """Sets the prefix_length of this NetworkModify.

        Network prefix length. (Used for both IPv4 and IPv6).  # noqa: E501

        :param prefix_length: The prefix_length of this NetworkModify.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                prefix_length is not None and prefix_length > 127):  # noqa: E501
            raise ValueError("Invalid value for `prefix_length`, must be a value less than or equal to `127`")  # noqa: E501
        if (self._configuration.client_side_validation and
                prefix_length is not None and prefix_length < 1):  # noqa: E501
            raise ValueError("Invalid value for `prefix_length`, must be a value greater than or equal to `1`")  # noqa: E501

        self._prefix_length = prefix_length

    @property
    def cluster_mgmt_address(self):
        """Gets the cluster_mgmt_address of this NetworkModify.  # noqa: E501

        * Cluster management IP address in IPv4 or IPv6 format, corresponding to the network's IP version. * This can only be specified when reconfiguring these network types, which support cluster IP - * - Management - floating IP address for external cluster management. * - File_Mobility - floating IP address for file mobility network.  * Caution: Changing the cluster management IP address for Management network will lead to losing management sessions through this address.   # noqa: E501

        :return: The cluster_mgmt_address of this NetworkModify.  # noqa: E501
        :rtype: str
        """
        return self._cluster_mgmt_address

    @cluster_mgmt_address.setter
    def cluster_mgmt_address(self, cluster_mgmt_address):
        """Sets the cluster_mgmt_address of this NetworkModify.

        * Cluster management IP address in IPv4 or IPv6 format, corresponding to the network's IP version. * This can only be specified when reconfiguring these network types, which support cluster IP - * - Management - floating IP address for external cluster management. * - File_Mobility - floating IP address for file mobility network.  * Caution: Changing the cluster management IP address for Management network will lead to losing management sessions through this address.   # noqa: E501

        :param cluster_mgmt_address: The cluster_mgmt_address of this NetworkModify.  # noqa: E501
        :type: str
        """

        self._cluster_mgmt_address = cluster_mgmt_address

    @property
    def storage_discovery_address(self):
        """Gets the storage_discovery_address of this NetworkModify.  # noqa: E501

        * New storage discovery IP address in IPv4 or IPv6 format, corresponding to the network's IP version. * This can only be specified when reconfiguring the storage network. * Specify empty string to remove the storage discovery IP address.   # noqa: E501

        :return: The storage_discovery_address of this NetworkModify.  # noqa: E501
        :rtype: str
        """
        return self._storage_discovery_address

    @storage_discovery_address.setter
    def storage_discovery_address(self, storage_discovery_address):
        """Sets the storage_discovery_address of this NetworkModify.

        * New storage discovery IP address in IPv4 or IPv6 format, corresponding to the network's IP version. * This can only be specified when reconfiguring the storage network. * Specify empty string to remove the storage discovery IP address.   # noqa: E501

        :param storage_discovery_address: The storage_discovery_address of this NetworkModify.  # noqa: E501
        :type: str
        """

        self._storage_discovery_address = storage_discovery_address

    @property
    def vasa_provider_credentials(self):
        """Gets the vasa_provider_credentials of this NetworkModify.  # noqa: E501

        * Credentials required for re-registering the VASA vendor provider during the reconfiguration of the cluster management IP address. * Should be passed only when reconfiguring cluster management IP address.   # noqa: E501

        :return: The vasa_provider_credentials of this NetworkModify.  # noqa: E501
        :rtype: object
        """
        return self._vasa_provider_credentials

    @vasa_provider_credentials.setter
    def vasa_provider_credentials(self, vasa_provider_credentials):
        """Sets the vasa_provider_credentials of this NetworkModify.

        * Credentials required for re-registering the VASA vendor provider during the reconfiguration of the cluster management IP address. * Should be passed only when reconfiguring cluster management IP address.   # noqa: E501

        :param vasa_provider_credentials: The vasa_provider_credentials of this NetworkModify.  # noqa: E501
        :type: object
        """

        self._vasa_provider_credentials = vasa_provider_credentials

    @property
    def esxi_credentials(self):
        """Gets the esxi_credentials of this NetworkModify.  # noqa: E501


        :return: The esxi_credentials of this NetworkModify.  # noqa: E501
        :rtype: EsxiCredentials
        """
        return self._esxi_credentials

    @esxi_credentials.setter
    def esxi_credentials(self, esxi_credentials):
        """Sets the esxi_credentials of this NetworkModify.


        :param esxi_credentials: The esxi_credentials of this NetworkModify.  # noqa: E501
        :type: EsxiCredentials
        """

        self._esxi_credentials = esxi_credentials

    @property
    def mtu(self):
        """Gets the mtu of this NetworkModify.  # noqa: E501

        Maximum Transmission Unit (MTU) packet size set on network interfaces, in bytes.  # noqa: E501

        :return: The mtu of this NetworkModify.  # noqa: E501
        :rtype: int
        """
        return self._mtu

    @mtu.setter
    def mtu(self, mtu):
        """Sets the mtu of this NetworkModify.

        Maximum Transmission Unit (MTU) packet size set on network interfaces, in bytes.  # noqa: E501

        :param mtu: The mtu of this NetworkModify.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                mtu is not None and mtu > 9000):  # noqa: E501
            raise ValueError("Invalid value for `mtu`, must be a value less than or equal to `9000`")  # noqa: E501
        if (self._configuration.client_side_validation and
                mtu is not None and mtu < 1280):  # noqa: E501
            raise ValueError("Invalid value for `mtu`, must be a value greater than or equal to `1280`")  # noqa: E501

        self._mtu = mtu

    @property
    def add_addresses(self):
        """Gets the add_addresses of this NetworkModify.  # noqa: E501

        IP addresses to add in IPv4 or IPv6 format.  # noqa: E501

        :return: The add_addresses of this NetworkModify.  # noqa: E501
        :rtype: list[str]
        """
        return self._add_addresses

    @add_addresses.setter
    def add_addresses(self, add_addresses):
        """Sets the add_addresses of this NetworkModify.

        IP addresses to add in IPv4 or IPv6 format.  # noqa: E501

        :param add_addresses: The add_addresses of this NetworkModify.  # noqa: E501
        :type: list[str]
        """

        self._add_addresses = add_addresses

    @property
    def remove_addresses(self):
        """Gets the remove_addresses of this NetworkModify.  # noqa: E501

        IP addresses to remove in IPv4 or IPv6 format.  # noqa: E501

        :return: The remove_addresses of this NetworkModify.  # noqa: E501
        :rtype: list[str]
        """
        return self._remove_addresses

    @remove_addresses.setter
    def remove_addresses(self, remove_addresses):
        """Sets the remove_addresses of this NetworkModify.

        IP addresses to remove in IPv4 or IPv6 format.  # noqa: E501

        :param remove_addresses: The remove_addresses of this NetworkModify.  # noqa: E501
        :type: list[str]
        """

        self._remove_addresses = remove_addresses

    @property
    def add_purposes(self):
        """Gets the add_purposes of this NetworkModify.  # noqa: E501

        * Purposes to enable in the network. * This can only be specified when reconfiguring the network.  Was added in version 2.1.0.0.  # noqa: E501

        :return: The add_purposes of this NetworkModify.  # noqa: E501
        :rtype: list[NetworkPurposeEnum]
        """
        return self._add_purposes

    @add_purposes.setter
    def add_purposes(self, add_purposes):
        """Sets the add_purposes of this NetworkModify.

        * Purposes to enable in the network. * This can only be specified when reconfiguring the network.  Was added in version 2.1.0.0.  # noqa: E501

        :param add_purposes: The add_purposes of this NetworkModify.  # noqa: E501
        :type: list[NetworkPurposeEnum]
        """

        self._add_purposes = add_purposes

    @property
    def remove_purposes(self):
        """Gets the remove_purposes of this NetworkModify.  # noqa: E501

        * Purposes to disable in the network. * This can only be specified when reconfiguring the network. * Removal of ISCSI, NVMe/TCP purpose will lead to I/O disruption on external ISCSI, NVMe/TCP hosts consuming volumes via this network. It is recommended to disconnect any external hosts that may be affected (initiators should log out).  Was added in version 2.1.0.0.  # noqa: E501

        :return: The remove_purposes of this NetworkModify.  # noqa: E501
        :rtype: list[NetworkPurposeEnum]
        """
        return self._remove_purposes

    @remove_purposes.setter
    def remove_purposes(self, remove_purposes):
        """Sets the remove_purposes of this NetworkModify.

        * Purposes to disable in the network. * This can only be specified when reconfiguring the network. * Removal of ISCSI, NVMe/TCP purpose will lead to I/O disruption on external ISCSI, NVMe/TCP hosts consuming volumes via this network. It is recommended to disconnect any external hosts that may be affected (initiators should log out).  Was added in version 2.1.0.0.  # noqa: E501

        :param remove_purposes: The remove_purposes of this NetworkModify.  # noqa: E501
        :type: list[NetworkPurposeEnum]
        """

        self._remove_purposes = remove_purposes

    @property
    def nvme_discovery_mode(self):
        """Gets the nvme_discovery_mode of this NetworkModify.  # noqa: E501

         Was added in version 3.0.0.0.  # noqa: E501

        :return: The nvme_discovery_mode of this NetworkModify.  # noqa: E501
        :rtype: NVMeDiscoveryModeEnum
        """
        return self._nvme_discovery_mode

    @nvme_discovery_mode.setter
    def nvme_discovery_mode(self, nvme_discovery_mode):
        """Sets the nvme_discovery_mode of this NetworkModify.

         Was added in version 3.0.0.0.  # noqa: E501

        :param nvme_discovery_mode: The nvme_discovery_mode of this NetworkModify.  # noqa: E501
        :type: NVMeDiscoveryModeEnum
        """

        self._nvme_discovery_mode = nvme_discovery_mode

    @property
    def nvme_cdc_address(self):
        """Gets the nvme_cdc_address of this NetworkModify.  # noqa: E501

        IP address of the NVMe Centralized Discovery Controller (CDC). This is only applicable if network contains NVMe_TCP among its purposes, and nvme_discovery_mode is set to Manual_CDC.  Was added in version 3.0.0.0.  # noqa: E501

        :return: The nvme_cdc_address of this NetworkModify.  # noqa: E501
        :rtype: str
        """
        return self._nvme_cdc_address

    @nvme_cdc_address.setter
    def nvme_cdc_address(self, nvme_cdc_address):
        """Sets the nvme_cdc_address of this NetworkModify.

        IP address of the NVMe Centralized Discovery Controller (CDC). This is only applicable if network contains NVMe_TCP among its purposes, and nvme_discovery_mode is set to Manual_CDC.  Was added in version 3.0.0.0.  # noqa: E501

        :param nvme_cdc_address: The nvme_cdc_address of this NetworkModify.  # noqa: E501
        :type: str
        """

        self._nvme_cdc_address = nvme_cdc_address

    @property
    def nvme_cdc_port(self):
        """Gets the nvme_cdc_port of this NetworkModify.  # noqa: E501

        TCP port of the NVMe Centralized Discovery Controller (CDC). This is only applicable if network contains NVMe_TCP among its purposes, and nvme_discovery_mode is set to Manual_CDC. The valid values: 8009 or from 49152 to 49999 or 50100 to 65535.  Was added in version 3.0.0.0.  # noqa: E501

        :return: The nvme_cdc_port of this NetworkModify.  # noqa: E501
        :rtype: int
        """
        return self._nvme_cdc_port

    @nvme_cdc_port.setter
    def nvme_cdc_port(self, nvme_cdc_port):
        """Sets the nvme_cdc_port of this NetworkModify.

        TCP port of the NVMe Centralized Discovery Controller (CDC). This is only applicable if network contains NVMe_TCP among its purposes, and nvme_discovery_mode is set to Manual_CDC. The valid values: 8009 or from 49152 to 49999 or 50100 to 65535.  Was added in version 3.0.0.0.  # noqa: E501

        :param nvme_cdc_port: The nvme_cdc_port of this NetworkModify.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                nvme_cdc_port is not None and nvme_cdc_port > 65535):  # noqa: E501
            raise ValueError("Invalid value for `nvme_cdc_port`, must be a value less than or equal to `65535`")  # noqa: E501
        if (self._configuration.client_side_validation and
                nvme_cdc_port is not None and nvme_cdc_port < 8009):  # noqa: E501
            raise ValueError("Invalid value for `nvme_cdc_port`, must be a value greater than or equal to `8009`")  # noqa: E501

        self._nvme_cdc_port = nvme_cdc_port

    @property
    def force(self):
        """Gets the force of this NetworkModify.  # noqa: E501

        Indicates whether to suppress network validation errors. The option is intended to suppress false errors caused by network environment constraints.  Normally the command will fail with an error when: - Some of system network ports are in degraded state or have cabling issues, - System top-of-rack switches have configuration issues leading to network unreachability, - Network IP addresses have duplicates in the network environment, or network gateway is unreachable.  When force is true, the command will proceed instead.  Caution: Only use this option when you are certain that your requested settings are correct, and that you understand why they are failing at this time, and that you want to apply the settings anyway. Improper network settings can make the system unreachable for data and management.   # noqa: E501

        :return: The force of this NetworkModify.  # noqa: E501
        :rtype: bool
        """
        return self._force

    @force.setter
    def force(self, force):
        """Sets the force of this NetworkModify.

        Indicates whether to suppress network validation errors. The option is intended to suppress false errors caused by network environment constraints.  Normally the command will fail with an error when: - Some of system network ports are in degraded state or have cabling issues, - System top-of-rack switches have configuration issues leading to network unreachability, - Network IP addresses have duplicates in the network environment, or network gateway is unreachable.  When force is true, the command will proceed instead.  Caution: Only use this option when you are certain that your requested settings are correct, and that you understand why they are failing at this time, and that you want to apply the settings anyway. Improper network settings can make the system unreachable for data and management.   # noqa: E501

        :param force: The force of this NetworkModify.  # noqa: E501
        :type: bool
        """

        self._force = force

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetworkModify, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkModify):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NetworkModify):
            return True

        return self.to_dict() != other.to_dict()
