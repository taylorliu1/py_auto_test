# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class HostInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'type': 'HostTypeEnum',
        'os_type': 'OSTypeEnum',
        'host_group_id': 'str',
        'host_connectivity': 'HostConnectivityEnum',
        'host_initiators': 'list[HostInitiatorInstance]',
        'type_l10n': 'str',
        'os_type_l10n': 'str',
        'host_connectivity_l10n': 'str',
        'initiators': 'list[InitiatorInstance]',
        'host_group': 'HostGroupInstance',
        'import_host_system': 'ImportHostSystemInstance',
        'mapped_hosts': 'list[HostVolumeMappingInstance]',
        'host_virtual_volume_mappings': 'list[HostVirtualVolumeMappingInstance]',
        'vsphere_hosts': 'list[VsphereHostInstance]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'type': 'type',
        'os_type': 'os_type',
        'host_group_id': 'host_group_id',
        'host_connectivity': 'host_connectivity',
        'host_initiators': 'host_initiators',
        'type_l10n': 'type_l10n',
        'os_type_l10n': 'os_type_l10n',
        'host_connectivity_l10n': 'host_connectivity_l10n',
        'initiators': 'initiators',
        'host_group': 'host_group',
        'import_host_system': 'import_host_system',
        'mapped_hosts': 'mapped_hosts',
        'host_virtual_volume_mappings': 'host_virtual_volume_mappings',
        'vsphere_hosts': 'vsphere_hosts'
    }

    def __init__(self, id=None, name=None, description=None, type=None, os_type=None, host_group_id=None, host_connectivity=None, host_initiators=None, type_l10n=None, os_type_l10n=None, host_connectivity_l10n=None, initiators=None, host_group=None, import_host_system=None, mapped_hosts=None, host_virtual_volume_mappings=None, vsphere_hosts=None, _configuration=None):  # noqa: E501
        """HostInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._description = None
        self._type = None
        self._os_type = None
        self._host_group_id = None
        self._host_connectivity = None
        self._host_initiators = None
        self._type_l10n = None
        self._os_type_l10n = None
        self._host_connectivity_l10n = None
        self._initiators = None
        self._host_group = None
        self._import_host_system = None
        self._mapped_hosts = None
        self._host_virtual_volume_mappings = None
        self._vsphere_hosts = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if type is not None:
            self.type = type
        if os_type is not None:
            self.os_type = os_type
        if host_group_id is not None:
            self.host_group_id = host_group_id
        if host_connectivity is not None:
            self.host_connectivity = host_connectivity
        if host_initiators is not None:
            self.host_initiators = host_initiators
        if type_l10n is not None:
            self.type_l10n = type_l10n
        if os_type_l10n is not None:
            self.os_type_l10n = os_type_l10n
        if host_connectivity_l10n is not None:
            self.host_connectivity_l10n = host_connectivity_l10n
        if initiators is not None:
            self.initiators = initiators
        if host_group is not None:
            self.host_group = host_group
        if import_host_system is not None:
            self.import_host_system = import_host_system
        if mapped_hosts is not None:
            self.mapped_hosts = mapped_hosts
        if host_virtual_volume_mappings is not None:
            self.host_virtual_volume_mappings = host_virtual_volume_mappings
        if vsphere_hosts is not None:
            self.vsphere_hosts = vsphere_hosts

    @property
    def id(self):
        """Gets the id of this HostInstance.  # noqa: E501

        Unique identifier of the host.  # noqa: E501

        :return: The id of this HostInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HostInstance.

        Unique identifier of the host.  # noqa: E501

        :param id: The id of this HostInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this HostInstance.  # noqa: E501

        The host name.  This property supports case-insensitive filtering.  # noqa: E501

        :return: The name of this HostInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HostInstance.

        The host name.  This property supports case-insensitive filtering.  # noqa: E501

        :param name: The name of this HostInstance.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this HostInstance.  # noqa: E501

        A description for the host.  # noqa: E501

        :return: The description of this HostInstance.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this HostInstance.

        A description for the host.  # noqa: E501

        :param description: The description of this HostInstance.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this HostInstance.  # noqa: E501

         Was added in version 2.0.0.0.  # noqa: E501

        :return: The type of this HostInstance.  # noqa: E501
        :rtype: HostTypeEnum
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this HostInstance.

         Was added in version 2.0.0.0.  # noqa: E501

        :param type: The type of this HostInstance.  # noqa: E501
        :type: HostTypeEnum
        """

        self._type = type

    @property
    def os_type(self):
        """Gets the os_type of this HostInstance.  # noqa: E501


        :return: The os_type of this HostInstance.  # noqa: E501
        :rtype: OSTypeEnum
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type):
        """Sets the os_type of this HostInstance.


        :param os_type: The os_type of this HostInstance.  # noqa: E501
        :type: OSTypeEnum
        """

        self._os_type = os_type

    @property
    def host_group_id(self):
        """Gets the host_group_id of this HostInstance.  # noqa: E501

        Associated host group, if host is part of host group.  # noqa: E501

        :return: The host_group_id of this HostInstance.  # noqa: E501
        :rtype: str
        """
        return self._host_group_id

    @host_group_id.setter
    def host_group_id(self, host_group_id):
        """Sets the host_group_id of this HostInstance.

        Associated host group, if host is part of host group.  # noqa: E501

        :param host_group_id: The host_group_id of this HostInstance.  # noqa: E501
        :type: str
        """

        self._host_group_id = host_group_id

    @property
    def host_connectivity(self):
        """Gets the host_connectivity of this HostInstance.  # noqa: E501

         Was added in version 3.0.0.0.  # noqa: E501

        :return: The host_connectivity of this HostInstance.  # noqa: E501
        :rtype: HostConnectivityEnum
        """
        return self._host_connectivity

    @host_connectivity.setter
    def host_connectivity(self, host_connectivity):
        """Sets the host_connectivity of this HostInstance.

         Was added in version 3.0.0.0.  # noqa: E501

        :param host_connectivity: The host_connectivity of this HostInstance.  # noqa: E501
        :type: HostConnectivityEnum
        """

        self._host_connectivity = host_connectivity

    @property
    def host_initiators(self):
        """Gets the host_initiators of this HostInstance.  # noqa: E501

         Was deprecated in version 3.0.0.0.  Filtering on the fields of this embedded resource is not supported.  # noqa: E501

        :return: The host_initiators of this HostInstance.  # noqa: E501
        :rtype: list[HostInitiatorInstance]
        """
        return self._host_initiators

    @host_initiators.setter
    def host_initiators(self, host_initiators):
        """Sets the host_initiators of this HostInstance.

         Was deprecated in version 3.0.0.0.  Filtering on the fields of this embedded resource is not supported.  # noqa: E501

        :param host_initiators: The host_initiators of this HostInstance.  # noqa: E501
        :type: list[HostInitiatorInstance]
        """

        self._host_initiators = host_initiators

    @property
    def type_l10n(self):
        """Gets the type_l10n of this HostInstance.  # noqa: E501

        Localized message string corresponding to type Was added in version 2.0.0.0.  # noqa: E501

        :return: The type_l10n of this HostInstance.  # noqa: E501
        :rtype: str
        """
        return self._type_l10n

    @type_l10n.setter
    def type_l10n(self, type_l10n):
        """Sets the type_l10n of this HostInstance.

        Localized message string corresponding to type Was added in version 2.0.0.0.  # noqa: E501

        :param type_l10n: The type_l10n of this HostInstance.  # noqa: E501
        :type: str
        """

        self._type_l10n = type_l10n

    @property
    def os_type_l10n(self):
        """Gets the os_type_l10n of this HostInstance.  # noqa: E501

        Localized message string corresponding to os_type  # noqa: E501

        :return: The os_type_l10n of this HostInstance.  # noqa: E501
        :rtype: str
        """
        return self._os_type_l10n

    @os_type_l10n.setter
    def os_type_l10n(self, os_type_l10n):
        """Sets the os_type_l10n of this HostInstance.

        Localized message string corresponding to os_type  # noqa: E501

        :param os_type_l10n: The os_type_l10n of this HostInstance.  # noqa: E501
        :type: str
        """

        self._os_type_l10n = os_type_l10n

    @property
    def host_connectivity_l10n(self):
        """Gets the host_connectivity_l10n of this HostInstance.  # noqa: E501

        Localized message string corresponding to host_connectivity Was added in version 3.0.0.0.  # noqa: E501

        :return: The host_connectivity_l10n of this HostInstance.  # noqa: E501
        :rtype: str
        """
        return self._host_connectivity_l10n

    @host_connectivity_l10n.setter
    def host_connectivity_l10n(self, host_connectivity_l10n):
        """Sets the host_connectivity_l10n of this HostInstance.

        Localized message string corresponding to host_connectivity Was added in version 3.0.0.0.  # noqa: E501

        :param host_connectivity_l10n: The host_connectivity_l10n of this HostInstance.  # noqa: E501
        :type: str
        """

        self._host_connectivity_l10n = host_connectivity_l10n

    @property
    def initiators(self):
        """Gets the initiators of this HostInstance.  # noqa: E501

        This is the inverse of the resource type initiator association.  # noqa: E501

        :return: The initiators of this HostInstance.  # noqa: E501
        :rtype: list[InitiatorInstance]
        """
        return self._initiators

    @initiators.setter
    def initiators(self, initiators):
        """Sets the initiators of this HostInstance.

        This is the inverse of the resource type initiator association.  # noqa: E501

        :param initiators: The initiators of this HostInstance.  # noqa: E501
        :type: list[InitiatorInstance]
        """

        self._initiators = initiators

    @property
    def host_group(self):
        """Gets the host_group of this HostInstance.  # noqa: E501

        This is the embeddable reference form of host_group_id attribute.  # noqa: E501

        :return: The host_group of this HostInstance.  # noqa: E501
        :rtype: HostGroupInstance
        """
        return self._host_group

    @host_group.setter
    def host_group(self, host_group):
        """Sets the host_group of this HostInstance.

        This is the embeddable reference form of host_group_id attribute.  # noqa: E501

        :param host_group: The host_group of this HostInstance.  # noqa: E501
        :type: HostGroupInstance
        """

        self._host_group = host_group

    @property
    def import_host_system(self):
        """Gets the import_host_system of this HostInstance.  # noqa: E501

        This is the embeddable reference form of import_host_system_id attribute.  # noqa: E501

        :return: The import_host_system of this HostInstance.  # noqa: E501
        :rtype: ImportHostSystemInstance
        """
        return self._import_host_system

    @import_host_system.setter
    def import_host_system(self, import_host_system):
        """Sets the import_host_system of this HostInstance.

        This is the embeddable reference form of import_host_system_id attribute.  # noqa: E501

        :param import_host_system: The import_host_system of this HostInstance.  # noqa: E501
        :type: ImportHostSystemInstance
        """

        self._import_host_system = import_host_system

    @property
    def mapped_hosts(self):
        """Gets the mapped_hosts of this HostInstance.  # noqa: E501

        This is the inverse of the resource type host_volume_mapping association.  # noqa: E501

        :return: The mapped_hosts of this HostInstance.  # noqa: E501
        :rtype: list[HostVolumeMappingInstance]
        """
        return self._mapped_hosts

    @mapped_hosts.setter
    def mapped_hosts(self, mapped_hosts):
        """Sets the mapped_hosts of this HostInstance.

        This is the inverse of the resource type host_volume_mapping association.  # noqa: E501

        :param mapped_hosts: The mapped_hosts of this HostInstance.  # noqa: E501
        :type: list[HostVolumeMappingInstance]
        """

        self._mapped_hosts = mapped_hosts

    @property
    def host_virtual_volume_mappings(self):
        """Gets the host_virtual_volume_mappings of this HostInstance.  # noqa: E501

        This is the inverse of the resource type host_virtual_volume_mapping association.  # noqa: E501

        :return: The host_virtual_volume_mappings of this HostInstance.  # noqa: E501
        :rtype: list[HostVirtualVolumeMappingInstance]
        """
        return self._host_virtual_volume_mappings

    @host_virtual_volume_mappings.setter
    def host_virtual_volume_mappings(self, host_virtual_volume_mappings):
        """Sets the host_virtual_volume_mappings of this HostInstance.

        This is the inverse of the resource type host_virtual_volume_mapping association.  # noqa: E501

        :param host_virtual_volume_mappings: The host_virtual_volume_mappings of this HostInstance.  # noqa: E501
        :type: list[HostVirtualVolumeMappingInstance]
        """

        self._host_virtual_volume_mappings = host_virtual_volume_mappings

    @property
    def vsphere_hosts(self):
        """Gets the vsphere_hosts of this HostInstance.  # noqa: E501

        List of the vsphere_hosts that are associated with this host.  # noqa: E501

        :return: The vsphere_hosts of this HostInstance.  # noqa: E501
        :rtype: list[VsphereHostInstance]
        """
        return self._vsphere_hosts

    @vsphere_hosts.setter
    def vsphere_hosts(self, vsphere_hosts):
        """Sets the vsphere_hosts of this HostInstance.

        List of the vsphere_hosts that are associated with this host.  # noqa: E501

        :param vsphere_hosts: The vsphere_hosts of this HostInstance.  # noqa: E501
        :type: list[VsphereHostInstance]
        """

        self._vsphere_hosts = vsphere_hosts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HostInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HostInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HostInstance):
            return True

        return self.to_dict() != other.to_dict()
