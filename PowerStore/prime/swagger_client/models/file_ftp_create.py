# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class FileFtpCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nas_server_id': 'str',
        'is_ftp_enabled': 'bool',
        'is_sftp_enabled': 'bool',
        'is_smb_authentication_enabled': 'bool',
        'is_unix_authentication_enabled': 'bool',
        'is_anonymous_authentication_enabled': 'bool',
        'is_homedir_limit_enabled': 'bool',
        'default_homedir': 'str',
        'welcome_message': 'str',
        'message_of_the_day': 'str',
        'is_audit_enabled': 'bool',
        'audit_dir': 'str',
        'audit_max_size': 'int',
        'hosts': 'list[str]',
        'users': 'list[str]',
        'groups': 'list[str]',
        'is_allowed_hosts': 'bool',
        'is_allowed_users': 'bool',
        'is_allowed_groups': 'bool'
    }

    attribute_map = {
        'nas_server_id': 'nas_server_id',
        'is_ftp_enabled': 'is_ftp_enabled',
        'is_sftp_enabled': 'is_sftp_enabled',
        'is_smb_authentication_enabled': 'is_smb_authentication_enabled',
        'is_unix_authentication_enabled': 'is_unix_authentication_enabled',
        'is_anonymous_authentication_enabled': 'is_anonymous_authentication_enabled',
        'is_homedir_limit_enabled': 'is_homedir_limit_enabled',
        'default_homedir': 'default_homedir',
        'welcome_message': 'welcome_message',
        'message_of_the_day': 'message_of_the_day',
        'is_audit_enabled': 'is_audit_enabled',
        'audit_dir': 'audit_dir',
        'audit_max_size': 'audit_max_size',
        'hosts': 'hosts',
        'users': 'users',
        'groups': 'groups',
        'is_allowed_hosts': 'is_allowed_hosts',
        'is_allowed_users': 'is_allowed_users',
        'is_allowed_groups': 'is_allowed_groups'
    }

    def __init__(self, nas_server_id=None, is_ftp_enabled=False, is_sftp_enabled=False, is_smb_authentication_enabled=True, is_unix_authentication_enabled=True, is_anonymous_authentication_enabled=False, is_homedir_limit_enabled=True, default_homedir=None, welcome_message=None, message_of_the_day=None, is_audit_enabled=False, audit_dir=None, audit_max_size=None, hosts=None, users=None, groups=None, is_allowed_hosts=True, is_allowed_users=True, is_allowed_groups=True, _configuration=None):  # noqa: E501
        """FileFtpCreate - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._nas_server_id = None
        self._is_ftp_enabled = None
        self._is_sftp_enabled = None
        self._is_smb_authentication_enabled = None
        self._is_unix_authentication_enabled = None
        self._is_anonymous_authentication_enabled = None
        self._is_homedir_limit_enabled = None
        self._default_homedir = None
        self._welcome_message = None
        self._message_of_the_day = None
        self._is_audit_enabled = None
        self._audit_dir = None
        self._audit_max_size = None
        self._hosts = None
        self._users = None
        self._groups = None
        self._is_allowed_hosts = None
        self._is_allowed_users = None
        self._is_allowed_groups = None
        self.discriminator = None

        self.nas_server_id = nas_server_id
        if is_ftp_enabled is not None:
            self.is_ftp_enabled = is_ftp_enabled
        if is_sftp_enabled is not None:
            self.is_sftp_enabled = is_sftp_enabled
        if is_smb_authentication_enabled is not None:
            self.is_smb_authentication_enabled = is_smb_authentication_enabled
        if is_unix_authentication_enabled is not None:
            self.is_unix_authentication_enabled = is_unix_authentication_enabled
        if is_anonymous_authentication_enabled is not None:
            self.is_anonymous_authentication_enabled = is_anonymous_authentication_enabled
        if is_homedir_limit_enabled is not None:
            self.is_homedir_limit_enabled = is_homedir_limit_enabled
        if default_homedir is not None:
            self.default_homedir = default_homedir
        if welcome_message is not None:
            self.welcome_message = welcome_message
        if message_of_the_day is not None:
            self.message_of_the_day = message_of_the_day
        if is_audit_enabled is not None:
            self.is_audit_enabled = is_audit_enabled
        if audit_dir is not None:
            self.audit_dir = audit_dir
        if audit_max_size is not None:
            self.audit_max_size = audit_max_size
        if hosts is not None:
            self.hosts = hosts
        if users is not None:
            self.users = users
        if groups is not None:
            self.groups = groups
        if is_allowed_hosts is not None:
            self.is_allowed_hosts = is_allowed_hosts
        if is_allowed_users is not None:
            self.is_allowed_users = is_allowed_users
        if is_allowed_groups is not None:
            self.is_allowed_groups = is_allowed_groups

    @property
    def nas_server_id(self):
        """Gets the nas_server_id of this FileFtpCreate.  # noqa: E501

        Unique identifier of the NAS server that is configured with the FTP server. name:{name} can be used instead of {id}. For example:'nas_server_id':'name:nas_server_name'  # noqa: E501

        :return: The nas_server_id of this FileFtpCreate.  # noqa: E501
        :rtype: str
        """
        return self._nas_server_id

    @nas_server_id.setter
    def nas_server_id(self, nas_server_id):
        """Sets the nas_server_id of this FileFtpCreate.

        Unique identifier of the NAS server that is configured with the FTP server. name:{name} can be used instead of {id}. For example:'nas_server_id':'name:nas_server_name'  # noqa: E501

        :param nas_server_id: The nas_server_id of this FileFtpCreate.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and nas_server_id is None:
            raise ValueError("Invalid value for `nas_server_id`, must not be `None`")  # noqa: E501

        self._nas_server_id = nas_server_id

    @property
    def is_ftp_enabled(self):
        """Gets the is_ftp_enabled of this FileFtpCreate.  # noqa: E501

        Indicates whether the FTP server is enabled on the NAS server specified in the nasServer attribute. Values are: - true - FTP server is enabled on the specified NAS server. - false - FTP server is disabled on the specified NAS server.   # noqa: E501

        :return: The is_ftp_enabled of this FileFtpCreate.  # noqa: E501
        :rtype: bool
        """
        return self._is_ftp_enabled

    @is_ftp_enabled.setter
    def is_ftp_enabled(self, is_ftp_enabled):
        """Sets the is_ftp_enabled of this FileFtpCreate.

        Indicates whether the FTP server is enabled on the NAS server specified in the nasServer attribute. Values are: - true - FTP server is enabled on the specified NAS server. - false - FTP server is disabled on the specified NAS server.   # noqa: E501

        :param is_ftp_enabled: The is_ftp_enabled of this FileFtpCreate.  # noqa: E501
        :type: bool
        """

        self._is_ftp_enabled = is_ftp_enabled

    @property
    def is_sftp_enabled(self):
        """Gets the is_sftp_enabled of this FileFtpCreate.  # noqa: E501

        Indicates whether the SFTP server is enabled on the NAS server specified in the nasServer attribute. Values are: - true - SFTP server is enabled on the specified NAS server. - false - SFTP server is disabled on the specified NAS server.   # noqa: E501

        :return: The is_sftp_enabled of this FileFtpCreate.  # noqa: E501
        :rtype: bool
        """
        return self._is_sftp_enabled

    @is_sftp_enabled.setter
    def is_sftp_enabled(self, is_sftp_enabled):
        """Sets the is_sftp_enabled of this FileFtpCreate.

        Indicates whether the SFTP server is enabled on the NAS server specified in the nasServer attribute. Values are: - true - SFTP server is enabled on the specified NAS server. - false - SFTP server is disabled on the specified NAS server.   # noqa: E501

        :param is_sftp_enabled: The is_sftp_enabled of this FileFtpCreate.  # noqa: E501
        :type: bool
        """

        self._is_sftp_enabled = is_sftp_enabled

    @property
    def is_smb_authentication_enabled(self):
        """Gets the is_smb_authentication_enabled of this FileFtpCreate.  # noqa: E501

        Indicates whether FTP and SFTP clients can be authenticated using an SMB user name. These user names are defined in a Windows domain controller, and their formats are user@domain or domain\\\\user. Values are: - true - SMB user names are accepted for authentication. - false - SMB user names are not accepted for authentication.   # noqa: E501

        :return: The is_smb_authentication_enabled of this FileFtpCreate.  # noqa: E501
        :rtype: bool
        """
        return self._is_smb_authentication_enabled

    @is_smb_authentication_enabled.setter
    def is_smb_authentication_enabled(self, is_smb_authentication_enabled):
        """Sets the is_smb_authentication_enabled of this FileFtpCreate.

        Indicates whether FTP and SFTP clients can be authenticated using an SMB user name. These user names are defined in a Windows domain controller, and their formats are user@domain or domain\\\\user. Values are: - true - SMB user names are accepted for authentication. - false - SMB user names are not accepted for authentication.   # noqa: E501

        :param is_smb_authentication_enabled: The is_smb_authentication_enabled of this FileFtpCreate.  # noqa: E501
        :type: bool
        """

        self._is_smb_authentication_enabled = is_smb_authentication_enabled

    @property
    def is_unix_authentication_enabled(self):
        """Gets the is_unix_authentication_enabled of this FileFtpCreate.  # noqa: E501

        Indicates whether FTP and SFTP clients can be authenticated using a Unix user name. Unix user names are defined in LDAP, NIS servers or in local passwd file. Values are: - true - Unix user names are accepted for authentication. - false - Unix user names are not accepted for authentication.   # noqa: E501

        :return: The is_unix_authentication_enabled of this FileFtpCreate.  # noqa: E501
        :rtype: bool
        """
        return self._is_unix_authentication_enabled

    @is_unix_authentication_enabled.setter
    def is_unix_authentication_enabled(self, is_unix_authentication_enabled):
        """Sets the is_unix_authentication_enabled of this FileFtpCreate.

        Indicates whether FTP and SFTP clients can be authenticated using a Unix user name. Unix user names are defined in LDAP, NIS servers or in local passwd file. Values are: - true - Unix user names are accepted for authentication. - false - Unix user names are not accepted for authentication.   # noqa: E501

        :param is_unix_authentication_enabled: The is_unix_authentication_enabled of this FileFtpCreate.  # noqa: E501
        :type: bool
        """

        self._is_unix_authentication_enabled = is_unix_authentication_enabled

    @property
    def is_anonymous_authentication_enabled(self):
        """Gets the is_anonymous_authentication_enabled of this FileFtpCreate.  # noqa: E501

        Indicates whether FTP clients can be authenticated anonymously. Values are: - true - Anonymous user name is accepted. - false - Anonymous user name is not accepted.   # noqa: E501

        :return: The is_anonymous_authentication_enabled of this FileFtpCreate.  # noqa: E501
        :rtype: bool
        """
        return self._is_anonymous_authentication_enabled

    @is_anonymous_authentication_enabled.setter
    def is_anonymous_authentication_enabled(self, is_anonymous_authentication_enabled):
        """Sets the is_anonymous_authentication_enabled of this FileFtpCreate.

        Indicates whether FTP clients can be authenticated anonymously. Values are: - true - Anonymous user name is accepted. - false - Anonymous user name is not accepted.   # noqa: E501

        :param is_anonymous_authentication_enabled: The is_anonymous_authentication_enabled of this FileFtpCreate.  # noqa: E501
        :type: bool
        """

        self._is_anonymous_authentication_enabled = is_anonymous_authentication_enabled

    @property
    def is_homedir_limit_enabled(self):
        """Gets the is_homedir_limit_enabled of this FileFtpCreate.  # noqa: E501

        Indicates whether an FTP or SFTP user access is limited to the home directory of the user. Values are: - true - An FTP or SFTP user can access only the home directory of the user. - false - FTP and SFTP users can access any NAS server directory, according to NAS server permissions.   # noqa: E501

        :return: The is_homedir_limit_enabled of this FileFtpCreate.  # noqa: E501
        :rtype: bool
        """
        return self._is_homedir_limit_enabled

    @is_homedir_limit_enabled.setter
    def is_homedir_limit_enabled(self, is_homedir_limit_enabled):
        """Sets the is_homedir_limit_enabled of this FileFtpCreate.

        Indicates whether an FTP or SFTP user access is limited to the home directory of the user. Values are: - true - An FTP or SFTP user can access only the home directory of the user. - false - FTP and SFTP users can access any NAS server directory, according to NAS server permissions.   # noqa: E501

        :param is_homedir_limit_enabled: The is_homedir_limit_enabled of this FileFtpCreate.  # noqa: E501
        :type: bool
        """

        self._is_homedir_limit_enabled = is_homedir_limit_enabled

    @property
    def default_homedir(self):
        """Gets the default_homedir of this FileFtpCreate.  # noqa: E501

        (Applies when the value of is_homedir_limit_enabled is false.) Default directory of FTP and SFTP clients who have a home directory that is not defined or accessible.  # noqa: E501

        :return: The default_homedir of this FileFtpCreate.  # noqa: E501
        :rtype: str
        """
        return self._default_homedir

    @default_homedir.setter
    def default_homedir(self, default_homedir):
        """Sets the default_homedir of this FileFtpCreate.

        (Applies when the value of is_homedir_limit_enabled is false.) Default directory of FTP and SFTP clients who have a home directory that is not defined or accessible.  # noqa: E501

        :param default_homedir: The default_homedir of this FileFtpCreate.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                default_homedir is not None and len(default_homedir) > 511):
            raise ValueError("Invalid value for `default_homedir`, length must be less than or equal to `511`")  # noqa: E501
        if (self._configuration.client_side_validation and
                default_homedir is not None and len(default_homedir) < 0):
            raise ValueError("Invalid value for `default_homedir`, length must be greater than or equal to `0`")  # noqa: E501

        self._default_homedir = default_homedir

    @property
    def welcome_message(self):
        """Gets the welcome_message of this FileFtpCreate.  # noqa: E501

        Welcome message displayed on the console of FTP and SFTP clients before their authentication. The length of this message is limited to 511 bytes of UTF-8 characters, and the length of each line is limited to 80 bytes.  # noqa: E501

        :return: The welcome_message of this FileFtpCreate.  # noqa: E501
        :rtype: str
        """
        return self._welcome_message

    @welcome_message.setter
    def welcome_message(self, welcome_message):
        """Sets the welcome_message of this FileFtpCreate.

        Welcome message displayed on the console of FTP and SFTP clients before their authentication. The length of this message is limited to 511 bytes of UTF-8 characters, and the length of each line is limited to 80 bytes.  # noqa: E501

        :param welcome_message: The welcome_message of this FileFtpCreate.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                welcome_message is not None and len(welcome_message) > 511):
            raise ValueError("Invalid value for `welcome_message`, length must be less than or equal to `511`")  # noqa: E501
        if (self._configuration.client_side_validation and
                welcome_message is not None and len(welcome_message) < 0):
            raise ValueError("Invalid value for `welcome_message`, length must be greater than or equal to `0`")  # noqa: E501

        self._welcome_message = welcome_message

    @property
    def message_of_the_day(self):
        """Gets the message_of_the_day of this FileFtpCreate.  # noqa: E501

        Message of the day displayed on the console of FTP clients after their authentication. The length of this message is limited to 511 bytes of UTF-8 characters, and the length of each line is limited to 80 bytes.  # noqa: E501

        :return: The message_of_the_day of this FileFtpCreate.  # noqa: E501
        :rtype: str
        """
        return self._message_of_the_day

    @message_of_the_day.setter
    def message_of_the_day(self, message_of_the_day):
        """Sets the message_of_the_day of this FileFtpCreate.

        Message of the day displayed on the console of FTP clients after their authentication. The length of this message is limited to 511 bytes of UTF-8 characters, and the length of each line is limited to 80 bytes.  # noqa: E501

        :param message_of_the_day: The message_of_the_day of this FileFtpCreate.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                message_of_the_day is not None and len(message_of_the_day) > 511):
            raise ValueError("Invalid value for `message_of_the_day`, length must be less than or equal to `511`")  # noqa: E501
        if (self._configuration.client_side_validation and
                message_of_the_day is not None and len(message_of_the_day) < 0):
            raise ValueError("Invalid value for `message_of_the_day`, length must be greater than or equal to `0`")  # noqa: E501

        self._message_of_the_day = message_of_the_day

    @property
    def is_audit_enabled(self):
        """Gets the is_audit_enabled of this FileFtpCreate.  # noqa: E501

        Indicates whether the activity of FTP and SFTP clients is tracked in audit files. Values are: - true - FTP/SFTP activity is tracked. - false - FTP/SFTP activity is not tracked.   # noqa: E501

        :return: The is_audit_enabled of this FileFtpCreate.  # noqa: E501
        :rtype: bool
        """
        return self._is_audit_enabled

    @is_audit_enabled.setter
    def is_audit_enabled(self, is_audit_enabled):
        """Sets the is_audit_enabled of this FileFtpCreate.

        Indicates whether the activity of FTP and SFTP clients is tracked in audit files. Values are: - true - FTP/SFTP activity is tracked. - false - FTP/SFTP activity is not tracked.   # noqa: E501

        :param is_audit_enabled: The is_audit_enabled of this FileFtpCreate.  # noqa: E501
        :type: bool
        """

        self._is_audit_enabled = is_audit_enabled

    @property
    def audit_dir(self):
        """Gets the audit_dir of this FileFtpCreate.  # noqa: E501

        (Applies when the value of is_audit_enabled is true.) Directory of FTP/SFTP audit files. Logs are saved in '/' directory (default) or in a mounted file system (Absolute path of the File system directory which should already exist).  # noqa: E501

        :return: The audit_dir of this FileFtpCreate.  # noqa: E501
        :rtype: str
        """
        return self._audit_dir

    @audit_dir.setter
    def audit_dir(self, audit_dir):
        """Sets the audit_dir of this FileFtpCreate.

        (Applies when the value of is_audit_enabled is true.) Directory of FTP/SFTP audit files. Logs are saved in '/' directory (default) or in a mounted file system (Absolute path of the File system directory which should already exist).  # noqa: E501

        :param audit_dir: The audit_dir of this FileFtpCreate.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                audit_dir is not None and len(audit_dir) > 511):
            raise ValueError("Invalid value for `audit_dir`, length must be less than or equal to `511`")  # noqa: E501
        if (self._configuration.client_side_validation and
                audit_dir is not None and len(audit_dir) < 0):
            raise ValueError("Invalid value for `audit_dir`, length must be greater than or equal to `0`")  # noqa: E501

        self._audit_dir = audit_dir

    @property
    def audit_max_size(self):
        """Gets the audit_max_size of this FileFtpCreate.  # noqa: E501

        (Applies when the value of is_audit_enabled is true.) Maximum size of all (current plus archived) FTP/SFTP audit files, in bytes. There is a maximum of 5 audit files, 1 current audit file (ftp.log) and 4 archived audit files. The maximum value for this setting is 5GB (each file of 1GB) if the audit directory belongs to a user file system of the NAS server. If the audit directory is '/', the maximum value is 5MB (each file of 1MB). The minimum value is 40kB (each file of 8KB) on any file system.   # noqa: E501

        :return: The audit_max_size of this FileFtpCreate.  # noqa: E501
        :rtype: int
        """
        return self._audit_max_size

    @audit_max_size.setter
    def audit_max_size(self, audit_max_size):
        """Sets the audit_max_size of this FileFtpCreate.

        (Applies when the value of is_audit_enabled is true.) Maximum size of all (current plus archived) FTP/SFTP audit files, in bytes. There is a maximum of 5 audit files, 1 current audit file (ftp.log) and 4 archived audit files. The maximum value for this setting is 5GB (each file of 1GB) if the audit directory belongs to a user file system of the NAS server. If the audit directory is '/', the maximum value is 5MB (each file of 1MB). The minimum value is 40kB (each file of 8KB) on any file system.   # noqa: E501

        :param audit_max_size: The audit_max_size of this FileFtpCreate.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                audit_max_size is not None and audit_max_size > 5368709120):  # noqa: E501
            raise ValueError("Invalid value for `audit_max_size`, must be a value less than or equal to `5368709120`")  # noqa: E501
        if (self._configuration.client_side_validation and
                audit_max_size is not None and audit_max_size < 40960):  # noqa: E501
            raise ValueError("Invalid value for `audit_max_size`, must be a value greater than or equal to `40960`")  # noqa: E501

        self._audit_max_size = audit_max_size

    @property
    def hosts(self):
        """Gets the hosts of this FileFtpCreate.  # noqa: E501

        Allowed or denied hosts, depending on the value of the is_allowed_hosts attribute. A host is defined using its IP address. Subnets using CIDR notation are also supported. - If allowed hosts exist, only those hosts and no others can connect to the NAS server through FTP or SFTP. - If denied hosts exist, they always have access denied to the NAS server through FTP or SFTP. - If the list is empty, there is no restriction to NAS server access through FTP or SFTP based on the host IP address. - The addresses may be IPv4 or IPv6.   # noqa: E501

        :return: The hosts of this FileFtpCreate.  # noqa: E501
        :rtype: list[str]
        """
        return self._hosts

    @hosts.setter
    def hosts(self, hosts):
        """Sets the hosts of this FileFtpCreate.

        Allowed or denied hosts, depending on the value of the is_allowed_hosts attribute. A host is defined using its IP address. Subnets using CIDR notation are also supported. - If allowed hosts exist, only those hosts and no others can connect to the NAS server through FTP or SFTP. - If denied hosts exist, they always have access denied to the NAS server through FTP or SFTP. - If the list is empty, there is no restriction to NAS server access through FTP or SFTP based on the host IP address. - The addresses may be IPv4 or IPv6.   # noqa: E501

        :param hosts: The hosts of this FileFtpCreate.  # noqa: E501
        :type: list[str]
        """

        self._hosts = hosts

    @property
    def users(self):
        """Gets the users of this FileFtpCreate.  # noqa: E501

        Allowed or denied users, depending on the value of the is_allowed_user attribute. - If allowed users exist, only those users and no others can connect to the NAS server through FTP or SFTP. - If denied users exist, they have always access denied to the NAS server through FTP or SFTP. - If the list is empty, there is no restriction to the NAS server access through FTP or SFTP based on the user name.   # noqa: E501

        :return: The users of this FileFtpCreate.  # noqa: E501
        :rtype: list[str]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this FileFtpCreate.

        Allowed or denied users, depending on the value of the is_allowed_user attribute. - If allowed users exist, only those users and no others can connect to the NAS server through FTP or SFTP. - If denied users exist, they have always access denied to the NAS server through FTP or SFTP. - If the list is empty, there is no restriction to the NAS server access through FTP or SFTP based on the user name.   # noqa: E501

        :param users: The users of this FileFtpCreate.  # noqa: E501
        :type: list[str]
        """

        self._users = users

    @property
    def groups(self):
        """Gets the groups of this FileFtpCreate.  # noqa: E501

        Allowed or denied user groups, depending on the value of the is_allowed_groups attribute. - If allowed groups exist, only users who are members of these groups and no others can connect to the NAS server through FTP or SFTP. - If denied groups exist, all users who are members of those groups always have access denied to the NAS server through FTP or SFTP. - If the list is empty, there is no restriction to the NAS server access through FTP or SFTP based on the user group.   # noqa: E501

        :return: The groups of this FileFtpCreate.  # noqa: E501
        :rtype: list[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this FileFtpCreate.

        Allowed or denied user groups, depending on the value of the is_allowed_groups attribute. - If allowed groups exist, only users who are members of these groups and no others can connect to the NAS server through FTP or SFTP. - If denied groups exist, all users who are members of those groups always have access denied to the NAS server through FTP or SFTP. - If the list is empty, there is no restriction to the NAS server access through FTP or SFTP based on the user group.   # noqa: E501

        :param groups: The groups of this FileFtpCreate.  # noqa: E501
        :type: list[str]
        """

        self._groups = groups

    @property
    def is_allowed_hosts(self):
        """Gets the is_allowed_hosts of this FileFtpCreate.  # noqa: E501

        Indicates whether the hosts attribute contains allowed or denied hosts. Values are: - true - Hosts contains allowed hosts. - false - Hosts contains denied hosts.   # noqa: E501

        :return: The is_allowed_hosts of this FileFtpCreate.  # noqa: E501
        :rtype: bool
        """
        return self._is_allowed_hosts

    @is_allowed_hosts.setter
    def is_allowed_hosts(self, is_allowed_hosts):
        """Sets the is_allowed_hosts of this FileFtpCreate.

        Indicates whether the hosts attribute contains allowed or denied hosts. Values are: - true - Hosts contains allowed hosts. - false - Hosts contains denied hosts.   # noqa: E501

        :param is_allowed_hosts: The is_allowed_hosts of this FileFtpCreate.  # noqa: E501
        :type: bool
        """

        self._is_allowed_hosts = is_allowed_hosts

    @property
    def is_allowed_users(self):
        """Gets the is_allowed_users of this FileFtpCreate.  # noqa: E501

        Indicates whether the users attribute contains allowed or denied users. Values are: - true - Users contains allowed users. - false - Users contains denied users.   # noqa: E501

        :return: The is_allowed_users of this FileFtpCreate.  # noqa: E501
        :rtype: bool
        """
        return self._is_allowed_users

    @is_allowed_users.setter
    def is_allowed_users(self, is_allowed_users):
        """Sets the is_allowed_users of this FileFtpCreate.

        Indicates whether the users attribute contains allowed or denied users. Values are: - true - Users contains allowed users. - false - Users contains denied users.   # noqa: E501

        :param is_allowed_users: The is_allowed_users of this FileFtpCreate.  # noqa: E501
        :type: bool
        """

        self._is_allowed_users = is_allowed_users

    @property
    def is_allowed_groups(self):
        """Gets the is_allowed_groups of this FileFtpCreate.  # noqa: E501

        Indicates whether the groups attribute contains allowed or denied user groups. Values are: - true - Groups contains allowed user groups. - false - Groups contains denied user groups.   # noqa: E501

        :return: The is_allowed_groups of this FileFtpCreate.  # noqa: E501
        :rtype: bool
        """
        return self._is_allowed_groups

    @is_allowed_groups.setter
    def is_allowed_groups(self, is_allowed_groups):
        """Sets the is_allowed_groups of this FileFtpCreate.

        Indicates whether the groups attribute contains allowed or denied user groups. Values are: - true - Groups contains allowed user groups. - false - Groups contains denied user groups.   # noqa: E501

        :param is_allowed_groups: The is_allowed_groups of this FileFtpCreate.  # noqa: E501
        :type: bool
        """

        self._is_allowed_groups = is_allowed_groups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileFtpCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileFtpCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FileFtpCreate):
            return True

        return self.to_dict() != other.to_dict()
