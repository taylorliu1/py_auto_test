# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class FileImportSourceFilesystem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'import_source_nas_server_id': 'str',
        'sourcename': 'str',
        'targetname': 'str',
        'size': 'int',
        'is_flr_enabled': 'str'
    }

    attribute_map = {
        'import_source_nas_server_id': 'import_source_nas_server_id',
        'sourcename': 'sourcename',
        'targetname': 'targetname',
        'size': 'size',
        'is_flr_enabled': 'is_flr_enabled'
    }

    def __init__(self, import_source_nas_server_id=None, sourcename=None, targetname=None, size=None, is_flr_enabled=None, _configuration=None):  # noqa: E501
        """FileImportSourceFilesystem - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._import_source_nas_server_id = None
        self._sourcename = None
        self._targetname = None
        self._size = None
        self._is_flr_enabled = None
        self.discriminator = None

        if import_source_nas_server_id is not None:
            self.import_source_nas_server_id = import_source_nas_server_id
        if sourcename is not None:
            self.sourcename = sourcename
        if targetname is not None:
            self.targetname = targetname
        if size is not None:
            self.size = size
        if is_flr_enabled is not None:
            self.is_flr_enabled = is_flr_enabled

    @property
    def import_source_nas_server_id(self):
        """Gets the import_source_nas_server_id of this FileImportSourceFilesystem.  # noqa: E501

        Unique identifier of the source file system.  # noqa: E501

        :return: The import_source_nas_server_id of this FileImportSourceFilesystem.  # noqa: E501
        :rtype: str
        """
        return self._import_source_nas_server_id

    @import_source_nas_server_id.setter
    def import_source_nas_server_id(self, import_source_nas_server_id):
        """Sets the import_source_nas_server_id of this FileImportSourceFilesystem.

        Unique identifier of the source file system.  # noqa: E501

        :param import_source_nas_server_id: The import_source_nas_server_id of this FileImportSourceFilesystem.  # noqa: E501
        :type: str
        """

        self._import_source_nas_server_id = import_source_nas_server_id

    @property
    def sourcename(self):
        """Gets the sourcename of this FileImportSourceFilesystem.  # noqa: E501

        Source name of the filesystem.  # noqa: E501

        :return: The sourcename of this FileImportSourceFilesystem.  # noqa: E501
        :rtype: str
        """
        return self._sourcename

    @sourcename.setter
    def sourcename(self, sourcename):
        """Sets the sourcename of this FileImportSourceFilesystem.

        Source name of the filesystem.  # noqa: E501

        :param sourcename: The sourcename of this FileImportSourceFilesystem.  # noqa: E501
        :type: str
        """

        self._sourcename = sourcename

    @property
    def targetname(self):
        """Gets the targetname of this FileImportSourceFilesystem.  # noqa: E501

        Target name of the filesystem.  # noqa: E501

        :return: The targetname of this FileImportSourceFilesystem.  # noqa: E501
        :rtype: str
        """
        return self._targetname

    @targetname.setter
    def targetname(self, targetname):
        """Sets the targetname of this FileImportSourceFilesystem.

        Target name of the filesystem.  # noqa: E501

        :param targetname: The targetname of this FileImportSourceFilesystem.  # noqa: E501
        :type: str
        """

        self._targetname = targetname

    @property
    def size(self):
        """Gets the size of this FileImportSourceFilesystem.  # noqa: E501

        The size, in bytes, of the filesystem.  # noqa: E501

        :return: The size of this FileImportSourceFilesystem.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this FileImportSourceFilesystem.

        The size, in bytes, of the filesystem.  # noqa: E501

        :param size: The size of this FileImportSourceFilesystem.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                size is not None and size > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `size`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                size is not None and size < 0):  # noqa: E501
            raise ValueError("Invalid value for `size`, must be a value greater than or equal to `0`")  # noqa: E501

        self._size = size

    @property
    def is_flr_enabled(self):
        """Gets the is_flr_enabled of this FileImportSourceFilesystem.  # noqa: E501

        Indicates whether File Level Retention feature is enabled on the Filesystem.  # noqa: E501

        :return: The is_flr_enabled of this FileImportSourceFilesystem.  # noqa: E501
        :rtype: str
        """
        return self._is_flr_enabled

    @is_flr_enabled.setter
    def is_flr_enabled(self, is_flr_enabled):
        """Sets the is_flr_enabled of this FileImportSourceFilesystem.

        Indicates whether File Level Retention feature is enabled on the Filesystem.  # noqa: E501

        :param is_flr_enabled: The is_flr_enabled of this FileImportSourceFilesystem.  # noqa: E501
        :type: str
        """

        self._is_flr_enabled = is_flr_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileImportSourceFilesystem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileImportSourceFilesystem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FileImportSourceFilesystem):
            return True

        return self.to_dict() != other.to_dict()
