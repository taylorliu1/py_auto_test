# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class VolumeSnapshot(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'performance_policy_id': 'str',
        'expiration_timestamp': 'datetime',
        'creator_type': 'StorageCreatorTypeEnum'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'performance_policy_id': 'performance_policy_id',
        'expiration_timestamp': 'expiration_timestamp',
        'creator_type': 'creator_type'
    }

    def __init__(self, name=None, description=None, performance_policy_id=None, expiration_timestamp=None, creator_type=None, _configuration=None):  # noqa: E501
        """VolumeSnapshot - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._description = None
        self._performance_policy_id = None
        self._expiration_timestamp = None
        self._creator_type = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if performance_policy_id is not None:
            self.performance_policy_id = performance_policy_id
        if expiration_timestamp is not None:
            self.expiration_timestamp = expiration_timestamp
        if creator_type is not None:
            self.creator_type = creator_type

    @property
    def name(self):
        """Gets the name of this VolumeSnapshot.  # noqa: E501

        Name of the snapshot to be created. This value must contain 128 or fewer printable Unicode characters. The default name of the volume snapshot is the date and time when the snapshot is taken.  # noqa: E501

        :return: The name of this VolumeSnapshot.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VolumeSnapshot.

        Name of the snapshot to be created. This value must contain 128 or fewer printable Unicode characters. The default name of the volume snapshot is the date and time when the snapshot is taken.  # noqa: E501

        :param name: The name of this VolumeSnapshot.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 128):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this VolumeSnapshot.  # noqa: E501

        Description of the snapshot. This value must contain 128 or fewer printable Unicode characters.  # noqa: E501

        :return: The description of this VolumeSnapshot.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VolumeSnapshot.

        Description of the snapshot. This value must contain 128 or fewer printable Unicode characters.  # noqa: E501

        :param description: The description of this VolumeSnapshot.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                description is not None and len(description) > 128):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `128`")  # noqa: E501

        self._description = description

    @property
    def performance_policy_id(self):
        """Gets the performance_policy_id of this VolumeSnapshot.  # noqa: E501

        Unique identifier of the performance policy assigned to the snapshot.  # noqa: E501

        :return: The performance_policy_id of this VolumeSnapshot.  # noqa: E501
        :rtype: str
        """
        return self._performance_policy_id

    @performance_policy_id.setter
    def performance_policy_id(self, performance_policy_id):
        """Sets the performance_policy_id of this VolumeSnapshot.

        Unique identifier of the performance policy assigned to the snapshot.  # noqa: E501

        :param performance_policy_id: The performance_policy_id of this VolumeSnapshot.  # noqa: E501
        :type: str
        """

        self._performance_policy_id = performance_policy_id

    @property
    def expiration_timestamp(self):
        """Gets the expiration_timestamp of this VolumeSnapshot.  # noqa: E501

        Time at which the snapshot will expire. Expired snapshots are deleted by the snapshot aging service that runs periodically in the background. If not specified, the snapshot never expires. Use a maximum timestamp value to set an expiration to never expire.  # noqa: E501

        :return: The expiration_timestamp of this VolumeSnapshot.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_timestamp

    @expiration_timestamp.setter
    def expiration_timestamp(self, expiration_timestamp):
        """Sets the expiration_timestamp of this VolumeSnapshot.

        Time at which the snapshot will expire. Expired snapshots are deleted by the snapshot aging service that runs periodically in the background. If not specified, the snapshot never expires. Use a maximum timestamp value to set an expiration to never expire.  # noqa: E501

        :param expiration_timestamp: The expiration_timestamp of this VolumeSnapshot.  # noqa: E501
        :type: datetime
        """

        self._expiration_timestamp = expiration_timestamp

    @property
    def creator_type(self):
        """Gets the creator_type of this VolumeSnapshot.  # noqa: E501


        :return: The creator_type of this VolumeSnapshot.  # noqa: E501
        :rtype: StorageCreatorTypeEnum
        """
        return self._creator_type

    @creator_type.setter
    def creator_type(self, creator_type):
        """Sets the creator_type of this VolumeSnapshot.


        :param creator_type: The creator_type of this VolumeSnapshot.  # noqa: E501
        :type: StorageCreatorTypeEnum
        """

        self._creator_type = creator_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VolumeSnapshot, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VolumeSnapshot):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VolumeSnapshot):
            return True

        return self.to_dict() != other.to_dict()
