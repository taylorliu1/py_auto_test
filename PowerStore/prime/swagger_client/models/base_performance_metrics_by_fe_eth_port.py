# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class BasePerformanceMetricsByFeEthPort(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fe_port_id': 'str',
        'node_id': 'str',
        'appliance_id': 'str',
        'timestamp': 'datetime',
        'bytes_rx_ps': 'float',
        'bytes_tx_ps': 'float',
        'pkt_rx_ps': 'float',
        'pkt_tx_ps': 'float',
        'pkt_rx_no_buffer_error_ps': 'float',
        'pkt_rx_crc_error_ps': 'float',
        'pkt_tx_error_ps': 'float',
        'repeat_count': 'int'
    }

    attribute_map = {
        'fe_port_id': 'fe_port_id',
        'node_id': 'node_id',
        'appliance_id': 'appliance_id',
        'timestamp': 'timestamp',
        'bytes_rx_ps': 'bytes_rx_ps',
        'bytes_tx_ps': 'bytes_tx_ps',
        'pkt_rx_ps': 'pkt_rx_ps',
        'pkt_tx_ps': 'pkt_tx_ps',
        'pkt_rx_no_buffer_error_ps': 'pkt_rx_no_buffer_error_ps',
        'pkt_rx_crc_error_ps': 'pkt_rx_crc_error_ps',
        'pkt_tx_error_ps': 'pkt_tx_error_ps',
        'repeat_count': 'repeat_count'
    }

    def __init__(self, fe_port_id=None, node_id=None, appliance_id=None, timestamp=None, bytes_rx_ps=None, bytes_tx_ps=None, pkt_rx_ps=None, pkt_tx_ps=None, pkt_rx_no_buffer_error_ps=None, pkt_rx_crc_error_ps=None, pkt_tx_error_ps=None, repeat_count=None, _configuration=None):  # noqa: E501
        """BasePerformanceMetricsByFeEthPort - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._fe_port_id = None
        self._node_id = None
        self._appliance_id = None
        self._timestamp = None
        self._bytes_rx_ps = None
        self._bytes_tx_ps = None
        self._pkt_rx_ps = None
        self._pkt_tx_ps = None
        self._pkt_rx_no_buffer_error_ps = None
        self._pkt_rx_crc_error_ps = None
        self._pkt_tx_error_ps = None
        self._repeat_count = None
        self.discriminator = None

        if fe_port_id is not None:
            self.fe_port_id = fe_port_id
        if node_id is not None:
            self.node_id = node_id
        if appliance_id is not None:
            self.appliance_id = appliance_id
        if timestamp is not None:
            self.timestamp = timestamp
        if bytes_rx_ps is not None:
            self.bytes_rx_ps = bytes_rx_ps
        if bytes_tx_ps is not None:
            self.bytes_tx_ps = bytes_tx_ps
        if pkt_rx_ps is not None:
            self.pkt_rx_ps = pkt_rx_ps
        if pkt_tx_ps is not None:
            self.pkt_tx_ps = pkt_tx_ps
        if pkt_rx_no_buffer_error_ps is not None:
            self.pkt_rx_no_buffer_error_ps = pkt_rx_no_buffer_error_ps
        if pkt_rx_crc_error_ps is not None:
            self.pkt_rx_crc_error_ps = pkt_rx_crc_error_ps
        if pkt_tx_error_ps is not None:
            self.pkt_tx_error_ps = pkt_tx_error_ps
        if repeat_count is not None:
            self.repeat_count = repeat_count

    @property
    def fe_port_id(self):
        """Gets the fe_port_id of this BasePerformanceMetricsByFeEthPort.  # noqa: E501

        Reference to the associated frontend ethernet port (eth_port) on which these metrics were recorded.  # noqa: E501

        :return: The fe_port_id of this BasePerformanceMetricsByFeEthPort.  # noqa: E501
        :rtype: str
        """
        return self._fe_port_id

    @fe_port_id.setter
    def fe_port_id(self, fe_port_id):
        """Sets the fe_port_id of this BasePerformanceMetricsByFeEthPort.

        Reference to the associated frontend ethernet port (eth_port) on which these metrics were recorded.  # noqa: E501

        :param fe_port_id: The fe_port_id of this BasePerformanceMetricsByFeEthPort.  # noqa: E501
        :type: str
        """

        self._fe_port_id = fe_port_id

    @property
    def node_id(self):
        """Gets the node_id of this BasePerformanceMetricsByFeEthPort.  # noqa: E501

        Reference to the node the port belongs to.  # noqa: E501

        :return: The node_id of this BasePerformanceMetricsByFeEthPort.  # noqa: E501
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this BasePerformanceMetricsByFeEthPort.

        Reference to the node the port belongs to.  # noqa: E501

        :param node_id: The node_id of this BasePerformanceMetricsByFeEthPort.  # noqa: E501
        :type: str
        """

        self._node_id = node_id

    @property
    def appliance_id(self):
        """Gets the appliance_id of this BasePerformanceMetricsByFeEthPort.  # noqa: E501

        Reference to the associated appliance on which these metrics were recorded.  # noqa: E501

        :return: The appliance_id of this BasePerformanceMetricsByFeEthPort.  # noqa: E501
        :rtype: str
        """
        return self._appliance_id

    @appliance_id.setter
    def appliance_id(self, appliance_id):
        """Sets the appliance_id of this BasePerformanceMetricsByFeEthPort.

        Reference to the associated appliance on which these metrics were recorded.  # noqa: E501

        :param appliance_id: The appliance_id of this BasePerformanceMetricsByFeEthPort.  # noqa: E501
        :type: str
        """

        self._appliance_id = appliance_id

    @property
    def timestamp(self):
        """Gets the timestamp of this BasePerformanceMetricsByFeEthPort.  # noqa: E501

        End of sample period.  # noqa: E501

        :return: The timestamp of this BasePerformanceMetricsByFeEthPort.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this BasePerformanceMetricsByFeEthPort.

        End of sample period.  # noqa: E501

        :param timestamp: The timestamp of this BasePerformanceMetricsByFeEthPort.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def bytes_rx_ps(self):
        """Gets the bytes_rx_ps of this BasePerformanceMetricsByFeEthPort.  # noqa: E501

        The total bytes received per second.  # noqa: E501

        :return: The bytes_rx_ps of this BasePerformanceMetricsByFeEthPort.  # noqa: E501
        :rtype: float
        """
        return self._bytes_rx_ps

    @bytes_rx_ps.setter
    def bytes_rx_ps(self, bytes_rx_ps):
        """Sets the bytes_rx_ps of this BasePerformanceMetricsByFeEthPort.

        The total bytes received per second.  # noqa: E501

        :param bytes_rx_ps: The bytes_rx_ps of this BasePerformanceMetricsByFeEthPort.  # noqa: E501
        :type: float
        """

        self._bytes_rx_ps = bytes_rx_ps

    @property
    def bytes_tx_ps(self):
        """Gets the bytes_tx_ps of this BasePerformanceMetricsByFeEthPort.  # noqa: E501

        The total bytes transmitted per second.  # noqa: E501

        :return: The bytes_tx_ps of this BasePerformanceMetricsByFeEthPort.  # noqa: E501
        :rtype: float
        """
        return self._bytes_tx_ps

    @bytes_tx_ps.setter
    def bytes_tx_ps(self, bytes_tx_ps):
        """Sets the bytes_tx_ps of this BasePerformanceMetricsByFeEthPort.

        The total bytes transmitted per second.  # noqa: E501

        :param bytes_tx_ps: The bytes_tx_ps of this BasePerformanceMetricsByFeEthPort.  # noqa: E501
        :type: float
        """

        self._bytes_tx_ps = bytes_tx_ps

    @property
    def pkt_rx_ps(self):
        """Gets the pkt_rx_ps of this BasePerformanceMetricsByFeEthPort.  # noqa: E501

        The number of packets received per second.  # noqa: E501

        :return: The pkt_rx_ps of this BasePerformanceMetricsByFeEthPort.  # noqa: E501
        :rtype: float
        """
        return self._pkt_rx_ps

    @pkt_rx_ps.setter
    def pkt_rx_ps(self, pkt_rx_ps):
        """Sets the pkt_rx_ps of this BasePerformanceMetricsByFeEthPort.

        The number of packets received per second.  # noqa: E501

        :param pkt_rx_ps: The pkt_rx_ps of this BasePerformanceMetricsByFeEthPort.  # noqa: E501
        :type: float
        """

        self._pkt_rx_ps = pkt_rx_ps

    @property
    def pkt_tx_ps(self):
        """Gets the pkt_tx_ps of this BasePerformanceMetricsByFeEthPort.  # noqa: E501

        The number of packets transmitted per second.  # noqa: E501

        :return: The pkt_tx_ps of this BasePerformanceMetricsByFeEthPort.  # noqa: E501
        :rtype: float
        """
        return self._pkt_tx_ps

    @pkt_tx_ps.setter
    def pkt_tx_ps(self, pkt_tx_ps):
        """Sets the pkt_tx_ps of this BasePerformanceMetricsByFeEthPort.

        The number of packets transmitted per second.  # noqa: E501

        :param pkt_tx_ps: The pkt_tx_ps of this BasePerformanceMetricsByFeEthPort.  # noqa: E501
        :type: float
        """

        self._pkt_tx_ps = pkt_tx_ps

    @property
    def pkt_rx_no_buffer_error_ps(self):
        """Gets the pkt_rx_no_buffer_error_ps of this BasePerformanceMetricsByFeEthPort.  # noqa: E501

        The number of packets discarded per second due to lack of buffer space.  # noqa: E501

        :return: The pkt_rx_no_buffer_error_ps of this BasePerformanceMetricsByFeEthPort.  # noqa: E501
        :rtype: float
        """
        return self._pkt_rx_no_buffer_error_ps

    @pkt_rx_no_buffer_error_ps.setter
    def pkt_rx_no_buffer_error_ps(self, pkt_rx_no_buffer_error_ps):
        """Sets the pkt_rx_no_buffer_error_ps of this BasePerformanceMetricsByFeEthPort.

        The number of packets discarded per second due to lack of buffer space.  # noqa: E501

        :param pkt_rx_no_buffer_error_ps: The pkt_rx_no_buffer_error_ps of this BasePerformanceMetricsByFeEthPort.  # noqa: E501
        :type: float
        """

        self._pkt_rx_no_buffer_error_ps = pkt_rx_no_buffer_error_ps

    @property
    def pkt_rx_crc_error_ps(self):
        """Gets the pkt_rx_crc_error_ps of this BasePerformanceMetricsByFeEthPort.  # noqa: E501

        The number of packets received with CRC error (and thus dropped) per second.  # noqa: E501

        :return: The pkt_rx_crc_error_ps of this BasePerformanceMetricsByFeEthPort.  # noqa: E501
        :rtype: float
        """
        return self._pkt_rx_crc_error_ps

    @pkt_rx_crc_error_ps.setter
    def pkt_rx_crc_error_ps(self, pkt_rx_crc_error_ps):
        """Sets the pkt_rx_crc_error_ps of this BasePerformanceMetricsByFeEthPort.

        The number of packets received with CRC error (and thus dropped) per second.  # noqa: E501

        :param pkt_rx_crc_error_ps: The pkt_rx_crc_error_ps of this BasePerformanceMetricsByFeEthPort.  # noqa: E501
        :type: float
        """

        self._pkt_rx_crc_error_ps = pkt_rx_crc_error_ps

    @property
    def pkt_tx_error_ps(self):
        """Gets the pkt_tx_error_ps of this BasePerformanceMetricsByFeEthPort.  # noqa: E501

        The number of packets that failed to be transmitted per second due to error.  # noqa: E501

        :return: The pkt_tx_error_ps of this BasePerformanceMetricsByFeEthPort.  # noqa: E501
        :rtype: float
        """
        return self._pkt_tx_error_ps

    @pkt_tx_error_ps.setter
    def pkt_tx_error_ps(self, pkt_tx_error_ps):
        """Sets the pkt_tx_error_ps of this BasePerformanceMetricsByFeEthPort.

        The number of packets that failed to be transmitted per second due to error.  # noqa: E501

        :param pkt_tx_error_ps: The pkt_tx_error_ps of this BasePerformanceMetricsByFeEthPort.  # noqa: E501
        :type: float
        """

        self._pkt_tx_error_ps = pkt_tx_error_ps

    @property
    def repeat_count(self):
        """Gets the repeat_count of this BasePerformanceMetricsByFeEthPort.  # noqa: E501

        Number of times the metrics are repeated.  # noqa: E501

        :return: The repeat_count of this BasePerformanceMetricsByFeEthPort.  # noqa: E501
        :rtype: int
        """
        return self._repeat_count

    @repeat_count.setter
    def repeat_count(self, repeat_count):
        """Sets the repeat_count of this BasePerformanceMetricsByFeEthPort.

        Number of times the metrics are repeated.  # noqa: E501

        :param repeat_count: The repeat_count of this BasePerformanceMetricsByFeEthPort.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                repeat_count is not None and repeat_count > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `repeat_count`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                repeat_count is not None and repeat_count < 0):  # noqa: E501
            raise ValueError("Invalid value for `repeat_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._repeat_count = repeat_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BasePerformanceMetricsByFeEthPort, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BasePerformanceMetricsByFeEthPort):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BasePerformanceMetricsByFeEthPort):
            return True

        return self.to_dict() != other.to_dict()
