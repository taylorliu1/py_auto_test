# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class ImportSessionStateEnum(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    SCHEDULED = "Scheduled"
    PAUSED = "Paused"
    QUEUED = "Queued"
    IN_PROGRESS = "In_Progress"
    MIRROR_ENABLED = "Mirror_Enabled"
    READY_TO_START_COPY = "Ready_To_Start_Copy"
    COPY_IN_PROGRESS = "Copy_In_Progress"
    READY_FOR_CUTOVER = "Ready_For_Cutover"
    CUTOVER_IN_PROGRESS = "Cutover_In_Progress"
    IMPORT_COMPLETED = "Import_Completed"
    CANCELLED = "Cancelled"
    FAILED = "Failed"
    CANCEL_FAILED = "Cancel_Failed"
    CANCEL_IN_PROGRESS = "Cancel_In_Progress"
    CLEANUP_IN_PROGRESS = "Cleanup_In_Progress"
    CLEANUP_FAILED = "Cleanup_Failed"
    INVALID = "Invalid"
    CLEANUP_REQUIRED = "Cleanup_Required"
    IMPORT_COMPLETED_WITH_ERRORS = "Import_Completed_With_Errors"
    IMPORT_CUTOVER_INCOMPLETE = "Import_Cutover_Incomplete"
    CANCEL_REQUIRED = "Cancel_Required"

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self, _configuration=None):  # noqa: E501
        """ImportSessionStateEnum - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImportSessionStateEnum, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportSessionStateEnum):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImportSessionStateEnum):
            return True

        return self.to_dict() != other.to_dict()
