# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class FileSystemInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'nas_server_id': 'str',
        'parent_id': 'str',
        'filesystem_type': 'FileSystemTypeEnum',
        'size_total': 'int',
        'size_used': 'int',
        'config_type': 'FileSystemConfigTypeEnum',
        'protection_policy_id': 'str',
        'access_policy': 'FileSystemAccessPolicyEnum',
        'locking_policy': 'FileSystemLockingPolicyEnum',
        'folder_rename_policy': 'FileSystemFolderRenamePolicyEnum',
        'is_smb_sync_writes_enabled': 'bool',
        'is_smb_op_locks_enabled': 'bool',
        'is_smb_no_notify_enabled': 'bool',
        'is_smb_notify_on_access_enabled': 'bool',
        'is_smb_notify_on_write_enabled': 'bool',
        'smb_notify_on_change_dir_depth': 'int',
        'is_async_m_time_enabled': 'bool',
        'is_quota_enabled': 'bool',
        'grace_period': 'int',
        'default_hard_limit': 'int',
        'default_soft_limit': 'int',
        'creation_timestamp': 'datetime',
        'expiration_timestamp': 'datetime',
        'last_refresh_timestamp': 'datetime',
        'last_writable_timestamp': 'datetime',
        'is_modified': 'bool',
        'access_type': 'FileSystemSnapshotAccessTypeEnum',
        'creator_type': 'FileSystemSnapshotCreatorTypeEnum',
        'file_events_publishing_mode': 'FileEventsPublishingModeEnum',
        'flr_attributes': 'FlrInstance',
        'host_io_size': 'FileSystemHostIoSizeEnum',
        'filesystem_type_l10n': 'str',
        'config_type_l10n': 'str',
        'access_policy_l10n': 'str',
        'locking_policy_l10n': 'str',
        'folder_rename_policy_l10n': 'str',
        'access_type_l10n': 'str',
        'creator_type_l10n': 'str',
        'file_events_publishing_mode_l10n': 'str',
        'host_io_size_l10n': 'str',
        'nas_server': 'NasServerInstance',
        'protection_policy': 'PolicyInstance',
        'file_tree_quotas': 'list[FileTreeQuotaInstance]',
        'file_user_quotas': 'list[FileUserQuotaInstance]',
        'nfs_exports': 'list[NfsExportInstance]',
        'smb_shares': 'list[SmbShareInstance]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'nas_server_id': 'nas_server_id',
        'parent_id': 'parent_id',
        'filesystem_type': 'filesystem_type',
        'size_total': 'size_total',
        'size_used': 'size_used',
        'config_type': 'config_type',
        'protection_policy_id': 'protection_policy_id',
        'access_policy': 'access_policy',
        'locking_policy': 'locking_policy',
        'folder_rename_policy': 'folder_rename_policy',
        'is_smb_sync_writes_enabled': 'is_smb_sync_writes_enabled',
        'is_smb_op_locks_enabled': 'is_smb_op_locks_enabled',
        'is_smb_no_notify_enabled': 'is_smb_no_notify_enabled',
        'is_smb_notify_on_access_enabled': 'is_smb_notify_on_access_enabled',
        'is_smb_notify_on_write_enabled': 'is_smb_notify_on_write_enabled',
        'smb_notify_on_change_dir_depth': 'smb_notify_on_change_dir_depth',
        'is_async_m_time_enabled': 'is_async_MTime_enabled',
        'is_quota_enabled': 'is_quota_enabled',
        'grace_period': 'grace_period',
        'default_hard_limit': 'default_hard_limit',
        'default_soft_limit': 'default_soft_limit',
        'creation_timestamp': 'creation_timestamp',
        'expiration_timestamp': 'expiration_timestamp',
        'last_refresh_timestamp': 'last_refresh_timestamp',
        'last_writable_timestamp': 'last_writable_timestamp',
        'is_modified': 'is_modified',
        'access_type': 'access_type',
        'creator_type': 'creator_type',
        'file_events_publishing_mode': 'file_events_publishing_mode',
        'flr_attributes': 'flr_attributes',
        'host_io_size': 'host_io_size',
        'filesystem_type_l10n': 'filesystem_type_l10n',
        'config_type_l10n': 'config_type_l10n',
        'access_policy_l10n': 'access_policy_l10n',
        'locking_policy_l10n': 'locking_policy_l10n',
        'folder_rename_policy_l10n': 'folder_rename_policy_l10n',
        'access_type_l10n': 'access_type_l10n',
        'creator_type_l10n': 'creator_type_l10n',
        'file_events_publishing_mode_l10n': 'file_events_publishing_mode_l10n',
        'host_io_size_l10n': 'host_io_size_l10n',
        'nas_server': 'nas_server',
        'protection_policy': 'protection_policy',
        'file_tree_quotas': 'file_tree_quotas',
        'file_user_quotas': 'file_user_quotas',
        'nfs_exports': 'nfs_exports',
        'smb_shares': 'smb_shares'
    }

    def __init__(self, id=None, name=None, description=None, nas_server_id=None, parent_id=None, filesystem_type=None, size_total=None, size_used=None, config_type=None, protection_policy_id=None, access_policy=None, locking_policy=None, folder_rename_policy=None, is_smb_sync_writes_enabled=None, is_smb_op_locks_enabled=None, is_smb_no_notify_enabled=None, is_smb_notify_on_access_enabled=None, is_smb_notify_on_write_enabled=None, smb_notify_on_change_dir_depth=None, is_async_m_time_enabled=None, is_quota_enabled=None, grace_period=-1, default_hard_limit=None, default_soft_limit=None, creation_timestamp=None, expiration_timestamp=None, last_refresh_timestamp=None, last_writable_timestamp=None, is_modified=None, access_type=None, creator_type=None, file_events_publishing_mode=None, flr_attributes=None, host_io_size=None, filesystem_type_l10n=None, config_type_l10n=None, access_policy_l10n=None, locking_policy_l10n=None, folder_rename_policy_l10n=None, access_type_l10n=None, creator_type_l10n=None, file_events_publishing_mode_l10n=None, host_io_size_l10n=None, nas_server=None, protection_policy=None, file_tree_quotas=None, file_user_quotas=None, nfs_exports=None, smb_shares=None, _configuration=None):  # noqa: E501
        """FileSystemInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._description = None
        self._nas_server_id = None
        self._parent_id = None
        self._filesystem_type = None
        self._size_total = None
        self._size_used = None
        self._config_type = None
        self._protection_policy_id = None
        self._access_policy = None
        self._locking_policy = None
        self._folder_rename_policy = None
        self._is_smb_sync_writes_enabled = None
        self._is_smb_op_locks_enabled = None
        self._is_smb_no_notify_enabled = None
        self._is_smb_notify_on_access_enabled = None
        self._is_smb_notify_on_write_enabled = None
        self._smb_notify_on_change_dir_depth = None
        self._is_async_m_time_enabled = None
        self._is_quota_enabled = None
        self._grace_period = None
        self._default_hard_limit = None
        self._default_soft_limit = None
        self._creation_timestamp = None
        self._expiration_timestamp = None
        self._last_refresh_timestamp = None
        self._last_writable_timestamp = None
        self._is_modified = None
        self._access_type = None
        self._creator_type = None
        self._file_events_publishing_mode = None
        self._flr_attributes = None
        self._host_io_size = None
        self._filesystem_type_l10n = None
        self._config_type_l10n = None
        self._access_policy_l10n = None
        self._locking_policy_l10n = None
        self._folder_rename_policy_l10n = None
        self._access_type_l10n = None
        self._creator_type_l10n = None
        self._file_events_publishing_mode_l10n = None
        self._host_io_size_l10n = None
        self._nas_server = None
        self._protection_policy = None
        self._file_tree_quotas = None
        self._file_user_quotas = None
        self._nfs_exports = None
        self._smb_shares = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if nas_server_id is not None:
            self.nas_server_id = nas_server_id
        if parent_id is not None:
            self.parent_id = parent_id
        if filesystem_type is not None:
            self.filesystem_type = filesystem_type
        if size_total is not None:
            self.size_total = size_total
        if size_used is not None:
            self.size_used = size_used
        if config_type is not None:
            self.config_type = config_type
        if protection_policy_id is not None:
            self.protection_policy_id = protection_policy_id
        if access_policy is not None:
            self.access_policy = access_policy
        if locking_policy is not None:
            self.locking_policy = locking_policy
        if folder_rename_policy is not None:
            self.folder_rename_policy = folder_rename_policy
        if is_smb_sync_writes_enabled is not None:
            self.is_smb_sync_writes_enabled = is_smb_sync_writes_enabled
        if is_smb_op_locks_enabled is not None:
            self.is_smb_op_locks_enabled = is_smb_op_locks_enabled
        if is_smb_no_notify_enabled is not None:
            self.is_smb_no_notify_enabled = is_smb_no_notify_enabled
        if is_smb_notify_on_access_enabled is not None:
            self.is_smb_notify_on_access_enabled = is_smb_notify_on_access_enabled
        if is_smb_notify_on_write_enabled is not None:
            self.is_smb_notify_on_write_enabled = is_smb_notify_on_write_enabled
        if smb_notify_on_change_dir_depth is not None:
            self.smb_notify_on_change_dir_depth = smb_notify_on_change_dir_depth
        if is_async_m_time_enabled is not None:
            self.is_async_m_time_enabled = is_async_m_time_enabled
        if is_quota_enabled is not None:
            self.is_quota_enabled = is_quota_enabled
        if grace_period is not None:
            self.grace_period = grace_period
        if default_hard_limit is not None:
            self.default_hard_limit = default_hard_limit
        if default_soft_limit is not None:
            self.default_soft_limit = default_soft_limit
        if creation_timestamp is not None:
            self.creation_timestamp = creation_timestamp
        if expiration_timestamp is not None:
            self.expiration_timestamp = expiration_timestamp
        if last_refresh_timestamp is not None:
            self.last_refresh_timestamp = last_refresh_timestamp
        if last_writable_timestamp is not None:
            self.last_writable_timestamp = last_writable_timestamp
        if is_modified is not None:
            self.is_modified = is_modified
        if access_type is not None:
            self.access_type = access_type
        if creator_type is not None:
            self.creator_type = creator_type
        if file_events_publishing_mode is not None:
            self.file_events_publishing_mode = file_events_publishing_mode
        if flr_attributes is not None:
            self.flr_attributes = flr_attributes
        if host_io_size is not None:
            self.host_io_size = host_io_size
        if filesystem_type_l10n is not None:
            self.filesystem_type_l10n = filesystem_type_l10n
        if config_type_l10n is not None:
            self.config_type_l10n = config_type_l10n
        if access_policy_l10n is not None:
            self.access_policy_l10n = access_policy_l10n
        if locking_policy_l10n is not None:
            self.locking_policy_l10n = locking_policy_l10n
        if folder_rename_policy_l10n is not None:
            self.folder_rename_policy_l10n = folder_rename_policy_l10n
        if access_type_l10n is not None:
            self.access_type_l10n = access_type_l10n
        if creator_type_l10n is not None:
            self.creator_type_l10n = creator_type_l10n
        if file_events_publishing_mode_l10n is not None:
            self.file_events_publishing_mode_l10n = file_events_publishing_mode_l10n
        if host_io_size_l10n is not None:
            self.host_io_size_l10n = host_io_size_l10n
        if nas_server is not None:
            self.nas_server = nas_server
        if protection_policy is not None:
            self.protection_policy = protection_policy
        if file_tree_quotas is not None:
            self.file_tree_quotas = file_tree_quotas
        if file_user_quotas is not None:
            self.file_user_quotas = file_user_quotas
        if nfs_exports is not None:
            self.nfs_exports = nfs_exports
        if smb_shares is not None:
            self.smb_shares = smb_shares

    @property
    def id(self):
        """Gets the id of this FileSystemInstance.  # noqa: E501

        Unique identifier of the file system.  # noqa: E501

        :return: The id of this FileSystemInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FileSystemInstance.

        Unique identifier of the file system.  # noqa: E501

        :param id: The id of this FileSystemInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this FileSystemInstance.  # noqa: E501

        Name of the file system.  This property supports case-insensitive filtering.  # noqa: E501

        :return: The name of this FileSystemInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FileSystemInstance.

        Name of the file system.  This property supports case-insensitive filtering.  # noqa: E501

        :param name: The name of this FileSystemInstance.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this FileSystemInstance.  # noqa: E501

        Description of the file system.  # noqa: E501

        :return: The description of this FileSystemInstance.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FileSystemInstance.

        Description of the file system.  # noqa: E501

        :param description: The description of this FileSystemInstance.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def nas_server_id(self):
        """Gets the nas_server_id of this FileSystemInstance.  # noqa: E501

        Unique identifier of the NAS Server on which the file system is mounted.  # noqa: E501

        :return: The nas_server_id of this FileSystemInstance.  # noqa: E501
        :rtype: str
        """
        return self._nas_server_id

    @nas_server_id.setter
    def nas_server_id(self, nas_server_id):
        """Sets the nas_server_id of this FileSystemInstance.

        Unique identifier of the NAS Server on which the file system is mounted.  # noqa: E501

        :param nas_server_id: The nas_server_id of this FileSystemInstance.  # noqa: E501
        :type: str
        """

        self._nas_server_id = nas_server_id

    @property
    def parent_id(self):
        """Gets the parent_id of this FileSystemInstance.  # noqa: E501

        Unique identifier of the object of the parent of this file system (only applies to clones and snapshots). If the parent of a clone has been deleted the object_id will contain the null GUID 00000000-0000-0000-0000-000000000000.  # noqa: E501

        :return: The parent_id of this FileSystemInstance.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this FileSystemInstance.

        Unique identifier of the object of the parent of this file system (only applies to clones and snapshots). If the parent of a clone has been deleted the object_id will contain the null GUID 00000000-0000-0000-0000-000000000000.  # noqa: E501

        :param parent_id: The parent_id of this FileSystemInstance.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    @property
    def filesystem_type(self):
        """Gets the filesystem_type of this FileSystemInstance.  # noqa: E501


        :return: The filesystem_type of this FileSystemInstance.  # noqa: E501
        :rtype: FileSystemTypeEnum
        """
        return self._filesystem_type

    @filesystem_type.setter
    def filesystem_type(self, filesystem_type):
        """Sets the filesystem_type of this FileSystemInstance.


        :param filesystem_type: The filesystem_type of this FileSystemInstance.  # noqa: E501
        :type: FileSystemTypeEnum
        """

        self._filesystem_type = filesystem_type

    @property
    def size_total(self):
        """Gets the size_total of this FileSystemInstance.  # noqa: E501

        Size, in bytes, presented to the host or end user. Value is always rounded up to next MB.   # noqa: E501

        :return: The size_total of this FileSystemInstance.  # noqa: E501
        :rtype: int
        """
        return self._size_total

    @size_total.setter
    def size_total(self, size_total):
        """Sets the size_total of this FileSystemInstance.

        Size, in bytes, presented to the host or end user. Value is always rounded up to next MB.   # noqa: E501

        :param size_total: The size_total of this FileSystemInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                size_total is not None and size_total > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `size_total`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                size_total is not None and size_total < 0):  # noqa: E501
            raise ValueError("Invalid value for `size_total`, must be a value greater than or equal to `0`")  # noqa: E501

        self._size_total = size_total

    @property
    def size_used(self):
        """Gets the size_used of this FileSystemInstance.  # noqa: E501

        Size used, in bytes, for the data and metadata of the file system. Value is always rounded up to next MB.   # noqa: E501

        :return: The size_used of this FileSystemInstance.  # noqa: E501
        :rtype: int
        """
        return self._size_used

    @size_used.setter
    def size_used(self, size_used):
        """Sets the size_used of this FileSystemInstance.

        Size used, in bytes, for the data and metadata of the file system. Value is always rounded up to next MB.   # noqa: E501

        :param size_used: The size_used of this FileSystemInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                size_used is not None and size_used > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `size_used`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                size_used is not None and size_used < 0):  # noqa: E501
            raise ValueError("Invalid value for `size_used`, must be a value greater than or equal to `0`")  # noqa: E501

        self._size_used = size_used

    @property
    def config_type(self):
        """Gets the config_type of this FileSystemInstance.  # noqa: E501

         Was added in version 3.0.0.0.  # noqa: E501

        :return: The config_type of this FileSystemInstance.  # noqa: E501
        :rtype: FileSystemConfigTypeEnum
        """
        return self._config_type

    @config_type.setter
    def config_type(self, config_type):
        """Sets the config_type of this FileSystemInstance.

         Was added in version 3.0.0.0.  # noqa: E501

        :param config_type: The config_type of this FileSystemInstance.  # noqa: E501
        :type: FileSystemConfigTypeEnum
        """

        self._config_type = config_type

    @property
    def protection_policy_id(self):
        """Gets the protection_policy_id of this FileSystemInstance.  # noqa: E501

        Unique identifier of the protection policy applied to the file system.  # noqa: E501

        :return: The protection_policy_id of this FileSystemInstance.  # noqa: E501
        :rtype: str
        """
        return self._protection_policy_id

    @protection_policy_id.setter
    def protection_policy_id(self, protection_policy_id):
        """Sets the protection_policy_id of this FileSystemInstance.

        Unique identifier of the protection policy applied to the file system.  # noqa: E501

        :param protection_policy_id: The protection_policy_id of this FileSystemInstance.  # noqa: E501
        :type: str
        """

        self._protection_policy_id = protection_policy_id

    @property
    def access_policy(self):
        """Gets the access_policy of this FileSystemInstance.  # noqa: E501


        :return: The access_policy of this FileSystemInstance.  # noqa: E501
        :rtype: FileSystemAccessPolicyEnum
        """
        return self._access_policy

    @access_policy.setter
    def access_policy(self, access_policy):
        """Sets the access_policy of this FileSystemInstance.


        :param access_policy: The access_policy of this FileSystemInstance.  # noqa: E501
        :type: FileSystemAccessPolicyEnum
        """

        self._access_policy = access_policy

    @property
    def locking_policy(self):
        """Gets the locking_policy of this FileSystemInstance.  # noqa: E501


        :return: The locking_policy of this FileSystemInstance.  # noqa: E501
        :rtype: FileSystemLockingPolicyEnum
        """
        return self._locking_policy

    @locking_policy.setter
    def locking_policy(self, locking_policy):
        """Sets the locking_policy of this FileSystemInstance.


        :param locking_policy: The locking_policy of this FileSystemInstance.  # noqa: E501
        :type: FileSystemLockingPolicyEnum
        """

        self._locking_policy = locking_policy

    @property
    def folder_rename_policy(self):
        """Gets the folder_rename_policy of this FileSystemInstance.  # noqa: E501


        :return: The folder_rename_policy of this FileSystemInstance.  # noqa: E501
        :rtype: FileSystemFolderRenamePolicyEnum
        """
        return self._folder_rename_policy

    @folder_rename_policy.setter
    def folder_rename_policy(self, folder_rename_policy):
        """Sets the folder_rename_policy of this FileSystemInstance.


        :param folder_rename_policy: The folder_rename_policy of this FileSystemInstance.  # noqa: E501
        :type: FileSystemFolderRenamePolicyEnum
        """

        self._folder_rename_policy = folder_rename_policy

    @property
    def is_smb_sync_writes_enabled(self):
        """Gets the is_smb_sync_writes_enabled of this FileSystemInstance.  # noqa: E501

        Indicates whether the synchronous writes option is enabled on the file system. Values are: * true - Synchronous writes option is enabled on the file system. * false - Synchronous writes option is disabled on the file system.   # noqa: E501

        :return: The is_smb_sync_writes_enabled of this FileSystemInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_smb_sync_writes_enabled

    @is_smb_sync_writes_enabled.setter
    def is_smb_sync_writes_enabled(self, is_smb_sync_writes_enabled):
        """Sets the is_smb_sync_writes_enabled of this FileSystemInstance.

        Indicates whether the synchronous writes option is enabled on the file system. Values are: * true - Synchronous writes option is enabled on the file system. * false - Synchronous writes option is disabled on the file system.   # noqa: E501

        :param is_smb_sync_writes_enabled: The is_smb_sync_writes_enabled of this FileSystemInstance.  # noqa: E501
        :type: bool
        """

        self._is_smb_sync_writes_enabled = is_smb_sync_writes_enabled

    @property
    def is_smb_op_locks_enabled(self):
        """Gets the is_smb_op_locks_enabled of this FileSystemInstance.  # noqa: E501

        Indicates whether opportunistic file locking is enabled on the file system. Values are: * true - Opportunistic file locking is enabled on the file system. * false - Opportunistic file locking is disabled on the file system.   # noqa: E501

        :return: The is_smb_op_locks_enabled of this FileSystemInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_smb_op_locks_enabled

    @is_smb_op_locks_enabled.setter
    def is_smb_op_locks_enabled(self, is_smb_op_locks_enabled):
        """Sets the is_smb_op_locks_enabled of this FileSystemInstance.

        Indicates whether opportunistic file locking is enabled on the file system. Values are: * true - Opportunistic file locking is enabled on the file system. * false - Opportunistic file locking is disabled on the file system.   # noqa: E501

        :param is_smb_op_locks_enabled: The is_smb_op_locks_enabled of this FileSystemInstance.  # noqa: E501
        :type: bool
        """

        self._is_smb_op_locks_enabled = is_smb_op_locks_enabled

    @property
    def is_smb_no_notify_enabled(self):
        """Gets the is_smb_no_notify_enabled of this FileSystemInstance.  # noqa: E501

        Indicates whether notifications of changes to a directory file structure are enabled. * true - Change directory notifications are disabled. * false - Change directory notifications are enabled.   # noqa: E501

        :return: The is_smb_no_notify_enabled of this FileSystemInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_smb_no_notify_enabled

    @is_smb_no_notify_enabled.setter
    def is_smb_no_notify_enabled(self, is_smb_no_notify_enabled):
        """Sets the is_smb_no_notify_enabled of this FileSystemInstance.

        Indicates whether notifications of changes to a directory file structure are enabled. * true - Change directory notifications are disabled. * false - Change directory notifications are enabled.   # noqa: E501

        :param is_smb_no_notify_enabled: The is_smb_no_notify_enabled of this FileSystemInstance.  # noqa: E501
        :type: bool
        """

        self._is_smb_no_notify_enabled = is_smb_no_notify_enabled

    @property
    def is_smb_notify_on_access_enabled(self):
        """Gets the is_smb_notify_on_access_enabled of this FileSystemInstance.  # noqa: E501

        Indicates whether file access notifications are enabled on the file system. Values are: * true - File access notifications are enabled on the file system. * false - File access notifications are disabled on the file system.   # noqa: E501

        :return: The is_smb_notify_on_access_enabled of this FileSystemInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_smb_notify_on_access_enabled

    @is_smb_notify_on_access_enabled.setter
    def is_smb_notify_on_access_enabled(self, is_smb_notify_on_access_enabled):
        """Sets the is_smb_notify_on_access_enabled of this FileSystemInstance.

        Indicates whether file access notifications are enabled on the file system. Values are: * true - File access notifications are enabled on the file system. * false - File access notifications are disabled on the file system.   # noqa: E501

        :param is_smb_notify_on_access_enabled: The is_smb_notify_on_access_enabled of this FileSystemInstance.  # noqa: E501
        :type: bool
        """

        self._is_smb_notify_on_access_enabled = is_smb_notify_on_access_enabled

    @property
    def is_smb_notify_on_write_enabled(self):
        """Gets the is_smb_notify_on_write_enabled of this FileSystemInstance.  # noqa: E501

        Indicates whether file writes notifications are enabled on the file system. Values are: * true - File writes notification are enabled on the file system. * false - File writes notifications are disabled on the file system.   # noqa: E501

        :return: The is_smb_notify_on_write_enabled of this FileSystemInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_smb_notify_on_write_enabled

    @is_smb_notify_on_write_enabled.setter
    def is_smb_notify_on_write_enabled(self, is_smb_notify_on_write_enabled):
        """Sets the is_smb_notify_on_write_enabled of this FileSystemInstance.

        Indicates whether file writes notifications are enabled on the file system. Values are: * true - File writes notification are enabled on the file system. * false - File writes notifications are disabled on the file system.   # noqa: E501

        :param is_smb_notify_on_write_enabled: The is_smb_notify_on_write_enabled of this FileSystemInstance.  # noqa: E501
        :type: bool
        """

        self._is_smb_notify_on_write_enabled = is_smb_notify_on_write_enabled

    @property
    def smb_notify_on_change_dir_depth(self):
        """Gets the smb_notify_on_change_dir_depth of this FileSystemInstance.  # noqa: E501

        Lowest directory level to which the enabled notifications apply, if any.  # noqa: E501

        :return: The smb_notify_on_change_dir_depth of this FileSystemInstance.  # noqa: E501
        :rtype: int
        """
        return self._smb_notify_on_change_dir_depth

    @smb_notify_on_change_dir_depth.setter
    def smb_notify_on_change_dir_depth(self, smb_notify_on_change_dir_depth):
        """Sets the smb_notify_on_change_dir_depth of this FileSystemInstance.

        Lowest directory level to which the enabled notifications apply, if any.  # noqa: E501

        :param smb_notify_on_change_dir_depth: The smb_notify_on_change_dir_depth of this FileSystemInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                smb_notify_on_change_dir_depth is not None and smb_notify_on_change_dir_depth > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `smb_notify_on_change_dir_depth`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                smb_notify_on_change_dir_depth is not None and smb_notify_on_change_dir_depth < 0):  # noqa: E501
            raise ValueError("Invalid value for `smb_notify_on_change_dir_depth`, must be a value greater than or equal to `0`")  # noqa: E501

        self._smb_notify_on_change_dir_depth = smb_notify_on_change_dir_depth

    @property
    def is_async_m_time_enabled(self):
        """Gets the is_async_m_time_enabled of this FileSystemInstance.  # noqa: E501

        Indicates whether asynchronous MTIME is enabled on the file system. Values are: * true - Asynchronous MTIME is enabled on the file system. * false - Asynchronous MTIME is disabled on the file system.   # noqa: E501

        :return: The is_async_m_time_enabled of this FileSystemInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_async_m_time_enabled

    @is_async_m_time_enabled.setter
    def is_async_m_time_enabled(self, is_async_m_time_enabled):
        """Sets the is_async_m_time_enabled of this FileSystemInstance.

        Indicates whether asynchronous MTIME is enabled on the file system. Values are: * true - Asynchronous MTIME is enabled on the file system. * false - Asynchronous MTIME is disabled on the file system.   # noqa: E501

        :param is_async_m_time_enabled: The is_async_m_time_enabled of this FileSystemInstance.  # noqa: E501
        :type: bool
        """

        self._is_async_m_time_enabled = is_async_m_time_enabled

    @property
    def is_quota_enabled(self):
        """Gets the is_quota_enabled of this FileSystemInstance.  # noqa: E501

        Indicates whether quota is enabled. Values are: * true - Start tracking usages for all users on a file system or a quota tree, and user quota limits will be enforced. * false - Stop tracking usages for all users on a file system or a quota tree, and user quota limits will not be enforced.   # noqa: E501

        :return: The is_quota_enabled of this FileSystemInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_quota_enabled

    @is_quota_enabled.setter
    def is_quota_enabled(self, is_quota_enabled):
        """Sets the is_quota_enabled of this FileSystemInstance.

        Indicates whether quota is enabled. Values are: * true - Start tracking usages for all users on a file system or a quota tree, and user quota limits will be enforced. * false - Stop tracking usages for all users on a file system or a quota tree, and user quota limits will not be enforced.   # noqa: E501

        :param is_quota_enabled: The is_quota_enabled of this FileSystemInstance.  # noqa: E501
        :type: bool
        """

        self._is_quota_enabled = is_quota_enabled

    @property
    def grace_period(self):
        """Gets the grace_period of this FileSystemInstance.  # noqa: E501

        Grace period of soft limit (seconds):  * -1: Infinite grace period (Windows policy).  *  0: Use default grace period of 1 week (default).  * Positive: Grace period after which the soft limit is treated as a hard limit (seconds).   # noqa: E501

        :return: The grace_period of this FileSystemInstance.  # noqa: E501
        :rtype: int
        """
        return self._grace_period

    @grace_period.setter
    def grace_period(self, grace_period):
        """Sets the grace_period of this FileSystemInstance.

        Grace period of soft limit (seconds):  * -1: Infinite grace period (Windows policy).  *  0: Use default grace period of 1 week (default).  * Positive: Grace period after which the soft limit is treated as a hard limit (seconds).   # noqa: E501

        :param grace_period: The grace_period of this FileSystemInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                grace_period is not None and grace_period > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `grace_period`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                grace_period is not None and grace_period < -1):  # noqa: E501
            raise ValueError("Invalid value for `grace_period`, must be a value greater than or equal to `-1`")  # noqa: E501

        self._grace_period = grace_period

    @property
    def default_hard_limit(self):
        """Gets the default_hard_limit of this FileSystemInstance.  # noqa: E501

        Default hard limit of user quotas and tree quotas (bytes). (0 means 'No limitation'. This value can be used to compute the amount of space consumed without limiting the space).   # noqa: E501

        :return: The default_hard_limit of this FileSystemInstance.  # noqa: E501
        :rtype: int
        """
        return self._default_hard_limit

    @default_hard_limit.setter
    def default_hard_limit(self, default_hard_limit):
        """Sets the default_hard_limit of this FileSystemInstance.

        Default hard limit of user quotas and tree quotas (bytes). (0 means 'No limitation'. This value can be used to compute the amount of space consumed without limiting the space).   # noqa: E501

        :param default_hard_limit: The default_hard_limit of this FileSystemInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                default_hard_limit is not None and default_hard_limit > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `default_hard_limit`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                default_hard_limit is not None and default_hard_limit < 0):  # noqa: E501
            raise ValueError("Invalid value for `default_hard_limit`, must be a value greater than or equal to `0`")  # noqa: E501

        self._default_hard_limit = default_hard_limit

    @property
    def default_soft_limit(self):
        """Gets the default_soft_limit of this FileSystemInstance.  # noqa: E501

        Default soft limit of user quotas and tree quotas (bytes). (0 means 'No limitation')   # noqa: E501

        :return: The default_soft_limit of this FileSystemInstance.  # noqa: E501
        :rtype: int
        """
        return self._default_soft_limit

    @default_soft_limit.setter
    def default_soft_limit(self, default_soft_limit):
        """Sets the default_soft_limit of this FileSystemInstance.

        Default soft limit of user quotas and tree quotas (bytes). (0 means 'No limitation')   # noqa: E501

        :param default_soft_limit: The default_soft_limit of this FileSystemInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                default_soft_limit is not None and default_soft_limit > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `default_soft_limit`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                default_soft_limit is not None and default_soft_limit < 0):  # noqa: E501
            raise ValueError("Invalid value for `default_soft_limit`, must be a value greater than or equal to `0`")  # noqa: E501

        self._default_soft_limit = default_soft_limit

    @property
    def creation_timestamp(self):
        """Gets the creation_timestamp of this FileSystemInstance.  # noqa: E501

        Time, in seconds, when the snapshot was created.  # noqa: E501

        :return: The creation_timestamp of this FileSystemInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_timestamp

    @creation_timestamp.setter
    def creation_timestamp(self, creation_timestamp):
        """Sets the creation_timestamp of this FileSystemInstance.

        Time, in seconds, when the snapshot was created.  # noqa: E501

        :param creation_timestamp: The creation_timestamp of this FileSystemInstance.  # noqa: E501
        :type: datetime
        """

        self._creation_timestamp = creation_timestamp

    @property
    def expiration_timestamp(self):
        """Gets the expiration_timestamp of this FileSystemInstance.  # noqa: E501

        Time, in seconds, when the snapshot will expire.  # noqa: E501

        :return: The expiration_timestamp of this FileSystemInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_timestamp

    @expiration_timestamp.setter
    def expiration_timestamp(self, expiration_timestamp):
        """Sets the expiration_timestamp of this FileSystemInstance.

        Time, in seconds, when the snapshot will expire.  # noqa: E501

        :param expiration_timestamp: The expiration_timestamp of this FileSystemInstance.  # noqa: E501
        :type: datetime
        """

        self._expiration_timestamp = expiration_timestamp

    @property
    def last_refresh_timestamp(self):
        """Gets the last_refresh_timestamp of this FileSystemInstance.  # noqa: E501

        Time, in seconds, when the snapshot was last refreshed.  # noqa: E501

        :return: The last_refresh_timestamp of this FileSystemInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._last_refresh_timestamp

    @last_refresh_timestamp.setter
    def last_refresh_timestamp(self, last_refresh_timestamp):
        """Sets the last_refresh_timestamp of this FileSystemInstance.

        Time, in seconds, when the snapshot was last refreshed.  # noqa: E501

        :param last_refresh_timestamp: The last_refresh_timestamp of this FileSystemInstance.  # noqa: E501
        :type: datetime
        """

        self._last_refresh_timestamp = last_refresh_timestamp

    @property
    def last_writable_timestamp(self):
        """Gets the last_writable_timestamp of this FileSystemInstance.  # noqa: E501

        If not mounted, and was previously mounted, the time (in seconds) of last mount. If never mounted, the value will be zero.  # noqa: E501

        :return: The last_writable_timestamp of this FileSystemInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._last_writable_timestamp

    @last_writable_timestamp.setter
    def last_writable_timestamp(self, last_writable_timestamp):
        """Sets the last_writable_timestamp of this FileSystemInstance.

        If not mounted, and was previously mounted, the time (in seconds) of last mount. If never mounted, the value will be zero.  # noqa: E501

        :param last_writable_timestamp: The last_writable_timestamp of this FileSystemInstance.  # noqa: E501
        :type: datetime
        """

        self._last_writable_timestamp = last_writable_timestamp

    @property
    def is_modified(self):
        """Gets the is_modified of this FileSystemInstance.  # noqa: E501

        Indicates whether the snapshot may have changed since it was created. Values are: * true - Snapshot is or was shared with read/write access. * false - Snapshot was never shared.   # noqa: E501

        :return: The is_modified of this FileSystemInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_modified

    @is_modified.setter
    def is_modified(self, is_modified):
        """Sets the is_modified of this FileSystemInstance.

        Indicates whether the snapshot may have changed since it was created. Values are: * true - Snapshot is or was shared with read/write access. * false - Snapshot was never shared.   # noqa: E501

        :param is_modified: The is_modified of this FileSystemInstance.  # noqa: E501
        :type: bool
        """

        self._is_modified = is_modified

    @property
    def access_type(self):
        """Gets the access_type of this FileSystemInstance.  # noqa: E501


        :return: The access_type of this FileSystemInstance.  # noqa: E501
        :rtype: FileSystemSnapshotAccessTypeEnum
        """
        return self._access_type

    @access_type.setter
    def access_type(self, access_type):
        """Sets the access_type of this FileSystemInstance.


        :param access_type: The access_type of this FileSystemInstance.  # noqa: E501
        :type: FileSystemSnapshotAccessTypeEnum
        """

        self._access_type = access_type

    @property
    def creator_type(self):
        """Gets the creator_type of this FileSystemInstance.  # noqa: E501


        :return: The creator_type of this FileSystemInstance.  # noqa: E501
        :rtype: FileSystemSnapshotCreatorTypeEnum
        """
        return self._creator_type

    @creator_type.setter
    def creator_type(self, creator_type):
        """Sets the creator_type of this FileSystemInstance.


        :param creator_type: The creator_type of this FileSystemInstance.  # noqa: E501
        :type: FileSystemSnapshotCreatorTypeEnum
        """

        self._creator_type = creator_type

    @property
    def file_events_publishing_mode(self):
        """Gets the file_events_publishing_mode of this FileSystemInstance.  # noqa: E501

         Was added in version 3.0.0.0.  # noqa: E501

        :return: The file_events_publishing_mode of this FileSystemInstance.  # noqa: E501
        :rtype: FileEventsPublishingModeEnum
        """
        return self._file_events_publishing_mode

    @file_events_publishing_mode.setter
    def file_events_publishing_mode(self, file_events_publishing_mode):
        """Sets the file_events_publishing_mode of this FileSystemInstance.

         Was added in version 3.0.0.0.  # noqa: E501

        :param file_events_publishing_mode: The file_events_publishing_mode of this FileSystemInstance.  # noqa: E501
        :type: FileEventsPublishingModeEnum
        """

        self._file_events_publishing_mode = file_events_publishing_mode

    @property
    def flr_attributes(self):
        """Gets the flr_attributes of this FileSystemInstance.  # noqa: E501

         Was added in version 3.0.0.0.  # noqa: E501

        :return: The flr_attributes of this FileSystemInstance.  # noqa: E501
        :rtype: FlrInstance
        """
        return self._flr_attributes

    @flr_attributes.setter
    def flr_attributes(self, flr_attributes):
        """Sets the flr_attributes of this FileSystemInstance.

         Was added in version 3.0.0.0.  # noqa: E501

        :param flr_attributes: The flr_attributes of this FileSystemInstance.  # noqa: E501
        :type: FlrInstance
        """

        self._flr_attributes = flr_attributes

    @property
    def host_io_size(self):
        """Gets the host_io_size of this FileSystemInstance.  # noqa: E501

         Was added in version 3.0.0.0.  # noqa: E501

        :return: The host_io_size of this FileSystemInstance.  # noqa: E501
        :rtype: FileSystemHostIoSizeEnum
        """
        return self._host_io_size

    @host_io_size.setter
    def host_io_size(self, host_io_size):
        """Sets the host_io_size of this FileSystemInstance.

         Was added in version 3.0.0.0.  # noqa: E501

        :param host_io_size: The host_io_size of this FileSystemInstance.  # noqa: E501
        :type: FileSystemHostIoSizeEnum
        """

        self._host_io_size = host_io_size

    @property
    def filesystem_type_l10n(self):
        """Gets the filesystem_type_l10n of this FileSystemInstance.  # noqa: E501

        Localized message string corresponding to filesystem_type  # noqa: E501

        :return: The filesystem_type_l10n of this FileSystemInstance.  # noqa: E501
        :rtype: str
        """
        return self._filesystem_type_l10n

    @filesystem_type_l10n.setter
    def filesystem_type_l10n(self, filesystem_type_l10n):
        """Sets the filesystem_type_l10n of this FileSystemInstance.

        Localized message string corresponding to filesystem_type  # noqa: E501

        :param filesystem_type_l10n: The filesystem_type_l10n of this FileSystemInstance.  # noqa: E501
        :type: str
        """

        self._filesystem_type_l10n = filesystem_type_l10n

    @property
    def config_type_l10n(self):
        """Gets the config_type_l10n of this FileSystemInstance.  # noqa: E501

        Localized message string corresponding to config_type Was added in version 3.0.0.0.  # noqa: E501

        :return: The config_type_l10n of this FileSystemInstance.  # noqa: E501
        :rtype: str
        """
        return self._config_type_l10n

    @config_type_l10n.setter
    def config_type_l10n(self, config_type_l10n):
        """Sets the config_type_l10n of this FileSystemInstance.

        Localized message string corresponding to config_type Was added in version 3.0.0.0.  # noqa: E501

        :param config_type_l10n: The config_type_l10n of this FileSystemInstance.  # noqa: E501
        :type: str
        """

        self._config_type_l10n = config_type_l10n

    @property
    def access_policy_l10n(self):
        """Gets the access_policy_l10n of this FileSystemInstance.  # noqa: E501

        Localized message string corresponding to access_policy  # noqa: E501

        :return: The access_policy_l10n of this FileSystemInstance.  # noqa: E501
        :rtype: str
        """
        return self._access_policy_l10n

    @access_policy_l10n.setter
    def access_policy_l10n(self, access_policy_l10n):
        """Sets the access_policy_l10n of this FileSystemInstance.

        Localized message string corresponding to access_policy  # noqa: E501

        :param access_policy_l10n: The access_policy_l10n of this FileSystemInstance.  # noqa: E501
        :type: str
        """

        self._access_policy_l10n = access_policy_l10n

    @property
    def locking_policy_l10n(self):
        """Gets the locking_policy_l10n of this FileSystemInstance.  # noqa: E501

        Localized message string corresponding to locking_policy  # noqa: E501

        :return: The locking_policy_l10n of this FileSystemInstance.  # noqa: E501
        :rtype: str
        """
        return self._locking_policy_l10n

    @locking_policy_l10n.setter
    def locking_policy_l10n(self, locking_policy_l10n):
        """Sets the locking_policy_l10n of this FileSystemInstance.

        Localized message string corresponding to locking_policy  # noqa: E501

        :param locking_policy_l10n: The locking_policy_l10n of this FileSystemInstance.  # noqa: E501
        :type: str
        """

        self._locking_policy_l10n = locking_policy_l10n

    @property
    def folder_rename_policy_l10n(self):
        """Gets the folder_rename_policy_l10n of this FileSystemInstance.  # noqa: E501

        Localized message string corresponding to folder_rename_policy  # noqa: E501

        :return: The folder_rename_policy_l10n of this FileSystemInstance.  # noqa: E501
        :rtype: str
        """
        return self._folder_rename_policy_l10n

    @folder_rename_policy_l10n.setter
    def folder_rename_policy_l10n(self, folder_rename_policy_l10n):
        """Sets the folder_rename_policy_l10n of this FileSystemInstance.

        Localized message string corresponding to folder_rename_policy  # noqa: E501

        :param folder_rename_policy_l10n: The folder_rename_policy_l10n of this FileSystemInstance.  # noqa: E501
        :type: str
        """

        self._folder_rename_policy_l10n = folder_rename_policy_l10n

    @property
    def access_type_l10n(self):
        """Gets the access_type_l10n of this FileSystemInstance.  # noqa: E501

        Localized message string corresponding to access_type  # noqa: E501

        :return: The access_type_l10n of this FileSystemInstance.  # noqa: E501
        :rtype: str
        """
        return self._access_type_l10n

    @access_type_l10n.setter
    def access_type_l10n(self, access_type_l10n):
        """Sets the access_type_l10n of this FileSystemInstance.

        Localized message string corresponding to access_type  # noqa: E501

        :param access_type_l10n: The access_type_l10n of this FileSystemInstance.  # noqa: E501
        :type: str
        """

        self._access_type_l10n = access_type_l10n

    @property
    def creator_type_l10n(self):
        """Gets the creator_type_l10n of this FileSystemInstance.  # noqa: E501

        Localized message string corresponding to creator_type  # noqa: E501

        :return: The creator_type_l10n of this FileSystemInstance.  # noqa: E501
        :rtype: str
        """
        return self._creator_type_l10n

    @creator_type_l10n.setter
    def creator_type_l10n(self, creator_type_l10n):
        """Sets the creator_type_l10n of this FileSystemInstance.

        Localized message string corresponding to creator_type  # noqa: E501

        :param creator_type_l10n: The creator_type_l10n of this FileSystemInstance.  # noqa: E501
        :type: str
        """

        self._creator_type_l10n = creator_type_l10n

    @property
    def file_events_publishing_mode_l10n(self):
        """Gets the file_events_publishing_mode_l10n of this FileSystemInstance.  # noqa: E501

        Localized message string corresponding to file_events_publishing_mode Was added in version 3.0.0.0.  # noqa: E501

        :return: The file_events_publishing_mode_l10n of this FileSystemInstance.  # noqa: E501
        :rtype: str
        """
        return self._file_events_publishing_mode_l10n

    @file_events_publishing_mode_l10n.setter
    def file_events_publishing_mode_l10n(self, file_events_publishing_mode_l10n):
        """Sets the file_events_publishing_mode_l10n of this FileSystemInstance.

        Localized message string corresponding to file_events_publishing_mode Was added in version 3.0.0.0.  # noqa: E501

        :param file_events_publishing_mode_l10n: The file_events_publishing_mode_l10n of this FileSystemInstance.  # noqa: E501
        :type: str
        """

        self._file_events_publishing_mode_l10n = file_events_publishing_mode_l10n

    @property
    def host_io_size_l10n(self):
        """Gets the host_io_size_l10n of this FileSystemInstance.  # noqa: E501

        Localized message string corresponding to host_io_size Was added in version 3.0.0.0.  # noqa: E501

        :return: The host_io_size_l10n of this FileSystemInstance.  # noqa: E501
        :rtype: str
        """
        return self._host_io_size_l10n

    @host_io_size_l10n.setter
    def host_io_size_l10n(self, host_io_size_l10n):
        """Sets the host_io_size_l10n of this FileSystemInstance.

        Localized message string corresponding to host_io_size Was added in version 3.0.0.0.  # noqa: E501

        :param host_io_size_l10n: The host_io_size_l10n of this FileSystemInstance.  # noqa: E501
        :type: str
        """

        self._host_io_size_l10n = host_io_size_l10n

    @property
    def nas_server(self):
        """Gets the nas_server of this FileSystemInstance.  # noqa: E501

        This is the embeddable reference form of nas_server_id attribute.  # noqa: E501

        :return: The nas_server of this FileSystemInstance.  # noqa: E501
        :rtype: NasServerInstance
        """
        return self._nas_server

    @nas_server.setter
    def nas_server(self, nas_server):
        """Sets the nas_server of this FileSystemInstance.

        This is the embeddable reference form of nas_server_id attribute.  # noqa: E501

        :param nas_server: The nas_server of this FileSystemInstance.  # noqa: E501
        :type: NasServerInstance
        """

        self._nas_server = nas_server

    @property
    def protection_policy(self):
        """Gets the protection_policy of this FileSystemInstance.  # noqa: E501

        This is the embeddable reference form of protection_policy_id attribute.  # noqa: E501

        :return: The protection_policy of this FileSystemInstance.  # noqa: E501
        :rtype: PolicyInstance
        """
        return self._protection_policy

    @protection_policy.setter
    def protection_policy(self, protection_policy):
        """Sets the protection_policy of this FileSystemInstance.

        This is the embeddable reference form of protection_policy_id attribute.  # noqa: E501

        :param protection_policy: The protection_policy of this FileSystemInstance.  # noqa: E501
        :type: PolicyInstance
        """

        self._protection_policy = protection_policy

    @property
    def file_tree_quotas(self):
        """Gets the file_tree_quotas of this FileSystemInstance.  # noqa: E501

        This is the inverse of the resource type file_tree_quota association.  # noqa: E501

        :return: The file_tree_quotas of this FileSystemInstance.  # noqa: E501
        :rtype: list[FileTreeQuotaInstance]
        """
        return self._file_tree_quotas

    @file_tree_quotas.setter
    def file_tree_quotas(self, file_tree_quotas):
        """Sets the file_tree_quotas of this FileSystemInstance.

        This is the inverse of the resource type file_tree_quota association.  # noqa: E501

        :param file_tree_quotas: The file_tree_quotas of this FileSystemInstance.  # noqa: E501
        :type: list[FileTreeQuotaInstance]
        """

        self._file_tree_quotas = file_tree_quotas

    @property
    def file_user_quotas(self):
        """Gets the file_user_quotas of this FileSystemInstance.  # noqa: E501

        This is the inverse of the resource type file_user_quota association.  # noqa: E501

        :return: The file_user_quotas of this FileSystemInstance.  # noqa: E501
        :rtype: list[FileUserQuotaInstance]
        """
        return self._file_user_quotas

    @file_user_quotas.setter
    def file_user_quotas(self, file_user_quotas):
        """Sets the file_user_quotas of this FileSystemInstance.

        This is the inverse of the resource type file_user_quota association.  # noqa: E501

        :param file_user_quotas: The file_user_quotas of this FileSystemInstance.  # noqa: E501
        :type: list[FileUserQuotaInstance]
        """

        self._file_user_quotas = file_user_quotas

    @property
    def nfs_exports(self):
        """Gets the nfs_exports of this FileSystemInstance.  # noqa: E501

        This is the inverse of the resource type nfs_export association.  # noqa: E501

        :return: The nfs_exports of this FileSystemInstance.  # noqa: E501
        :rtype: list[NfsExportInstance]
        """
        return self._nfs_exports

    @nfs_exports.setter
    def nfs_exports(self, nfs_exports):
        """Sets the nfs_exports of this FileSystemInstance.

        This is the inverse of the resource type nfs_export association.  # noqa: E501

        :param nfs_exports: The nfs_exports of this FileSystemInstance.  # noqa: E501
        :type: list[NfsExportInstance]
        """

        self._nfs_exports = nfs_exports

    @property
    def smb_shares(self):
        """Gets the smb_shares of this FileSystemInstance.  # noqa: E501

        This is the inverse of the resource type smb_share association.  # noqa: E501

        :return: The smb_shares of this FileSystemInstance.  # noqa: E501
        :rtype: list[SmbShareInstance]
        """
        return self._smb_shares

    @smb_shares.setter
    def smb_shares(self, smb_shares):
        """Sets the smb_shares of this FileSystemInstance.

        This is the inverse of the resource type smb_share association.  # noqa: E501

        :param smb_shares: The smb_shares of this FileSystemInstance.  # noqa: E501
        :type: list[SmbShareInstance]
        """

        self._smb_shares = smb_shares

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileSystemInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileSystemInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FileSystemInstance):
            return True

        return self.to_dict() != other.to_dict()
