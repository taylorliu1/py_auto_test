# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class FileImportSessionCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'remote_system_id': 'str',
        'source_resource_id': 'str',
        'description': 'str',
        'import_file_interface_id': 'str',
        'source_smb_admin_username': 'str',
        'source_smb_admin_password': 'str',
        'scheduled_timestamp': 'str',
        'protection_policy_id': 'str',
        'source_dhsm_username': 'str',
        'source_dhsm_password': 'str',
        'file_interfaces': 'list[FileImportSessionFileInterfaceMapping]'
    }

    attribute_map = {
        'name': 'name',
        'remote_system_id': 'remote_system_id',
        'source_resource_id': 'source_resource_id',
        'description': 'description',
        'import_file_interface_id': 'import_file_interface_id',
        'source_smb_admin_username': 'source_smb_admin_username',
        'source_smb_admin_password': 'source_smb_admin_password',
        'scheduled_timestamp': 'scheduled_timestamp',
        'protection_policy_id': 'protection_policy_id',
        'source_dhsm_username': 'source_dhsm_username',
        'source_dhsm_password': 'source_dhsm_password',
        'file_interfaces': 'file_interfaces'
    }

    def __init__(self, name=None, remote_system_id=None, source_resource_id=None, description=None, import_file_interface_id=None, source_smb_admin_username=None, source_smb_admin_password=None, scheduled_timestamp=None, protection_policy_id=None, source_dhsm_username=None, source_dhsm_password=None, file_interfaces=None, _configuration=None):  # noqa: E501
        """FileImportSessionCreate - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._remote_system_id = None
        self._source_resource_id = None
        self._description = None
        self._import_file_interface_id = None
        self._source_smb_admin_username = None
        self._source_smb_admin_password = None
        self._scheduled_timestamp = None
        self._protection_policy_id = None
        self._source_dhsm_username = None
        self._source_dhsm_password = None
        self._file_interfaces = None
        self.discriminator = None

        self.name = name
        self.remote_system_id = remote_system_id
        self.source_resource_id = source_resource_id
        if description is not None:
            self.description = description
        self.import_file_interface_id = import_file_interface_id
        if source_smb_admin_username is not None:
            self.source_smb_admin_username = source_smb_admin_username
        if source_smb_admin_password is not None:
            self.source_smb_admin_password = source_smb_admin_password
        if scheduled_timestamp is not None:
            self.scheduled_timestamp = scheduled_timestamp
        if protection_policy_id is not None:
            self.protection_policy_id = protection_policy_id
        if source_dhsm_username is not None:
            self.source_dhsm_username = source_dhsm_username
        if source_dhsm_password is not None:
            self.source_dhsm_password = source_dhsm_password
        if file_interfaces is not None:
            self.file_interfaces = file_interfaces

    @property
    def name(self):
        """Gets the name of this FileImportSessionCreate.  # noqa: E501

        Name of the import session. The name must be unique in the PowerStore cluster and can contain a maximum of 32 unicode characters. It cannot contain special HTTP characters, unprintable characters, or white space.  # noqa: E501

        :return: The name of this FileImportSessionCreate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FileImportSessionCreate.

        Name of the import session. The name must be unique in the PowerStore cluster and can contain a maximum of 32 unicode characters. It cannot contain special HTTP characters, unprintable characters, or white space.  # noqa: E501

        :param name: The name of this FileImportSessionCreate.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 32):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `32`")  # noqa: E501

        self._name = name

    @property
    def remote_system_id(self):
        """Gets the remote_system_id of this FileImportSessionCreate.  # noqa: E501

        Unique identifier of the storage system that contains the source NAS server to be imported.     You can query the source NAS server object to get the identifier of the source system.     Alternatively, you can use the remote_system object to get this information. name:{name} can be used instead of {id}. For example:'remote_system_id':'name:remote_system_name'  # noqa: E501

        :return: The remote_system_id of this FileImportSessionCreate.  # noqa: E501
        :rtype: str
        """
        return self._remote_system_id

    @remote_system_id.setter
    def remote_system_id(self, remote_system_id):
        """Sets the remote_system_id of this FileImportSessionCreate.

        Unique identifier of the storage system that contains the source NAS server to be imported.     You can query the source NAS server object to get the identifier of the source system.     Alternatively, you can use the remote_system object to get this information. name:{name} can be used instead of {id}. For example:'remote_system_id':'name:remote_system_name'  # noqa: E501

        :param remote_system_id: The remote_system_id of this FileImportSessionCreate.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and remote_system_id is None:
            raise ValueError("Invalid value for `remote_system_id`, must not be `None`")  # noqa: E501

        self._remote_system_id = remote_system_id

    @property
    def source_resource_id(self):
        """Gets the source_resource_id of this FileImportSessionCreate.  # noqa: E501

        Unique identifier of the source NAS server to be imported. Refer to the following objects for more information: * VNX - import_vnx_nas_server.  # noqa: E501

        :return: The source_resource_id of this FileImportSessionCreate.  # noqa: E501
        :rtype: str
        """
        return self._source_resource_id

    @source_resource_id.setter
    def source_resource_id(self, source_resource_id):
        """Sets the source_resource_id of this FileImportSessionCreate.

        Unique identifier of the source NAS server to be imported. Refer to the following objects for more information: * VNX - import_vnx_nas_server.  # noqa: E501

        :param source_resource_id: The source_resource_id of this FileImportSessionCreate.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and source_resource_id is None:
            raise ValueError("Invalid value for `source_resource_id`, must not be `None`")  # noqa: E501

        self._source_resource_id = source_resource_id

    @property
    def description(self):
        """Gets the description of this FileImportSessionCreate.  # noqa: E501

        Description of the file import session.     The name can contain a maximum of 128 Unicode characters.     It cannot contain unprintable characters.  # noqa: E501

        :return: The description of this FileImportSessionCreate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FileImportSessionCreate.

        Description of the file import session.     The name can contain a maximum of 128 Unicode characters.     It cannot contain unprintable characters.  # noqa: E501

        :param description: The description of this FileImportSessionCreate.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                description is not None and len(description) > 128):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `128`")  # noqa: E501

        self._description = description

    @property
    def import_file_interface_id(self):
        """Gets the import_file_interface_id of this FileImportSessionCreate.  # noqa: E501

        Unique identifier of the file interface in the destination system that is used for importing data from the source system.  # noqa: E501

        :return: The import_file_interface_id of this FileImportSessionCreate.  # noqa: E501
        :rtype: str
        """
        return self._import_file_interface_id

    @import_file_interface_id.setter
    def import_file_interface_id(self, import_file_interface_id):
        """Sets the import_file_interface_id of this FileImportSessionCreate.

        Unique identifier of the file interface in the destination system that is used for importing data from the source system.  # noqa: E501

        :param import_file_interface_id: The import_file_interface_id of this FileImportSessionCreate.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and import_file_interface_id is None:
            raise ValueError("Invalid value for `import_file_interface_id`, must not be `None`")  # noqa: E501

        self._import_file_interface_id = import_file_interface_id

    @property
    def source_smb_admin_username(self):
        """Gets the source_smb_admin_username of this FileImportSessionCreate.  # noqa: E501

        User name for authentication to SMB Server on the source NAS server with administrator privilege. This is required for SMB import.  # noqa: E501

        :return: The source_smb_admin_username of this FileImportSessionCreate.  # noqa: E501
        :rtype: str
        """
        return self._source_smb_admin_username

    @source_smb_admin_username.setter
    def source_smb_admin_username(self, source_smb_admin_username):
        """Sets the source_smb_admin_username of this FileImportSessionCreate.

        User name for authentication to SMB Server on the source NAS server with administrator privilege. This is required for SMB import.  # noqa: E501

        :param source_smb_admin_username: The source_smb_admin_username of this FileImportSessionCreate.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                source_smb_admin_username is not None and len(source_smb_admin_username) > 1023):
            raise ValueError("Invalid value for `source_smb_admin_username`, length must be less than or equal to `1023`")  # noqa: E501
        if (self._configuration.client_side_validation and
                source_smb_admin_username is not None and len(source_smb_admin_username) < 1):
            raise ValueError("Invalid value for `source_smb_admin_username`, length must be greater than or equal to `1`")  # noqa: E501

        self._source_smb_admin_username = source_smb_admin_username

    @property
    def source_smb_admin_password(self):
        """Gets the source_smb_admin_password of this FileImportSessionCreate.  # noqa: E501

        Password for authentication to SMB Server on the source NAS Server with administrator privilege. This is required for SMB import.  # noqa: E501

        :return: The source_smb_admin_password of this FileImportSessionCreate.  # noqa: E501
        :rtype: str
        """
        return self._source_smb_admin_password

    @source_smb_admin_password.setter
    def source_smb_admin_password(self, source_smb_admin_password):
        """Sets the source_smb_admin_password of this FileImportSessionCreate.

        Password for authentication to SMB Server on the source NAS Server with administrator privilege. This is required for SMB import.  # noqa: E501

        :param source_smb_admin_password: The source_smb_admin_password of this FileImportSessionCreate.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                source_smb_admin_password is not None and len(source_smb_admin_password) > 1023):
            raise ValueError("Invalid value for `source_smb_admin_password`, length must be less than or equal to `1023`")  # noqa: E501

        self._source_smb_admin_password = source_smb_admin_password

    @property
    def scheduled_timestamp(self):
        """Gets the scheduled_timestamp of this FileImportSessionCreate.  # noqa: E501

        Indicates the desired date and time at which the file import session should be scheduled to run. The date is specified in ISO 8601 format with time expressed in UTC format.  # noqa: E501

        :return: The scheduled_timestamp of this FileImportSessionCreate.  # noqa: E501
        :rtype: str
        """
        return self._scheduled_timestamp

    @scheduled_timestamp.setter
    def scheduled_timestamp(self, scheduled_timestamp):
        """Sets the scheduled_timestamp of this FileImportSessionCreate.

        Indicates the desired date and time at which the file import session should be scheduled to run. The date is specified in ISO 8601 format with time expressed in UTC format.  # noqa: E501

        :param scheduled_timestamp: The scheduled_timestamp of this FileImportSessionCreate.  # noqa: E501
        :type: str
        """

        self._scheduled_timestamp = scheduled_timestamp

    @property
    def protection_policy_id(self):
        """Gets the protection_policy_id of this FileImportSessionCreate.  # noqa: E501

        Unique identifier of the protection policy that will be applied to an imported NAS server or filesystem after the import completes. Only snapshot policies are supported in an import. Once the import completes, you can add a replication policy. If you try to import a replication policy, the import job will fail.  # noqa: E501

        :return: The protection_policy_id of this FileImportSessionCreate.  # noqa: E501
        :rtype: str
        """
        return self._protection_policy_id

    @protection_policy_id.setter
    def protection_policy_id(self, protection_policy_id):
        """Sets the protection_policy_id of this FileImportSessionCreate.

        Unique identifier of the protection policy that will be applied to an imported NAS server or filesystem after the import completes. Only snapshot policies are supported in an import. Once the import completes, you can add a replication policy. If you try to import a replication policy, the import job will fail.  # noqa: E501

        :param protection_policy_id: The protection_policy_id of this FileImportSessionCreate.  # noqa: E501
        :type: str
        """

        self._protection_policy_id = protection_policy_id

    @property
    def source_dhsm_username(self):
        """Gets the source_dhsm_username of this FileImportSessionCreate.  # noqa: E501

        The username for authentication to DHSM Server on the source NAS Server required for importing FLR filesystems.  # noqa: E501

        :return: The source_dhsm_username of this FileImportSessionCreate.  # noqa: E501
        :rtype: str
        """
        return self._source_dhsm_username

    @source_dhsm_username.setter
    def source_dhsm_username(self, source_dhsm_username):
        """Sets the source_dhsm_username of this FileImportSessionCreate.

        The username for authentication to DHSM Server on the source NAS Server required for importing FLR filesystems.  # noqa: E501

        :param source_dhsm_username: The source_dhsm_username of this FileImportSessionCreate.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                source_dhsm_username is not None and len(source_dhsm_username) > 1023):
            raise ValueError("Invalid value for `source_dhsm_username`, length must be less than or equal to `1023`")  # noqa: E501
        if (self._configuration.client_side_validation and
                source_dhsm_username is not None and len(source_dhsm_username) < 1):
            raise ValueError("Invalid value for `source_dhsm_username`, length must be greater than or equal to `1`")  # noqa: E501

        self._source_dhsm_username = source_dhsm_username

    @property
    def source_dhsm_password(self):
        """Gets the source_dhsm_password of this FileImportSessionCreate.  # noqa: E501

        The password for authentication to DHSM Server on the source NAS Server required for importing FLR filesystems.  # noqa: E501

        :return: The source_dhsm_password of this FileImportSessionCreate.  # noqa: E501
        :rtype: str
        """
        return self._source_dhsm_password

    @source_dhsm_password.setter
    def source_dhsm_password(self, source_dhsm_password):
        """Sets the source_dhsm_password of this FileImportSessionCreate.

        The password for authentication to DHSM Server on the source NAS Server required for importing FLR filesystems.  # noqa: E501

        :param source_dhsm_password: The source_dhsm_password of this FileImportSessionCreate.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                source_dhsm_password is not None and len(source_dhsm_password) > 1023):
            raise ValueError("Invalid value for `source_dhsm_password`, length must be less than or equal to `1023`")  # noqa: E501

        self._source_dhsm_password = source_dhsm_password

    @property
    def file_interfaces(self):
        """Gets the file_interfaces of this FileImportSessionCreate.  # noqa: E501

        Optional list of mappings from source file interfaces to local bond/FSN. By default, all file interfaces associated with source NAS Server will be mapped with system bond/FSN. For alternate mappings for some or all of the source file interfaces, use this to specify the file interface and bond/FSN pairs. Any source file interfaces without an explicit mapping will be mapped to the system bond/FSN.   # noqa: E501

        :return: The file_interfaces of this FileImportSessionCreate.  # noqa: E501
        :rtype: list[FileImportSessionFileInterfaceMapping]
        """
        return self._file_interfaces

    @file_interfaces.setter
    def file_interfaces(self, file_interfaces):
        """Sets the file_interfaces of this FileImportSessionCreate.

        Optional list of mappings from source file interfaces to local bond/FSN. By default, all file interfaces associated with source NAS Server will be mapped with system bond/FSN. For alternate mappings for some or all of the source file interfaces, use this to specify the file interface and bond/FSN pairs. Any source file interfaces without an explicit mapping will be mapped to the system bond/FSN.   # noqa: E501

        :param file_interfaces: The file_interfaces of this FileImportSessionCreate.  # noqa: E501
        :type: list[FileImportSessionFileInterfaceMapping]
        """

        self._file_interfaces = file_interfaces

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileImportSessionCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileImportSessionCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FileImportSessionCreate):
            return True

        return self.to_dict() != other.to_dict()
