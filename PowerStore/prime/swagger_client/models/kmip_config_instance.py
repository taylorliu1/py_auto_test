# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class KmipConfigInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'is_enabled': 'bool',
        'port': 'int',
        'server_timeout': 'int',
        'username': 'str',
        'servers': 'list[KmipConfigMemberInstance]'
    }

    attribute_map = {
        'id': 'id',
        'is_enabled': 'is_enabled',
        'port': 'port',
        'server_timeout': 'server_timeout',
        'username': 'username',
        'servers': 'servers'
    }

    def __init__(self, id=None, is_enabled=None, port=None, server_timeout=None, username=None, servers=None, _configuration=None):  # noqa: E501
        """KmipConfigInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._is_enabled = None
        self._port = None
        self._server_timeout = None
        self._username = None
        self._servers = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if is_enabled is not None:
            self.is_enabled = is_enabled
        if port is not None:
            self.port = port
        if server_timeout is not None:
            self.server_timeout = server_timeout
        if username is not None:
            self.username = username
        if servers is not None:
            self.servers = servers

    @property
    def id(self):
        """Gets the id of this KmipConfigInstance.  # noqa: E501

        Unique identifier for this instance.  # noqa: E501

        :return: The id of this KmipConfigInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this KmipConfigInstance.

        Unique identifier for this instance.  # noqa: E501

        :param id: The id of this KmipConfigInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_enabled(self):
        """Gets the is_enabled of this KmipConfigInstance.  # noqa: E501

        Whether KMIP is enabled. At least one member (KMIP servers) must be defined to enable KMIP.  # noqa: E501

        :return: The is_enabled of this KmipConfigInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this KmipConfigInstance.

        Whether KMIP is enabled. At least one member (KMIP servers) must be defined to enable KMIP.  # noqa: E501

        :param is_enabled: The is_enabled of this KmipConfigInstance.  # noqa: E501
        :type: bool
        """

        self._is_enabled = is_enabled

    @property
    def port(self):
        """Gets the port of this KmipConfigInstance.  # noqa: E501

        Port number for establishing connection to a KMIP server (defaults to 5696).  # noqa: E501

        :return: The port of this KmipConfigInstance.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this KmipConfigInstance.

        Port number for establishing connection to a KMIP server (defaults to 5696).  # noqa: E501

        :param port: The port of this KmipConfigInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                port is not None and port > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                port is not None and port < 0):  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value greater than or equal to `0`")  # noqa: E501

        self._port = port

    @property
    def server_timeout(self):
        """Gets the server_timeout of this KmipConfigInstance.  # noqa: E501

        Timeout in seconds for establishing a connection to a KMIP server. If the system does not receive a reply from the KMIP server before the specified timeout, it stops sending requests. Default value is 5 (5 seconds).  # noqa: E501

        :return: The server_timeout of this KmipConfigInstance.  # noqa: E501
        :rtype: int
        """
        return self._server_timeout

    @server_timeout.setter
    def server_timeout(self, server_timeout):
        """Sets the server_timeout of this KmipConfigInstance.

        Timeout in seconds for establishing a connection to a KMIP server. If the system does not receive a reply from the KMIP server before the specified timeout, it stops sending requests. Default value is 5 (5 seconds).  # noqa: E501

        :param server_timeout: The server_timeout of this KmipConfigInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                server_timeout is not None and server_timeout > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `server_timeout`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                server_timeout is not None and server_timeout < 0):  # noqa: E501
            raise ValueError("Invalid value for `server_timeout`, must be a value greater than or equal to `0`")  # noqa: E501

        self._server_timeout = server_timeout

    @property
    def username(self):
        """Gets the username of this KmipConfigInstance.  # noqa: E501

        Username for accessing the KMIP server.  # noqa: E501

        :return: The username of this KmipConfigInstance.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this KmipConfigInstance.

        Username for accessing the KMIP server.  # noqa: E501

        :param username: The username of this KmipConfigInstance.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def servers(self):
        """Gets the servers of this KmipConfigInstance.  # noqa: E501

        Array of member KMIP servers with the address and status of each.  Filtering on the fields of this embedded resource is not supported.  # noqa: E501

        :return: The servers of this KmipConfigInstance.  # noqa: E501
        :rtype: list[KmipConfigMemberInstance]
        """
        return self._servers

    @servers.setter
    def servers(self, servers):
        """Sets the servers of this KmipConfigInstance.

        Array of member KMIP servers with the address and status of each.  Filtering on the fields of this embedded resource is not supported.  # noqa: E501

        :param servers: The servers of this KmipConfigInstance.  # noqa: E501
        :type: list[KmipConfigMemberInstance]
        """

        self._servers = servers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KmipConfigInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KmipConfigInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, KmipConfigInstance):
            return True

        return self.to_dict() != other.to_dict()
