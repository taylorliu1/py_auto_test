# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class ImportVmaxSnapshotPolicyInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'snapshot_count': 'int',
        'interval_minutes': 'int',
        'offset_minutes': 'int',
        'provider_name': 'str',
        'retention_days': 'int',
        'suspended': 'bool',
        'secure': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'snapshot_count': 'snapshot_count',
        'interval_minutes': 'interval_minutes',
        'offset_minutes': 'offset_minutes',
        'provider_name': 'provider_name',
        'retention_days': 'retention_days',
        'suspended': 'suspended',
        'secure': 'secure'
    }

    def __init__(self, name=None, snapshot_count=None, interval_minutes=None, offset_minutes=None, provider_name=None, retention_days=None, suspended=False, secure=False, _configuration=None):  # noqa: E501
        """ImportVmaxSnapshotPolicyInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._snapshot_count = None
        self._interval_minutes = None
        self._offset_minutes = None
        self._provider_name = None
        self._retention_days = None
        self._suspended = None
        self._secure = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if snapshot_count is not None:
            self.snapshot_count = snapshot_count
        if interval_minutes is not None:
            self.interval_minutes = interval_minutes
        if offset_minutes is not None:
            self.offset_minutes = offset_minutes
        if provider_name is not None:
            self.provider_name = provider_name
        if retention_days is not None:
            self.retention_days = retention_days
        if suspended is not None:
            self.suspended = suspended
        if secure is not None:
            self.secure = secure

    @property
    def name(self):
        """Gets the name of this ImportVmaxSnapshotPolicyInstance.  # noqa: E501

        The Name of the VMAX snapshot policy.  # noqa: E501

        :return: The name of this ImportVmaxSnapshotPolicyInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ImportVmaxSnapshotPolicyInstance.

        The Name of the VMAX snapshot policy.  # noqa: E501

        :param name: The name of this ImportVmaxSnapshotPolicyInstance.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def snapshot_count(self):
        """Gets the snapshot_count of this ImportVmaxSnapshotPolicyInstance.  # noqa: E501

        The number of snapshots that will be taken before the oldest ones are no longer required.  # noqa: E501

        :return: The snapshot_count of this ImportVmaxSnapshotPolicyInstance.  # noqa: E501
        :rtype: int
        """
        return self._snapshot_count

    @snapshot_count.setter
    def snapshot_count(self, snapshot_count):
        """Sets the snapshot_count of this ImportVmaxSnapshotPolicyInstance.

        The number of snapshots that will be taken before the oldest ones are no longer required.  # noqa: E501

        :param snapshot_count: The snapshot_count of this ImportVmaxSnapshotPolicyInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                snapshot_count is not None and snapshot_count > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `snapshot_count`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                snapshot_count is not None and snapshot_count < 0):  # noqa: E501
            raise ValueError("Invalid value for `snapshot_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._snapshot_count = snapshot_count

    @property
    def interval_minutes(self):
        """Gets the interval_minutes of this ImportVmaxSnapshotPolicyInstance.  # noqa: E501

        The number of minutes between each policy execution.  # noqa: E501

        :return: The interval_minutes of this ImportVmaxSnapshotPolicyInstance.  # noqa: E501
        :rtype: int
        """
        return self._interval_minutes

    @interval_minutes.setter
    def interval_minutes(self, interval_minutes):
        """Sets the interval_minutes of this ImportVmaxSnapshotPolicyInstance.

        The number of minutes between each policy execution.  # noqa: E501

        :param interval_minutes: The interval_minutes of this ImportVmaxSnapshotPolicyInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                interval_minutes is not None and interval_minutes > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `interval_minutes`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                interval_minutes is not None and interval_minutes < 0):  # noqa: E501
            raise ValueError("Invalid value for `interval_minutes`, must be a value greater than or equal to `0`")  # noqa: E501

        self._interval_minutes = interval_minutes

    @property
    def offset_minutes(self):
        """Gets the offset_minutes of this ImportVmaxSnapshotPolicyInstance.  # noqa: E501

        The number of minutes after 00:00 on Monday morning that the policy will execute.  # noqa: E501

        :return: The offset_minutes of this ImportVmaxSnapshotPolicyInstance.  # noqa: E501
        :rtype: int
        """
        return self._offset_minutes

    @offset_minutes.setter
    def offset_minutes(self, offset_minutes):
        """Sets the offset_minutes of this ImportVmaxSnapshotPolicyInstance.

        The number of minutes after 00:00 on Monday morning that the policy will execute.  # noqa: E501

        :param offset_minutes: The offset_minutes of this ImportVmaxSnapshotPolicyInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                offset_minutes is not None and offset_minutes > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `offset_minutes`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                offset_minutes is not None and offset_minutes < 0):  # noqa: E501
            raise ValueError("Invalid value for `offset_minutes`, must be a value greater than or equal to `0`")  # noqa: E501

        self._offset_minutes = offset_minutes

    @property
    def provider_name(self):
        """Gets the provider_name of this ImportVmaxSnapshotPolicyInstance.  # noqa: E501

        The name of the cloud provider associated with this policy. Only applies to cloud policies.  # noqa: E501

        :return: The provider_name of this ImportVmaxSnapshotPolicyInstance.  # noqa: E501
        :rtype: str
        """
        return self._provider_name

    @provider_name.setter
    def provider_name(self, provider_name):
        """Sets the provider_name of this ImportVmaxSnapshotPolicyInstance.

        The name of the cloud provider associated with this policy. Only applies to cloud policies.  # noqa: E501

        :param provider_name: The provider_name of this ImportVmaxSnapshotPolicyInstance.  # noqa: E501
        :type: str
        """

        self._provider_name = provider_name

    @property
    def retention_days(self):
        """Gets the retention_days of this ImportVmaxSnapshotPolicyInstance.  # noqa: E501

        The number of days that snapshots will be retained in the cloud for. Only applies to cloud policies.  # noqa: E501

        :return: The retention_days of this ImportVmaxSnapshotPolicyInstance.  # noqa: E501
        :rtype: int
        """
        return self._retention_days

    @retention_days.setter
    def retention_days(self, retention_days):
        """Sets the retention_days of this ImportVmaxSnapshotPolicyInstance.

        The number of days that snapshots will be retained in the cloud for. Only applies to cloud policies.  # noqa: E501

        :param retention_days: The retention_days of this ImportVmaxSnapshotPolicyInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                retention_days is not None and retention_days > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `retention_days`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                retention_days is not None and retention_days < 0):  # noqa: E501
            raise ValueError("Invalid value for `retention_days`, must be a value greater than or equal to `0`")  # noqa: E501

        self._retention_days = retention_days

    @property
    def suspended(self):
        """Gets the suspended of this ImportVmaxSnapshotPolicyInstance.  # noqa: E501

        Set if the snapshot policy has been suspended.  # noqa: E501

        :return: The suspended of this ImportVmaxSnapshotPolicyInstance.  # noqa: E501
        :rtype: bool
        """
        return self._suspended

    @suspended.setter
    def suspended(self, suspended):
        """Sets the suspended of this ImportVmaxSnapshotPolicyInstance.

        Set if the snapshot policy has been suspended.  # noqa: E501

        :param suspended: The suspended of this ImportVmaxSnapshotPolicyInstance.  # noqa: E501
        :type: bool
        """

        self._suspended = suspended

    @property
    def secure(self):
        """Gets the secure of this ImportVmaxSnapshotPolicyInstance.  # noqa: E501

        Set if the snapshot policy creates secure snapshots.  # noqa: E501

        :return: The secure of this ImportVmaxSnapshotPolicyInstance.  # noqa: E501
        :rtype: bool
        """
        return self._secure

    @secure.setter
    def secure(self, secure):
        """Sets the secure of this ImportVmaxSnapshotPolicyInstance.

        Set if the snapshot policy creates secure snapshots.  # noqa: E501

        :param secure: The secure of this ImportVmaxSnapshotPolicyInstance.  # noqa: E501
        :type: bool
        """

        self._secure = secure

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImportVmaxSnapshotPolicyInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportVmaxSnapshotPolicyInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImportVmaxSnapshotPolicyInstance):
            return True

        return self.to_dict() != other.to_dict()
