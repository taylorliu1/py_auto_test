# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class ImportStorageCenterInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'management_address': 'str',
        'user_name': 'str',
        'model': 'str',
        'serial_number': 'int',
        'api_version': 'str',
        'status': 'SCStatusEnum',
        'last_update_time': 'datetime',
        'supported_import_type': 'SupportedImportTypeEnum',
        'status_l10n': 'str',
        'supported_import_type_l10n': 'str',
        'import_storage_center_volumes': 'list[ImportStorageCenterVolumeInstance]',
        'import_storage_center_consistency_groups': 'list[ImportStorageCenterConsistencyGroupInstance]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'management_address': 'management_address',
        'user_name': 'user_name',
        'model': 'model',
        'serial_number': 'serial_number',
        'api_version': 'api_version',
        'status': 'status',
        'last_update_time': 'last_update_time',
        'supported_import_type': 'supported_import_type',
        'status_l10n': 'status_l10n',
        'supported_import_type_l10n': 'supported_import_type_l10n',
        'import_storage_center_volumes': 'import_storage_center_volumes',
        'import_storage_center_consistency_groups': 'import_storage_center_consistency_groups'
    }

    def __init__(self, id=None, name=None, management_address=None, user_name=None, model=None, serial_number=None, api_version=None, status=None, last_update_time=None, supported_import_type=None, status_l10n=None, supported_import_type_l10n=None, import_storage_center_volumes=None, import_storage_center_consistency_groups=None, _configuration=None):  # noqa: E501
        """ImportStorageCenterInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._management_address = None
        self._user_name = None
        self._model = None
        self._serial_number = None
        self._api_version = None
        self._status = None
        self._last_update_time = None
        self._supported_import_type = None
        self._status_l10n = None
        self._supported_import_type_l10n = None
        self._import_storage_center_volumes = None
        self._import_storage_center_consistency_groups = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if management_address is not None:
            self.management_address = management_address
        if user_name is not None:
            self.user_name = user_name
        if model is not None:
            self.model = model
        if serial_number is not None:
            self.serial_number = serial_number
        if api_version is not None:
            self.api_version = api_version
        if status is not None:
            self.status = status
        if last_update_time is not None:
            self.last_update_time = last_update_time
        if supported_import_type is not None:
            self.supported_import_type = supported_import_type
        if status_l10n is not None:
            self.status_l10n = status_l10n
        if supported_import_type_l10n is not None:
            self.supported_import_type_l10n = supported_import_type_l10n
        if import_storage_center_volumes is not None:
            self.import_storage_center_volumes = import_storage_center_volumes
        if import_storage_center_consistency_groups is not None:
            self.import_storage_center_consistency_groups = import_storage_center_consistency_groups

    @property
    def id(self):
        """Gets the id of this ImportStorageCenterInstance.  # noqa: E501

        Unique identifier of the SC array that is a source storage system for import.  # noqa: E501

        :return: The id of this ImportStorageCenterInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ImportStorageCenterInstance.

        Unique identifier of the SC array that is a source storage system for import.  # noqa: E501

        :param id: The id of this ImportStorageCenterInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ImportStorageCenterInstance.  # noqa: E501

        Name of the SC array.  This property supports case-insensitive filtering.  # noqa: E501

        :return: The name of this ImportStorageCenterInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ImportStorageCenterInstance.

        Name of the SC array.  This property supports case-insensitive filtering.  # noqa: E501

        :param name: The name of this ImportStorageCenterInstance.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def management_address(self):
        """Gets the management_address of this ImportStorageCenterInstance.  # noqa: E501

        Management address to use for communicating with the SC array. The address can be an IPv4 address or FQDN (Fully Qualified Domain Name).  # noqa: E501

        :return: The management_address of this ImportStorageCenterInstance.  # noqa: E501
        :rtype: str
        """
        return self._management_address

    @management_address.setter
    def management_address(self, management_address):
        """Sets the management_address of this ImportStorageCenterInstance.

        Management address to use for communicating with the SC array. The address can be an IPv4 address or FQDN (Fully Qualified Domain Name).  # noqa: E501

        :param management_address: The management_address of this ImportStorageCenterInstance.  # noqa: E501
        :type: str
        """

        self._management_address = management_address

    @property
    def user_name(self):
        """Gets the user_name of this ImportStorageCenterInstance.  # noqa: E501

        User account name used to communicate with the SC array.  # noqa: E501

        :return: The user_name of this ImportStorageCenterInstance.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this ImportStorageCenterInstance.

        User account name used to communicate with the SC array.  # noqa: E501

        :param user_name: The user_name of this ImportStorageCenterInstance.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def model(self):
        """Gets the model of this ImportStorageCenterInstance.  # noqa: E501

        Model name of the SC array.  # noqa: E501

        :return: The model of this ImportStorageCenterInstance.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this ImportStorageCenterInstance.

        Model name of the SC array.  # noqa: E501

        :param model: The model of this ImportStorageCenterInstance.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def serial_number(self):
        """Gets the serial_number of this ImportStorageCenterInstance.  # noqa: E501

        Serial number of the SC array.  # noqa: E501

        :return: The serial_number of this ImportStorageCenterInstance.  # noqa: E501
        :rtype: int
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this ImportStorageCenterInstance.

        Serial number of the SC array.  # noqa: E501

        :param serial_number: The serial_number of this ImportStorageCenterInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                serial_number is not None and serial_number > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `serial_number`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                serial_number is not None and serial_number < 0):  # noqa: E501
            raise ValueError("Invalid value for `serial_number`, must be a value greater than or equal to `0`")  # noqa: E501

        self._serial_number = serial_number

    @property
    def api_version(self):
        """Gets the api_version of this ImportStorageCenterInstance.  # noqa: E501

        API version of the SC OS (SCOS).  # noqa: E501

        :return: The api_version of this ImportStorageCenterInstance.  # noqa: E501
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this ImportStorageCenterInstance.

        API version of the SC OS (SCOS).  # noqa: E501

        :param api_version: The api_version of this ImportStorageCenterInstance.  # noqa: E501
        :type: str
        """

        self._api_version = api_version

    @property
    def status(self):
        """Gets the status of this ImportStorageCenterInstance.  # noqa: E501


        :return: The status of this ImportStorageCenterInstance.  # noqa: E501
        :rtype: SCStatusEnum
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ImportStorageCenterInstance.


        :param status: The status of this ImportStorageCenterInstance.  # noqa: E501
        :type: SCStatusEnum
        """

        self._status = status

    @property
    def last_update_time(self):
        """Gets the last_update_time of this ImportStorageCenterInstance.  # noqa: E501

        Timestamp at which the SC array details were last updated. This includes the information about the array and its importable volumes and consistency groups. The timestamp is updated when the SC array is created and when the importable storage resources are discovered using the discover_importable_resources action.  # noqa: E501

        :return: The last_update_time of this ImportStorageCenterInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update_time

    @last_update_time.setter
    def last_update_time(self, last_update_time):
        """Sets the last_update_time of this ImportStorageCenterInstance.

        Timestamp at which the SC array details were last updated. This includes the information about the array and its importable volumes and consistency groups. The timestamp is updated when the SC array is created and when the importable storage resources are discovered using the discover_importable_resources action.  # noqa: E501

        :param last_update_time: The last_update_time of this ImportStorageCenterInstance.  # noqa: E501
        :type: datetime
        """

        self._last_update_time = last_update_time

    @property
    def supported_import_type(self):
        """Gets the supported_import_type of this ImportStorageCenterInstance.  # noqa: E501

         Was added in version 1.0.2.  # noqa: E501

        :return: The supported_import_type of this ImportStorageCenterInstance.  # noqa: E501
        :rtype: SupportedImportTypeEnum
        """
        return self._supported_import_type

    @supported_import_type.setter
    def supported_import_type(self, supported_import_type):
        """Sets the supported_import_type of this ImportStorageCenterInstance.

         Was added in version 1.0.2.  # noqa: E501

        :param supported_import_type: The supported_import_type of this ImportStorageCenterInstance.  # noqa: E501
        :type: SupportedImportTypeEnum
        """

        self._supported_import_type = supported_import_type

    @property
    def status_l10n(self):
        """Gets the status_l10n of this ImportStorageCenterInstance.  # noqa: E501

        Localized message string corresponding to status  # noqa: E501

        :return: The status_l10n of this ImportStorageCenterInstance.  # noqa: E501
        :rtype: str
        """
        return self._status_l10n

    @status_l10n.setter
    def status_l10n(self, status_l10n):
        """Sets the status_l10n of this ImportStorageCenterInstance.

        Localized message string corresponding to status  # noqa: E501

        :param status_l10n: The status_l10n of this ImportStorageCenterInstance.  # noqa: E501
        :type: str
        """

        self._status_l10n = status_l10n

    @property
    def supported_import_type_l10n(self):
        """Gets the supported_import_type_l10n of this ImportStorageCenterInstance.  # noqa: E501

        Localized message string corresponding to supported_import_type Was added in version 1.0.2.  # noqa: E501

        :return: The supported_import_type_l10n of this ImportStorageCenterInstance.  # noqa: E501
        :rtype: str
        """
        return self._supported_import_type_l10n

    @supported_import_type_l10n.setter
    def supported_import_type_l10n(self, supported_import_type_l10n):
        """Sets the supported_import_type_l10n of this ImportStorageCenterInstance.

        Localized message string corresponding to supported_import_type Was added in version 1.0.2.  # noqa: E501

        :param supported_import_type_l10n: The supported_import_type_l10n of this ImportStorageCenterInstance.  # noqa: E501
        :type: str
        """

        self._supported_import_type_l10n = supported_import_type_l10n

    @property
    def import_storage_center_volumes(self):
        """Gets the import_storage_center_volumes of this ImportStorageCenterInstance.  # noqa: E501

        This is the inverse of the resource type import_storage_center_volume association.  # noqa: E501

        :return: The import_storage_center_volumes of this ImportStorageCenterInstance.  # noqa: E501
        :rtype: list[ImportStorageCenterVolumeInstance]
        """
        return self._import_storage_center_volumes

    @import_storage_center_volumes.setter
    def import_storage_center_volumes(self, import_storage_center_volumes):
        """Sets the import_storage_center_volumes of this ImportStorageCenterInstance.

        This is the inverse of the resource type import_storage_center_volume association.  # noqa: E501

        :param import_storage_center_volumes: The import_storage_center_volumes of this ImportStorageCenterInstance.  # noqa: E501
        :type: list[ImportStorageCenterVolumeInstance]
        """

        self._import_storage_center_volumes = import_storage_center_volumes

    @property
    def import_storage_center_consistency_groups(self):
        """Gets the import_storage_center_consistency_groups of this ImportStorageCenterInstance.  # noqa: E501

        This is the inverse of the resource type import_storage_center_consistency_group association.  # noqa: E501

        :return: The import_storage_center_consistency_groups of this ImportStorageCenterInstance.  # noqa: E501
        :rtype: list[ImportStorageCenterConsistencyGroupInstance]
        """
        return self._import_storage_center_consistency_groups

    @import_storage_center_consistency_groups.setter
    def import_storage_center_consistency_groups(self, import_storage_center_consistency_groups):
        """Sets the import_storage_center_consistency_groups of this ImportStorageCenterInstance.

        This is the inverse of the resource type import_storage_center_consistency_group association.  # noqa: E501

        :param import_storage_center_consistency_groups: The import_storage_center_consistency_groups of this ImportStorageCenterInstance.  # noqa: E501
        :type: list[ImportStorageCenterConsistencyGroupInstance]
        """

        self._import_storage_center_consistency_groups = import_storage_center_consistency_groups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImportStorageCenterInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportStorageCenterInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImportStorageCenterInstance):
            return True

        return self.to_dict() != other.to_dict()
