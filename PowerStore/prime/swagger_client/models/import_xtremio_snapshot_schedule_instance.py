# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class ImportXtremioSnapshotScheduleInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'state': 'XtremIOScheduleStateEnum',
        'schedule_type': 'XtremIOScheduleTypeEnum',
        'schedule': 'str',
        'snapshots_to_keep_time': 'int',
        'snapshots_to_keep_number': 'int',
        'retention_policy': 'ImportXtremioSnapshotScheduleRetentionPolicyInstance',
        'state_l10n': 'str',
        'schedule_type_l10n': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'state': 'state',
        'schedule_type': 'schedule_type',
        'schedule': 'schedule',
        'snapshots_to_keep_time': 'snapshots_to_keep_time',
        'snapshots_to_keep_number': 'snapshots_to_keep_number',
        'retention_policy': 'retention_policy',
        'state_l10n': 'state_l10n',
        'schedule_type_l10n': 'schedule_type_l10n'
    }

    def __init__(self, id=None, name=None, state=None, schedule_type=None, schedule=None, snapshots_to_keep_time=None, snapshots_to_keep_number=None, retention_policy=None, state_l10n=None, schedule_type_l10n=None, _configuration=None):  # noqa: E501
        """ImportXtremioSnapshotScheduleInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._state = None
        self._schedule_type = None
        self._schedule = None
        self._snapshots_to_keep_time = None
        self._snapshots_to_keep_number = None
        self._retention_policy = None
        self._state_l10n = None
        self._schedule_type_l10n = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if state is not None:
            self.state = state
        if schedule_type is not None:
            self.schedule_type = schedule_type
        if schedule is not None:
            self.schedule = schedule
        if snapshots_to_keep_time is not None:
            self.snapshots_to_keep_time = snapshots_to_keep_time
        if snapshots_to_keep_number is not None:
            self.snapshots_to_keep_number = snapshots_to_keep_number
        if retention_policy is not None:
            self.retention_policy = retention_policy
        if state_l10n is not None:
            self.state_l10n = state_l10n
        if schedule_type_l10n is not None:
            self.schedule_type_l10n = schedule_type_l10n

    @property
    def id(self):
        """Gets the id of this ImportXtremioSnapshotScheduleInstance.  # noqa: E501

        Unique identifier of the XtremIO snapshot schedule.  # noqa: E501

        :return: The id of this ImportXtremioSnapshotScheduleInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ImportXtremioSnapshotScheduleInstance.

        Unique identifier of the XtremIO snapshot schedule.  # noqa: E501

        :param id: The id of this ImportXtremioSnapshotScheduleInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ImportXtremioSnapshotScheduleInstance.  # noqa: E501

        Name of the XtremIO snapshot schedule.  # noqa: E501

        :return: The name of this ImportXtremioSnapshotScheduleInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ImportXtremioSnapshotScheduleInstance.

        Name of the XtremIO snapshot schedule.  # noqa: E501

        :param name: The name of this ImportXtremioSnapshotScheduleInstance.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this ImportXtremioSnapshotScheduleInstance.  # noqa: E501


        :return: The state of this ImportXtremioSnapshotScheduleInstance.  # noqa: E501
        :rtype: XtremIOScheduleStateEnum
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ImportXtremioSnapshotScheduleInstance.


        :param state: The state of this ImportXtremioSnapshotScheduleInstance.  # noqa: E501
        :type: XtremIOScheduleStateEnum
        """

        self._state = state

    @property
    def schedule_type(self):
        """Gets the schedule_type of this ImportXtremioSnapshotScheduleInstance.  # noqa: E501


        :return: The schedule_type of this ImportXtremioSnapshotScheduleInstance.  # noqa: E501
        :rtype: XtremIOScheduleTypeEnum
        """
        return self._schedule_type

    @schedule_type.setter
    def schedule_type(self, schedule_type):
        """Sets the schedule_type of this ImportXtremioSnapshotScheduleInstance.


        :param schedule_type: The schedule_type of this ImportXtremioSnapshotScheduleInstance.  # noqa: E501
        :type: XtremIOScheduleTypeEnum
        """

        self._schedule_type = schedule_type

    @property
    def schedule(self):
        """Gets the schedule of this ImportXtremioSnapshotScheduleInstance.  # noqa: E501

        For schedule_type of interval, a triplet in the form of '[hours : minutes : seconds'], where a schedule using hours and minutes must have a seconds value of 0 and a schedule in seconds must have hours and minutes of 0. For example, '[1:30:0'] takes a snapshot every 1.5 hours and '[0:0:15'] takes a snapshot every 15 seconds.  â¢ For schedule_type of explicit, a triplet in the form of '[day-of-week : hour : minute'], where day-of week values 0 is every day, 1 is Sunday, 2 is Monday, 3 is Tuesday, 4 is Wednesday, 5 is Thursday, and 6 is Saturday (for example, '[1:12:30'] takes a snapshot on Sunday at 12:30, and '[0:12:30'] takes a snapshot every day at 12:30.   # noqa: E501

        :return: The schedule of this ImportXtremioSnapshotScheduleInstance.  # noqa: E501
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this ImportXtremioSnapshotScheduleInstance.

        For schedule_type of interval, a triplet in the form of '[hours : minutes : seconds'], where a schedule using hours and minutes must have a seconds value of 0 and a schedule in seconds must have hours and minutes of 0. For example, '[1:30:0'] takes a snapshot every 1.5 hours and '[0:0:15'] takes a snapshot every 15 seconds.  â¢ For schedule_type of explicit, a triplet in the form of '[day-of-week : hour : minute'], where day-of week values 0 is every day, 1 is Sunday, 2 is Monday, 3 is Tuesday, 4 is Wednesday, 5 is Thursday, and 6 is Saturday (for example, '[1:12:30'] takes a snapshot on Sunday at 12:30, and '[0:12:30'] takes a snapshot every day at 12:30.   # noqa: E501

        :param schedule: The schedule of this ImportXtremioSnapshotScheduleInstance.  # noqa: E501
        :type: str
        """

        self._schedule = schedule

    @property
    def snapshots_to_keep_time(self):
        """Gets the snapshots_to_keep_time of this ImportXtremioSnapshotScheduleInstance.  # noqa: E501

        The time period, in seconds, for which a Snapshot is retained. When the defined time has passed, the snapshot is automatically removed.  â¢ Minimum value is 60 (1 minute).  â¢ Maximum value is 15768000 (5 Years). This value is present if the retention_policy is not present.  # noqa: E501

        :return: The snapshots_to_keep_time of this ImportXtremioSnapshotScheduleInstance.  # noqa: E501
        :rtype: int
        """
        return self._snapshots_to_keep_time

    @snapshots_to_keep_time.setter
    def snapshots_to_keep_time(self, snapshots_to_keep_time):
        """Sets the snapshots_to_keep_time of this ImportXtremioSnapshotScheduleInstance.

        The time period, in seconds, for which a Snapshot is retained. When the defined time has passed, the snapshot is automatically removed.  â¢ Minimum value is 60 (1 minute).  â¢ Maximum value is 15768000 (5 Years). This value is present if the retention_policy is not present.  # noqa: E501

        :param snapshots_to_keep_time: The snapshots_to_keep_time of this ImportXtremioSnapshotScheduleInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                snapshots_to_keep_time is not None and snapshots_to_keep_time > 15768000):  # noqa: E501
            raise ValueError("Invalid value for `snapshots_to_keep_time`, must be a value less than or equal to `15768000`")  # noqa: E501
        if (self._configuration.client_side_validation and
                snapshots_to_keep_time is not None and snapshots_to_keep_time < 60):  # noqa: E501
            raise ValueError("Invalid value for `snapshots_to_keep_time`, must be a value greater than or equal to `60`")  # noqa: E501

        self._snapshots_to_keep_time = snapshots_to_keep_time

    @property
    def snapshots_to_keep_number(self):
        """Gets the snapshots_to_keep_number of this ImportXtremioSnapshotScheduleInstance.  # noqa: E501

        Defines the number of Snapshots to be saved. This value is present if the retention_policy is not present.  # noqa: E501

        :return: The snapshots_to_keep_number of this ImportXtremioSnapshotScheduleInstance.  # noqa: E501
        :rtype: int
        """
        return self._snapshots_to_keep_number

    @snapshots_to_keep_number.setter
    def snapshots_to_keep_number(self, snapshots_to_keep_number):
        """Sets the snapshots_to_keep_number of this ImportXtremioSnapshotScheduleInstance.

        Defines the number of Snapshots to be saved. This value is present if the retention_policy is not present.  # noqa: E501

        :param snapshots_to_keep_number: The snapshots_to_keep_number of this ImportXtremioSnapshotScheduleInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                snapshots_to_keep_number is not None and snapshots_to_keep_number > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `snapshots_to_keep_number`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                snapshots_to_keep_number is not None and snapshots_to_keep_number < 0):  # noqa: E501
            raise ValueError("Invalid value for `snapshots_to_keep_number`, must be a value greater than or equal to `0`")  # noqa: E501

        self._snapshots_to_keep_number = snapshots_to_keep_number

    @property
    def retention_policy(self):
        """Gets the retention_policy of this ImportXtremioSnapshotScheduleInstance.  # noqa: E501


        :return: The retention_policy of this ImportXtremioSnapshotScheduleInstance.  # noqa: E501
        :rtype: ImportXtremioSnapshotScheduleRetentionPolicyInstance
        """
        return self._retention_policy

    @retention_policy.setter
    def retention_policy(self, retention_policy):
        """Sets the retention_policy of this ImportXtremioSnapshotScheduleInstance.


        :param retention_policy: The retention_policy of this ImportXtremioSnapshotScheduleInstance.  # noqa: E501
        :type: ImportXtremioSnapshotScheduleRetentionPolicyInstance
        """

        self._retention_policy = retention_policy

    @property
    def state_l10n(self):
        """Gets the state_l10n of this ImportXtremioSnapshotScheduleInstance.  # noqa: E501

        Localized message string corresponding to state Was added in version 1.0.2.  # noqa: E501

        :return: The state_l10n of this ImportXtremioSnapshotScheduleInstance.  # noqa: E501
        :rtype: str
        """
        return self._state_l10n

    @state_l10n.setter
    def state_l10n(self, state_l10n):
        """Sets the state_l10n of this ImportXtremioSnapshotScheduleInstance.

        Localized message string corresponding to state Was added in version 1.0.2.  # noqa: E501

        :param state_l10n: The state_l10n of this ImportXtremioSnapshotScheduleInstance.  # noqa: E501
        :type: str
        """

        self._state_l10n = state_l10n

    @property
    def schedule_type_l10n(self):
        """Gets the schedule_type_l10n of this ImportXtremioSnapshotScheduleInstance.  # noqa: E501

        Localized message string corresponding to schedule_type Was added in version 1.0.2.  # noqa: E501

        :return: The schedule_type_l10n of this ImportXtremioSnapshotScheduleInstance.  # noqa: E501
        :rtype: str
        """
        return self._schedule_type_l10n

    @schedule_type_l10n.setter
    def schedule_type_l10n(self, schedule_type_l10n):
        """Sets the schedule_type_l10n of this ImportXtremioSnapshotScheduleInstance.

        Localized message string corresponding to schedule_type Was added in version 1.0.2.  # noqa: E501

        :param schedule_type_l10n: The schedule_type_l10n of this ImportXtremioSnapshotScheduleInstance.  # noqa: E501
        :type: str
        """

        self._schedule_type_l10n = schedule_type_l10n

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImportXtremioSnapshotScheduleInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportXtremioSnapshotScheduleInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImportXtremioSnapshotScheduleInstance):
            return True

        return self.to_dict() != other.to_dict()
