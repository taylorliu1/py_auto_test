# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class FileImportSessionModify(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'scheduled_timestamp': 'datetime',
        'source_smb_admin_username': 'str',
        'source_smb_admin_password': 'str',
        'source_dhsm_username': 'str',
        'source_dhsm_password': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'scheduled_timestamp': 'scheduled_timestamp',
        'source_smb_admin_username': 'source_smb_admin_username',
        'source_smb_admin_password': 'source_smb_admin_password',
        'source_dhsm_username': 'source_dhsm_username',
        'source_dhsm_password': 'source_dhsm_password'
    }

    def __init__(self, name=None, description=None, scheduled_timestamp=None, source_smb_admin_username=None, source_smb_admin_password=None, source_dhsm_username=None, source_dhsm_password=None, _configuration=None):  # noqa: E501
        """FileImportSessionModify - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._description = None
        self._scheduled_timestamp = None
        self._source_smb_admin_username = None
        self._source_smb_admin_password = None
        self._source_dhsm_username = None
        self._source_dhsm_password = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if scheduled_timestamp is not None:
            self.scheduled_timestamp = scheduled_timestamp
        if source_smb_admin_username is not None:
            self.source_smb_admin_username = source_smb_admin_username
        if source_smb_admin_password is not None:
            self.source_smb_admin_password = source_smb_admin_password
        if source_dhsm_username is not None:
            self.source_dhsm_username = source_dhsm_username
        if source_dhsm_password is not None:
            self.source_dhsm_password = source_dhsm_password

    @property
    def name(self):
        """Gets the name of this FileImportSessionModify.  # noqa: E501

        The name of the Import Session.  # noqa: E501

        :return: The name of this FileImportSessionModify.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FileImportSessionModify.

        The name of the Import Session.  # noqa: E501

        :param name: The name of this FileImportSessionModify.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 32):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `32`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this FileImportSessionModify.  # noqa: E501

        Description of the file import session.     The name can contain a maximum of 128 Unicode characters.     It cannot contain unprintable characters.  # noqa: E501

        :return: The description of this FileImportSessionModify.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FileImportSessionModify.

        Description of the file import session.     The name can contain a maximum of 128 Unicode characters.     It cannot contain unprintable characters.  # noqa: E501

        :param description: The description of this FileImportSessionModify.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                description is not None and len(description) > 128):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `128`")  # noqa: E501

        self._description = description

    @property
    def scheduled_timestamp(self):
        """Gets the scheduled_timestamp of this FileImportSessionModify.  # noqa: E501

        Indicates the new date and time at which the import session is scheduled to run. The date is specified in ISO 8601 format with time expressed in UTC format.  # noqa: E501

        :return: The scheduled_timestamp of this FileImportSessionModify.  # noqa: E501
        :rtype: datetime
        """
        return self._scheduled_timestamp

    @scheduled_timestamp.setter
    def scheduled_timestamp(self, scheduled_timestamp):
        """Sets the scheduled_timestamp of this FileImportSessionModify.

        Indicates the new date and time at which the import session is scheduled to run. The date is specified in ISO 8601 format with time expressed in UTC format.  # noqa: E501

        :param scheduled_timestamp: The scheduled_timestamp of this FileImportSessionModify.  # noqa: E501
        :type: datetime
        """

        self._scheduled_timestamp = scheduled_timestamp

    @property
    def source_smb_admin_username(self):
        """Gets the source_smb_admin_username of this FileImportSessionModify.  # noqa: E501

        User name for authentication to SMB Server on the source NAS Server with administrator privilege.  # noqa: E501

        :return: The source_smb_admin_username of this FileImportSessionModify.  # noqa: E501
        :rtype: str
        """
        return self._source_smb_admin_username

    @source_smb_admin_username.setter
    def source_smb_admin_username(self, source_smb_admin_username):
        """Sets the source_smb_admin_username of this FileImportSessionModify.

        User name for authentication to SMB Server on the source NAS Server with administrator privilege.  # noqa: E501

        :param source_smb_admin_username: The source_smb_admin_username of this FileImportSessionModify.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                source_smb_admin_username is not None and len(source_smb_admin_username) > 1023):
            raise ValueError("Invalid value for `source_smb_admin_username`, length must be less than or equal to `1023`")  # noqa: E501
        if (self._configuration.client_side_validation and
                source_smb_admin_username is not None and len(source_smb_admin_username) < 1):
            raise ValueError("Invalid value for `source_smb_admin_username`, length must be greater than or equal to `1`")  # noqa: E501

        self._source_smb_admin_username = source_smb_admin_username

    @property
    def source_smb_admin_password(self):
        """Gets the source_smb_admin_password of this FileImportSessionModify.  # noqa: E501

        Password for authentication to SMB Server on the source NAS Server with administrator privilege.  # noqa: E501

        :return: The source_smb_admin_password of this FileImportSessionModify.  # noqa: E501
        :rtype: str
        """
        return self._source_smb_admin_password

    @source_smb_admin_password.setter
    def source_smb_admin_password(self, source_smb_admin_password):
        """Sets the source_smb_admin_password of this FileImportSessionModify.

        Password for authentication to SMB Server on the source NAS Server with administrator privilege.  # noqa: E501

        :param source_smb_admin_password: The source_smb_admin_password of this FileImportSessionModify.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                source_smb_admin_password is not None and len(source_smb_admin_password) > 1023):
            raise ValueError("Invalid value for `source_smb_admin_password`, length must be less than or equal to `1023`")  # noqa: E501

        self._source_smb_admin_password = source_smb_admin_password

    @property
    def source_dhsm_username(self):
        """Gets the source_dhsm_username of this FileImportSessionModify.  # noqa: E501

        The username for authentication to DHSM Server on the source NAS Server required for importing FLR filesystems.  # noqa: E501

        :return: The source_dhsm_username of this FileImportSessionModify.  # noqa: E501
        :rtype: str
        """
        return self._source_dhsm_username

    @source_dhsm_username.setter
    def source_dhsm_username(self, source_dhsm_username):
        """Sets the source_dhsm_username of this FileImportSessionModify.

        The username for authentication to DHSM Server on the source NAS Server required for importing FLR filesystems.  # noqa: E501

        :param source_dhsm_username: The source_dhsm_username of this FileImportSessionModify.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                source_dhsm_username is not None and len(source_dhsm_username) > 1023):
            raise ValueError("Invalid value for `source_dhsm_username`, length must be less than or equal to `1023`")  # noqa: E501
        if (self._configuration.client_side_validation and
                source_dhsm_username is not None and len(source_dhsm_username) < 1):
            raise ValueError("Invalid value for `source_dhsm_username`, length must be greater than or equal to `1`")  # noqa: E501

        self._source_dhsm_username = source_dhsm_username

    @property
    def source_dhsm_password(self):
        """Gets the source_dhsm_password of this FileImportSessionModify.  # noqa: E501

        The password for authentication to DHSM Server on the source NAS Server required for importing FLR filesystems.  # noqa: E501

        :return: The source_dhsm_password of this FileImportSessionModify.  # noqa: E501
        :rtype: str
        """
        return self._source_dhsm_password

    @source_dhsm_password.setter
    def source_dhsm_password(self, source_dhsm_password):
        """Sets the source_dhsm_password of this FileImportSessionModify.

        The password for authentication to DHSM Server on the source NAS Server required for importing FLR filesystems.  # noqa: E501

        :param source_dhsm_password: The source_dhsm_password of this FileImportSessionModify.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                source_dhsm_password is not None and len(source_dhsm_password) > 1023):
            raise ValueError("Invalid value for `source_dhsm_password`, length must be less than or equal to `1023`")  # noqa: E501

        self._source_dhsm_password = source_dhsm_password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileImportSessionModify, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileImportSessionModify):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FileImportSessionModify):
            return True

        return self.to_dict() != other.to_dict()
