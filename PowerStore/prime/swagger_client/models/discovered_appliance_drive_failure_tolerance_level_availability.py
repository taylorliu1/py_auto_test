# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class DiscoveredApplianceDriveFailureToleranceLevelAvailability(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'level': 'DriveFailureToleranceLevelEnum',
        'availability': 'DriveFailureToleranceAvailabilityEnum',
        'messages': 'list[object]',
        'level_l10n': 'str'
    }

    attribute_map = {
        'level': 'level',
        'availability': 'availability',
        'messages': 'messages',
        'level_l10n': 'level_l10n'
    }

    def __init__(self, level=None, availability=None, messages=None, level_l10n=None, _configuration=None):  # noqa: E501
        """DiscoveredApplianceDriveFailureToleranceLevelAvailability - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._level = None
        self._availability = None
        self._messages = None
        self._level_l10n = None
        self.discriminator = None

        if level is not None:
            self.level = level
        if availability is not None:
            self.availability = availability
        if messages is not None:
            self.messages = messages
        if level_l10n is not None:
            self.level_l10n = level_l10n

    @property
    def level(self):
        """Gets the level of this DiscoveredApplianceDriveFailureToleranceLevelAvailability.  # noqa: E501


        :return: The level of this DiscoveredApplianceDriveFailureToleranceLevelAvailability.  # noqa: E501
        :rtype: DriveFailureToleranceLevelEnum
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this DiscoveredApplianceDriveFailureToleranceLevelAvailability.


        :param level: The level of this DiscoveredApplianceDriveFailureToleranceLevelAvailability.  # noqa: E501
        :type: DriveFailureToleranceLevelEnum
        """

        self._level = level

    @property
    def availability(self):
        """Gets the availability of this DiscoveredApplianceDriveFailureToleranceLevelAvailability.  # noqa: E501


        :return: The availability of this DiscoveredApplianceDriveFailureToleranceLevelAvailability.  # noqa: E501
        :rtype: DriveFailureToleranceAvailabilityEnum
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this DiscoveredApplianceDriveFailureToleranceLevelAvailability.


        :param availability: The availability of this DiscoveredApplianceDriveFailureToleranceLevelAvailability.  # noqa: E501
        :type: DriveFailureToleranceAvailabilityEnum
        """

        self._availability = availability

    @property
    def messages(self):
        """Gets the messages of this DiscoveredApplianceDriveFailureToleranceLevelAvailability.  # noqa: E501


        :return: The messages of this DiscoveredApplianceDriveFailureToleranceLevelAvailability.  # noqa: E501
        :rtype: list[object]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this DiscoveredApplianceDriveFailureToleranceLevelAvailability.


        :param messages: The messages of this DiscoveredApplianceDriveFailureToleranceLevelAvailability.  # noqa: E501
        :type: list[object]
        """

        self._messages = messages

    @property
    def level_l10n(self):
        """Gets the level_l10n of this DiscoveredApplianceDriveFailureToleranceLevelAvailability.  # noqa: E501

        Localized message string corresponding to level Was added in version 3.0.0.0.  # noqa: E501

        :return: The level_l10n of this DiscoveredApplianceDriveFailureToleranceLevelAvailability.  # noqa: E501
        :rtype: str
        """
        return self._level_l10n

    @level_l10n.setter
    def level_l10n(self, level_l10n):
        """Sets the level_l10n of this DiscoveredApplianceDriveFailureToleranceLevelAvailability.

        Localized message string corresponding to level Was added in version 3.0.0.0.  # noqa: E501

        :param level_l10n: The level_l10n of this DiscoveredApplianceDriveFailureToleranceLevelAvailability.  # noqa: E501
        :type: str
        """

        self._level_l10n = level_l10n

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DiscoveredApplianceDriveFailureToleranceLevelAvailability, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiscoveredApplianceDriveFailureToleranceLevelAvailability):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DiscoveredApplianceDriveFailureToleranceLevelAvailability):
            return True

        return self.to_dict() != other.to_dict()
