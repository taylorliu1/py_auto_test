# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class VirtualMachineInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'instance_uuid': 'str',
        'vcenter_instance_uuid': 'str',
        'name': 'str',
        'description': 'str',
        'type': 'VirtualMachineTypeEnum',
        'vsphere_object_id': 'str',
        'memory_mb': 'int',
        'cpu_count': 'int',
        'guest_os': 'str',
        'status': 'VirtualMachineStatusEnum',
        'protection_policy_id': 'str',
        'replication_group_id': 'str',
        'is_consistent': 'bool',
        'is_consistent_snaps_supported': 'bool',
        'vcenter_id': 'str',
        'protection_data': 'VmProtectionDataInstance',
        'power_state': 'VirtualMachinePowerStateEnum',
        'type_l10n': 'str',
        'status_l10n': 'str',
        'power_state_l10n': 'str',
        'protection_policy': 'PolicyInstance',
        'replication_group': 'ReplicationGroupInstance',
        'parent': 'VirtualMachineInstance',
        'children': 'list[VirtualMachineInstance]',
        'vcenter': 'VcenterInstance',
        'virtual_volumes': 'list[VirtualVolumeInstance]',
        'datastores': 'list[DatastoreInstance]',
        'vsphere_host': 'list[VsphereHostInstance]'
    }

    attribute_map = {
        'id': 'id',
        'instance_uuid': 'instance_uuid',
        'vcenter_instance_uuid': 'vcenter_instance_uuid',
        'name': 'name',
        'description': 'description',
        'type': 'type',
        'vsphere_object_id': 'vsphere_object_id',
        'memory_mb': 'memory_mb',
        'cpu_count': 'cpu_count',
        'guest_os': 'guest_os',
        'status': 'status',
        'protection_policy_id': 'protection_policy_id',
        'replication_group_id': 'replication_group_id',
        'is_consistent': 'is_consistent',
        'is_consistent_snaps_supported': 'is_consistent_snaps_supported',
        'vcenter_id': 'vcenter_id',
        'protection_data': 'protection_data',
        'power_state': 'power_state',
        'type_l10n': 'type_l10n',
        'status_l10n': 'status_l10n',
        'power_state_l10n': 'power_state_l10n',
        'protection_policy': 'protection_policy',
        'replication_group': 'replication_group',
        'parent': 'parent',
        'children': 'children',
        'vcenter': 'vcenter',
        'virtual_volumes': 'virtual_volumes',
        'datastores': 'datastores',
        'vsphere_host': 'vsphere_host'
    }

    def __init__(self, id=None, instance_uuid=None, vcenter_instance_uuid=None, name=None, description=None, type=None, vsphere_object_id=None, memory_mb=None, cpu_count=None, guest_os=None, status=None, protection_policy_id=None, replication_group_id=None, is_consistent=None, is_consistent_snaps_supported=None, vcenter_id=None, protection_data=None, power_state=None, type_l10n=None, status_l10n=None, power_state_l10n=None, protection_policy=None, replication_group=None, parent=None, children=None, vcenter=None, virtual_volumes=None, datastores=None, vsphere_host=None, _configuration=None):  # noqa: E501
        """VirtualMachineInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._instance_uuid = None
        self._vcenter_instance_uuid = None
        self._name = None
        self._description = None
        self._type = None
        self._vsphere_object_id = None
        self._memory_mb = None
        self._cpu_count = None
        self._guest_os = None
        self._status = None
        self._protection_policy_id = None
        self._replication_group_id = None
        self._is_consistent = None
        self._is_consistent_snaps_supported = None
        self._vcenter_id = None
        self._protection_data = None
        self._power_state = None
        self._type_l10n = None
        self._status_l10n = None
        self._power_state_l10n = None
        self._protection_policy = None
        self._replication_group = None
        self._parent = None
        self._children = None
        self._vcenter = None
        self._virtual_volumes = None
        self._datastores = None
        self._vsphere_host = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if instance_uuid is not None:
            self.instance_uuid = instance_uuid
        if vcenter_instance_uuid is not None:
            self.vcenter_instance_uuid = vcenter_instance_uuid
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if type is not None:
            self.type = type
        if vsphere_object_id is not None:
            self.vsphere_object_id = vsphere_object_id
        if memory_mb is not None:
            self.memory_mb = memory_mb
        if cpu_count is not None:
            self.cpu_count = cpu_count
        if guest_os is not None:
            self.guest_os = guest_os
        if status is not None:
            self.status = status
        if protection_policy_id is not None:
            self.protection_policy_id = protection_policy_id
        if replication_group_id is not None:
            self.replication_group_id = replication_group_id
        if is_consistent is not None:
            self.is_consistent = is_consistent
        if is_consistent_snaps_supported is not None:
            self.is_consistent_snaps_supported = is_consistent_snaps_supported
        if vcenter_id is not None:
            self.vcenter_id = vcenter_id
        if protection_data is not None:
            self.protection_data = protection_data
        if power_state is not None:
            self.power_state = power_state
        if type_l10n is not None:
            self.type_l10n = type_l10n
        if status_l10n is not None:
            self.status_l10n = status_l10n
        if power_state_l10n is not None:
            self.power_state_l10n = power_state_l10n
        if protection_policy is not None:
            self.protection_policy = protection_policy
        if replication_group is not None:
            self.replication_group = replication_group
        if parent is not None:
            self.parent = parent
        if children is not None:
            self.children = children
        if vcenter is not None:
            self.vcenter = vcenter
        if virtual_volumes is not None:
            self.virtual_volumes = virtual_volumes
        if datastores is not None:
            self.datastores = datastores
        if vsphere_host is not None:
            self.vsphere_host = vsphere_host

    @property
    def id(self):
        """Gets the id of this VirtualMachineInstance.  # noqa: E501

        Unique identifier of the VM instance. This value is generated by the appliance.  # noqa: E501

        :return: The id of this VirtualMachineInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VirtualMachineInstance.

        Unique identifier of the VM instance. This value is generated by the appliance.  # noqa: E501

        :param id: The id of this VirtualMachineInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def instance_uuid(self):
        """Gets the instance_uuid of this VirtualMachineInstance.  # noqa: E501

        UUID instance of the VM in vCenter. This value is stored in the VM and migrates with the VM to other vCenter instances. Not applicable to VM snapshots.  # noqa: E501

        :return: The instance_uuid of this VirtualMachineInstance.  # noqa: E501
        :rtype: str
        """
        return self._instance_uuid

    @instance_uuid.setter
    def instance_uuid(self, instance_uuid):
        """Sets the instance_uuid of this VirtualMachineInstance.

        UUID instance of the VM in vCenter. This value is stored in the VM and migrates with the VM to other vCenter instances. Not applicable to VM snapshots.  # noqa: E501

        :param instance_uuid: The instance_uuid of this VirtualMachineInstance.  # noqa: E501
        :type: str
        """

        self._instance_uuid = instance_uuid

    @property
    def vcenter_instance_uuid(self):
        """Gets the vcenter_instance_uuid of this VirtualMachineInstance.  # noqa: E501

        UUID instance of the vCenter that hosts the VM. Was deprecated in version 2.0.0.0.  # noqa: E501

        :return: The vcenter_instance_uuid of this VirtualMachineInstance.  # noqa: E501
        :rtype: str
        """
        return self._vcenter_instance_uuid

    @vcenter_instance_uuid.setter
    def vcenter_instance_uuid(self, vcenter_instance_uuid):
        """Sets the vcenter_instance_uuid of this VirtualMachineInstance.

        UUID instance of the vCenter that hosts the VM. Was deprecated in version 2.0.0.0.  # noqa: E501

        :param vcenter_instance_uuid: The vcenter_instance_uuid of this VirtualMachineInstance.  # noqa: E501
        :type: str
        """

        self._vcenter_instance_uuid = vcenter_instance_uuid

    @property
    def name(self):
        """Gets the name of this VirtualMachineInstance.  # noqa: E501

        User-assigned name of the VM in vCenter.  This property supports case-insensitive filtering.  # noqa: E501

        :return: The name of this VirtualMachineInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VirtualMachineInstance.

        User-assigned name of the VM in vCenter.  This property supports case-insensitive filtering.  # noqa: E501

        :param name: The name of this VirtualMachineInstance.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this VirtualMachineInstance.  # noqa: E501

        Description of the VM in vCenter.  # noqa: E501

        :return: The description of this VirtualMachineInstance.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VirtualMachineInstance.

        Description of the VM in vCenter.  # noqa: E501

        :param description: The description of this VirtualMachineInstance.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this VirtualMachineInstance.  # noqa: E501


        :return: The type of this VirtualMachineInstance.  # noqa: E501
        :rtype: VirtualMachineTypeEnum
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this VirtualMachineInstance.


        :param type: The type of this VirtualMachineInstance.  # noqa: E501
        :type: VirtualMachineTypeEnum
        """

        self._type = type

    @property
    def vsphere_object_id(self):
        """Gets the vsphere_object_id of this VirtualMachineInstance.  # noqa: E501

        Unique identifier of the VM in vCenter. This value is required for events to merge information about vSphere objects. The value is stored in vCenter and is regenerated on other vCenter instances. Was added in version 3.0.0.0.  # noqa: E501

        :return: The vsphere_object_id of this VirtualMachineInstance.  # noqa: E501
        :rtype: str
        """
        return self._vsphere_object_id

    @vsphere_object_id.setter
    def vsphere_object_id(self, vsphere_object_id):
        """Sets the vsphere_object_id of this VirtualMachineInstance.

        Unique identifier of the VM in vCenter. This value is required for events to merge information about vSphere objects. The value is stored in vCenter and is regenerated on other vCenter instances. Was added in version 3.0.0.0.  # noqa: E501

        :param vsphere_object_id: The vsphere_object_id of this VirtualMachineInstance.  # noqa: E501
        :type: str
        """

        self._vsphere_object_id = vsphere_object_id

    @property
    def memory_mb(self):
        """Gets the memory_mb of this VirtualMachineInstance.  # noqa: E501

        Memory size of the VM, in megabytes. Not applicable to VM snapshots.  # noqa: E501

        :return: The memory_mb of this VirtualMachineInstance.  # noqa: E501
        :rtype: int
        """
        return self._memory_mb

    @memory_mb.setter
    def memory_mb(self, memory_mb):
        """Sets the memory_mb of this VirtualMachineInstance.

        Memory size of the VM, in megabytes. Not applicable to VM snapshots.  # noqa: E501

        :param memory_mb: The memory_mb of this VirtualMachineInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                memory_mb is not None and memory_mb > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `memory_mb`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                memory_mb is not None and memory_mb < 0):  # noqa: E501
            raise ValueError("Invalid value for `memory_mb`, must be a value greater than or equal to `0`")  # noqa: E501

        self._memory_mb = memory_mb

    @property
    def cpu_count(self):
        """Gets the cpu_count of this VirtualMachineInstance.  # noqa: E501

        Number of virtual CPUs in the VM. Not applicable to VM snapshots.  # noqa: E501

        :return: The cpu_count of this VirtualMachineInstance.  # noqa: E501
        :rtype: int
        """
        return self._cpu_count

    @cpu_count.setter
    def cpu_count(self, cpu_count):
        """Sets the cpu_count of this VirtualMachineInstance.

        Number of virtual CPUs in the VM. Not applicable to VM snapshots.  # noqa: E501

        :param cpu_count: The cpu_count of this VirtualMachineInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                cpu_count is not None and cpu_count > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `cpu_count`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                cpu_count is not None and cpu_count < 0):  # noqa: E501
            raise ValueError("Invalid value for `cpu_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._cpu_count = cpu_count

    @property
    def guest_os(self):
        """Gets the guest_os of this VirtualMachineInstance.  # noqa: E501

        Guest operating system of the VM. Not applicable to VM snapshots.  # noqa: E501

        :return: The guest_os of this VirtualMachineInstance.  # noqa: E501
        :rtype: str
        """
        return self._guest_os

    @guest_os.setter
    def guest_os(self, guest_os):
        """Sets the guest_os of this VirtualMachineInstance.

        Guest operating system of the VM. Not applicable to VM snapshots.  # noqa: E501

        :param guest_os: The guest_os of this VirtualMachineInstance.  # noqa: E501
        :type: str
        """

        self._guest_os = guest_os

    @property
    def status(self):
        """Gets the status of this VirtualMachineInstance.  # noqa: E501


        :return: The status of this VirtualMachineInstance.  # noqa: E501
        :rtype: VirtualMachineStatusEnum
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this VirtualMachineInstance.


        :param status: The status of this VirtualMachineInstance.  # noqa: E501
        :type: VirtualMachineStatusEnum
        """

        self._status = status

    @property
    def protection_policy_id(self):
        """Gets the protection_policy_id of this VirtualMachineInstance.  # noqa: E501

        Unique identifier of the protection policy assigned to the VM. Not applicable to template and snapshot VMs.  # noqa: E501

        :return: The protection_policy_id of this VirtualMachineInstance.  # noqa: E501
        :rtype: str
        """
        return self._protection_policy_id

    @protection_policy_id.setter
    def protection_policy_id(self, protection_policy_id):
        """Sets the protection_policy_id of this VirtualMachineInstance.

        Unique identifier of the protection policy assigned to the VM. Not applicable to template and snapshot VMs.  # noqa: E501

        :param protection_policy_id: The protection_policy_id of this VirtualMachineInstance.  # noqa: E501
        :type: str
        """

        self._protection_policy_id = protection_policy_id

    @property
    def replication_group_id(self):
        """Gets the replication_group_id of this VirtualMachineInstance.  # noqa: E501

        Unique identifier of the replication group that this virtual machine belongs to. Not applicable to template and snapshot VMs. Was added in version 3.0.0.0.  # noqa: E501

        :return: The replication_group_id of this VirtualMachineInstance.  # noqa: E501
        :rtype: str
        """
        return self._replication_group_id

    @replication_group_id.setter
    def replication_group_id(self, replication_group_id):
        """Sets the replication_group_id of this VirtualMachineInstance.

        Unique identifier of the replication group that this virtual machine belongs to. Not applicable to template and snapshot VMs. Was added in version 3.0.0.0.  # noqa: E501

        :param replication_group_id: The replication_group_id of this VirtualMachineInstance.  # noqa: E501
        :type: str
        """

        self._replication_group_id = replication_group_id

    @property
    def is_consistent(self):
        """Gets the is_consistent of this VirtualMachineInstance.  # noqa: E501

        Indicates whether the VM snapshot is crash-consistent.  # noqa: E501

        :return: The is_consistent of this VirtualMachineInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_consistent

    @is_consistent.setter
    def is_consistent(self, is_consistent):
        """Sets the is_consistent of this VirtualMachineInstance.

        Indicates whether the VM snapshot is crash-consistent.  # noqa: E501

        :param is_consistent: The is_consistent of this VirtualMachineInstance.  # noqa: E501
        :type: bool
        """

        self._is_consistent = is_consistent

    @property
    def is_consistent_snaps_supported(self):
        """Gets the is_consistent_snaps_supported of this VirtualMachineInstance.  # noqa: E501

        Indicates whether the VM supports creating crash-consistent snapshots. Not applicable to snapshot VMs.  # noqa: E501

        :return: The is_consistent_snaps_supported of this VirtualMachineInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_consistent_snaps_supported

    @is_consistent_snaps_supported.setter
    def is_consistent_snaps_supported(self, is_consistent_snaps_supported):
        """Sets the is_consistent_snaps_supported of this VirtualMachineInstance.

        Indicates whether the VM supports creating crash-consistent snapshots. Not applicable to snapshot VMs.  # noqa: E501

        :param is_consistent_snaps_supported: The is_consistent_snaps_supported of this VirtualMachineInstance.  # noqa: E501
        :type: bool
        """

        self._is_consistent_snaps_supported = is_consistent_snaps_supported

    @property
    def vcenter_id(self):
        """Gets the vcenter_id of this VirtualMachineInstance.  # noqa: E501

        The unique identifier of the vCenter object that hosts the VM. Was added in version 2.0.0.0.  # noqa: E501

        :return: The vcenter_id of this VirtualMachineInstance.  # noqa: E501
        :rtype: str
        """
        return self._vcenter_id

    @vcenter_id.setter
    def vcenter_id(self, vcenter_id):
        """Sets the vcenter_id of this VirtualMachineInstance.

        The unique identifier of the vCenter object that hosts the VM. Was added in version 2.0.0.0.  # noqa: E501

        :param vcenter_id: The vcenter_id of this VirtualMachineInstance.  # noqa: E501
        :type: str
        """

        self._vcenter_id = vcenter_id

    @property
    def protection_data(self):
        """Gets the protection_data of this VirtualMachineInstance.  # noqa: E501


        :return: The protection_data of this VirtualMachineInstance.  # noqa: E501
        :rtype: VmProtectionDataInstance
        """
        return self._protection_data

    @protection_data.setter
    def protection_data(self, protection_data):
        """Sets the protection_data of this VirtualMachineInstance.


        :param protection_data: The protection_data of this VirtualMachineInstance.  # noqa: E501
        :type: VmProtectionDataInstance
        """

        self._protection_data = protection_data

    @property
    def power_state(self):
        """Gets the power_state of this VirtualMachineInstance.  # noqa: E501

         Was added in version 3.0.0.0.  # noqa: E501

        :return: The power_state of this VirtualMachineInstance.  # noqa: E501
        :rtype: VirtualMachinePowerStateEnum
        """
        return self._power_state

    @power_state.setter
    def power_state(self, power_state):
        """Sets the power_state of this VirtualMachineInstance.

         Was added in version 3.0.0.0.  # noqa: E501

        :param power_state: The power_state of this VirtualMachineInstance.  # noqa: E501
        :type: VirtualMachinePowerStateEnum
        """

        self._power_state = power_state

    @property
    def type_l10n(self):
        """Gets the type_l10n of this VirtualMachineInstance.  # noqa: E501

        Localized message string corresponding to type  # noqa: E501

        :return: The type_l10n of this VirtualMachineInstance.  # noqa: E501
        :rtype: str
        """
        return self._type_l10n

    @type_l10n.setter
    def type_l10n(self, type_l10n):
        """Sets the type_l10n of this VirtualMachineInstance.

        Localized message string corresponding to type  # noqa: E501

        :param type_l10n: The type_l10n of this VirtualMachineInstance.  # noqa: E501
        :type: str
        """

        self._type_l10n = type_l10n

    @property
    def status_l10n(self):
        """Gets the status_l10n of this VirtualMachineInstance.  # noqa: E501

        Localized message string corresponding to status  # noqa: E501

        :return: The status_l10n of this VirtualMachineInstance.  # noqa: E501
        :rtype: str
        """
        return self._status_l10n

    @status_l10n.setter
    def status_l10n(self, status_l10n):
        """Sets the status_l10n of this VirtualMachineInstance.

        Localized message string corresponding to status  # noqa: E501

        :param status_l10n: The status_l10n of this VirtualMachineInstance.  # noqa: E501
        :type: str
        """

        self._status_l10n = status_l10n

    @property
    def power_state_l10n(self):
        """Gets the power_state_l10n of this VirtualMachineInstance.  # noqa: E501

        Localized message string corresponding to power_state Was added in version 3.0.0.0.  # noqa: E501

        :return: The power_state_l10n of this VirtualMachineInstance.  # noqa: E501
        :rtype: str
        """
        return self._power_state_l10n

    @power_state_l10n.setter
    def power_state_l10n(self, power_state_l10n):
        """Sets the power_state_l10n of this VirtualMachineInstance.

        Localized message string corresponding to power_state Was added in version 3.0.0.0.  # noqa: E501

        :param power_state_l10n: The power_state_l10n of this VirtualMachineInstance.  # noqa: E501
        :type: str
        """

        self._power_state_l10n = power_state_l10n

    @property
    def protection_policy(self):
        """Gets the protection_policy of this VirtualMachineInstance.  # noqa: E501

        This is the embeddable reference form of protection_policy_id attribute.  # noqa: E501

        :return: The protection_policy of this VirtualMachineInstance.  # noqa: E501
        :rtype: PolicyInstance
        """
        return self._protection_policy

    @protection_policy.setter
    def protection_policy(self, protection_policy):
        """Sets the protection_policy of this VirtualMachineInstance.

        This is the embeddable reference form of protection_policy_id attribute.  # noqa: E501

        :param protection_policy: The protection_policy of this VirtualMachineInstance.  # noqa: E501
        :type: PolicyInstance
        """

        self._protection_policy = protection_policy

    @property
    def replication_group(self):
        """Gets the replication_group of this VirtualMachineInstance.  # noqa: E501

        This is the embeddable reference form of replication_group_id attribute.  # noqa: E501

        :return: The replication_group of this VirtualMachineInstance.  # noqa: E501
        :rtype: ReplicationGroupInstance
        """
        return self._replication_group

    @replication_group.setter
    def replication_group(self, replication_group):
        """Sets the replication_group of this VirtualMachineInstance.

        This is the embeddable reference form of replication_group_id attribute.  # noqa: E501

        :param replication_group: The replication_group of this VirtualMachineInstance.  # noqa: E501
        :type: ReplicationGroupInstance
        """

        self._replication_group = replication_group

    @property
    def parent(self):
        """Gets the parent of this VirtualMachineInstance.  # noqa: E501

        This is the embeddable reference form of parent_id attribute.  # noqa: E501

        :return: The parent of this VirtualMachineInstance.  # noqa: E501
        :rtype: VirtualMachineInstance
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this VirtualMachineInstance.

        This is the embeddable reference form of parent_id attribute.  # noqa: E501

        :param parent: The parent of this VirtualMachineInstance.  # noqa: E501
        :type: VirtualMachineInstance
        """

        self._parent = parent

    @property
    def children(self):
        """Gets the children of this VirtualMachineInstance.  # noqa: E501

        This is the inverse of the resource type virtual_machine association.  # noqa: E501

        :return: The children of this VirtualMachineInstance.  # noqa: E501
        :rtype: list[VirtualMachineInstance]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this VirtualMachineInstance.

        This is the inverse of the resource type virtual_machine association.  # noqa: E501

        :param children: The children of this VirtualMachineInstance.  # noqa: E501
        :type: list[VirtualMachineInstance]
        """

        self._children = children

    @property
    def vcenter(self):
        """Gets the vcenter of this VirtualMachineInstance.  # noqa: E501

        This is the embeddable reference form of vcenter_id attribute.  # noqa: E501

        :return: The vcenter of this VirtualMachineInstance.  # noqa: E501
        :rtype: VcenterInstance
        """
        return self._vcenter

    @vcenter.setter
    def vcenter(self, vcenter):
        """Sets the vcenter of this VirtualMachineInstance.

        This is the embeddable reference form of vcenter_id attribute.  # noqa: E501

        :param vcenter: The vcenter of this VirtualMachineInstance.  # noqa: E501
        :type: VcenterInstance
        """

        self._vcenter = vcenter

    @property
    def virtual_volumes(self):
        """Gets the virtual_volumes of this VirtualMachineInstance.  # noqa: E501

        List of the virtual_volumes that are associated with this virtual_machine.  # noqa: E501

        :return: The virtual_volumes of this VirtualMachineInstance.  # noqa: E501
        :rtype: list[VirtualVolumeInstance]
        """
        return self._virtual_volumes

    @virtual_volumes.setter
    def virtual_volumes(self, virtual_volumes):
        """Sets the virtual_volumes of this VirtualMachineInstance.

        List of the virtual_volumes that are associated with this virtual_machine.  # noqa: E501

        :param virtual_volumes: The virtual_volumes of this VirtualMachineInstance.  # noqa: E501
        :type: list[VirtualVolumeInstance]
        """

        self._virtual_volumes = virtual_volumes

    @property
    def datastores(self):
        """Gets the datastores of this VirtualMachineInstance.  # noqa: E501

        List of the datastores that are associated with this virtual_machine.  # noqa: E501

        :return: The datastores of this VirtualMachineInstance.  # noqa: E501
        :rtype: list[DatastoreInstance]
        """
        return self._datastores

    @datastores.setter
    def datastores(self, datastores):
        """Sets the datastores of this VirtualMachineInstance.

        List of the datastores that are associated with this virtual_machine.  # noqa: E501

        :param datastores: The datastores of this VirtualMachineInstance.  # noqa: E501
        :type: list[DatastoreInstance]
        """

        self._datastores = datastores

    @property
    def vsphere_host(self):
        """Gets the vsphere_host of this VirtualMachineInstance.  # noqa: E501

        List of the vsphere_host that are associated with this virtual_machine.  # noqa: E501

        :return: The vsphere_host of this VirtualMachineInstance.  # noqa: E501
        :rtype: list[VsphereHostInstance]
        """
        return self._vsphere_host

    @vsphere_host.setter
    def vsphere_host(self, vsphere_host):
        """Sets the vsphere_host of this VirtualMachineInstance.

        List of the vsphere_host that are associated with this virtual_machine.  # noqa: E501

        :param vsphere_host: The vsphere_host of this VirtualMachineInstance.  # noqa: E501
        :type: list[VsphereHostInstance]
        """

        self._vsphere_host = vsphere_host

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VirtualMachineInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VirtualMachineInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VirtualMachineInstance):
            return True

        return self.to_dict() != other.to_dict()
