# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class HostGroupInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'host_connectivity': 'HostConnectivityEnum',
        'host_connectivity_l10n': 'str',
        'hosts': 'list[HostInstance]',
        'mapped_host_groups': 'list[HostVolumeMappingInstance]',
        'host_virtual_volume_mappings': 'list[HostVirtualVolumeMappingInstance]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'host_connectivity': 'host_connectivity',
        'host_connectivity_l10n': 'host_connectivity_l10n',
        'hosts': 'hosts',
        'mapped_host_groups': 'mapped_host_groups',
        'host_virtual_volume_mappings': 'host_virtual_volume_mappings'
    }

    def __init__(self, id=None, name=None, description=None, host_connectivity=None, host_connectivity_l10n=None, hosts=None, mapped_host_groups=None, host_virtual_volume_mappings=None, _configuration=None):  # noqa: E501
        """HostGroupInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._description = None
        self._host_connectivity = None
        self._host_connectivity_l10n = None
        self._hosts = None
        self._mapped_host_groups = None
        self._host_virtual_volume_mappings = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if host_connectivity is not None:
            self.host_connectivity = host_connectivity
        if host_connectivity_l10n is not None:
            self.host_connectivity_l10n = host_connectivity_l10n
        if hosts is not None:
            self.hosts = hosts
        if mapped_host_groups is not None:
            self.mapped_host_groups = mapped_host_groups
        if host_virtual_volume_mappings is not None:
            self.host_virtual_volume_mappings = host_virtual_volume_mappings

    @property
    def id(self):
        """Gets the id of this HostGroupInstance.  # noqa: E501

        The host group unique identifier.  # noqa: E501

        :return: The id of this HostGroupInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HostGroupInstance.

        The host group unique identifier.  # noqa: E501

        :param id: The id of this HostGroupInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this HostGroupInstance.  # noqa: E501

        The host group name.  This property supports case-insensitive filtering.  # noqa: E501

        :return: The name of this HostGroupInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HostGroupInstance.

        The host group name.  This property supports case-insensitive filtering.  # noqa: E501

        :param name: The name of this HostGroupInstance.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this HostGroupInstance.  # noqa: E501

        A description for the host group.  # noqa: E501

        :return: The description of this HostGroupInstance.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this HostGroupInstance.

        A description for the host group.  # noqa: E501

        :param description: The description of this HostGroupInstance.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def host_connectivity(self):
        """Gets the host_connectivity of this HostGroupInstance.  # noqa: E501

         Was added in version 3.0.0.0.  # noqa: E501

        :return: The host_connectivity of this HostGroupInstance.  # noqa: E501
        :rtype: HostConnectivityEnum
        """
        return self._host_connectivity

    @host_connectivity.setter
    def host_connectivity(self, host_connectivity):
        """Sets the host_connectivity of this HostGroupInstance.

         Was added in version 3.0.0.0.  # noqa: E501

        :param host_connectivity: The host_connectivity of this HostGroupInstance.  # noqa: E501
        :type: HostConnectivityEnum
        """

        self._host_connectivity = host_connectivity

    @property
    def host_connectivity_l10n(self):
        """Gets the host_connectivity_l10n of this HostGroupInstance.  # noqa: E501

        Localized message string corresponding to host_connectivity Was added in version 3.0.0.0.  # noqa: E501

        :return: The host_connectivity_l10n of this HostGroupInstance.  # noqa: E501
        :rtype: str
        """
        return self._host_connectivity_l10n

    @host_connectivity_l10n.setter
    def host_connectivity_l10n(self, host_connectivity_l10n):
        """Sets the host_connectivity_l10n of this HostGroupInstance.

        Localized message string corresponding to host_connectivity Was added in version 3.0.0.0.  # noqa: E501

        :param host_connectivity_l10n: The host_connectivity_l10n of this HostGroupInstance.  # noqa: E501
        :type: str
        """

        self._host_connectivity_l10n = host_connectivity_l10n

    @property
    def hosts(self):
        """Gets the hosts of this HostGroupInstance.  # noqa: E501

        This is the inverse of the resource type host association.  # noqa: E501

        :return: The hosts of this HostGroupInstance.  # noqa: E501
        :rtype: list[HostInstance]
        """
        return self._hosts

    @hosts.setter
    def hosts(self, hosts):
        """Sets the hosts of this HostGroupInstance.

        This is the inverse of the resource type host association.  # noqa: E501

        :param hosts: The hosts of this HostGroupInstance.  # noqa: E501
        :type: list[HostInstance]
        """

        self._hosts = hosts

    @property
    def mapped_host_groups(self):
        """Gets the mapped_host_groups of this HostGroupInstance.  # noqa: E501

        This is the inverse of the resource type host_volume_mapping association.  # noqa: E501

        :return: The mapped_host_groups of this HostGroupInstance.  # noqa: E501
        :rtype: list[HostVolumeMappingInstance]
        """
        return self._mapped_host_groups

    @mapped_host_groups.setter
    def mapped_host_groups(self, mapped_host_groups):
        """Sets the mapped_host_groups of this HostGroupInstance.

        This is the inverse of the resource type host_volume_mapping association.  # noqa: E501

        :param mapped_host_groups: The mapped_host_groups of this HostGroupInstance.  # noqa: E501
        :type: list[HostVolumeMappingInstance]
        """

        self._mapped_host_groups = mapped_host_groups

    @property
    def host_virtual_volume_mappings(self):
        """Gets the host_virtual_volume_mappings of this HostGroupInstance.  # noqa: E501

        This is the inverse of the resource type host_virtual_volume_mapping association.  # noqa: E501

        :return: The host_virtual_volume_mappings of this HostGroupInstance.  # noqa: E501
        :rtype: list[HostVirtualVolumeMappingInstance]
        """
        return self._host_virtual_volume_mappings

    @host_virtual_volume_mappings.setter
    def host_virtual_volume_mappings(self, host_virtual_volume_mappings):
        """Sets the host_virtual_volume_mappings of this HostGroupInstance.

        This is the inverse of the resource type host_virtual_volume_mapping association.  # noqa: E501

        :param host_virtual_volume_mappings: The host_virtual_volume_mappings of this HostGroupInstance.  # noqa: E501
        :type: list[HostVirtualVolumeMappingInstance]
        """

        self._host_virtual_volume_mappings = host_virtual_volume_mappings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HostGroupInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HostGroupInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HostGroupInstance):
            return True

        return self.to_dict() != other.to_dict()
