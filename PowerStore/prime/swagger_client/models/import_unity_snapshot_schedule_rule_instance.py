# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class ImportUnitySnapshotScheduleRuleInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'type': 'UnityScheduleTypeEnum',
        'minute': 'int',
        'hours': 'list[int]',
        'days_of_week': 'list[UnityDayofWeekEnum]',
        'days_of_month': 'list[int]',
        'interval': 'int',
        'is_auto_delete': 'bool',
        'retention_time': 'int',
        'type_l10n': 'str',
        'days_of_week_l10n': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'minute': 'minute',
        'hours': 'hours',
        'days_of_week': 'days_of_week',
        'days_of_month': 'days_of_month',
        'interval': 'interval',
        'is_auto_delete': 'is_auto_delete',
        'retention_time': 'retention_time',
        'type_l10n': 'type_l10n',
        'days_of_week_l10n': 'days_of_week_l10n'
    }

    def __init__(self, id=None, type=None, minute=None, hours=None, days_of_week=None, days_of_month=None, interval=None, is_auto_delete=None, retention_time=None, type_l10n=None, days_of_week_l10n=None, _configuration=None):  # noqa: E501
        """ImportUnitySnapshotScheduleRuleInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._type = None
        self._minute = None
        self._hours = None
        self._days_of_week = None
        self._days_of_month = None
        self._interval = None
        self._is_auto_delete = None
        self._retention_time = None
        self._type_l10n = None
        self._days_of_week_l10n = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if minute is not None:
            self.minute = minute
        if hours is not None:
            self.hours = hours
        if days_of_week is not None:
            self.days_of_week = days_of_week
        if days_of_month is not None:
            self.days_of_month = days_of_month
        if interval is not None:
            self.interval = interval
        if is_auto_delete is not None:
            self.is_auto_delete = is_auto_delete
        if retention_time is not None:
            self.retention_time = retention_time
        if type_l10n is not None:
            self.type_l10n = type_l10n
        if days_of_week_l10n is not None:
            self.days_of_week_l10n = days_of_week_l10n

    @property
    def id(self):
        """Gets the id of this ImportUnitySnapshotScheduleRuleInstance.  # noqa: E501

        Unique identifier of the snapshot schedule rule .  # noqa: E501

        :return: The id of this ImportUnitySnapshotScheduleRuleInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ImportUnitySnapshotScheduleRuleInstance.

        Unique identifier of the snapshot schedule rule .  # noqa: E501

        :param id: The id of this ImportUnitySnapshotScheduleRuleInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this ImportUnitySnapshotScheduleRuleInstance.  # noqa: E501

        Type of the snapshot schedule rule.  # noqa: E501

        :return: The type of this ImportUnitySnapshotScheduleRuleInstance.  # noqa: E501
        :rtype: UnityScheduleTypeEnum
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ImportUnitySnapshotScheduleRuleInstance.

        Type of the snapshot schedule rule.  # noqa: E501

        :param type: The type of this ImportUnitySnapshotScheduleRuleInstance.  # noqa: E501
        :type: UnityScheduleTypeEnum
        """

        self._type = type

    @property
    def minute(self):
        """Gets the minute of this ImportUnitySnapshotScheduleRuleInstance.  # noqa: E501

        Snapshot schedule frequency.[0..59].  # noqa: E501

        :return: The minute of this ImportUnitySnapshotScheduleRuleInstance.  # noqa: E501
        :rtype: int
        """
        return self._minute

    @minute.setter
    def minute(self, minute):
        """Sets the minute of this ImportUnitySnapshotScheduleRuleInstance.

        Snapshot schedule frequency.[0..59].  # noqa: E501

        :param minute: The minute of this ImportUnitySnapshotScheduleRuleInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                minute is not None and minute > 59):  # noqa: E501
            raise ValueError("Invalid value for `minute`, must be a value less than or equal to `59`")  # noqa: E501
        if (self._configuration.client_side_validation and
                minute is not None and minute < 0):  # noqa: E501
            raise ValueError("Invalid value for `minute`, must be a value greater than or equal to `0`")  # noqa: E501

        self._minute = minute

    @property
    def hours(self):
        """Gets the hours of this ImportUnitySnapshotScheduleRuleInstance.  # noqa: E501

        Hourly frequency for the snapshot schedule rule.[0..23].  # noqa: E501

        :return: The hours of this ImportUnitySnapshotScheduleRuleInstance.  # noqa: E501
        :rtype: list[int]
        """
        return self._hours

    @hours.setter
    def hours(self, hours):
        """Sets the hours of this ImportUnitySnapshotScheduleRuleInstance.

        Hourly frequency for the snapshot schedule rule.[0..23].  # noqa: E501

        :param hours: The hours of this ImportUnitySnapshotScheduleRuleInstance.  # noqa: E501
        :type: list[int]
        """

        self._hours = hours

    @property
    def days_of_week(self):
        """Gets the days_of_week of this ImportUnitySnapshotScheduleRuleInstance.  # noqa: E501

        Days of the week for which the snapshot schedule rule applies.  # noqa: E501

        :return: The days_of_week of this ImportUnitySnapshotScheduleRuleInstance.  # noqa: E501
        :rtype: list[UnityDayofWeekEnum]
        """
        return self._days_of_week

    @days_of_week.setter
    def days_of_week(self, days_of_week):
        """Sets the days_of_week of this ImportUnitySnapshotScheduleRuleInstance.

        Days of the week for which the snapshot schedule rule applies.  # noqa: E501

        :param days_of_week: The days_of_week of this ImportUnitySnapshotScheduleRuleInstance.  # noqa: E501
        :type: list[UnityDayofWeekEnum]
        """

        self._days_of_week = days_of_week

    @property
    def days_of_month(self):
        """Gets the days_of_month of this ImportUnitySnapshotScheduleRuleInstance.  # noqa: E501

        Days of the month for which the snapshot schedule rule applies. [1..31].  # noqa: E501

        :return: The days_of_month of this ImportUnitySnapshotScheduleRuleInstance.  # noqa: E501
        :rtype: list[int]
        """
        return self._days_of_month

    @days_of_month.setter
    def days_of_month(self, days_of_month):
        """Sets the days_of_month of this ImportUnitySnapshotScheduleRuleInstance.

        Days of the month for which the snapshot schedule rule applies. [1..31].  # noqa: E501

        :param days_of_month: The days_of_month of this ImportUnitySnapshotScheduleRuleInstance.  # noqa: E501
        :type: list[int]
        """

        self._days_of_month = days_of_month

    @property
    def interval(self):
        """Gets the interval of this ImportUnitySnapshotScheduleRuleInstance.  # noqa: E501

        Number of days or hours between snaps, depending on the rule type. [1..31].  # noqa: E501

        :return: The interval of this ImportUnitySnapshotScheduleRuleInstance.  # noqa: E501
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this ImportUnitySnapshotScheduleRuleInstance.

        Number of days or hours between snaps, depending on the rule type. [1..31].  # noqa: E501

        :param interval: The interval of this ImportUnitySnapshotScheduleRuleInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                interval is not None and interval > 31):  # noqa: E501
            raise ValueError("Invalid value for `interval`, must be a value less than or equal to `31`")  # noqa: E501
        if (self._configuration.client_side_validation and
                interval is not None and interval < 1):  # noqa: E501
            raise ValueError("Invalid value for `interval`, must be a value greater than or equal to `1`")  # noqa: E501

        self._interval = interval

    @property
    def is_auto_delete(self):
        """Gets the is_auto_delete of this ImportUnitySnapshotScheduleRuleInstance.  # noqa: E501

        Indicates whether the system can automatically delete the snapshot based on pool automatic-deletion thresholds.  # noqa: E501

        :return: The is_auto_delete of this ImportUnitySnapshotScheduleRuleInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_auto_delete

    @is_auto_delete.setter
    def is_auto_delete(self, is_auto_delete):
        """Sets the is_auto_delete of this ImportUnitySnapshotScheduleRuleInstance.

        Indicates whether the system can automatically delete the snapshot based on pool automatic-deletion thresholds.  # noqa: E501

        :param is_auto_delete: The is_auto_delete of this ImportUnitySnapshotScheduleRuleInstance.  # noqa: E501
        :type: bool
        """

        self._is_auto_delete = is_auto_delete

    @property
    def retention_time(self):
        """Gets the retention_time of this ImportUnitySnapshotScheduleRuleInstance.  # noqa: E501

        (Applies when the value of the isAutoDelete attribute is false.) Period of time for which to keep the snapshot, in seconds.  # noqa: E501

        :return: The retention_time of this ImportUnitySnapshotScheduleRuleInstance.  # noqa: E501
        :rtype: int
        """
        return self._retention_time

    @retention_time.setter
    def retention_time(self, retention_time):
        """Sets the retention_time of this ImportUnitySnapshotScheduleRuleInstance.

        (Applies when the value of the isAutoDelete attribute is false.) Period of time for which to keep the snapshot, in seconds.  # noqa: E501

        :param retention_time: The retention_time of this ImportUnitySnapshotScheduleRuleInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                retention_time is not None and retention_time > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `retention_time`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                retention_time is not None and retention_time < 0):  # noqa: E501
            raise ValueError("Invalid value for `retention_time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._retention_time = retention_time

    @property
    def type_l10n(self):
        """Gets the type_l10n of this ImportUnitySnapshotScheduleRuleInstance.  # noqa: E501

        Localized message string corresponding to type  # noqa: E501

        :return: The type_l10n of this ImportUnitySnapshotScheduleRuleInstance.  # noqa: E501
        :rtype: str
        """
        return self._type_l10n

    @type_l10n.setter
    def type_l10n(self, type_l10n):
        """Sets the type_l10n of this ImportUnitySnapshotScheduleRuleInstance.

        Localized message string corresponding to type  # noqa: E501

        :param type_l10n: The type_l10n of this ImportUnitySnapshotScheduleRuleInstance.  # noqa: E501
        :type: str
        """

        self._type_l10n = type_l10n

    @property
    def days_of_week_l10n(self):
        """Gets the days_of_week_l10n of this ImportUnitySnapshotScheduleRuleInstance.  # noqa: E501

        Localized message array corresponding to days_of_week  # noqa: E501

        :return: The days_of_week_l10n of this ImportUnitySnapshotScheduleRuleInstance.  # noqa: E501
        :rtype: list[str]
        """
        return self._days_of_week_l10n

    @days_of_week_l10n.setter
    def days_of_week_l10n(self, days_of_week_l10n):
        """Sets the days_of_week_l10n of this ImportUnitySnapshotScheduleRuleInstance.

        Localized message array corresponding to days_of_week  # noqa: E501

        :param days_of_week_l10n: The days_of_week_l10n of this ImportUnitySnapshotScheduleRuleInstance.  # noqa: E501
        :type: list[str]
        """

        self._days_of_week_l10n = days_of_week_l10n

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImportUnitySnapshotScheduleRuleInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportUnitySnapshotScheduleRuleInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImportUnitySnapshotScheduleRuleInstance):
            return True

        return self.to_dict() != other.to_dict()
