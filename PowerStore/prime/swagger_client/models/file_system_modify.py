# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class FileSystemModify(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'size_total': 'int',
        'access_policy': 'FileSystemAccessPolicyEnum',
        'locking_policy': 'FileSystemLockingPolicyEnum',
        'folder_rename_policy': 'FileSystemFolderRenamePolicyEnum',
        'is_smb_sync_writes_enabled': 'bool',
        'is_smb_op_locks_enabled': 'bool',
        'is_smb_notify_on_access_enabled': 'bool',
        'is_smb_notify_on_write_enabled': 'bool',
        'smb_notify_on_change_dir_depth': 'int',
        'is_smb_no_notify_enabled': 'bool',
        'is_async_m_time_enabled': 'bool',
        'protection_policy_id': 'str',
        'is_quota_enabled': 'bool',
        'grace_period': 'int',
        'default_hard_limit': 'int',
        'default_soft_limit': 'int',
        'expiration_timestamp': 'datetime',
        'file_events_publishing_mode': 'FileEventsPublishingModeEnum',
        'flr_attributes': 'FlrModify'
    }

    attribute_map = {
        'description': 'description',
        'size_total': 'size_total',
        'access_policy': 'access_policy',
        'locking_policy': 'locking_policy',
        'folder_rename_policy': 'folder_rename_policy',
        'is_smb_sync_writes_enabled': 'is_smb_sync_writes_enabled',
        'is_smb_op_locks_enabled': 'is_smb_op_locks_enabled',
        'is_smb_notify_on_access_enabled': 'is_smb_notify_on_access_enabled',
        'is_smb_notify_on_write_enabled': 'is_smb_notify_on_write_enabled',
        'smb_notify_on_change_dir_depth': 'smb_notify_on_change_dir_depth',
        'is_smb_no_notify_enabled': 'is_smb_no_notify_enabled',
        'is_async_m_time_enabled': 'is_async_MTime_enabled',
        'protection_policy_id': 'protection_policy_id',
        'is_quota_enabled': 'is_quota_enabled',
        'grace_period': 'grace_period',
        'default_hard_limit': 'default_hard_limit',
        'default_soft_limit': 'default_soft_limit',
        'expiration_timestamp': 'expiration_timestamp',
        'file_events_publishing_mode': 'file_events_publishing_mode',
        'flr_attributes': 'flr_attributes'
    }

    def __init__(self, description=None, size_total=None, access_policy=None, locking_policy=None, folder_rename_policy=None, is_smb_sync_writes_enabled=None, is_smb_op_locks_enabled=None, is_smb_notify_on_access_enabled=None, is_smb_notify_on_write_enabled=None, smb_notify_on_change_dir_depth=None, is_smb_no_notify_enabled=None, is_async_m_time_enabled=None, protection_policy_id=None, is_quota_enabled=None, grace_period=-1, default_hard_limit=None, default_soft_limit=None, expiration_timestamp=None, file_events_publishing_mode=None, flr_attributes=None, _configuration=None):  # noqa: E501
        """FileSystemModify - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._description = None
        self._size_total = None
        self._access_policy = None
        self._locking_policy = None
        self._folder_rename_policy = None
        self._is_smb_sync_writes_enabled = None
        self._is_smb_op_locks_enabled = None
        self._is_smb_notify_on_access_enabled = None
        self._is_smb_notify_on_write_enabled = None
        self._smb_notify_on_change_dir_depth = None
        self._is_smb_no_notify_enabled = None
        self._is_async_m_time_enabled = None
        self._protection_policy_id = None
        self._is_quota_enabled = None
        self._grace_period = None
        self._default_hard_limit = None
        self._default_soft_limit = None
        self._expiration_timestamp = None
        self._file_events_publishing_mode = None
        self._flr_attributes = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if size_total is not None:
            self.size_total = size_total
        if access_policy is not None:
            self.access_policy = access_policy
        if locking_policy is not None:
            self.locking_policy = locking_policy
        if folder_rename_policy is not None:
            self.folder_rename_policy = folder_rename_policy
        if is_smb_sync_writes_enabled is not None:
            self.is_smb_sync_writes_enabled = is_smb_sync_writes_enabled
        if is_smb_op_locks_enabled is not None:
            self.is_smb_op_locks_enabled = is_smb_op_locks_enabled
        if is_smb_notify_on_access_enabled is not None:
            self.is_smb_notify_on_access_enabled = is_smb_notify_on_access_enabled
        if is_smb_notify_on_write_enabled is not None:
            self.is_smb_notify_on_write_enabled = is_smb_notify_on_write_enabled
        if smb_notify_on_change_dir_depth is not None:
            self.smb_notify_on_change_dir_depth = smb_notify_on_change_dir_depth
        if is_smb_no_notify_enabled is not None:
            self.is_smb_no_notify_enabled = is_smb_no_notify_enabled
        if is_async_m_time_enabled is not None:
            self.is_async_m_time_enabled = is_async_m_time_enabled
        if protection_policy_id is not None:
            self.protection_policy_id = protection_policy_id
        if is_quota_enabled is not None:
            self.is_quota_enabled = is_quota_enabled
        if grace_period is not None:
            self.grace_period = grace_period
        if default_hard_limit is not None:
            self.default_hard_limit = default_hard_limit
        if default_soft_limit is not None:
            self.default_soft_limit = default_soft_limit
        if expiration_timestamp is not None:
            self.expiration_timestamp = expiration_timestamp
        if file_events_publishing_mode is not None:
            self.file_events_publishing_mode = file_events_publishing_mode
        if flr_attributes is not None:
            self.flr_attributes = flr_attributes

    @property
    def description(self):
        """Gets the description of this FileSystemModify.  # noqa: E501

        Description of the file system. (255 UTF-8 characters).  # noqa: E501

        :return: The description of this FileSystemModify.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FileSystemModify.

        Description of the file system. (255 UTF-8 characters).  # noqa: E501

        :param description: The description of this FileSystemModify.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                description is not None and len(description) > 255):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                description is not None and len(description) < 0):
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")  # noqa: E501

        self._description = description

    @property
    def size_total(self):
        """Gets the size_total of this FileSystemModify.  # noqa: E501

        Size, in bytes, presented to the host or end user. This can be used for both expand and shrink on a file system. Value is always rounded up to next MB.   # noqa: E501

        :return: The size_total of this FileSystemModify.  # noqa: E501
        :rtype: int
        """
        return self._size_total

    @size_total.setter
    def size_total(self, size_total):
        """Sets the size_total of this FileSystemModify.

        Size, in bytes, presented to the host or end user. This can be used for both expand and shrink on a file system. Value is always rounded up to next MB.   # noqa: E501

        :param size_total: The size_total of this FileSystemModify.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                size_total is not None and size_total > 281474976710656):  # noqa: E501
            raise ValueError("Invalid value for `size_total`, must be a value less than or equal to `281474976710656`")  # noqa: E501
        if (self._configuration.client_side_validation and
                size_total is not None and size_total < 3221225472):  # noqa: E501
            raise ValueError("Invalid value for `size_total`, must be a value greater than or equal to `3221225472`")  # noqa: E501

        self._size_total = size_total

    @property
    def access_policy(self):
        """Gets the access_policy of this FileSystemModify.  # noqa: E501


        :return: The access_policy of this FileSystemModify.  # noqa: E501
        :rtype: FileSystemAccessPolicyEnum
        """
        return self._access_policy

    @access_policy.setter
    def access_policy(self, access_policy):
        """Sets the access_policy of this FileSystemModify.


        :param access_policy: The access_policy of this FileSystemModify.  # noqa: E501
        :type: FileSystemAccessPolicyEnum
        """

        self._access_policy = access_policy

    @property
    def locking_policy(self):
        """Gets the locking_policy of this FileSystemModify.  # noqa: E501


        :return: The locking_policy of this FileSystemModify.  # noqa: E501
        :rtype: FileSystemLockingPolicyEnum
        """
        return self._locking_policy

    @locking_policy.setter
    def locking_policy(self, locking_policy):
        """Sets the locking_policy of this FileSystemModify.


        :param locking_policy: The locking_policy of this FileSystemModify.  # noqa: E501
        :type: FileSystemLockingPolicyEnum
        """

        self._locking_policy = locking_policy

    @property
    def folder_rename_policy(self):
        """Gets the folder_rename_policy of this FileSystemModify.  # noqa: E501


        :return: The folder_rename_policy of this FileSystemModify.  # noqa: E501
        :rtype: FileSystemFolderRenamePolicyEnum
        """
        return self._folder_rename_policy

    @folder_rename_policy.setter
    def folder_rename_policy(self, folder_rename_policy):
        """Sets the folder_rename_policy of this FileSystemModify.


        :param folder_rename_policy: The folder_rename_policy of this FileSystemModify.  # noqa: E501
        :type: FileSystemFolderRenamePolicyEnum
        """

        self._folder_rename_policy = folder_rename_policy

    @property
    def is_smb_sync_writes_enabled(self):
        """Gets the is_smb_sync_writes_enabled of this FileSystemModify.  # noqa: E501

        Indicates whether the synchronous writes option is enabled on the file system. Values are: * true - Synchronous writes option is enabled on the file system. * false - Synchronous writes option is disabled on the file system.   # noqa: E501

        :return: The is_smb_sync_writes_enabled of this FileSystemModify.  # noqa: E501
        :rtype: bool
        """
        return self._is_smb_sync_writes_enabled

    @is_smb_sync_writes_enabled.setter
    def is_smb_sync_writes_enabled(self, is_smb_sync_writes_enabled):
        """Sets the is_smb_sync_writes_enabled of this FileSystemModify.

        Indicates whether the synchronous writes option is enabled on the file system. Values are: * true - Synchronous writes option is enabled on the file system. * false - Synchronous writes option is disabled on the file system.   # noqa: E501

        :param is_smb_sync_writes_enabled: The is_smb_sync_writes_enabled of this FileSystemModify.  # noqa: E501
        :type: bool
        """

        self._is_smb_sync_writes_enabled = is_smb_sync_writes_enabled

    @property
    def is_smb_op_locks_enabled(self):
        """Gets the is_smb_op_locks_enabled of this FileSystemModify.  # noqa: E501

        Indicates whether opportunistic file locking is enabled on the file system. Values are: * true - Opportunistic file locking is enabled on the file system. * false - Opportunistic file locking is disabled on the file system.   # noqa: E501

        :return: The is_smb_op_locks_enabled of this FileSystemModify.  # noqa: E501
        :rtype: bool
        """
        return self._is_smb_op_locks_enabled

    @is_smb_op_locks_enabled.setter
    def is_smb_op_locks_enabled(self, is_smb_op_locks_enabled):
        """Sets the is_smb_op_locks_enabled of this FileSystemModify.

        Indicates whether opportunistic file locking is enabled on the file system. Values are: * true - Opportunistic file locking is enabled on the file system. * false - Opportunistic file locking is disabled on the file system.   # noqa: E501

        :param is_smb_op_locks_enabled: The is_smb_op_locks_enabled of this FileSystemModify.  # noqa: E501
        :type: bool
        """

        self._is_smb_op_locks_enabled = is_smb_op_locks_enabled

    @property
    def is_smb_notify_on_access_enabled(self):
        """Gets the is_smb_notify_on_access_enabled of this FileSystemModify.  # noqa: E501

        Indicates whether file access notifications are enabled on the file system. Values are: * true - File access notifications are enabled on the file system. * false - File access notifications on file access are disabled on the file system.   # noqa: E501

        :return: The is_smb_notify_on_access_enabled of this FileSystemModify.  # noqa: E501
        :rtype: bool
        """
        return self._is_smb_notify_on_access_enabled

    @is_smb_notify_on_access_enabled.setter
    def is_smb_notify_on_access_enabled(self, is_smb_notify_on_access_enabled):
        """Sets the is_smb_notify_on_access_enabled of this FileSystemModify.

        Indicates whether file access notifications are enabled on the file system. Values are: * true - File access notifications are enabled on the file system. * false - File access notifications on file access are disabled on the file system.   # noqa: E501

        :param is_smb_notify_on_access_enabled: The is_smb_notify_on_access_enabled of this FileSystemModify.  # noqa: E501
        :type: bool
        """

        self._is_smb_notify_on_access_enabled = is_smb_notify_on_access_enabled

    @property
    def is_smb_notify_on_write_enabled(self):
        """Gets the is_smb_notify_on_write_enabled of this FileSystemModify.  # noqa: E501

        Indicates whether notifications on file writes are enabled on the file system. Values are: * true - File writes notifications are enabled on the file system. * false - File writes notifications are disabled on the file system.   # noqa: E501

        :return: The is_smb_notify_on_write_enabled of this FileSystemModify.  # noqa: E501
        :rtype: bool
        """
        return self._is_smb_notify_on_write_enabled

    @is_smb_notify_on_write_enabled.setter
    def is_smb_notify_on_write_enabled(self, is_smb_notify_on_write_enabled):
        """Sets the is_smb_notify_on_write_enabled of this FileSystemModify.

        Indicates whether notifications on file writes are enabled on the file system. Values are: * true - File writes notifications are enabled on the file system. * false - File writes notifications are disabled on the file system.   # noqa: E501

        :param is_smb_notify_on_write_enabled: The is_smb_notify_on_write_enabled of this FileSystemModify.  # noqa: E501
        :type: bool
        """

        self._is_smb_notify_on_write_enabled = is_smb_notify_on_write_enabled

    @property
    def smb_notify_on_change_dir_depth(self):
        """Gets the smb_notify_on_change_dir_depth of this FileSystemModify.  # noqa: E501

        Lowest directory level to which the enabled notifications apply, if any.  # noqa: E501

        :return: The smb_notify_on_change_dir_depth of this FileSystemModify.  # noqa: E501
        :rtype: int
        """
        return self._smb_notify_on_change_dir_depth

    @smb_notify_on_change_dir_depth.setter
    def smb_notify_on_change_dir_depth(self, smb_notify_on_change_dir_depth):
        """Sets the smb_notify_on_change_dir_depth of this FileSystemModify.

        Lowest directory level to which the enabled notifications apply, if any.  # noqa: E501

        :param smb_notify_on_change_dir_depth: The smb_notify_on_change_dir_depth of this FileSystemModify.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                smb_notify_on_change_dir_depth is not None and smb_notify_on_change_dir_depth > 512):  # noqa: E501
            raise ValueError("Invalid value for `smb_notify_on_change_dir_depth`, must be a value less than or equal to `512`")  # noqa: E501
        if (self._configuration.client_side_validation and
                smb_notify_on_change_dir_depth is not None and smb_notify_on_change_dir_depth < 1):  # noqa: E501
            raise ValueError("Invalid value for `smb_notify_on_change_dir_depth`, must be a value greater than or equal to `1`")  # noqa: E501

        self._smb_notify_on_change_dir_depth = smb_notify_on_change_dir_depth

    @property
    def is_smb_no_notify_enabled(self):
        """Gets the is_smb_no_notify_enabled of this FileSystemModify.  # noqa: E501

        Indicates whether notifications of changes to a directory file structure are enabled. Values are: * true - Change directory notifications are disabled. * false - Change directory notifications are enabled.   # noqa: E501

        :return: The is_smb_no_notify_enabled of this FileSystemModify.  # noqa: E501
        :rtype: bool
        """
        return self._is_smb_no_notify_enabled

    @is_smb_no_notify_enabled.setter
    def is_smb_no_notify_enabled(self, is_smb_no_notify_enabled):
        """Sets the is_smb_no_notify_enabled of this FileSystemModify.

        Indicates whether notifications of changes to a directory file structure are enabled. Values are: * true - Change directory notifications are disabled. * false - Change directory notifications are enabled.   # noqa: E501

        :param is_smb_no_notify_enabled: The is_smb_no_notify_enabled of this FileSystemModify.  # noqa: E501
        :type: bool
        """

        self._is_smb_no_notify_enabled = is_smb_no_notify_enabled

    @property
    def is_async_m_time_enabled(self):
        """Gets the is_async_m_time_enabled of this FileSystemModify.  # noqa: E501

        Indicates whether asynchronous MTIME is enabled on the file system or protocol snaps that are mounted writeable. Values are: * true - Asynchronous MTIME is enabled on the file system. * false - Asynchronous MTIME is disabled on the file system.   # noqa: E501

        :return: The is_async_m_time_enabled of this FileSystemModify.  # noqa: E501
        :rtype: bool
        """
        return self._is_async_m_time_enabled

    @is_async_m_time_enabled.setter
    def is_async_m_time_enabled(self, is_async_m_time_enabled):
        """Sets the is_async_m_time_enabled of this FileSystemModify.

        Indicates whether asynchronous MTIME is enabled on the file system or protocol snaps that are mounted writeable. Values are: * true - Asynchronous MTIME is enabled on the file system. * false - Asynchronous MTIME is disabled on the file system.   # noqa: E501

        :param is_async_m_time_enabled: The is_async_m_time_enabled of this FileSystemModify.  # noqa: E501
        :type: bool
        """

        self._is_async_m_time_enabled = is_async_m_time_enabled

    @property
    def protection_policy_id(self):
        """Gets the protection_policy_id of this FileSystemModify.  # noqa: E501

        Unique identifier of the protection policy applied to the file system.  # noqa: E501

        :return: The protection_policy_id of this FileSystemModify.  # noqa: E501
        :rtype: str
        """
        return self._protection_policy_id

    @protection_policy_id.setter
    def protection_policy_id(self, protection_policy_id):
        """Sets the protection_policy_id of this FileSystemModify.

        Unique identifier of the protection policy applied to the file system.  # noqa: E501

        :param protection_policy_id: The protection_policy_id of this FileSystemModify.  # noqa: E501
        :type: str
        """

        self._protection_policy_id = protection_policy_id

    @property
    def is_quota_enabled(self):
        """Gets the is_quota_enabled of this FileSystemModify.  # noqa: E501

        Indicates whether quota is enabled. Quotas are not supported for read-only file systems. Default value for the grace period is set to infinite=-1 to match Windows' quota policy Values are: * true - Start tracking usages for all users on a file system or a quota tree, and user quota limits will be enforced. * false - Stop tracking usages for all users on a file system or a quota tree, and user quota limits will not be enforced.   # noqa: E501

        :return: The is_quota_enabled of this FileSystemModify.  # noqa: E501
        :rtype: bool
        """
        return self._is_quota_enabled

    @is_quota_enabled.setter
    def is_quota_enabled(self, is_quota_enabled):
        """Sets the is_quota_enabled of this FileSystemModify.

        Indicates whether quota is enabled. Quotas are not supported for read-only file systems. Default value for the grace period is set to infinite=-1 to match Windows' quota policy Values are: * true - Start tracking usages for all users on a file system or a quota tree, and user quota limits will be enforced. * false - Stop tracking usages for all users on a file system or a quota tree, and user quota limits will not be enforced.   # noqa: E501

        :param is_quota_enabled: The is_quota_enabled of this FileSystemModify.  # noqa: E501
        :type: bool
        """

        self._is_quota_enabled = is_quota_enabled

    @property
    def grace_period(self):
        """Gets the grace_period of this FileSystemModify.  # noqa: E501

        Grace period of soft limits (seconds):  * -1: default: Infinite grace (Windows policy).  *  0: Use system default of 1 week.  * Positive: Grace period after which the soft limit is treated as a hard limit (seconds).   # noqa: E501

        :return: The grace_period of this FileSystemModify.  # noqa: E501
        :rtype: int
        """
        return self._grace_period

    @grace_period.setter
    def grace_period(self, grace_period):
        """Sets the grace_period of this FileSystemModify.

        Grace period of soft limits (seconds):  * -1: default: Infinite grace (Windows policy).  *  0: Use system default of 1 week.  * Positive: Grace period after which the soft limit is treated as a hard limit (seconds).   # noqa: E501

        :param grace_period: The grace_period of this FileSystemModify.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                grace_period is not None and grace_period > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `grace_period`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                grace_period is not None and grace_period < -1):  # noqa: E501
            raise ValueError("Invalid value for `grace_period`, must be a value greater than or equal to `-1`")  # noqa: E501

        self._grace_period = grace_period

    @property
    def default_hard_limit(self):
        """Gets the default_hard_limit of this FileSystemModify.  # noqa: E501

        Default hard limit of user quotas and tree quotas (bytes). The hard limit value is always rounded up to match the file system's physical block size. (0 means 'No limitation'. This value can be used to compute the amount of space consumed without limiting the space).   # noqa: E501

        :return: The default_hard_limit of this FileSystemModify.  # noqa: E501
        :rtype: int
        """
        return self._default_hard_limit

    @default_hard_limit.setter
    def default_hard_limit(self, default_hard_limit):
        """Sets the default_hard_limit of this FileSystemModify.

        Default hard limit of user quotas and tree quotas (bytes). The hard limit value is always rounded up to match the file system's physical block size. (0 means 'No limitation'. This value can be used to compute the amount of space consumed without limiting the space).   # noqa: E501

        :param default_hard_limit: The default_hard_limit of this FileSystemModify.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                default_hard_limit is not None and default_hard_limit > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `default_hard_limit`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                default_hard_limit is not None and default_hard_limit < 0):  # noqa: E501
            raise ValueError("Invalid value for `default_hard_limit`, must be a value greater than or equal to `0`")  # noqa: E501

        self._default_hard_limit = default_hard_limit

    @property
    def default_soft_limit(self):
        """Gets the default_soft_limit of this FileSystemModify.  # noqa: E501

        Default soft limit of user quotas and tree quotas (bytes). Value is always rounded up to match the file system's physical block size. (0 means 'No limitation'.)   # noqa: E501

        :return: The default_soft_limit of this FileSystemModify.  # noqa: E501
        :rtype: int
        """
        return self._default_soft_limit

    @default_soft_limit.setter
    def default_soft_limit(self, default_soft_limit):
        """Sets the default_soft_limit of this FileSystemModify.

        Default soft limit of user quotas and tree quotas (bytes). Value is always rounded up to match the file system's physical block size. (0 means 'No limitation'.)   # noqa: E501

        :param default_soft_limit: The default_soft_limit of this FileSystemModify.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                default_soft_limit is not None and default_soft_limit > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `default_soft_limit`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                default_soft_limit is not None and default_soft_limit < 0):  # noqa: E501
            raise ValueError("Invalid value for `default_soft_limit`, must be a value greater than or equal to `0`")  # noqa: E501

        self._default_soft_limit = default_soft_limit

    @property
    def expiration_timestamp(self):
        """Gets the expiration_timestamp of this FileSystemModify.  # noqa: E501

        Time when the snapshot will expire. Use 1970-01-01T00:00:00.000Z to set expiration timestamp to null.  # noqa: E501

        :return: The expiration_timestamp of this FileSystemModify.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_timestamp

    @expiration_timestamp.setter
    def expiration_timestamp(self, expiration_timestamp):
        """Sets the expiration_timestamp of this FileSystemModify.

        Time when the snapshot will expire. Use 1970-01-01T00:00:00.000Z to set expiration timestamp to null.  # noqa: E501

        :param expiration_timestamp: The expiration_timestamp of this FileSystemModify.  # noqa: E501
        :type: datetime
        """

        self._expiration_timestamp = expiration_timestamp

    @property
    def file_events_publishing_mode(self):
        """Gets the file_events_publishing_mode of this FileSystemModify.  # noqa: E501

         Was added in version 3.0.0.0.  # noqa: E501

        :return: The file_events_publishing_mode of this FileSystemModify.  # noqa: E501
        :rtype: FileEventsPublishingModeEnum
        """
        return self._file_events_publishing_mode

    @file_events_publishing_mode.setter
    def file_events_publishing_mode(self, file_events_publishing_mode):
        """Sets the file_events_publishing_mode of this FileSystemModify.

         Was added in version 3.0.0.0.  # noqa: E501

        :param file_events_publishing_mode: The file_events_publishing_mode of this FileSystemModify.  # noqa: E501
        :type: FileEventsPublishingModeEnum
        """

        self._file_events_publishing_mode = file_events_publishing_mode

    @property
    def flr_attributes(self):
        """Gets the flr_attributes of this FileSystemModify.  # noqa: E501

         Was added in version 3.0.0.0.  # noqa: E501

        :return: The flr_attributes of this FileSystemModify.  # noqa: E501
        :rtype: FlrModify
        """
        return self._flr_attributes

    @flr_attributes.setter
    def flr_attributes(self, flr_attributes):
        """Sets the flr_attributes of this FileSystemModify.

         Was added in version 3.0.0.0.  # noqa: E501

        :param flr_attributes: The flr_attributes of this FileSystemModify.  # noqa: E501
        :type: FlrModify
        """

        self._flr_attributes = flr_attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileSystemModify, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileSystemModify):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FileSystemModify):
            return True

        return self.to_dict() != other.to_dict()
