# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class VolumeGroupModify(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'is_write_order_consistent': 'bool',
        'protection_policy_id': 'str',
        'expiration_timestamp': 'str',
        'is_replication_destination': 'bool',
        'force': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'is_write_order_consistent': 'is_write_order_consistent',
        'protection_policy_id': 'protection_policy_id',
        'expiration_timestamp': 'expiration_timestamp',
        'is_replication_destination': 'is_replication_destination',
        'force': 'force'
    }

    def __init__(self, name=None, description=None, is_write_order_consistent=None, protection_policy_id=None, expiration_timestamp=None, is_replication_destination=None, force=False, _configuration=None):  # noqa: E501
        """VolumeGroupModify - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._description = None
        self._is_write_order_consistent = None
        self._protection_policy_id = None
        self._expiration_timestamp = None
        self._is_replication_destination = None
        self._force = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if is_write_order_consistent is not None:
            self.is_write_order_consistent = is_write_order_consistent
        if protection_policy_id is not None:
            self.protection_policy_id = protection_policy_id
        if expiration_timestamp is not None:
            self.expiration_timestamp = expiration_timestamp
        if is_replication_destination is not None:
            self.is_replication_destination = is_replication_destination
        if force is not None:
            self.force = force

    @property
    def name(self):
        """Gets the name of this VolumeGroupModify.  # noqa: E501

        New name for the volume group. The name should contain no special HTTP characters and no unprintable characters. Although the case of the name provided is reserved, uniqueness check is case-insensitive, so the same name in two different cases is not considered unique.  # noqa: E501

        :return: The name of this VolumeGroupModify.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VolumeGroupModify.

        New name for the volume group. The name should contain no special HTTP characters and no unprintable characters. Although the case of the name provided is reserved, uniqueness check is case-insensitive, so the same name in two different cases is not considered unique.  # noqa: E501

        :param name: The name of this VolumeGroupModify.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 128):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this VolumeGroupModify.  # noqa: E501

        New description for the volume group. The description should not have any unprintable characters. If an empty string is specified, the description will be cleared.  # noqa: E501

        :return: The description of this VolumeGroupModify.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VolumeGroupModify.

        New description for the volume group. The description should not have any unprintable characters. If an empty string is specified, the description will be cleared.  # noqa: E501

        :param description: The description of this VolumeGroupModify.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                description is not None and len(description) > 256):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `256`")  # noqa: E501

        self._description = description

    @property
    def is_write_order_consistent(self):
        """Gets the is_write_order_consistent of this VolumeGroupModify.  # noqa: E501

        A boolean flag to indicate whether snapshot sets of the volume group will be write-order consistent.  This parameter is only valid when modifying a primary or a clone volume group.  # noqa: E501

        :return: The is_write_order_consistent of this VolumeGroupModify.  # noqa: E501
        :rtype: bool
        """
        return self._is_write_order_consistent

    @is_write_order_consistent.setter
    def is_write_order_consistent(self, is_write_order_consistent):
        """Sets the is_write_order_consistent of this VolumeGroupModify.

        A boolean flag to indicate whether snapshot sets of the volume group will be write-order consistent.  This parameter is only valid when modifying a primary or a clone volume group.  # noqa: E501

        :param is_write_order_consistent: The is_write_order_consistent of this VolumeGroupModify.  # noqa: E501
        :type: bool
        """

        self._is_write_order_consistent = is_write_order_consistent

    @property
    def protection_policy_id(self):
        """Gets the protection_policy_id of this VolumeGroupModify.  # noqa: E501

        Unique identifier of the protection policy to assign to a primary or clone volume group.  If an empty string or null is specified, protection policy will be removed from the volume group.  # noqa: E501

        :return: The protection_policy_id of this VolumeGroupModify.  # noqa: E501
        :rtype: str
        """
        return self._protection_policy_id

    @protection_policy_id.setter
    def protection_policy_id(self, protection_policy_id):
        """Sets the protection_policy_id of this VolumeGroupModify.

        Unique identifier of the protection policy to assign to a primary or clone volume group.  If an empty string or null is specified, protection policy will be removed from the volume group.  # noqa: E501

        :param protection_policy_id: The protection_policy_id of this VolumeGroupModify.  # noqa: E501
        :type: str
        """

        self._protection_policy_id = protection_policy_id

    @property
    def expiration_timestamp(self):
        """Gets the expiration_timestamp of this VolumeGroupModify.  # noqa: E501

        Time after which the snapshot set can be auto-purged. This parameter is only valid for a snapshot set. Time must be specified in Zulu time zone. Expiration time cannot be prior to current time.  Use a maximum timestamp value to set an expiration to never expire. If an empty string or null is specified, expiration_timestamp will be cleared for the snapshot set. Valid format is yyyy-MM-dd'T'HH:mm:ssZ or yyyy-MM-dd'T'HH:mm:ss.SSSZ. Was added in version 2.0.0.0.  # noqa: E501

        :return: The expiration_timestamp of this VolumeGroupModify.  # noqa: E501
        :rtype: str
        """
        return self._expiration_timestamp

    @expiration_timestamp.setter
    def expiration_timestamp(self, expiration_timestamp):
        """Sets the expiration_timestamp of this VolumeGroupModify.

        Time after which the snapshot set can be auto-purged. This parameter is only valid for a snapshot set. Time must be specified in Zulu time zone. Expiration time cannot be prior to current time.  Use a maximum timestamp value to set an expiration to never expire. If an empty string or null is specified, expiration_timestamp will be cleared for the snapshot set. Valid format is yyyy-MM-dd'T'HH:mm:ssZ or yyyy-MM-dd'T'HH:mm:ss.SSSZ. Was added in version 2.0.0.0.  # noqa: E501

        :param expiration_timestamp: The expiration_timestamp of this VolumeGroupModify.  # noqa: E501
        :type: str
        """

        self._expiration_timestamp = expiration_timestamp

    @property
    def is_replication_destination(self):
        """Gets the is_replication_destination of this VolumeGroupModify.  # noqa: E501

        New value for is_replication_destination property. is_replication_destination property of all the volumes in the volume group will be modified to the specified value.   Modification of is_replication will not be transactional in nature. If the command only succeeds in modifying the is_replication_destination property of a subset of volumes, is_replication_destination property for the volume group will be set to true.  Modification of this property is idempotent.  This parameter is only valid when modifying a primary or a clone volume group, only when the volume group is no longer the destination of a replication session, and may only be set to false.  # noqa: E501

        :return: The is_replication_destination of this VolumeGroupModify.  # noqa: E501
        :rtype: bool
        """
        return self._is_replication_destination

    @is_replication_destination.setter
    def is_replication_destination(self, is_replication_destination):
        """Sets the is_replication_destination of this VolumeGroupModify.

        New value for is_replication_destination property. is_replication_destination property of all the volumes in the volume group will be modified to the specified value.   Modification of is_replication will not be transactional in nature. If the command only succeeds in modifying the is_replication_destination property of a subset of volumes, is_replication_destination property for the volume group will be set to true.  Modification of this property is idempotent.  This parameter is only valid when modifying a primary or a clone volume group, only when the volume group is no longer the destination of a replication session, and may only be set to false.  # noqa: E501

        :param is_replication_destination: The is_replication_destination of this VolumeGroupModify.  # noqa: E501
        :type: bool
        """

        self._is_replication_destination = is_replication_destination

    @property
    def force(self):
        """Gets the force of this VolumeGroupModify.  # noqa: E501

        Normally a replication destination volume group cannot be modified since it is controlled by replication. However, there can be cases where replication has failed or is no longer active and the replication destination volume group needs to be cleaned up. With the force option, the user will be allowed to remove the protection policy from the replication destination volume group provided that the replication session has never been synchronized. This parameter defaults to false, if not specified.  # noqa: E501

        :return: The force of this VolumeGroupModify.  # noqa: E501
        :rtype: bool
        """
        return self._force

    @force.setter
    def force(self, force):
        """Sets the force of this VolumeGroupModify.

        Normally a replication destination volume group cannot be modified since it is controlled by replication. However, there can be cases where replication has failed or is no longer active and the replication destination volume group needs to be cleaned up. With the force option, the user will be allowed to remove the protection policy from the replication destination volume group provided that the replication session has never been synchronized. This parameter defaults to false, if not specified.  # noqa: E501

        :param force: The force of this VolumeGroupModify.  # noqa: E501
        :type: bool
        """

        self._force = force

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VolumeGroupModify, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VolumeGroupModify):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VolumeGroupModify):
            return True

        return self.to_dict() != other.to_dict()
