# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class X509CertificateCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'X509CertificateUsageTypeEnum',
        'service': 'X509CertificateServiceEnum',
        'scope': 'str',
        'certificate': 'str',
        'private_key': 'str',
        'passphrase': 'str',
        'is_current': 'bool'
    }

    attribute_map = {
        'type': 'type',
        'service': 'service',
        'scope': 'scope',
        'certificate': 'certificate',
        'private_key': 'private_key',
        'passphrase': 'passphrase',
        'is_current': 'is_current'
    }

    def __init__(self, type=None, service=None, scope=None, certificate=None, private_key=None, passphrase=None, is_current=None, _configuration=None):  # noqa: E501
        """X509CertificateCreate - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._type = None
        self._service = None
        self._scope = None
        self._certificate = None
        self._private_key = None
        self._passphrase = None
        self._is_current = None
        self.discriminator = None

        self.type = type
        self.service = service
        if scope is not None:
            self.scope = scope
        self.certificate = certificate
        if private_key is not None:
            self.private_key = private_key
        if passphrase is not None:
            self.passphrase = passphrase
        if is_current is not None:
            self.is_current = is_current

    @property
    def type(self):
        """Gets the type of this X509CertificateCreate.  # noqa: E501


        :return: The type of this X509CertificateCreate.  # noqa: E501
        :rtype: X509CertificateUsageTypeEnum
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this X509CertificateCreate.


        :param type: The type of this X509CertificateCreate.  # noqa: E501
        :type: X509CertificateUsageTypeEnum
        """
        if self._configuration.client_side_validation and type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def service(self):
        """Gets the service of this X509CertificateCreate.  # noqa: E501


        :return: The service of this X509CertificateCreate.  # noqa: E501
        :rtype: X509CertificateServiceEnum
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this X509CertificateCreate.


        :param service: The service of this X509CertificateCreate.  # noqa: E501
        :type: X509CertificateServiceEnum
        """
        if self._configuration.client_side_validation and service is None:
            raise ValueError("Invalid value for `service`, must not be `None`")  # noqa: E501

        self._service = service

    @property
    def scope(self):
        """Gets the scope of this X509CertificateCreate.  # noqa: E501

        Scope defines a subset of certificates belonging to one Service. Scope has different meanings from different Services and types. For example, in Replication_HTTP, CA type certificates will use scope to indicate the origin of these certificates. Service, type and scope mapping are listed as below. - Certificate with Service Management_HTTP and Type of Server, Scope value can be can only be 'External'. - Certificate with Service Replication_HTTP and Type of Client, Scope value can be null(unused and optional). - Certificate with Service Replication_HTTP and Type of CA, Scope value has to be the serial number of remote cluster. - Certificate with Service VASA_HTTP and Type of Server, Scope value can be null(unused and optional). - Certificate with Service VASA_HTTP and Type of CA, Scope value can be null(unused and optional). - Certificate with Service Import_HTTP and Type of CA, Scope value can be null(unused and optional). - Certificate with Service LDAP_HTTP and Type of CA, Scope value is LDAP Domain Name. - Certificate with Service KMIP_HTTP and Type of Client, Scope value can be null(unused and optional). - Certificate with Service Syslog_HTTP and Type of Client, Scope value can be null(unused and optional)   # noqa: E501

        :return: The scope of this X509CertificateCreate.  # noqa: E501
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this X509CertificateCreate.

        Scope defines a subset of certificates belonging to one Service. Scope has different meanings from different Services and types. For example, in Replication_HTTP, CA type certificates will use scope to indicate the origin of these certificates. Service, type and scope mapping are listed as below. - Certificate with Service Management_HTTP and Type of Server, Scope value can be can only be 'External'. - Certificate with Service Replication_HTTP and Type of Client, Scope value can be null(unused and optional). - Certificate with Service Replication_HTTP and Type of CA, Scope value has to be the serial number of remote cluster. - Certificate with Service VASA_HTTP and Type of Server, Scope value can be null(unused and optional). - Certificate with Service VASA_HTTP and Type of CA, Scope value can be null(unused and optional). - Certificate with Service Import_HTTP and Type of CA, Scope value can be null(unused and optional). - Certificate with Service LDAP_HTTP and Type of CA, Scope value is LDAP Domain Name. - Certificate with Service KMIP_HTTP and Type of Client, Scope value can be null(unused and optional). - Certificate with Service Syslog_HTTP and Type of Client, Scope value can be null(unused and optional)   # noqa: E501

        :param scope: The scope of this X509CertificateCreate.  # noqa: E501
        :type: str
        """

        self._scope = scope

    @property
    def certificate(self):
        """Gets the certificate of this X509CertificateCreate.  # noqa: E501

        Concatenated PEM encoded (including header, footer and line break) X509 certificate string from end-entity certificate to root certificate. End-entity certificate has to be put at the top and the sequence should be maintained as the certificate chain from end-entity certificate to the root certificate.  # noqa: E501

        :return: The certificate of this X509CertificateCreate.  # noqa: E501
        :rtype: str
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this X509CertificateCreate.

        Concatenated PEM encoded (including header, footer and line break) X509 certificate string from end-entity certificate to root certificate. End-entity certificate has to be put at the top and the sequence should be maintained as the certificate chain from end-entity certificate to the root certificate.  # noqa: E501

        :param certificate: The certificate of this X509CertificateCreate.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and certificate is None:
            raise ValueError("Invalid value for `certificate`, must not be `None`")  # noqa: E501

        self._certificate = certificate

    @property
    def private_key(self):
        """Gets the private_key of this X509CertificateCreate.  # noqa: E501

        PEM encoded (including header, footer and line break) private key following encrypted PKCS8.  # noqa: E501

        :return: The private_key of this X509CertificateCreate.  # noqa: E501
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this X509CertificateCreate.

        PEM encoded (including header, footer and line break) private key following encrypted PKCS8.  # noqa: E501

        :param private_key: The private_key of this X509CertificateCreate.  # noqa: E501
        :type: str
        """

        self._private_key = private_key

    @property
    def passphrase(self):
        """Gets the passphrase of this X509CertificateCreate.  # noqa: E501

        Passphrase used to encrypt private key.  # noqa: E501

        :return: The passphrase of this X509CertificateCreate.  # noqa: E501
        :rtype: str
        """
        return self._passphrase

    @passphrase.setter
    def passphrase(self, passphrase):
        """Sets the passphrase of this X509CertificateCreate.

        Passphrase used to encrypt private key.  # noqa: E501

        :param passphrase: The passphrase of this X509CertificateCreate.  # noqa: E501
        :type: str
        """

        self._passphrase = passphrase

    @property
    def is_current(self):
        """Gets the is_current of this X509CertificateCreate.  # noqa: E501

        Indicates whether this is the current X509 certificate to be used by the service or this X509 certificate will be used in the future. When is_current is false for a X509 certificate, this X509 certificate will not be picked up by the service. Potential usage of this attribute is to prepare for the certificate roll-over/rotation.  # noqa: E501

        :return: The is_current of this X509CertificateCreate.  # noqa: E501
        :rtype: bool
        """
        return self._is_current

    @is_current.setter
    def is_current(self, is_current):
        """Sets the is_current of this X509CertificateCreate.

        Indicates whether this is the current X509 certificate to be used by the service or this X509 certificate will be used in the future. When is_current is false for a X509 certificate, this X509 certificate will not be picked up by the service. Potential usage of this attribute is to prepare for the certificate roll-over/rotation.  # noqa: E501

        :param is_current: The is_current of this X509CertificateCreate.  # noqa: E501
        :type: bool
        """

        self._is_current = is_current

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(X509CertificateCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, X509CertificateCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, X509CertificateCreate):
            return True

        return self.to_dict() != other.to_dict()
