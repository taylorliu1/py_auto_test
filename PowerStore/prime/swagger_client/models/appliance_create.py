# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class ApplianceCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'link_local_address': 'str',
        'name': 'str',
        'ignore_network_warnings': 'bool',
        'drive_failure_tolerance_level': 'DriveFailureToleranceLevelEnum'
    }

    attribute_map = {
        'link_local_address': 'link_local_address',
        'name': 'name',
        'ignore_network_warnings': 'ignore_network_warnings',
        'drive_failure_tolerance_level': 'drive_failure_tolerance_level'
    }

    def __init__(self, link_local_address=None, name=None, ignore_network_warnings=False, drive_failure_tolerance_level=None, _configuration=None):  # noqa: E501
        """ApplianceCreate - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._link_local_address = None
        self._name = None
        self._ignore_network_warnings = None
        self._drive_failure_tolerance_level = None
        self.discriminator = None

        self.link_local_address = link_local_address
        if name is not None:
            self.name = name
        if ignore_network_warnings is not None:
            self.ignore_network_warnings = ignore_network_warnings
        if drive_failure_tolerance_level is not None:
            self.drive_failure_tolerance_level = drive_failure_tolerance_level

    @property
    def link_local_address(self):
        """Gets the link_local_address of this ApplianceCreate.  # noqa: E501

        The link local address is a dynamically set local IPv4 address. It is unique to this appliance and is set by Zeroconf. Use the PowerStore Discovery Tool to get the link local address.   # noqa: E501

        :return: The link_local_address of this ApplianceCreate.  # noqa: E501
        :rtype: str
        """
        return self._link_local_address

    @link_local_address.setter
    def link_local_address(self, link_local_address):
        """Sets the link_local_address of this ApplianceCreate.

        The link local address is a dynamically set local IPv4 address. It is unique to this appliance and is set by Zeroconf. Use the PowerStore Discovery Tool to get the link local address.   # noqa: E501

        :param link_local_address: The link_local_address of this ApplianceCreate.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and link_local_address is None:
            raise ValueError("Invalid value for `link_local_address`, must not be `None`")  # noqa: E501

        self._link_local_address = link_local_address

    @property
    def name(self):
        """Gets the name of this ApplianceCreate.  # noqa: E501

        The name of the new appliance. By default, the name is the cluster name followed by \"-appliance-\" and a unique number. The maximum size is 64 characters.   # noqa: E501

        :return: The name of this ApplianceCreate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApplianceCreate.

        The name of the new appliance. By default, the name is the cluster name followed by \"-appliance-\" and a unique number. The maximum size is 64 characters.   # noqa: E501

        :param name: The name of this ApplianceCreate.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 64):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def ignore_network_warnings(self):
        """Gets the ignore_network_warnings of this ApplianceCreate.  # noqa: E501

        Set to true to ignore warnings about unreachable external network services discovered while adding an appliance. This can be useful for configuring a system before delivery into the intended deployment environment. The default is false, and these warnings will cause add appliance to fail.   # noqa: E501

        :return: The ignore_network_warnings of this ApplianceCreate.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_network_warnings

    @ignore_network_warnings.setter
    def ignore_network_warnings(self, ignore_network_warnings):
        """Sets the ignore_network_warnings of this ApplianceCreate.

        Set to true to ignore warnings about unreachable external network services discovered while adding an appliance. This can be useful for configuring a system before delivery into the intended deployment environment. The default is false, and these warnings will cause add appliance to fail.   # noqa: E501

        :param ignore_network_warnings: The ignore_network_warnings of this ApplianceCreate.  # noqa: E501
        :type: bool
        """

        self._ignore_network_warnings = ignore_network_warnings

    @property
    def drive_failure_tolerance_level(self):
        """Gets the drive_failure_tolerance_level of this ApplianceCreate.  # noqa: E501


        :return: The drive_failure_tolerance_level of this ApplianceCreate.  # noqa: E501
        :rtype: DriveFailureToleranceLevelEnum
        """
        return self._drive_failure_tolerance_level

    @drive_failure_tolerance_level.setter
    def drive_failure_tolerance_level(self, drive_failure_tolerance_level):
        """Sets the drive_failure_tolerance_level of this ApplianceCreate.


        :param drive_failure_tolerance_level: The drive_failure_tolerance_level of this ApplianceCreate.  # noqa: E501
        :type: DriveFailureToleranceLevelEnum
        """

        self._drive_failure_tolerance_level = drive_failure_tolerance_level

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplianceCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplianceCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApplianceCreate):
            return True

        return self.to_dict() != other.to_dict()
