# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class ImportPsgroupScheduleInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'type': 'ImportPsgroupScheduleTypeEnum',
        'active_date': 'int',
        'inactive_date': 'int',
        'repetition_interval': 'int',
        'start_time': 'int',
        'end_time': 'int',
        'frequency': 'int',
        'status': 'ImportPsgroupScheduleStatusEnum',
        'keep_count': 'int',
        'type_l10n': 'str',
        'status_l10n': 'str'
    }

    attribute_map = {
        'name': 'name',
        'type': 'type',
        'active_date': 'active_date',
        'inactive_date': 'inactive_date',
        'repetition_interval': 'repetition_interval',
        'start_time': 'start_time',
        'end_time': 'end_time',
        'frequency': 'frequency',
        'status': 'status',
        'keep_count': 'keep_count',
        'type_l10n': 'type_l10n',
        'status_l10n': 'status_l10n'
    }

    def __init__(self, name=None, type=None, active_date=None, inactive_date=None, repetition_interval=None, start_time=None, end_time=None, frequency=None, status=None, keep_count=None, type_l10n=None, status_l10n=None, _configuration=None):  # noqa: E501
        """ImportPsgroupScheduleInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._type = None
        self._active_date = None
        self._inactive_date = None
        self._repetition_interval = None
        self._start_time = None
        self._end_time = None
        self._frequency = None
        self._status = None
        self._keep_count = None
        self._type_l10n = None
        self._status_l10n = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if active_date is not None:
            self.active_date = active_date
        if inactive_date is not None:
            self.inactive_date = inactive_date
        if repetition_interval is not None:
            self.repetition_interval = repetition_interval
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if frequency is not None:
            self.frequency = frequency
        if status is not None:
            self.status = status
        if keep_count is not None:
            self.keep_count = keep_count
        if type_l10n is not None:
            self.type_l10n = type_l10n
        if status_l10n is not None:
            self.status_l10n = status_l10n

    @property
    def name(self):
        """Gets the name of this ImportPsgroupScheduleInstance.  # noqa: E501

        Name of the snapshot schedule.  # noqa: E501

        :return: The name of this ImportPsgroupScheduleInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ImportPsgroupScheduleInstance.

        Name of the snapshot schedule.  # noqa: E501

        :param name: The name of this ImportPsgroupScheduleInstance.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this ImportPsgroupScheduleInstance.  # noqa: E501


        :return: The type of this ImportPsgroupScheduleInstance.  # noqa: E501
        :rtype: ImportPsgroupScheduleTypeEnum
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ImportPsgroupScheduleInstance.


        :param type: The type of this ImportPsgroupScheduleInstance.  # noqa: E501
        :type: ImportPsgroupScheduleTypeEnum
        """

        self._type = type

    @property
    def active_date(self):
        """Gets the active_date of this ImportPsgroupScheduleInstance.  # noqa: E501

        Number of days for which the snapshot schedule has been active.  # noqa: E501

        :return: The active_date of this ImportPsgroupScheduleInstance.  # noqa: E501
        :rtype: int
        """
        return self._active_date

    @active_date.setter
    def active_date(self, active_date):
        """Sets the active_date of this ImportPsgroupScheduleInstance.

        Number of days for which the snapshot schedule has been active.  # noqa: E501

        :param active_date: The active_date of this ImportPsgroupScheduleInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                active_date is not None and active_date > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `active_date`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                active_date is not None and active_date < 0):  # noqa: E501
            raise ValueError("Invalid value for `active_date`, must be a value greater than or equal to `0`")  # noqa: E501

        self._active_date = active_date

    @property
    def inactive_date(self):
        """Gets the inactive_date of this ImportPsgroupScheduleInstance.  # noqa: E501

        Number of days for which the snapshot schedule has been inactive.  # noqa: E501

        :return: The inactive_date of this ImportPsgroupScheduleInstance.  # noqa: E501
        :rtype: int
        """
        return self._inactive_date

    @inactive_date.setter
    def inactive_date(self, inactive_date):
        """Sets the inactive_date of this ImportPsgroupScheduleInstance.

        Number of days for which the snapshot schedule has been inactive.  # noqa: E501

        :param inactive_date: The inactive_date of this ImportPsgroupScheduleInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                inactive_date is not None and inactive_date > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `inactive_date`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                inactive_date is not None and inactive_date < 0):  # noqa: E501
            raise ValueError("Invalid value for `inactive_date`, must be a value greater than or equal to `0`")  # noqa: E501

        self._inactive_date = inactive_date

    @property
    def repetition_interval(self):
        """Gets the repetition_interval of this ImportPsgroupScheduleInstance.  # noqa: E501

        Repeat interval of the snapshot schedule, in days. The value is 1 for the schedule frequencies Once and Hourly. It can be greater than 1 for the schedule frequencies Daily and Weekly.  # noqa: E501

        :return: The repetition_interval of this ImportPsgroupScheduleInstance.  # noqa: E501
        :rtype: int
        """
        return self._repetition_interval

    @repetition_interval.setter
    def repetition_interval(self, repetition_interval):
        """Sets the repetition_interval of this ImportPsgroupScheduleInstance.

        Repeat interval of the snapshot schedule, in days. The value is 1 for the schedule frequencies Once and Hourly. It can be greater than 1 for the schedule frequencies Daily and Weekly.  # noqa: E501

        :param repetition_interval: The repetition_interval of this ImportPsgroupScheduleInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                repetition_interval is not None and repetition_interval > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `repetition_interval`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                repetition_interval is not None and repetition_interval < 0):  # noqa: E501
            raise ValueError("Invalid value for `repetition_interval`, must be a value greater than or equal to `0`")  # noqa: E501

        self._repetition_interval = repetition_interval

    @property
    def start_time(self):
        """Gets the start_time of this ImportPsgroupScheduleInstance.  # noqa: E501

        Time when snapshot creation begins each day, in minutes.  # noqa: E501

        :return: The start_time of this ImportPsgroupScheduleInstance.  # noqa: E501
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ImportPsgroupScheduleInstance.

        Time when snapshot creation begins each day, in minutes.  # noqa: E501

        :param start_time: The start_time of this ImportPsgroupScheduleInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                start_time is not None and start_time > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `start_time`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                start_time is not None and start_time < 0):  # noqa: E501
            raise ValueError("Invalid value for `start_time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this ImportPsgroupScheduleInstance.  # noqa: E501

        Time when snapshot creation ends each day, in minutes.  # noqa: E501

        :return: The end_time of this ImportPsgroupScheduleInstance.  # noqa: E501
        :rtype: int
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this ImportPsgroupScheduleInstance.

        Time when snapshot creation ends each day, in minutes.  # noqa: E501

        :param end_time: The end_time of this ImportPsgroupScheduleInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                end_time is not None and end_time > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `end_time`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                end_time is not None and end_time < 0):  # noqa: E501
            raise ValueError("Invalid value for `end_time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._end_time = end_time

    @property
    def frequency(self):
        """Gets the frequency of this ImportPsgroupScheduleInstance.  # noqa: E501

        Frequency at which snapshots are created, in minutes.  # noqa: E501

        :return: The frequency of this ImportPsgroupScheduleInstance.  # noqa: E501
        :rtype: int
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this ImportPsgroupScheduleInstance.

        Frequency at which snapshots are created, in minutes.  # noqa: E501

        :param frequency: The frequency of this ImportPsgroupScheduleInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                frequency is not None and frequency > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `frequency`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                frequency is not None and frequency < 0):  # noqa: E501
            raise ValueError("Invalid value for `frequency`, must be a value greater than or equal to `0`")  # noqa: E501

        self._frequency = frequency

    @property
    def status(self):
        """Gets the status of this ImportPsgroupScheduleInstance.  # noqa: E501


        :return: The status of this ImportPsgroupScheduleInstance.  # noqa: E501
        :rtype: ImportPsgroupScheduleStatusEnum
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ImportPsgroupScheduleInstance.


        :param status: The status of this ImportPsgroupScheduleInstance.  # noqa: E501
        :type: ImportPsgroupScheduleStatusEnum
        """

        self._status = status

    @property
    def keep_count(self):
        """Gets the keep_count of this ImportPsgroupScheduleInstance.  # noqa: E501

        Number of snapshots to retain.  # noqa: E501

        :return: The keep_count of this ImportPsgroupScheduleInstance.  # noqa: E501
        :rtype: int
        """
        return self._keep_count

    @keep_count.setter
    def keep_count(self, keep_count):
        """Sets the keep_count of this ImportPsgroupScheduleInstance.

        Number of snapshots to retain.  # noqa: E501

        :param keep_count: The keep_count of this ImportPsgroupScheduleInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                keep_count is not None and keep_count > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `keep_count`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                keep_count is not None and keep_count < 0):  # noqa: E501
            raise ValueError("Invalid value for `keep_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._keep_count = keep_count

    @property
    def type_l10n(self):
        """Gets the type_l10n of this ImportPsgroupScheduleInstance.  # noqa: E501

        Localized message string corresponding to type  # noqa: E501

        :return: The type_l10n of this ImportPsgroupScheduleInstance.  # noqa: E501
        :rtype: str
        """
        return self._type_l10n

    @type_l10n.setter
    def type_l10n(self, type_l10n):
        """Sets the type_l10n of this ImportPsgroupScheduleInstance.

        Localized message string corresponding to type  # noqa: E501

        :param type_l10n: The type_l10n of this ImportPsgroupScheduleInstance.  # noqa: E501
        :type: str
        """

        self._type_l10n = type_l10n

    @property
    def status_l10n(self):
        """Gets the status_l10n of this ImportPsgroupScheduleInstance.  # noqa: E501

        Localized message string corresponding to status  # noqa: E501

        :return: The status_l10n of this ImportPsgroupScheduleInstance.  # noqa: E501
        :rtype: str
        """
        return self._status_l10n

    @status_l10n.setter
    def status_l10n(self, status_l10n):
        """Sets the status_l10n of this ImportPsgroupScheduleInstance.

        Localized message string corresponding to status  # noqa: E501

        :param status_l10n: The status_l10n of this ImportPsgroupScheduleInstance.  # noqa: E501
        :type: str
        """

        self._status_l10n = status_l10n

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImportPsgroupScheduleInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportPsgroupScheduleInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImportPsgroupScheduleInstance):
            return True

        return self.to_dict() != other.to_dict()
