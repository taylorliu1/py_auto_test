# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class StorageContainerCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'quota': 'int',
        'storage_protocol': 'StorageContainerStorageProtocolEnum',
        'high_water_mark': 'int',
        'mount': 'bool',
        'datastore_name': 'str',
        'vsphere_host_ids': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'quota': 'quota',
        'storage_protocol': 'storage_protocol',
        'high_water_mark': 'high_water_mark',
        'mount': 'mount',
        'datastore_name': 'datastore_name',
        'vsphere_host_ids': 'vsphere_host_ids'
    }

    def __init__(self, name=None, quota=0, storage_protocol=None, high_water_mark=None, mount=None, datastore_name=None, vsphere_host_ids=None, _configuration=None):  # noqa: E501
        """StorageContainerCreate - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._quota = None
        self._storage_protocol = None
        self._high_water_mark = None
        self._mount = None
        self._datastore_name = None
        self._vsphere_host_ids = None
        self.discriminator = None

        self.name = name
        if quota is not None:
            self.quota = quota
        if storage_protocol is not None:
            self.storage_protocol = storage_protocol
        if high_water_mark is not None:
            self.high_water_mark = high_water_mark
        if mount is not None:
            self.mount = mount
        if datastore_name is not None:
            self.datastore_name = datastore_name
        if vsphere_host_ids is not None:
            self.vsphere_host_ids = vsphere_host_ids

    @property
    def name(self):
        """Gets the name of this StorageContainerCreate.  # noqa: E501

        Name for the storage container that is unique across all storage containers in the cluster. The name must be between 1 and 64 UTF-8 characters (inclusive), and not more than 127 bytes. Name could not contain characters '/', '\\', '%', '“'.  # noqa: E501

        :return: The name of this StorageContainerCreate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StorageContainerCreate.

        Name for the storage container that is unique across all storage containers in the cluster. The name must be between 1 and 64 UTF-8 characters (inclusive), and not more than 127 bytes. Name could not contain characters '/', '\\', '%', '“'.  # noqa: E501

        :param name: The name of this StorageContainerCreate.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 64):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def quota(self):
        """Gets the quota of this StorageContainerCreate.  # noqa: E501

        The number of bytes that can be provisioned against this storage container. This must be a value greater than 10Gb and the default is 0 which means no limit.  # noqa: E501

        :return: The quota of this StorageContainerCreate.  # noqa: E501
        :rtype: int
        """
        return self._quota

    @quota.setter
    def quota(self, quota):
        """Sets the quota of this StorageContainerCreate.

        The number of bytes that can be provisioned against this storage container. This must be a value greater than 10Gb and the default is 0 which means no limit.  # noqa: E501

        :param quota: The quota of this StorageContainerCreate.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                quota is not None and quota > 4611686018427388000):  # noqa: E501
            raise ValueError("Invalid value for `quota`, must be a value less than or equal to `4611686018427388000`")  # noqa: E501
        if (self._configuration.client_side_validation and
                quota is not None and quota < 0):  # noqa: E501
            raise ValueError("Invalid value for `quota`, must be a value greater than or equal to `0`")  # noqa: E501

        self._quota = quota

    @property
    def storage_protocol(self):
        """Gets the storage_protocol of this StorageContainerCreate.  # noqa: E501

         Was added in version 3.0.0.0.  # noqa: E501

        :return: The storage_protocol of this StorageContainerCreate.  # noqa: E501
        :rtype: StorageContainerStorageProtocolEnum
        """
        return self._storage_protocol

    @storage_protocol.setter
    def storage_protocol(self, storage_protocol):
        """Sets the storage_protocol of this StorageContainerCreate.

         Was added in version 3.0.0.0.  # noqa: E501

        :param storage_protocol: The storage_protocol of this StorageContainerCreate.  # noqa: E501
        :type: StorageContainerStorageProtocolEnum
        """

        self._storage_protocol = storage_protocol

    @property
    def high_water_mark(self):
        """Gets the high_water_mark of this StorageContainerCreate.  # noqa: E501

        This is the percentage of the quota that can be consumed before an alert is raised. Values between 50-100 (inclusive) are allowed. Was added in version 3.0.0.0.  # noqa: E501

        :return: The high_water_mark of this StorageContainerCreate.  # noqa: E501
        :rtype: int
        """
        return self._high_water_mark

    @high_water_mark.setter
    def high_water_mark(self, high_water_mark):
        """Sets the high_water_mark of this StorageContainerCreate.

        This is the percentage of the quota that can be consumed before an alert is raised. Values between 50-100 (inclusive) are allowed. Was added in version 3.0.0.0.  # noqa: E501

        :param high_water_mark: The high_water_mark of this StorageContainerCreate.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                high_water_mark is not None and high_water_mark > 100):  # noqa: E501
            raise ValueError("Invalid value for `high_water_mark`, must be a value less than or equal to `100`")  # noqa: E501
        if (self._configuration.client_side_validation and
                high_water_mark is not None and high_water_mark < 50):  # noqa: E501
            raise ValueError("Invalid value for `high_water_mark`, must be a value greater than or equal to `50`")  # noqa: E501

        self._high_water_mark = high_water_mark

    @property
    def mount(self):
        """Gets the mount of this StorageContainerCreate.  # noqa: E501

        If specified, performs mount a storage container in vCenter operation as part of create operation. Was added in version 3.0.0.0.  # noqa: E501

        :return: The mount of this StorageContainerCreate.  # noqa: E501
        :rtype: bool
        """
        return self._mount

    @mount.setter
    def mount(self, mount):
        """Sets the mount of this StorageContainerCreate.

        If specified, performs mount a storage container in vCenter operation as part of create operation. Was added in version 3.0.0.0.  # noqa: E501

        :param mount: The mount of this StorageContainerCreate.  # noqa: E501
        :type: bool
        """

        self._mount = mount

    @property
    def datastore_name(self):
        """Gets the datastore_name of this StorageContainerCreate.  # noqa: E501

        This will be the VVol datastore name in vCenter when it is mounted. If not specified, the name of a storage container is used. datastore_name could not contain characters '/', '\\', '%', '“'. Was added in version 3.0.0.0.  # noqa: E501

        :return: The datastore_name of this StorageContainerCreate.  # noqa: E501
        :rtype: str
        """
        return self._datastore_name

    @datastore_name.setter
    def datastore_name(self, datastore_name):
        """Sets the datastore_name of this StorageContainerCreate.

        This will be the VVol datastore name in vCenter when it is mounted. If not specified, the name of a storage container is used. datastore_name could not contain characters '/', '\\', '%', '“'. Was added in version 3.0.0.0.  # noqa: E501

        :param datastore_name: The datastore_name of this StorageContainerCreate.  # noqa: E501
        :type: str
        """

        self._datastore_name = datastore_name

    @property
    def vsphere_host_ids(self):
        """Gets the vsphere_host_ids of this StorageContainerCreate.  # noqa: E501

        Unique identifiers of the vsphere_host instances used to mount VVol datastore in vCenter. Parameter is required for mounting storage container in Power Store case, if not specified for Power Store X case, Power Store X cluster hosts are used.  Was added in version 3.0.0.0.  # noqa: E501

        :return: The vsphere_host_ids of this StorageContainerCreate.  # noqa: E501
        :rtype: list[str]
        """
        return self._vsphere_host_ids

    @vsphere_host_ids.setter
    def vsphere_host_ids(self, vsphere_host_ids):
        """Sets the vsphere_host_ids of this StorageContainerCreate.

        Unique identifiers of the vsphere_host instances used to mount VVol datastore in vCenter. Parameter is required for mounting storage container in Power Store case, if not specified for Power Store X case, Power Store X cluster hosts are used.  Was added in version 3.0.0.0.  # noqa: E501

        :param vsphere_host_ids: The vsphere_host_ids of this StorageContainerCreate.  # noqa: E501
        :type: list[str]
        """

        self._vsphere_host_ids = vsphere_host_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StorageContainerCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageContainerCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StorageContainerCreate):
            return True

        return self.to_dict() != other.to_dict()
