# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class ImportVmaxVolumeInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'wwn': 'str',
        'name': 'str',
        'size': 'int',
        'state': 'VmaxVolumeStateEnum',
        'is_read_only': 'bool',
        'is_snap_vx_target': 'bool',
        'importable_criteria': 'VolumeImportableCriteriaEnum',
        'import_vmax_id': 'str',
        'import_vmax_storage_group_id': 'str',
        'is_replication_destination': 'bool',
        'block_size': 'VolumeBlockSizeEnum',
        'state_l10n': 'str',
        'importable_criteria_l10n': 'str',
        'block_size_l10n': 'str',
        'import_vmax': 'ImportVmaxInstance',
        'import_vmax_storage_group': 'ImportVmaxStorageGroupInstance'
    }

    attribute_map = {
        'id': 'id',
        'wwn': 'wwn',
        'name': 'name',
        'size': 'size',
        'state': 'state',
        'is_read_only': 'is_read_only',
        'is_snap_vx_target': 'is_snap_vx_target',
        'importable_criteria': 'importable_criteria',
        'import_vmax_id': 'import_vmax_id',
        'import_vmax_storage_group_id': 'import_vmax_storage_group_id',
        'is_replication_destination': 'is_replication_destination',
        'block_size': 'block_size',
        'state_l10n': 'state_l10n',
        'importable_criteria_l10n': 'importable_criteria_l10n',
        'block_size_l10n': 'block_size_l10n',
        'import_vmax': 'import_vmax',
        'import_vmax_storage_group': 'import_vmax_storage_group'
    }

    def __init__(self, id=None, wwn=None, name=None, size=None, state=None, is_read_only=None, is_snap_vx_target=None, importable_criteria=None, import_vmax_id=None, import_vmax_storage_group_id=None, is_replication_destination=None, block_size=None, state_l10n=None, importable_criteria_l10n=None, block_size_l10n=None, import_vmax=None, import_vmax_storage_group=None, _configuration=None):  # noqa: E501
        """ImportVmaxVolumeInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._wwn = None
        self._name = None
        self._size = None
        self._state = None
        self._is_read_only = None
        self._is_snap_vx_target = None
        self._importable_criteria = None
        self._import_vmax_id = None
        self._import_vmax_storage_group_id = None
        self._is_replication_destination = None
        self._block_size = None
        self._state_l10n = None
        self._importable_criteria_l10n = None
        self._block_size_l10n = None
        self._import_vmax = None
        self._import_vmax_storage_group = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if wwn is not None:
            self.wwn = wwn
        if name is not None:
            self.name = name
        if size is not None:
            self.size = size
        if state is not None:
            self.state = state
        if is_read_only is not None:
            self.is_read_only = is_read_only
        if is_snap_vx_target is not None:
            self.is_snap_vx_target = is_snap_vx_target
        if importable_criteria is not None:
            self.importable_criteria = importable_criteria
        if import_vmax_id is not None:
            self.import_vmax_id = import_vmax_id
        if import_vmax_storage_group_id is not None:
            self.import_vmax_storage_group_id = import_vmax_storage_group_id
        if is_replication_destination is not None:
            self.is_replication_destination = is_replication_destination
        if block_size is not None:
            self.block_size = block_size
        if state_l10n is not None:
            self.state_l10n = state_l10n
        if importable_criteria_l10n is not None:
            self.importable_criteria_l10n = importable_criteria_l10n
        if block_size_l10n is not None:
            self.block_size_l10n = block_size_l10n
        if import_vmax is not None:
            self.import_vmax = import_vmax
        if import_vmax_storage_group is not None:
            self.import_vmax_storage_group = import_vmax_storage_group

    @property
    def id(self):
        """Gets the id of this ImportVmaxVolumeInstance.  # noqa: E501

        Unique identifier of the VMAX volume.  # noqa: E501

        :return: The id of this ImportVmaxVolumeInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ImportVmaxVolumeInstance.

        Unique identifier of the VMAX volume.  # noqa: E501

        :param id: The id of this ImportVmaxVolumeInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def wwn(self):
        """Gets the wwn of this ImportVmaxVolumeInstance.  # noqa: E501

        World Wide Name (WWN) of the VMAX volume.  # noqa: E501

        :return: The wwn of this ImportVmaxVolumeInstance.  # noqa: E501
        :rtype: str
        """
        return self._wwn

    @wwn.setter
    def wwn(self, wwn):
        """Sets the wwn of this ImportVmaxVolumeInstance.

        World Wide Name (WWN) of the VMAX volume.  # noqa: E501

        :param wwn: The wwn of this ImportVmaxVolumeInstance.  # noqa: E501
        :type: str
        """

        self._wwn = wwn

    @property
    def name(self):
        """Gets the name of this ImportVmaxVolumeInstance.  # noqa: E501

        Name of the VMAX volume.  This property supports case-insensitive filtering.  # noqa: E501

        :return: The name of this ImportVmaxVolumeInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ImportVmaxVolumeInstance.

        Name of the VMAX volume.  This property supports case-insensitive filtering.  # noqa: E501

        :param name: The name of this ImportVmaxVolumeInstance.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def size(self):
        """Gets the size of this ImportVmaxVolumeInstance.  # noqa: E501

        Size of the VMAX volume, in bytes.  # noqa: E501

        :return: The size of this ImportVmaxVolumeInstance.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ImportVmaxVolumeInstance.

        Size of the VMAX volume, in bytes.  # noqa: E501

        :param size: The size of this ImportVmaxVolumeInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                size is not None and size > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `size`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                size is not None and size < 0):  # noqa: E501
            raise ValueError("Invalid value for `size`, must be a value greater than or equal to `0`")  # noqa: E501

        self._size = size

    @property
    def state(self):
        """Gets the state of this ImportVmaxVolumeInstance.  # noqa: E501


        :return: The state of this ImportVmaxVolumeInstance.  # noqa: E501
        :rtype: VmaxVolumeStateEnum
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ImportVmaxVolumeInstance.


        :param state: The state of this ImportVmaxVolumeInstance.  # noqa: E501
        :type: VmaxVolumeStateEnum
        """

        self._state = state

    @property
    def is_read_only(self):
        """Gets the is_read_only of this ImportVmaxVolumeInstance.  # noqa: E501

        Indicates whether the VMAX volume is a read only volume.  # noqa: E501

        :return: The is_read_only of this ImportVmaxVolumeInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_read_only

    @is_read_only.setter
    def is_read_only(self, is_read_only):
        """Sets the is_read_only of this ImportVmaxVolumeInstance.

        Indicates whether the VMAX volume is a read only volume.  # noqa: E501

        :param is_read_only: The is_read_only of this ImportVmaxVolumeInstance.  # noqa: E501
        :type: bool
        """

        self._is_read_only = is_read_only

    @property
    def is_snap_vx_target(self):
        """Gets the is_snap_vx_target of this ImportVmaxVolumeInstance.  # noqa: E501

        Indicates whether the VMAX volume is a SnapVX target.  # noqa: E501

        :return: The is_snap_vx_target of this ImportVmaxVolumeInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_snap_vx_target

    @is_snap_vx_target.setter
    def is_snap_vx_target(self, is_snap_vx_target):
        """Sets the is_snap_vx_target of this ImportVmaxVolumeInstance.

        Indicates whether the VMAX volume is a SnapVX target.  # noqa: E501

        :param is_snap_vx_target: The is_snap_vx_target of this ImportVmaxVolumeInstance.  # noqa: E501
        :type: bool
        """

        self._is_snap_vx_target = is_snap_vx_target

    @property
    def importable_criteria(self):
        """Gets the importable_criteria of this ImportVmaxVolumeInstance.  # noqa: E501


        :return: The importable_criteria of this ImportVmaxVolumeInstance.  # noqa: E501
        :rtype: VolumeImportableCriteriaEnum
        """
        return self._importable_criteria

    @importable_criteria.setter
    def importable_criteria(self, importable_criteria):
        """Sets the importable_criteria of this ImportVmaxVolumeInstance.


        :param importable_criteria: The importable_criteria of this ImportVmaxVolumeInstance.  # noqa: E501
        :type: VolumeImportableCriteriaEnum
        """

        self._importable_criteria = importable_criteria

    @property
    def import_vmax_id(self):
        """Gets the import_vmax_id of this ImportVmaxVolumeInstance.  # noqa: E501

        Unique identifier of the VMAX storage system to which the VMAX volume belongs.  # noqa: E501

        :return: The import_vmax_id of this ImportVmaxVolumeInstance.  # noqa: E501
        :rtype: str
        """
        return self._import_vmax_id

    @import_vmax_id.setter
    def import_vmax_id(self, import_vmax_id):
        """Sets the import_vmax_id of this ImportVmaxVolumeInstance.

        Unique identifier of the VMAX storage system to which the VMAX volume belongs.  # noqa: E501

        :param import_vmax_id: The import_vmax_id of this ImportVmaxVolumeInstance.  # noqa: E501
        :type: str
        """

        self._import_vmax_id = import_vmax_id

    @property
    def import_vmax_storage_group_id(self):
        """Gets the import_vmax_storage_group_id of this ImportVmaxVolumeInstance.  # noqa: E501

        Unique identifier of the storage group to which the VMAX volume belongs.  # noqa: E501

        :return: The import_vmax_storage_group_id of this ImportVmaxVolumeInstance.  # noqa: E501
        :rtype: str
        """
        return self._import_vmax_storage_group_id

    @import_vmax_storage_group_id.setter
    def import_vmax_storage_group_id(self, import_vmax_storage_group_id):
        """Sets the import_vmax_storage_group_id of this ImportVmaxVolumeInstance.

        Unique identifier of the storage group to which the VMAX volume belongs.  # noqa: E501

        :param import_vmax_storage_group_id: The import_vmax_storage_group_id of this ImportVmaxVolumeInstance.  # noqa: E501
        :type: str
        """

        self._import_vmax_storage_group_id = import_vmax_storage_group_id

    @property
    def is_replication_destination(self):
        """Gets the is_replication_destination of this ImportVmaxVolumeInstance.  # noqa: E501

        Indicates whether the VMAX storage group is a replication destination.  # noqa: E501

        :return: The is_replication_destination of this ImportVmaxVolumeInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_replication_destination

    @is_replication_destination.setter
    def is_replication_destination(self, is_replication_destination):
        """Sets the is_replication_destination of this ImportVmaxVolumeInstance.

        Indicates whether the VMAX storage group is a replication destination.  # noqa: E501

        :param is_replication_destination: The is_replication_destination of this ImportVmaxVolumeInstance.  # noqa: E501
        :type: bool
        """

        self._is_replication_destination = is_replication_destination

    @property
    def block_size(self):
        """Gets the block_size of this ImportVmaxVolumeInstance.  # noqa: E501


        :return: The block_size of this ImportVmaxVolumeInstance.  # noqa: E501
        :rtype: VolumeBlockSizeEnum
        """
        return self._block_size

    @block_size.setter
    def block_size(self, block_size):
        """Sets the block_size of this ImportVmaxVolumeInstance.


        :param block_size: The block_size of this ImportVmaxVolumeInstance.  # noqa: E501
        :type: VolumeBlockSizeEnum
        """

        self._block_size = block_size

    @property
    def state_l10n(self):
        """Gets the state_l10n of this ImportVmaxVolumeInstance.  # noqa: E501

        Localized message string corresponding to state Was added in version 3.0.0.0.  # noqa: E501

        :return: The state_l10n of this ImportVmaxVolumeInstance.  # noqa: E501
        :rtype: str
        """
        return self._state_l10n

    @state_l10n.setter
    def state_l10n(self, state_l10n):
        """Sets the state_l10n of this ImportVmaxVolumeInstance.

        Localized message string corresponding to state Was added in version 3.0.0.0.  # noqa: E501

        :param state_l10n: The state_l10n of this ImportVmaxVolumeInstance.  # noqa: E501
        :type: str
        """

        self._state_l10n = state_l10n

    @property
    def importable_criteria_l10n(self):
        """Gets the importable_criteria_l10n of this ImportVmaxVolumeInstance.  # noqa: E501

        Localized message string corresponding to importable_criteria Was added in version 3.0.0.0.  # noqa: E501

        :return: The importable_criteria_l10n of this ImportVmaxVolumeInstance.  # noqa: E501
        :rtype: str
        """
        return self._importable_criteria_l10n

    @importable_criteria_l10n.setter
    def importable_criteria_l10n(self, importable_criteria_l10n):
        """Sets the importable_criteria_l10n of this ImportVmaxVolumeInstance.

        Localized message string corresponding to importable_criteria Was added in version 3.0.0.0.  # noqa: E501

        :param importable_criteria_l10n: The importable_criteria_l10n of this ImportVmaxVolumeInstance.  # noqa: E501
        :type: str
        """

        self._importable_criteria_l10n = importable_criteria_l10n

    @property
    def block_size_l10n(self):
        """Gets the block_size_l10n of this ImportVmaxVolumeInstance.  # noqa: E501

        Localized message string corresponding to block_size Was added in version 3.0.0.0.  # noqa: E501

        :return: The block_size_l10n of this ImportVmaxVolumeInstance.  # noqa: E501
        :rtype: str
        """
        return self._block_size_l10n

    @block_size_l10n.setter
    def block_size_l10n(self, block_size_l10n):
        """Sets the block_size_l10n of this ImportVmaxVolumeInstance.

        Localized message string corresponding to block_size Was added in version 3.0.0.0.  # noqa: E501

        :param block_size_l10n: The block_size_l10n of this ImportVmaxVolumeInstance.  # noqa: E501
        :type: str
        """

        self._block_size_l10n = block_size_l10n

    @property
    def import_vmax(self):
        """Gets the import_vmax of this ImportVmaxVolumeInstance.  # noqa: E501

        This is the embeddable reference form of import_vmax_id attribute.  # noqa: E501

        :return: The import_vmax of this ImportVmaxVolumeInstance.  # noqa: E501
        :rtype: ImportVmaxInstance
        """
        return self._import_vmax

    @import_vmax.setter
    def import_vmax(self, import_vmax):
        """Sets the import_vmax of this ImportVmaxVolumeInstance.

        This is the embeddable reference form of import_vmax_id attribute.  # noqa: E501

        :param import_vmax: The import_vmax of this ImportVmaxVolumeInstance.  # noqa: E501
        :type: ImportVmaxInstance
        """

        self._import_vmax = import_vmax

    @property
    def import_vmax_storage_group(self):
        """Gets the import_vmax_storage_group of this ImportVmaxVolumeInstance.  # noqa: E501

        This is the embeddable reference form of import_vmax_storage_group_id attribute.  # noqa: E501

        :return: The import_vmax_storage_group of this ImportVmaxVolumeInstance.  # noqa: E501
        :rtype: ImportVmaxStorageGroupInstance
        """
        return self._import_vmax_storage_group

    @import_vmax_storage_group.setter
    def import_vmax_storage_group(self, import_vmax_storage_group):
        """Sets the import_vmax_storage_group of this ImportVmaxVolumeInstance.

        This is the embeddable reference form of import_vmax_storage_group_id attribute.  # noqa: E501

        :param import_vmax_storage_group: The import_vmax_storage_group of this ImportVmaxVolumeInstance.  # noqa: E501
        :type: ImportVmaxStorageGroupInstance
        """

        self._import_vmax_storage_group = import_vmax_storage_group

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImportVmaxVolumeInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportVmaxVolumeInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImportVmaxVolumeInstance):
            return True

        return self.to_dict() != other.to_dict()
