# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class VolumeImportableCriteriaEnum(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    READY = "Ready"
    READY_FOR_AGENTLESS_IMPORT = "Ready_For_Agentless_Import"
    IN_PROGRESS = "In_Progress"
    HOST_NOT_ADDED = "Host_Not_Added"
    IMPORTED = "Imported"
    INCOMPATIBLE_FIRMWARE = "Incompatible_Firmware"
    INCOMPATIBLE_HOST_AGENT = "Incompatible_Host_Agent"
    UNDETERMINED = "Undetermined"
    HOST_VOLUME_OFFLINE = "Host_Volume_Offline"
    CLUSTER_NODE_COUNT_MISMATCH = "Cluster_Node_Count_MisMatch"
    UNDETERMINED_CLUSTER_TYPE = "Undetermined_Cluster_Type"
    SOURCE_VOLUME_OFFLINE = "Source_Volume_Offline"
    REPLICATION_DESTINATION = "Replication_Destination"
    SC_LIVE_VOLUME = "SC_Live_Volume"
    SC_DEGRADED = "SC_Degraded"
    SC_NOT_ACTIVE = "SC_Not_Active"
    USED_BY_NAS = "Used_By_NAS"
    SC_PORTABLE_VOLUME = "SC_Portable_Volume"
    VNX_FAULTED = "VNX_Faulted"
    VNX_NOT_READY = "VNX_Not_Ready"
    VNX_INTERNAL_VOLUME = "VNX_Internal_Volume"
    UNITY_SYSTEM_HEALTH_INAPPROPRIATE = "Unity_System_Health_Inappropriate"
    UNITY_VOLUME_HEALTH_INAPPROPRIATE = "Unity_Volume_Health_Inappropriate"
    XTREMIO_SEVERITY_INAPPROPRIATE = "XtremIO_Severity_Inappropriate"
    XTREMIO_STATE_INAPPROPRIATE = "XtremIO_State_Inappropriate"
    XTREMIO_VOLUME_SEVERITY_INAPPROPRIATE = "XtremIO_Volume_Severity_Inappropriate"
    XTREMIO_VOLUME_STATE_INAPPROPRIATE = "XtremIO_Volume_State_Inappropriate"
    NETAPP_SYSTEM_STATE_INAPPROPRIATE = "NetApp_System_State_Inappropriate"
    NETAPP_VOLUME_STATE_INAPPROPRIATE = "NetApp_Volume_State_Inappropriate"
    VOLUME_SIZE_NOT_MULTIPLE_OF_8192 = "Volume_Size_Not_Multiple_of_8192"
    UNSUPPORTED_PROTOCOL = "Unsupported_Protocol"
    VMAX_VOLUME_STATE_INAPPROPRIATE = "Vmax_Volume_State_Inappropriate"

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self, _configuration=None):  # noqa: E501
        """VolumeImportableCriteriaEnum - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VolumeImportableCriteriaEnum, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VolumeImportableCriteriaEnum):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VolumeImportableCriteriaEnum):
            return True

        return self.to_dict() != other.to_dict()
