# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class VolumeGroupRestore(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'from_snap_id': 'str',
        'create_backup_snap': 'bool',
        'backup_snap_profile': 'VolumeGroupSnapshot'
    }

    attribute_map = {
        'from_snap_id': 'from_snap_id',
        'create_backup_snap': 'create_backup_snap',
        'backup_snap_profile': 'backup_snap_profile'
    }

    def __init__(self, from_snap_id=None, create_backup_snap=True, backup_snap_profile=None, _configuration=None):  # noqa: E501
        """VolumeGroupRestore - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._from_snap_id = None
        self._create_backup_snap = None
        self._backup_snap_profile = None
        self.discriminator = None

        self.from_snap_id = from_snap_id
        if create_backup_snap is not None:
            self.create_backup_snap = create_backup_snap
        if backup_snap_profile is not None:
            self.backup_snap_profile = backup_snap_profile

    @property
    def from_snap_id(self):
        """Gets the from_snap_id of this VolumeGroupRestore.  # noqa: E501

        Unique identifier of the snapshot set to restore from. This is referred to as the source volume group.  # noqa: E501

        :return: The from_snap_id of this VolumeGroupRestore.  # noqa: E501
        :rtype: str
        """
        return self._from_snap_id

    @from_snap_id.setter
    def from_snap_id(self, from_snap_id):
        """Sets the from_snap_id of this VolumeGroupRestore.

        Unique identifier of the snapshot set to restore from. This is referred to as the source volume group.  # noqa: E501

        :param from_snap_id: The from_snap_id of this VolumeGroupRestore.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and from_snap_id is None:
            raise ValueError("Invalid value for `from_snap_id`, must not be `None`")  # noqa: E501

        self._from_snap_id = from_snap_id

    @property
    def create_backup_snap(self):
        """Gets the create_backup_snap of this VolumeGroupRestore.  # noqa: E501

        This parameter specifies whether a backup snapshot set of the target volume group needs to be created before attempting restore. This parameter defaults to true, if not specified.  # noqa: E501

        :return: The create_backup_snap of this VolumeGroupRestore.  # noqa: E501
        :rtype: bool
        """
        return self._create_backup_snap

    @create_backup_snap.setter
    def create_backup_snap(self, create_backup_snap):
        """Sets the create_backup_snap of this VolumeGroupRestore.

        This parameter specifies whether a backup snapshot set of the target volume group needs to be created before attempting restore. This parameter defaults to true, if not specified.  # noqa: E501

        :param create_backup_snap: The create_backup_snap of this VolumeGroupRestore.  # noqa: E501
        :type: bool
        """

        self._create_backup_snap = create_backup_snap

    @property
    def backup_snap_profile(self):
        """Gets the backup_snap_profile of this VolumeGroupRestore.  # noqa: E501


        :return: The backup_snap_profile of this VolumeGroupRestore.  # noqa: E501
        :rtype: VolumeGroupSnapshot
        """
        return self._backup_snap_profile

    @backup_snap_profile.setter
    def backup_snap_profile(self, backup_snap_profile):
        """Sets the backup_snap_profile of this VolumeGroupRestore.


        :param backup_snap_profile: The backup_snap_profile of this VolumeGroupRestore.  # noqa: E501
        :type: VolumeGroupSnapshot
        """

        self._backup_snap_profile = backup_snap_profile

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VolumeGroupRestore, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VolumeGroupRestore):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VolumeGroupRestore):
            return True

        return self.to_dict() != other.to_dict()
