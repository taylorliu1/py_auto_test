# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class DatacollectionCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource': 'DatacollectionResourceInstance',
        'profiles': 'list[str]',
        'datacollection_profile_ids': 'list[str]',
        'description': 'str',
        'upload_to_support': 'bool',
        'log_from_timestamp': 'datetime',
        'log_to_timestamp': 'datetime'
    }

    attribute_map = {
        'resource': 'resource',
        'profiles': 'profiles',
        'datacollection_profile_ids': 'datacollection_profile_ids',
        'description': 'description',
        'upload_to_support': 'upload_to_support',
        'log_from_timestamp': 'log_from_timestamp',
        'log_to_timestamp': 'log_to_timestamp'
    }

    def __init__(self, resource=None, profiles=None, datacollection_profile_ids=None, description='', upload_to_support=False, log_from_timestamp=None, log_to_timestamp=None, _configuration=None):  # noqa: E501
        """DatacollectionCreate - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._resource = None
        self._profiles = None
        self._datacollection_profile_ids = None
        self._description = None
        self._upload_to_support = None
        self._log_from_timestamp = None
        self._log_to_timestamp = None
        self.discriminator = None

        if resource is not None:
            self.resource = resource
        if profiles is not None:
            self.profiles = profiles
        if datacollection_profile_ids is not None:
            self.datacollection_profile_ids = datacollection_profile_ids
        if description is not None:
            self.description = description
        if upload_to_support is not None:
            self.upload_to_support = upload_to_support
        if log_from_timestamp is not None:
            self.log_from_timestamp = log_from_timestamp
        if log_to_timestamp is not None:
            self.log_to_timestamp = log_to_timestamp

    @property
    def resource(self):
        """Gets the resource of this DatacollectionCreate.  # noqa: E501


        :return: The resource of this DatacollectionCreate.  # noqa: E501
        :rtype: DatacollectionResourceInstance
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this DatacollectionCreate.


        :param resource: The resource of this DatacollectionCreate.  # noqa: E501
        :type: DatacollectionResourceInstance
        """

        self._resource = resource

    @property
    def profiles(self):
        """Gets the profiles of this DatacollectionCreate.  # noqa: E501

        The profiles to use for the data collection.  # noqa: E501

        :return: The profiles of this DatacollectionCreate.  # noqa: E501
        :rtype: list[str]
        """
        return self._profiles

    @profiles.setter
    def profiles(self, profiles):
        """Sets the profiles of this DatacollectionCreate.

        The profiles to use for the data collection.  # noqa: E501

        :param profiles: The profiles of this DatacollectionCreate.  # noqa: E501
        :type: list[str]
        """

        self._profiles = profiles

    @property
    def datacollection_profile_ids(self):
        """Gets the datacollection_profile_ids of this DatacollectionCreate.  # noqa: E501

        The profiles to use for the data collection.  # noqa: E501

        :return: The datacollection_profile_ids of this DatacollectionCreate.  # noqa: E501
        :rtype: list[str]
        """
        return self._datacollection_profile_ids

    @datacollection_profile_ids.setter
    def datacollection_profile_ids(self, datacollection_profile_ids):
        """Sets the datacollection_profile_ids of this DatacollectionCreate.

        The profiles to use for the data collection.  # noqa: E501

        :param datacollection_profile_ids: The datacollection_profile_ids of this DatacollectionCreate.  # noqa: E501
        :type: list[str]
        """

        self._datacollection_profile_ids = datacollection_profile_ids

    @property
    def description(self):
        """Gets the description of this DatacollectionCreate.  # noqa: E501

        Brief note describing the purpose of the data collection.  # noqa: E501

        :return: The description of this DatacollectionCreate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DatacollectionCreate.

        Brief note describing the purpose of the data collection.  # noqa: E501

        :param description: The description of this DatacollectionCreate.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                description is not None and len(description) > 128):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `128`")  # noqa: E501

        self._description = description

    @property
    def upload_to_support(self):
        """Gets the upload_to_support of this DatacollectionCreate.  # noqa: E501

        Automatically upload this Data Collection to your support provider after it is complete. This option is only available if SupportAssist is enabled.  # noqa: E501

        :return: The upload_to_support of this DatacollectionCreate.  # noqa: E501
        :rtype: bool
        """
        return self._upload_to_support

    @upload_to_support.setter
    def upload_to_support(self, upload_to_support):
        """Sets the upload_to_support of this DatacollectionCreate.

        Automatically upload this Data Collection to your support provider after it is complete. This option is only available if SupportAssist is enabled.  # noqa: E501

        :param upload_to_support: The upload_to_support of this DatacollectionCreate.  # noqa: E501
        :type: bool
        """

        self._upload_to_support = upload_to_support

    @property
    def log_from_timestamp(self):
        """Gets the log_from_timestamp of this DatacollectionCreate.  # noqa: E501

        The date and time from which to start collecting the logs.  # noqa: E501

        :return: The log_from_timestamp of this DatacollectionCreate.  # noqa: E501
        :rtype: datetime
        """
        return self._log_from_timestamp

    @log_from_timestamp.setter
    def log_from_timestamp(self, log_from_timestamp):
        """Sets the log_from_timestamp of this DatacollectionCreate.

        The date and time from which to start collecting the logs.  # noqa: E501

        :param log_from_timestamp: The log_from_timestamp of this DatacollectionCreate.  # noqa: E501
        :type: datetime
        """

        self._log_from_timestamp = log_from_timestamp

    @property
    def log_to_timestamp(self):
        """Gets the log_to_timestamp of this DatacollectionCreate.  # noqa: E501

        The date and time up to which the logs should be collected.  The default is the time of the creation.  # noqa: E501

        :return: The log_to_timestamp of this DatacollectionCreate.  # noqa: E501
        :rtype: datetime
        """
        return self._log_to_timestamp

    @log_to_timestamp.setter
    def log_to_timestamp(self, log_to_timestamp):
        """Sets the log_to_timestamp of this DatacollectionCreate.

        The date and time up to which the logs should be collected.  The default is the time of the creation.  # noqa: E501

        :param log_to_timestamp: The log_to_timestamp of this DatacollectionCreate.  # noqa: E501
        :type: datetime
        """

        self._log_to_timestamp = log_to_timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DatacollectionCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DatacollectionCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DatacollectionCreate):
            return True

        return self.to_dict() != other.to_dict()
