# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class RemoteSystemInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'serial_number': 'str',
        'version': 'str',
        'management_address': 'str',
        'management_port': 'int',
        'type': 'RemoteSystemTypeEnum',
        'user_name': 'str',
        'state': 'RemoteSystemStateEnum',
        'data_connection_type': 'DataConnectionTypeEnum',
        'data_connection_state': 'DataConnectionStateEnum',
        'iscsi_addresses': 'list[str]',
        'fc_target_wwns': 'list[str]',
        'discovery_chap_mode': 'RemoteSystemChapModeEnum',
        'session_chap_mode': 'RemoteSystemChapModeEnum',
        'data_network_latency': 'RemoteSystemLatencyEnum',
        'data_connections': 'list[DataConnectionInstance]',
        'capabilities': 'list[RemoteProtectionCapabilityEnum]',
        'file_connection_address': 'str',
        'file_connection_state': 'RemoteSystemFileConnectionStateEnum',
        'vnx_file_username': 'str',
        'appliance_details': 'list[RemoteApplianceDetails]',
        'type_l10n': 'str',
        'state_l10n': 'str',
        'data_connection_type_l10n': 'str',
        'data_connection_state_l10n': 'str',
        'discovery_chap_mode_l10n': 'str',
        'session_chap_mode_l10n': 'str',
        'data_network_latency_l10n': 'str',
        'capabilities_l10n': 'list[str]',
        'file_connection_state_l10n': 'str',
        'import_sessions': 'list[ImportSessionInstance]',
        'storage_container_destinations': 'list[StorageContainerDestinationInstance]',
        'replication_sessions': 'list[ReplicationSessionInstance]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'serial_number': 'serial_number',
        'version': 'version',
        'management_address': 'management_address',
        'management_port': 'management_port',
        'type': 'type',
        'user_name': 'user_name',
        'state': 'state',
        'data_connection_type': 'data_connection_type',
        'data_connection_state': 'data_connection_state',
        'iscsi_addresses': 'iscsi_addresses',
        'fc_target_wwns': 'fc_target_wwns',
        'discovery_chap_mode': 'discovery_chap_mode',
        'session_chap_mode': 'session_chap_mode',
        'data_network_latency': 'data_network_latency',
        'data_connections': 'data_connections',
        'capabilities': 'capabilities',
        'file_connection_address': 'file_connection_address',
        'file_connection_state': 'file_connection_state',
        'vnx_file_username': 'vnx_file_username',
        'appliance_details': 'appliance_details',
        'type_l10n': 'type_l10n',
        'state_l10n': 'state_l10n',
        'data_connection_type_l10n': 'data_connection_type_l10n',
        'data_connection_state_l10n': 'data_connection_state_l10n',
        'discovery_chap_mode_l10n': 'discovery_chap_mode_l10n',
        'session_chap_mode_l10n': 'session_chap_mode_l10n',
        'data_network_latency_l10n': 'data_network_latency_l10n',
        'capabilities_l10n': 'capabilities_l10n',
        'file_connection_state_l10n': 'file_connection_state_l10n',
        'import_sessions': 'import_sessions',
        'storage_container_destinations': 'storage_container_destinations',
        'replication_sessions': 'replication_sessions'
    }

    def __init__(self, id=None, name=None, description=None, serial_number=None, version=None, management_address=None, management_port=None, type=None, user_name=None, state=None, data_connection_type=None, data_connection_state=None, iscsi_addresses=None, fc_target_wwns=None, discovery_chap_mode=None, session_chap_mode=None, data_network_latency=None, data_connections=None, capabilities=None, file_connection_address=None, file_connection_state=None, vnx_file_username=None, appliance_details=None, type_l10n=None, state_l10n=None, data_connection_type_l10n=None, data_connection_state_l10n=None, discovery_chap_mode_l10n=None, session_chap_mode_l10n=None, data_network_latency_l10n=None, capabilities_l10n=None, file_connection_state_l10n=None, import_sessions=None, storage_container_destinations=None, replication_sessions=None, _configuration=None):  # noqa: E501
        """RemoteSystemInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._description = None
        self._serial_number = None
        self._version = None
        self._management_address = None
        self._management_port = None
        self._type = None
        self._user_name = None
        self._state = None
        self._data_connection_type = None
        self._data_connection_state = None
        self._iscsi_addresses = None
        self._fc_target_wwns = None
        self._discovery_chap_mode = None
        self._session_chap_mode = None
        self._data_network_latency = None
        self._data_connections = None
        self._capabilities = None
        self._file_connection_address = None
        self._file_connection_state = None
        self._vnx_file_username = None
        self._appliance_details = None
        self._type_l10n = None
        self._state_l10n = None
        self._data_connection_type_l10n = None
        self._data_connection_state_l10n = None
        self._discovery_chap_mode_l10n = None
        self._session_chap_mode_l10n = None
        self._data_network_latency_l10n = None
        self._capabilities_l10n = None
        self._file_connection_state_l10n = None
        self._import_sessions = None
        self._storage_container_destinations = None
        self._replication_sessions = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if serial_number is not None:
            self.serial_number = serial_number
        if version is not None:
            self.version = version
        if management_address is not None:
            self.management_address = management_address
        if management_port is not None:
            self.management_port = management_port
        if type is not None:
            self.type = type
        if user_name is not None:
            self.user_name = user_name
        if state is not None:
            self.state = state
        if data_connection_type is not None:
            self.data_connection_type = data_connection_type
        if data_connection_state is not None:
            self.data_connection_state = data_connection_state
        if iscsi_addresses is not None:
            self.iscsi_addresses = iscsi_addresses
        if fc_target_wwns is not None:
            self.fc_target_wwns = fc_target_wwns
        if discovery_chap_mode is not None:
            self.discovery_chap_mode = discovery_chap_mode
        if session_chap_mode is not None:
            self.session_chap_mode = session_chap_mode
        if data_network_latency is not None:
            self.data_network_latency = data_network_latency
        if data_connections is not None:
            self.data_connections = data_connections
        if capabilities is not None:
            self.capabilities = capabilities
        if file_connection_address is not None:
            self.file_connection_address = file_connection_address
        if file_connection_state is not None:
            self.file_connection_state = file_connection_state
        if vnx_file_username is not None:
            self.vnx_file_username = vnx_file_username
        if appliance_details is not None:
            self.appliance_details = appliance_details
        if type_l10n is not None:
            self.type_l10n = type_l10n
        if state_l10n is not None:
            self.state_l10n = state_l10n
        if data_connection_type_l10n is not None:
            self.data_connection_type_l10n = data_connection_type_l10n
        if data_connection_state_l10n is not None:
            self.data_connection_state_l10n = data_connection_state_l10n
        if discovery_chap_mode_l10n is not None:
            self.discovery_chap_mode_l10n = discovery_chap_mode_l10n
        if session_chap_mode_l10n is not None:
            self.session_chap_mode_l10n = session_chap_mode_l10n
        if data_network_latency_l10n is not None:
            self.data_network_latency_l10n = data_network_latency_l10n
        if capabilities_l10n is not None:
            self.capabilities_l10n = capabilities_l10n
        if file_connection_state_l10n is not None:
            self.file_connection_state_l10n = file_connection_state_l10n
        if import_sessions is not None:
            self.import_sessions = import_sessions
        if storage_container_destinations is not None:
            self.storage_container_destinations = storage_container_destinations
        if replication_sessions is not None:
            self.replication_sessions = replication_sessions

    @property
    def id(self):
        """Gets the id of this RemoteSystemInstance.  # noqa: E501

        Unique identifier of the remote system instance.   # noqa: E501

        :return: The id of this RemoteSystemInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RemoteSystemInstance.

        Unique identifier of the remote system instance.   # noqa: E501

        :param id: The id of this RemoteSystemInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this RemoteSystemInstance.  # noqa: E501

        User-specified name of the remote system instance.   This property supports case-insensitive filtering.  # noqa: E501

        :return: The name of this RemoteSystemInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RemoteSystemInstance.

        User-specified name of the remote system instance.   This property supports case-insensitive filtering.  # noqa: E501

        :param name: The name of this RemoteSystemInstance.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this RemoteSystemInstance.  # noqa: E501

        User-specified description of the remote system instance.   # noqa: E501

        :return: The description of this RemoteSystemInstance.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RemoteSystemInstance.

        User-specified description of the remote system instance.   # noqa: E501

        :param description: The description of this RemoteSystemInstance.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def serial_number(self):
        """Gets the serial_number of this RemoteSystemInstance.  # noqa: E501

        Serial number of the remote system instance.   # noqa: E501

        :return: The serial_number of this RemoteSystemInstance.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this RemoteSystemInstance.

        Serial number of the remote system instance.   # noqa: E501

        :param serial_number: The serial_number of this RemoteSystemInstance.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def version(self):
        """Gets the version of this RemoteSystemInstance.  # noqa: E501

        Version of the remote system.  Was added in version 2.0.0.0.  # noqa: E501

        :return: The version of this RemoteSystemInstance.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this RemoteSystemInstance.

        Version of the remote system.  Was added in version 2.0.0.0.  # noqa: E501

        :param version: The version of this RemoteSystemInstance.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def management_address(self):
        """Gets the management_address of this RemoteSystemInstance.  # noqa: E501

        Management address of the remote system instance.   # noqa: E501

        :return: The management_address of this RemoteSystemInstance.  # noqa: E501
        :rtype: str
        """
        return self._management_address

    @management_address.setter
    def management_address(self, management_address):
        """Sets the management_address of this RemoteSystemInstance.

        Management address of the remote system instance.   # noqa: E501

        :param management_address: The management_address of this RemoteSystemInstance.  # noqa: E501
        :type: str
        """

        self._management_address = management_address

    @property
    def management_port(self):
        """Gets the management_port of this RemoteSystemInstance.  # noqa: E501

        Management port of PowerMax/VMAX remote system.  Was added in version 3.0.0.0.  # noqa: E501

        :return: The management_port of this RemoteSystemInstance.  # noqa: E501
        :rtype: int
        """
        return self._management_port

    @management_port.setter
    def management_port(self, management_port):
        """Sets the management_port of this RemoteSystemInstance.

        Management port of PowerMax/VMAX remote system.  Was added in version 3.0.0.0.  # noqa: E501

        :param management_port: The management_port of this RemoteSystemInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                management_port is not None and management_port > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `management_port`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                management_port is not None and management_port < 0):  # noqa: E501
            raise ValueError("Invalid value for `management_port`, must be a value greater than or equal to `0`")  # noqa: E501

        self._management_port = management_port

    @property
    def type(self):
        """Gets the type of this RemoteSystemInstance.  # noqa: E501

        Type of the remote system.   # noqa: E501

        :return: The type of this RemoteSystemInstance.  # noqa: E501
        :rtype: RemoteSystemTypeEnum
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RemoteSystemInstance.

        Type of the remote system.   # noqa: E501

        :param type: The type of this RemoteSystemInstance.  # noqa: E501
        :type: RemoteSystemTypeEnum
        """

        self._type = type

    @property
    def user_name(self):
        """Gets the user_name of this RemoteSystemInstance.  # noqa: E501

        Username used to access the non-PowerStore remote systems.   # noqa: E501

        :return: The user_name of this RemoteSystemInstance.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this RemoteSystemInstance.

        Username used to access the non-PowerStore remote systems.   # noqa: E501

        :param user_name: The user_name of this RemoteSystemInstance.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def state(self):
        """Gets the state of this RemoteSystemInstance.  # noqa: E501

        Current state of the remote system.   # noqa: E501

        :return: The state of this RemoteSystemInstance.  # noqa: E501
        :rtype: RemoteSystemStateEnum
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this RemoteSystemInstance.

        Current state of the remote system.   # noqa: E501

        :param state: The state of this RemoteSystemInstance.  # noqa: E501
        :type: RemoteSystemStateEnum
        """

        self._state = state

    @property
    def data_connection_type(self):
        """Gets the data_connection_type of this RemoteSystemInstance.  # noqa: E501

        Type of the data connection.  Was added in version 3.0.0.0.  # noqa: E501

        :return: The data_connection_type of this RemoteSystemInstance.  # noqa: E501
        :rtype: DataConnectionTypeEnum
        """
        return self._data_connection_type

    @data_connection_type.setter
    def data_connection_type(self, data_connection_type):
        """Sets the data_connection_type of this RemoteSystemInstance.

        Type of the data connection.  Was added in version 3.0.0.0.  # noqa: E501

        :param data_connection_type: The data_connection_type of this RemoteSystemInstance.  # noqa: E501
        :type: DataConnectionTypeEnum
        """

        self._data_connection_type = data_connection_type

    @property
    def data_connection_state(self):
        """Gets the data_connection_state of this RemoteSystemInstance.  # noqa: E501

        State of the data connection.   # noqa: E501

        :return: The data_connection_state of this RemoteSystemInstance.  # noqa: E501
        :rtype: DataConnectionStateEnum
        """
        return self._data_connection_state

    @data_connection_state.setter
    def data_connection_state(self, data_connection_state):
        """Sets the data_connection_state of this RemoteSystemInstance.

        State of the data connection.   # noqa: E501

        :param data_connection_state: The data_connection_state of this RemoteSystemInstance.  # noqa: E501
        :type: DataConnectionStateEnum
        """

        self._data_connection_state = data_connection_state

    @property
    def iscsi_addresses(self):
        """Gets the iscsi_addresses of this RemoteSystemInstance.  # noqa: E501

        iSCSI target addresses for the data connection to the remote system.   # noqa: E501

        :return: The iscsi_addresses of this RemoteSystemInstance.  # noqa: E501
        :rtype: list[str]
        """
        return self._iscsi_addresses

    @iscsi_addresses.setter
    def iscsi_addresses(self, iscsi_addresses):
        """Sets the iscsi_addresses of this RemoteSystemInstance.

        iSCSI target addresses for the data connection to the remote system.   # noqa: E501

        :param iscsi_addresses: The iscsi_addresses of this RemoteSystemInstance.  # noqa: E501
        :type: list[str]
        """

        self._iscsi_addresses = iscsi_addresses

    @property
    def fc_target_wwns(self):
        """Gets the fc_target_wwns of this RemoteSystemInstance.  # noqa: E501

        FC target WWN discovered by Powerstore for the data connection to the remote system.  Was added in version 3.0.0.0.  # noqa: E501

        :return: The fc_target_wwns of this RemoteSystemInstance.  # noqa: E501
        :rtype: list[str]
        """
        return self._fc_target_wwns

    @fc_target_wwns.setter
    def fc_target_wwns(self, fc_target_wwns):
        """Sets the fc_target_wwns of this RemoteSystemInstance.

        FC target WWN discovered by Powerstore for the data connection to the remote system.  Was added in version 3.0.0.0.  # noqa: E501

        :param fc_target_wwns: The fc_target_wwns of this RemoteSystemInstance.  # noqa: E501
        :type: list[str]
        """

        self._fc_target_wwns = fc_target_wwns

    @property
    def discovery_chap_mode(self):
        """Gets the discovery_chap_mode of this RemoteSystemInstance.  # noqa: E501

        Discovery chap mode for the non-PowerStore remote system.   # noqa: E501

        :return: The discovery_chap_mode of this RemoteSystemInstance.  # noqa: E501
        :rtype: RemoteSystemChapModeEnum
        """
        return self._discovery_chap_mode

    @discovery_chap_mode.setter
    def discovery_chap_mode(self, discovery_chap_mode):
        """Sets the discovery_chap_mode of this RemoteSystemInstance.

        Discovery chap mode for the non-PowerStore remote system.   # noqa: E501

        :param discovery_chap_mode: The discovery_chap_mode of this RemoteSystemInstance.  # noqa: E501
        :type: RemoteSystemChapModeEnum
        """

        self._discovery_chap_mode = discovery_chap_mode

    @property
    def session_chap_mode(self):
        """Gets the session_chap_mode of this RemoteSystemInstance.  # noqa: E501

        Session chap mode for the non-PowerStore remote system.   # noqa: E501

        :return: The session_chap_mode of this RemoteSystemInstance.  # noqa: E501
        :rtype: RemoteSystemChapModeEnum
        """
        return self._session_chap_mode

    @session_chap_mode.setter
    def session_chap_mode(self, session_chap_mode):
        """Sets the session_chap_mode of this RemoteSystemInstance.

        Session chap mode for the non-PowerStore remote system.   # noqa: E501

        :param session_chap_mode: The session_chap_mode of this RemoteSystemInstance.  # noqa: E501
        :type: RemoteSystemChapModeEnum
        """

        self._session_chap_mode = session_chap_mode

    @property
    def data_network_latency(self):
        """Gets the data_network_latency of this RemoteSystemInstance.  # noqa: E501

        Network latency for the remote system.   # noqa: E501

        :return: The data_network_latency of this RemoteSystemInstance.  # noqa: E501
        :rtype: RemoteSystemLatencyEnum
        """
        return self._data_network_latency

    @data_network_latency.setter
    def data_network_latency(self, data_network_latency):
        """Sets the data_network_latency of this RemoteSystemInstance.

        Network latency for the remote system.   # noqa: E501

        :param data_network_latency: The data_network_latency of this RemoteSystemInstance.  # noqa: E501
        :type: RemoteSystemLatencyEnum
        """

        self._data_network_latency = data_network_latency

    @property
    def data_connections(self):
        """Gets the data_connections of this RemoteSystemInstance.  # noqa: E501

        List of data connections from each appliance in the local cluster to target address.   Filtering on the fields of this embedded resource is not supported.  # noqa: E501

        :return: The data_connections of this RemoteSystemInstance.  # noqa: E501
        :rtype: list[DataConnectionInstance]
        """
        return self._data_connections

    @data_connections.setter
    def data_connections(self, data_connections):
        """Sets the data_connections of this RemoteSystemInstance.

        List of data connections from each appliance in the local cluster to target address.   Filtering on the fields of this embedded resource is not supported.  # noqa: E501

        :param data_connections: The data_connections of this RemoteSystemInstance.  # noqa: E501
        :type: list[DataConnectionInstance]
        """

        self._data_connections = data_connections

    @property
    def capabilities(self):
        """Gets the capabilities of this RemoteSystemInstance.  # noqa: E501

        List of remote protection capabilities.  Was added in version 3.0.0.0.  # noqa: E501

        :return: The capabilities of this RemoteSystemInstance.  # noqa: E501
        :rtype: list[RemoteProtectionCapabilityEnum]
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this RemoteSystemInstance.

        List of remote protection capabilities.  Was added in version 3.0.0.0.  # noqa: E501

        :param capabilities: The capabilities of this RemoteSystemInstance.  # noqa: E501
        :type: list[RemoteProtectionCapabilityEnum]
        """

        self._capabilities = capabilities

    @property
    def file_connection_address(self):
        """Gets the file_connection_address of this RemoteSystemInstance.  # noqa: E501

        A public IPv4 or IPv6 address of a file remote system instance. File mobility network cluster IP address for PowerStore. Control station address for VNX2.  Was added in version 3.0.0.0.  # noqa: E501

        :return: The file_connection_address of this RemoteSystemInstance.  # noqa: E501
        :rtype: str
        """
        return self._file_connection_address

    @file_connection_address.setter
    def file_connection_address(self, file_connection_address):
        """Sets the file_connection_address of this RemoteSystemInstance.

        A public IPv4 or IPv6 address of a file remote system instance. File mobility network cluster IP address for PowerStore. Control station address for VNX2.  Was added in version 3.0.0.0.  # noqa: E501

        :param file_connection_address: The file_connection_address of this RemoteSystemInstance.  # noqa: E501
        :type: str
        """

        self._file_connection_address = file_connection_address

    @property
    def file_connection_state(self):
        """Gets the file_connection_state of this RemoteSystemInstance.  # noqa: E501

         Was added in version 3.0.0.0.  # noqa: E501

        :return: The file_connection_state of this RemoteSystemInstance.  # noqa: E501
        :rtype: RemoteSystemFileConnectionStateEnum
        """
        return self._file_connection_state

    @file_connection_state.setter
    def file_connection_state(self, file_connection_state):
        """Sets the file_connection_state of this RemoteSystemInstance.

         Was added in version 3.0.0.0.  # noqa: E501

        :param file_connection_state: The file_connection_state of this RemoteSystemInstance.  # noqa: E501
        :type: RemoteSystemFileConnectionStateEnum
        """

        self._file_connection_state = file_connection_state

    @property
    def vnx_file_username(self):
        """Gets the vnx_file_username of this RemoteSystemInstance.  # noqa: E501

        User-specified VNX NAS administrator username. nasadmin account is preferred for file import.  Was added in version 3.0.0.0.  # noqa: E501

        :return: The vnx_file_username of this RemoteSystemInstance.  # noqa: E501
        :rtype: str
        """
        return self._vnx_file_username

    @vnx_file_username.setter
    def vnx_file_username(self, vnx_file_username):
        """Sets the vnx_file_username of this RemoteSystemInstance.

        User-specified VNX NAS administrator username. nasadmin account is preferred for file import.  Was added in version 3.0.0.0.  # noqa: E501

        :param vnx_file_username: The vnx_file_username of this RemoteSystemInstance.  # noqa: E501
        :type: str
        """

        self._vnx_file_username = vnx_file_username

    @property
    def appliance_details(self):
        """Gets the appliance_details of this RemoteSystemInstance.  # noqa: E501

        Details of all the appliances of the remote PowerStore system.  Was added in version 3.0.0.0.  Filtering on the fields of this embedded resource is not supported.  # noqa: E501

        :return: The appliance_details of this RemoteSystemInstance.  # noqa: E501
        :rtype: list[RemoteApplianceDetails]
        """
        return self._appliance_details

    @appliance_details.setter
    def appliance_details(self, appliance_details):
        """Sets the appliance_details of this RemoteSystemInstance.

        Details of all the appliances of the remote PowerStore system.  Was added in version 3.0.0.0.  Filtering on the fields of this embedded resource is not supported.  # noqa: E501

        :param appliance_details: The appliance_details of this RemoteSystemInstance.  # noqa: E501
        :type: list[RemoteApplianceDetails]
        """

        self._appliance_details = appliance_details

    @property
    def type_l10n(self):
        """Gets the type_l10n of this RemoteSystemInstance.  # noqa: E501

        Localized message string corresponding to type  # noqa: E501

        :return: The type_l10n of this RemoteSystemInstance.  # noqa: E501
        :rtype: str
        """
        return self._type_l10n

    @type_l10n.setter
    def type_l10n(self, type_l10n):
        """Sets the type_l10n of this RemoteSystemInstance.

        Localized message string corresponding to type  # noqa: E501

        :param type_l10n: The type_l10n of this RemoteSystemInstance.  # noqa: E501
        :type: str
        """

        self._type_l10n = type_l10n

    @property
    def state_l10n(self):
        """Gets the state_l10n of this RemoteSystemInstance.  # noqa: E501

        Localized message string corresponding to state  # noqa: E501

        :return: The state_l10n of this RemoteSystemInstance.  # noqa: E501
        :rtype: str
        """
        return self._state_l10n

    @state_l10n.setter
    def state_l10n(self, state_l10n):
        """Sets the state_l10n of this RemoteSystemInstance.

        Localized message string corresponding to state  # noqa: E501

        :param state_l10n: The state_l10n of this RemoteSystemInstance.  # noqa: E501
        :type: str
        """

        self._state_l10n = state_l10n

    @property
    def data_connection_type_l10n(self):
        """Gets the data_connection_type_l10n of this RemoteSystemInstance.  # noqa: E501

        Localized message string corresponding to data_connection_type Was added in version 3.0.0.0.  # noqa: E501

        :return: The data_connection_type_l10n of this RemoteSystemInstance.  # noqa: E501
        :rtype: str
        """
        return self._data_connection_type_l10n

    @data_connection_type_l10n.setter
    def data_connection_type_l10n(self, data_connection_type_l10n):
        """Sets the data_connection_type_l10n of this RemoteSystemInstance.

        Localized message string corresponding to data_connection_type Was added in version 3.0.0.0.  # noqa: E501

        :param data_connection_type_l10n: The data_connection_type_l10n of this RemoteSystemInstance.  # noqa: E501
        :type: str
        """

        self._data_connection_type_l10n = data_connection_type_l10n

    @property
    def data_connection_state_l10n(self):
        """Gets the data_connection_state_l10n of this RemoteSystemInstance.  # noqa: E501

        Localized message string corresponding to data_connection_state  # noqa: E501

        :return: The data_connection_state_l10n of this RemoteSystemInstance.  # noqa: E501
        :rtype: str
        """
        return self._data_connection_state_l10n

    @data_connection_state_l10n.setter
    def data_connection_state_l10n(self, data_connection_state_l10n):
        """Sets the data_connection_state_l10n of this RemoteSystemInstance.

        Localized message string corresponding to data_connection_state  # noqa: E501

        :param data_connection_state_l10n: The data_connection_state_l10n of this RemoteSystemInstance.  # noqa: E501
        :type: str
        """

        self._data_connection_state_l10n = data_connection_state_l10n

    @property
    def discovery_chap_mode_l10n(self):
        """Gets the discovery_chap_mode_l10n of this RemoteSystemInstance.  # noqa: E501

        Localized message string corresponding to discovery_chap_mode  # noqa: E501

        :return: The discovery_chap_mode_l10n of this RemoteSystemInstance.  # noqa: E501
        :rtype: str
        """
        return self._discovery_chap_mode_l10n

    @discovery_chap_mode_l10n.setter
    def discovery_chap_mode_l10n(self, discovery_chap_mode_l10n):
        """Sets the discovery_chap_mode_l10n of this RemoteSystemInstance.

        Localized message string corresponding to discovery_chap_mode  # noqa: E501

        :param discovery_chap_mode_l10n: The discovery_chap_mode_l10n of this RemoteSystemInstance.  # noqa: E501
        :type: str
        """

        self._discovery_chap_mode_l10n = discovery_chap_mode_l10n

    @property
    def session_chap_mode_l10n(self):
        """Gets the session_chap_mode_l10n of this RemoteSystemInstance.  # noqa: E501

        Localized message string corresponding to session_chap_mode  # noqa: E501

        :return: The session_chap_mode_l10n of this RemoteSystemInstance.  # noqa: E501
        :rtype: str
        """
        return self._session_chap_mode_l10n

    @session_chap_mode_l10n.setter
    def session_chap_mode_l10n(self, session_chap_mode_l10n):
        """Sets the session_chap_mode_l10n of this RemoteSystemInstance.

        Localized message string corresponding to session_chap_mode  # noqa: E501

        :param session_chap_mode_l10n: The session_chap_mode_l10n of this RemoteSystemInstance.  # noqa: E501
        :type: str
        """

        self._session_chap_mode_l10n = session_chap_mode_l10n

    @property
    def data_network_latency_l10n(self):
        """Gets the data_network_latency_l10n of this RemoteSystemInstance.  # noqa: E501

        Localized message string corresponding to data_network_latency  # noqa: E501

        :return: The data_network_latency_l10n of this RemoteSystemInstance.  # noqa: E501
        :rtype: str
        """
        return self._data_network_latency_l10n

    @data_network_latency_l10n.setter
    def data_network_latency_l10n(self, data_network_latency_l10n):
        """Sets the data_network_latency_l10n of this RemoteSystemInstance.

        Localized message string corresponding to data_network_latency  # noqa: E501

        :param data_network_latency_l10n: The data_network_latency_l10n of this RemoteSystemInstance.  # noqa: E501
        :type: str
        """

        self._data_network_latency_l10n = data_network_latency_l10n

    @property
    def capabilities_l10n(self):
        """Gets the capabilities_l10n of this RemoteSystemInstance.  # noqa: E501

        Localized message array corresponding to capabilities Was added in version 3.0.0.0.  # noqa: E501

        :return: The capabilities_l10n of this RemoteSystemInstance.  # noqa: E501
        :rtype: list[str]
        """
        return self._capabilities_l10n

    @capabilities_l10n.setter
    def capabilities_l10n(self, capabilities_l10n):
        """Sets the capabilities_l10n of this RemoteSystemInstance.

        Localized message array corresponding to capabilities Was added in version 3.0.0.0.  # noqa: E501

        :param capabilities_l10n: The capabilities_l10n of this RemoteSystemInstance.  # noqa: E501
        :type: list[str]
        """

        self._capabilities_l10n = capabilities_l10n

    @property
    def file_connection_state_l10n(self):
        """Gets the file_connection_state_l10n of this RemoteSystemInstance.  # noqa: E501

        Localized message string corresponding to file_connection_state Was added in version 3.0.0.0.  # noqa: E501

        :return: The file_connection_state_l10n of this RemoteSystemInstance.  # noqa: E501
        :rtype: str
        """
        return self._file_connection_state_l10n

    @file_connection_state_l10n.setter
    def file_connection_state_l10n(self, file_connection_state_l10n):
        """Sets the file_connection_state_l10n of this RemoteSystemInstance.

        Localized message string corresponding to file_connection_state Was added in version 3.0.0.0.  # noqa: E501

        :param file_connection_state_l10n: The file_connection_state_l10n of this RemoteSystemInstance.  # noqa: E501
        :type: str
        """

        self._file_connection_state_l10n = file_connection_state_l10n

    @property
    def import_sessions(self):
        """Gets the import_sessions of this RemoteSystemInstance.  # noqa: E501

        This is the inverse of the resource type import_session association.  # noqa: E501

        :return: The import_sessions of this RemoteSystemInstance.  # noqa: E501
        :rtype: list[ImportSessionInstance]
        """
        return self._import_sessions

    @import_sessions.setter
    def import_sessions(self, import_sessions):
        """Sets the import_sessions of this RemoteSystemInstance.

        This is the inverse of the resource type import_session association.  # noqa: E501

        :param import_sessions: The import_sessions of this RemoteSystemInstance.  # noqa: E501
        :type: list[ImportSessionInstance]
        """

        self._import_sessions = import_sessions

    @property
    def storage_container_destinations(self):
        """Gets the storage_container_destinations of this RemoteSystemInstance.  # noqa: E501

        This is the inverse of the resource type storage_container_destination association.  # noqa: E501

        :return: The storage_container_destinations of this RemoteSystemInstance.  # noqa: E501
        :rtype: list[StorageContainerDestinationInstance]
        """
        return self._storage_container_destinations

    @storage_container_destinations.setter
    def storage_container_destinations(self, storage_container_destinations):
        """Sets the storage_container_destinations of this RemoteSystemInstance.

        This is the inverse of the resource type storage_container_destination association.  # noqa: E501

        :param storage_container_destinations: The storage_container_destinations of this RemoteSystemInstance.  # noqa: E501
        :type: list[StorageContainerDestinationInstance]
        """

        self._storage_container_destinations = storage_container_destinations

    @property
    def replication_sessions(self):
        """Gets the replication_sessions of this RemoteSystemInstance.  # noqa: E501

        This is the inverse of the resource type replication_session association.  # noqa: E501

        :return: The replication_sessions of this RemoteSystemInstance.  # noqa: E501
        :rtype: list[ReplicationSessionInstance]
        """
        return self._replication_sessions

    @replication_sessions.setter
    def replication_sessions(self, replication_sessions):
        """Sets the replication_sessions of this RemoteSystemInstance.

        This is the inverse of the resource type replication_session association.  # noqa: E501

        :param replication_sessions: The replication_sessions of this RemoteSystemInstance.  # noqa: E501
        :type: list[ReplicationSessionInstance]
        """

        self._replication_sessions = replication_sessions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RemoteSystemInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RemoteSystemInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RemoteSystemInstance):
            return True

        return self.to_dict() != other.to_dict()
