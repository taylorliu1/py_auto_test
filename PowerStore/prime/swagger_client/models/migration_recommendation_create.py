# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class MigrationRecommendationCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'evacuate_appliance': 'object',
        'evacuate_objects': 'object',
        'evacuate_appliance_all': 'object'
    }

    attribute_map = {
        'evacuate_appliance': 'evacuate_appliance',
        'evacuate_objects': 'evacuate_objects',
        'evacuate_appliance_all': 'evacuate_appliance_all'
    }

    def __init__(self, evacuate_appliance=None, evacuate_objects=None, evacuate_appliance_all=None, _configuration=None):  # noqa: E501
        """MigrationRecommendationCreate - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._evacuate_appliance = None
        self._evacuate_objects = None
        self._evacuate_appliance_all = None
        self.discriminator = None

        if evacuate_appliance is not None:
            self.evacuate_appliance = evacuate_appliance
        if evacuate_objects is not None:
            self.evacuate_objects = evacuate_objects
        if evacuate_appliance_all is not None:
            self.evacuate_appliance_all = evacuate_appliance_all

    @property
    def evacuate_appliance(self):
        """Gets the evacuate_appliance of this MigrationRecommendationCreate.  # noqa: E501

        Evacuate appliance by specifying optional space_to_free  # noqa: E501

        :return: The evacuate_appliance of this MigrationRecommendationCreate.  # noqa: E501
        :rtype: object
        """
        return self._evacuate_appliance

    @evacuate_appliance.setter
    def evacuate_appliance(self, evacuate_appliance):
        """Sets the evacuate_appliance of this MigrationRecommendationCreate.

        Evacuate appliance by specifying optional space_to_free  # noqa: E501

        :param evacuate_appliance: The evacuate_appliance of this MigrationRecommendationCreate.  # noqa: E501
        :type: object
        """

        self._evacuate_appliance = evacuate_appliance

    @property
    def evacuate_objects(self):
        """Gets the evacuate_objects of this MigrationRecommendationCreate.  # noqa: E501

        Evacuate appliance by migrating specified storage objects. All specified storage objects must exist on the same source appliance specified by appliance_id Was added in version 2.0.0.0.  # noqa: E501

        :return: The evacuate_objects of this MigrationRecommendationCreate.  # noqa: E501
        :rtype: object
        """
        return self._evacuate_objects

    @evacuate_objects.setter
    def evacuate_objects(self, evacuate_objects):
        """Sets the evacuate_objects of this MigrationRecommendationCreate.

        Evacuate appliance by migrating specified storage objects. All specified storage objects must exist on the same source appliance specified by appliance_id Was added in version 2.0.0.0.  # noqa: E501

        :param evacuate_objects: The evacuate_objects of this MigrationRecommendationCreate.  # noqa: E501
        :type: object
        """

        self._evacuate_objects = evacuate_objects

    @property
    def evacuate_appliance_all(self):
        """Gets the evacuate_appliance_all of this MigrationRecommendationCreate.  # noqa: E501

        Evacuate all storage objects from an appliance specified by appliance_id. Was added in version 2.0.0.0.  # noqa: E501

        :return: The evacuate_appliance_all of this MigrationRecommendationCreate.  # noqa: E501
        :rtype: object
        """
        return self._evacuate_appliance_all

    @evacuate_appliance_all.setter
    def evacuate_appliance_all(self, evacuate_appliance_all):
        """Sets the evacuate_appliance_all of this MigrationRecommendationCreate.

        Evacuate all storage objects from an appliance specified by appliance_id. Was added in version 2.0.0.0.  # noqa: E501

        :param evacuate_appliance_all: The evacuate_appliance_all of this MigrationRecommendationCreate.  # noqa: E501
        :type: object
        """

        self._evacuate_appliance_all = evacuate_appliance_all

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MigrationRecommendationCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MigrationRecommendationCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MigrationRecommendationCreate):
            return True

        return self.to_dict() != other.to_dict()
