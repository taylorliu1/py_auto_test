# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class SpaceMetricsByAppliance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'appliance_id': 'str',
        'timestamp': 'datetime',
        'logical_provisioned': 'int',
        'logical_used': 'int',
        'logical_used_volume': 'int',
        'logical_used_file_system': 'int',
        'logical_used_vvol': 'int',
        'shared_logical_used_volume': 'int',
        'shared_logical_used_file_system': 'int',
        'shared_logical_used_vvol': 'int',
        'physical_total': 'int',
        'physical_used': 'int',
        'data_physical_used': 'int',
        'efficiency_ratio': 'float',
        'data_reduction': 'float',
        'snapshot_savings': 'float',
        'thin_savings': 'float',
        'shared_logical_used': 'int',
        'system_free_space': 'int',
        'repeat_count': 'int'
    }

    attribute_map = {
        'appliance_id': 'appliance_id',
        'timestamp': 'timestamp',
        'logical_provisioned': 'logical_provisioned',
        'logical_used': 'logical_used',
        'logical_used_volume': 'logical_used_volume',
        'logical_used_file_system': 'logical_used_file_system',
        'logical_used_vvol': 'logical_used_vvol',
        'shared_logical_used_volume': 'shared_logical_used_volume',
        'shared_logical_used_file_system': 'shared_logical_used_file_system',
        'shared_logical_used_vvol': 'shared_logical_used_vvol',
        'physical_total': 'physical_total',
        'physical_used': 'physical_used',
        'data_physical_used': 'data_physical_used',
        'efficiency_ratio': 'efficiency_ratio',
        'data_reduction': 'data_reduction',
        'snapshot_savings': 'snapshot_savings',
        'thin_savings': 'thin_savings',
        'shared_logical_used': 'shared_logical_used',
        'system_free_space': 'system_free_space',
        'repeat_count': 'repeat_count'
    }

    def __init__(self, appliance_id=None, timestamp=None, logical_provisioned=None, logical_used=None, logical_used_volume=None, logical_used_file_system=None, logical_used_vvol=None, shared_logical_used_volume=None, shared_logical_used_file_system=None, shared_logical_used_vvol=None, physical_total=None, physical_used=None, data_physical_used=None, efficiency_ratio=None, data_reduction=None, snapshot_savings=None, thin_savings=None, shared_logical_used=None, system_free_space=None, repeat_count=None, _configuration=None):  # noqa: E501
        """SpaceMetricsByAppliance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._appliance_id = None
        self._timestamp = None
        self._logical_provisioned = None
        self._logical_used = None
        self._logical_used_volume = None
        self._logical_used_file_system = None
        self._logical_used_vvol = None
        self._shared_logical_used_volume = None
        self._shared_logical_used_file_system = None
        self._shared_logical_used_vvol = None
        self._physical_total = None
        self._physical_used = None
        self._data_physical_used = None
        self._efficiency_ratio = None
        self._data_reduction = None
        self._snapshot_savings = None
        self._thin_savings = None
        self._shared_logical_used = None
        self._system_free_space = None
        self._repeat_count = None
        self.discriminator = None

        if appliance_id is not None:
            self.appliance_id = appliance_id
        if timestamp is not None:
            self.timestamp = timestamp
        if logical_provisioned is not None:
            self.logical_provisioned = logical_provisioned
        if logical_used is not None:
            self.logical_used = logical_used
        if logical_used_volume is not None:
            self.logical_used_volume = logical_used_volume
        if logical_used_file_system is not None:
            self.logical_used_file_system = logical_used_file_system
        if logical_used_vvol is not None:
            self.logical_used_vvol = logical_used_vvol
        if shared_logical_used_volume is not None:
            self.shared_logical_used_volume = shared_logical_used_volume
        if shared_logical_used_file_system is not None:
            self.shared_logical_used_file_system = shared_logical_used_file_system
        if shared_logical_used_vvol is not None:
            self.shared_logical_used_vvol = shared_logical_used_vvol
        if physical_total is not None:
            self.physical_total = physical_total
        if physical_used is not None:
            self.physical_used = physical_used
        if data_physical_used is not None:
            self.data_physical_used = data_physical_used
        if efficiency_ratio is not None:
            self.efficiency_ratio = efficiency_ratio
        if data_reduction is not None:
            self.data_reduction = data_reduction
        if snapshot_savings is not None:
            self.snapshot_savings = snapshot_savings
        if thin_savings is not None:
            self.thin_savings = thin_savings
        if shared_logical_used is not None:
            self.shared_logical_used = shared_logical_used
        if system_free_space is not None:
            self.system_free_space = system_free_space
        if repeat_count is not None:
            self.repeat_count = repeat_count

    @property
    def appliance_id(self):
        """Gets the appliance_id of this SpaceMetricsByAppliance.  # noqa: E501

        Reference to the associated appliance on which these metrics were recorded.  # noqa: E501

        :return: The appliance_id of this SpaceMetricsByAppliance.  # noqa: E501
        :rtype: str
        """
        return self._appliance_id

    @appliance_id.setter
    def appliance_id(self, appliance_id):
        """Sets the appliance_id of this SpaceMetricsByAppliance.

        Reference to the associated appliance on which these metrics were recorded.  # noqa: E501

        :param appliance_id: The appliance_id of this SpaceMetricsByAppliance.  # noqa: E501
        :type: str
        """

        self._appliance_id = appliance_id

    @property
    def timestamp(self):
        """Gets the timestamp of this SpaceMetricsByAppliance.  # noqa: E501

        End of sample period.  # noqa: E501

        :return: The timestamp of this SpaceMetricsByAppliance.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this SpaceMetricsByAppliance.

        End of sample period.  # noqa: E501

        :param timestamp: The timestamp of this SpaceMetricsByAppliance.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def logical_provisioned(self):
        """Gets the logical_provisioned of this SpaceMetricsByAppliance.  # noqa: E501

        Total configured size of all storage objects on an appliance. This metric includes all primaries, snaps and clones.  # noqa: E501

        :return: The logical_provisioned of this SpaceMetricsByAppliance.  # noqa: E501
        :rtype: int
        """
        return self._logical_provisioned

    @logical_provisioned.setter
    def logical_provisioned(self, logical_provisioned):
        """Sets the logical_provisioned of this SpaceMetricsByAppliance.

        Total configured size of all storage objects on an appliance. This metric includes all primaries, snaps and clones.  # noqa: E501

        :param logical_provisioned: The logical_provisioned of this SpaceMetricsByAppliance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                logical_provisioned is not None and logical_provisioned > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `logical_provisioned`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                logical_provisioned is not None and logical_provisioned < 0):  # noqa: E501
            raise ValueError("Invalid value for `logical_provisioned`, must be a value greater than or equal to `0`")  # noqa: E501

        self._logical_provisioned = logical_provisioned

    @property
    def logical_used(self):
        """Gets the logical_used of this SpaceMetricsByAppliance.  # noqa: E501

        Amount of data in bytes written to all storage objects on an appliance, without any deduplication and/or compression. This metric includes all primaries, snaps and clones.  # noqa: E501

        :return: The logical_used of this SpaceMetricsByAppliance.  # noqa: E501
        :rtype: int
        """
        return self._logical_used

    @logical_used.setter
    def logical_used(self, logical_used):
        """Sets the logical_used of this SpaceMetricsByAppliance.

        Amount of data in bytes written to all storage objects on an appliance, without any deduplication and/or compression. This metric includes all primaries, snaps and clones.  # noqa: E501

        :param logical_used: The logical_used of this SpaceMetricsByAppliance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                logical_used is not None and logical_used > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `logical_used`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                logical_used is not None and logical_used < 0):  # noqa: E501
            raise ValueError("Invalid value for `logical_used`, must be a value greater than or equal to `0`")  # noqa: E501

        self._logical_used = logical_used

    @property
    def logical_used_volume(self):
        """Gets the logical_used_volume of this SpaceMetricsByAppliance.  # noqa: E501

        Amount of data in bytes written to all block volumes on an appliance, without any deduplication and/or compression. This metric includes all primaries, snaps and clones. Was added in version 2.0.0.0.  # noqa: E501

        :return: The logical_used_volume of this SpaceMetricsByAppliance.  # noqa: E501
        :rtype: int
        """
        return self._logical_used_volume

    @logical_used_volume.setter
    def logical_used_volume(self, logical_used_volume):
        """Sets the logical_used_volume of this SpaceMetricsByAppliance.

        Amount of data in bytes written to all block volumes on an appliance, without any deduplication and/or compression. This metric includes all primaries, snaps and clones. Was added in version 2.0.0.0.  # noqa: E501

        :param logical_used_volume: The logical_used_volume of this SpaceMetricsByAppliance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                logical_used_volume is not None and logical_used_volume > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `logical_used_volume`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                logical_used_volume is not None and logical_used_volume < 0):  # noqa: E501
            raise ValueError("Invalid value for `logical_used_volume`, must be a value greater than or equal to `0`")  # noqa: E501

        self._logical_used_volume = logical_used_volume

    @property
    def logical_used_file_system(self):
        """Gets the logical_used_file_system of this SpaceMetricsByAppliance.  # noqa: E501

        Amount of data in bytes written to all file systems on an appliance, without any deduplication and/or compression. This metric includes all primaries, snaps and clones. Was added in version 2.0.0.0.  # noqa: E501

        :return: The logical_used_file_system of this SpaceMetricsByAppliance.  # noqa: E501
        :rtype: int
        """
        return self._logical_used_file_system

    @logical_used_file_system.setter
    def logical_used_file_system(self, logical_used_file_system):
        """Sets the logical_used_file_system of this SpaceMetricsByAppliance.

        Amount of data in bytes written to all file systems on an appliance, without any deduplication and/or compression. This metric includes all primaries, snaps and clones. Was added in version 2.0.0.0.  # noqa: E501

        :param logical_used_file_system: The logical_used_file_system of this SpaceMetricsByAppliance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                logical_used_file_system is not None and logical_used_file_system > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `logical_used_file_system`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                logical_used_file_system is not None and logical_used_file_system < 0):  # noqa: E501
            raise ValueError("Invalid value for `logical_used_file_system`, must be a value greater than or equal to `0`")  # noqa: E501

        self._logical_used_file_system = logical_used_file_system

    @property
    def logical_used_vvol(self):
        """Gets the logical_used_vvol of this SpaceMetricsByAppliance.  # noqa: E501

        Amount of data in bytes written to all virtual volumes on an appliance, without any deduplication and/or compression. This metric includes all primaries, snaps and clones. Was added in version 2.0.0.0.  # noqa: E501

        :return: The logical_used_vvol of this SpaceMetricsByAppliance.  # noqa: E501
        :rtype: int
        """
        return self._logical_used_vvol

    @logical_used_vvol.setter
    def logical_used_vvol(self, logical_used_vvol):
        """Sets the logical_used_vvol of this SpaceMetricsByAppliance.

        Amount of data in bytes written to all virtual volumes on an appliance, without any deduplication and/or compression. This metric includes all primaries, snaps and clones. Was added in version 2.0.0.0.  # noqa: E501

        :param logical_used_vvol: The logical_used_vvol of this SpaceMetricsByAppliance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                logical_used_vvol is not None and logical_used_vvol > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `logical_used_vvol`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                logical_used_vvol is not None and logical_used_vvol < 0):  # noqa: E501
            raise ValueError("Invalid value for `logical_used_vvol`, must be a value greater than or equal to `0`")  # noqa: E501

        self._logical_used_vvol = logical_used_vvol

    @property
    def shared_logical_used_volume(self):
        """Gets the shared_logical_used_volume of this SpaceMetricsByAppliance.  # noqa: E501

        Amount of data in bytes written to all block volumes on an appliance, without any deduplication and/or compression. This metric includes all primaries and clones. Was added in version 2.0.0.0.  # noqa: E501

        :return: The shared_logical_used_volume of this SpaceMetricsByAppliance.  # noqa: E501
        :rtype: int
        """
        return self._shared_logical_used_volume

    @shared_logical_used_volume.setter
    def shared_logical_used_volume(self, shared_logical_used_volume):
        """Sets the shared_logical_used_volume of this SpaceMetricsByAppliance.

        Amount of data in bytes written to all block volumes on an appliance, without any deduplication and/or compression. This metric includes all primaries and clones. Was added in version 2.0.0.0.  # noqa: E501

        :param shared_logical_used_volume: The shared_logical_used_volume of this SpaceMetricsByAppliance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                shared_logical_used_volume is not None and shared_logical_used_volume > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `shared_logical_used_volume`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                shared_logical_used_volume is not None and shared_logical_used_volume < 0):  # noqa: E501
            raise ValueError("Invalid value for `shared_logical_used_volume`, must be a value greater than or equal to `0`")  # noqa: E501

        self._shared_logical_used_volume = shared_logical_used_volume

    @property
    def shared_logical_used_file_system(self):
        """Gets the shared_logical_used_file_system of this SpaceMetricsByAppliance.  # noqa: E501

        Amount of data in bytes written to all file systems on an appliance, without any deduplication and/or compression. This metric includes all primaries and clones. Was added in version 2.0.0.0.  # noqa: E501

        :return: The shared_logical_used_file_system of this SpaceMetricsByAppliance.  # noqa: E501
        :rtype: int
        """
        return self._shared_logical_used_file_system

    @shared_logical_used_file_system.setter
    def shared_logical_used_file_system(self, shared_logical_used_file_system):
        """Sets the shared_logical_used_file_system of this SpaceMetricsByAppliance.

        Amount of data in bytes written to all file systems on an appliance, without any deduplication and/or compression. This metric includes all primaries and clones. Was added in version 2.0.0.0.  # noqa: E501

        :param shared_logical_used_file_system: The shared_logical_used_file_system of this SpaceMetricsByAppliance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                shared_logical_used_file_system is not None and shared_logical_used_file_system > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `shared_logical_used_file_system`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                shared_logical_used_file_system is not None and shared_logical_used_file_system < 0):  # noqa: E501
            raise ValueError("Invalid value for `shared_logical_used_file_system`, must be a value greater than or equal to `0`")  # noqa: E501

        self._shared_logical_used_file_system = shared_logical_used_file_system

    @property
    def shared_logical_used_vvol(self):
        """Gets the shared_logical_used_vvol of this SpaceMetricsByAppliance.  # noqa: E501

        Amount of data in bytes written to all virtual volumes on an appliance, without any deduplication and/or compression. This metric includes all primaries and clones. Was added in version 2.0.0.0.  # noqa: E501

        :return: The shared_logical_used_vvol of this SpaceMetricsByAppliance.  # noqa: E501
        :rtype: int
        """
        return self._shared_logical_used_vvol

    @shared_logical_used_vvol.setter
    def shared_logical_used_vvol(self, shared_logical_used_vvol):
        """Sets the shared_logical_used_vvol of this SpaceMetricsByAppliance.

        Amount of data in bytes written to all virtual volumes on an appliance, without any deduplication and/or compression. This metric includes all primaries and clones. Was added in version 2.0.0.0.  # noqa: E501

        :param shared_logical_used_vvol: The shared_logical_used_vvol of this SpaceMetricsByAppliance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                shared_logical_used_vvol is not None and shared_logical_used_vvol > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `shared_logical_used_vvol`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                shared_logical_used_vvol is not None and shared_logical_used_vvol < 0):  # noqa: E501
            raise ValueError("Invalid value for `shared_logical_used_vvol`, must be a value greater than or equal to `0`")  # noqa: E501

        self._shared_logical_used_vvol = shared_logical_used_vvol

    @property
    def physical_total(self):
        """Gets the physical_total of this SpaceMetricsByAppliance.  # noqa: E501

        Total combined space on the physical drives of the appliance available for data.  # noqa: E501

        :return: The physical_total of this SpaceMetricsByAppliance.  # noqa: E501
        :rtype: int
        """
        return self._physical_total

    @physical_total.setter
    def physical_total(self, physical_total):
        """Sets the physical_total of this SpaceMetricsByAppliance.

        Total combined space on the physical drives of the appliance available for data.  # noqa: E501

        :param physical_total: The physical_total of this SpaceMetricsByAppliance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                physical_total is not None and physical_total > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `physical_total`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                physical_total is not None and physical_total < 0):  # noqa: E501
            raise ValueError("Invalid value for `physical_total`, must be a value greater than or equal to `0`")  # noqa: E501

        self._physical_total = physical_total

    @property
    def physical_used(self):
        """Gets the physical_used of this SpaceMetricsByAppliance.  # noqa: E501

        Total physical space consumed in the appliance, accounting for all efficiency mechanisms, as well as all data protection.  # noqa: E501

        :return: The physical_used of this SpaceMetricsByAppliance.  # noqa: E501
        :rtype: int
        """
        return self._physical_used

    @physical_used.setter
    def physical_used(self, physical_used):
        """Sets the physical_used of this SpaceMetricsByAppliance.

        Total physical space consumed in the appliance, accounting for all efficiency mechanisms, as well as all data protection.  # noqa: E501

        :param physical_used: The physical_used of this SpaceMetricsByAppliance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                physical_used is not None and physical_used > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `physical_used`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                physical_used is not None and physical_used < 0):  # noqa: E501
            raise ValueError("Invalid value for `physical_used`, must be a value greater than or equal to `0`")  # noqa: E501

        self._physical_used = physical_used

    @property
    def data_physical_used(self):
        """Gets the data_physical_used of this SpaceMetricsByAppliance.  # noqa: E501

        This metric represents amount of physical space user data occupies after deduplication and compression.  # noqa: E501

        :return: The data_physical_used of this SpaceMetricsByAppliance.  # noqa: E501
        :rtype: int
        """
        return self._data_physical_used

    @data_physical_used.setter
    def data_physical_used(self, data_physical_used):
        """Sets the data_physical_used of this SpaceMetricsByAppliance.

        This metric represents amount of physical space user data occupies after deduplication and compression.  # noqa: E501

        :param data_physical_used: The data_physical_used of this SpaceMetricsByAppliance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                data_physical_used is not None and data_physical_used > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `data_physical_used`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                data_physical_used is not None and data_physical_used < 0):  # noqa: E501
            raise ValueError("Invalid value for `data_physical_used`, must be a value greater than or equal to `0`")  # noqa: E501

        self._data_physical_used = data_physical_used

    @property
    def efficiency_ratio(self):
        """Gets the efficiency_ratio of this SpaceMetricsByAppliance.  # noqa: E501

        The overall efficiency is computed as a ratio of the total space provisioned to physical used space. For example, ten 2 GB volumes were provisioned and 1 GB of data is written to each of them. Each of the volumes has one snapshot as well, for another ten 2 GB volumes. All volumes are thinly provisioned with deduplication and compression applied, there is 4 GB of physical space used. Overall efficiency would be (20 * 2 GB) / 4 GB or 10:1. The efficiency_ratio value will be 10 in this example.  # noqa: E501

        :return: The efficiency_ratio of this SpaceMetricsByAppliance.  # noqa: E501
        :rtype: float
        """
        return self._efficiency_ratio

    @efficiency_ratio.setter
    def efficiency_ratio(self, efficiency_ratio):
        """Sets the efficiency_ratio of this SpaceMetricsByAppliance.

        The overall efficiency is computed as a ratio of the total space provisioned to physical used space. For example, ten 2 GB volumes were provisioned and 1 GB of data is written to each of them. Each of the volumes has one snapshot as well, for another ten 2 GB volumes. All volumes are thinly provisioned with deduplication and compression applied, there is 4 GB of physical space used. Overall efficiency would be (20 * 2 GB) / 4 GB or 10:1. The efficiency_ratio value will be 10 in this example.  # noqa: E501

        :param efficiency_ratio: The efficiency_ratio of this SpaceMetricsByAppliance.  # noqa: E501
        :type: float
        """

        self._efficiency_ratio = efficiency_ratio

    @property
    def data_reduction(self):
        """Gets the data_reduction of this SpaceMetricsByAppliance.  # noqa: E501

        Ratio of the logical used space to data physical used space which is after deduplication and compression.  # noqa: E501

        :return: The data_reduction of this SpaceMetricsByAppliance.  # noqa: E501
        :rtype: float
        """
        return self._data_reduction

    @data_reduction.setter
    def data_reduction(self, data_reduction):
        """Sets the data_reduction of this SpaceMetricsByAppliance.

        Ratio of the logical used space to data physical used space which is after deduplication and compression.  # noqa: E501

        :param data_reduction: The data_reduction of this SpaceMetricsByAppliance.  # noqa: E501
        :type: float
        """

        self._data_reduction = data_reduction

    @property
    def snapshot_savings(self):
        """Gets the snapshot_savings of this SpaceMetricsByAppliance.  # noqa: E501

        Ratio of the amount of space that would have been used by snapshots if space efficiency was not applied to logical space used solely by snapshots. For example, an object is provisioned as 1 GB and it has two snapshots. Each snapshot has 200 MB of data. Snapshot savings will be (1 GB + 1 GB) / (0.2 GB + 0.2 GB) or 5:1. The snapshot_savings value will be 5 in this case.  # noqa: E501

        :return: The snapshot_savings of this SpaceMetricsByAppliance.  # noqa: E501
        :rtype: float
        """
        return self._snapshot_savings

    @snapshot_savings.setter
    def snapshot_savings(self, snapshot_savings):
        """Sets the snapshot_savings of this SpaceMetricsByAppliance.

        Ratio of the amount of space that would have been used by snapshots if space efficiency was not applied to logical space used solely by snapshots. For example, an object is provisioned as 1 GB and it has two snapshots. Each snapshot has 200 MB of data. Snapshot savings will be (1 GB + 1 GB) / (0.2 GB + 0.2 GB) or 5:1. The snapshot_savings value will be 5 in this case.  # noqa: E501

        :param snapshot_savings: The snapshot_savings of this SpaceMetricsByAppliance.  # noqa: E501
        :type: float
        """

        self._snapshot_savings = snapshot_savings

    @property
    def thin_savings(self):
        """Gets the thin_savings of this SpaceMetricsByAppliance.  # noqa: E501

        Ratio of all the vVol provisioned to data they contain. This is the ratio of logical_provisioned to logical_used. For example, a cluster has two 2 GB objects and have written 500 MB bytes of data to them. The thin savings would be (2 * 2 GB) / (2 * 0.5 GB) or 4:1, so the thin_savings value would be 4.0.  # noqa: E501

        :return: The thin_savings of this SpaceMetricsByAppliance.  # noqa: E501
        :rtype: float
        """
        return self._thin_savings

    @thin_savings.setter
    def thin_savings(self, thin_savings):
        """Sets the thin_savings of this SpaceMetricsByAppliance.

        Ratio of all the vVol provisioned to data they contain. This is the ratio of logical_provisioned to logical_used. For example, a cluster has two 2 GB objects and have written 500 MB bytes of data to them. The thin savings would be (2 * 2 GB) / (2 * 0.5 GB) or 4:1, so the thin_savings value would be 4.0.  # noqa: E501

        :param thin_savings: The thin_savings of this SpaceMetricsByAppliance.  # noqa: E501
        :type: float
        """

        self._thin_savings = thin_savings

    @property
    def shared_logical_used(self):
        """Gets the shared_logical_used of this SpaceMetricsByAppliance.  # noqa: E501

        Amount of space the volume family needs to hold the data written by host and shared by snaps and fast-clones in the family. This does not include deduplication or compression.  # noqa: E501

        :return: The shared_logical_used of this SpaceMetricsByAppliance.  # noqa: E501
        :rtype: int
        """
        return self._shared_logical_used

    @shared_logical_used.setter
    def shared_logical_used(self, shared_logical_used):
        """Sets the shared_logical_used of this SpaceMetricsByAppliance.

        Amount of space the volume family needs to hold the data written by host and shared by snaps and fast-clones in the family. This does not include deduplication or compression.  # noqa: E501

        :param shared_logical_used: The shared_logical_used of this SpaceMetricsByAppliance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                shared_logical_used is not None and shared_logical_used > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `shared_logical_used`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                shared_logical_used is not None and shared_logical_used < 0):  # noqa: E501
            raise ValueError("Invalid value for `shared_logical_used`, must be a value greater than or equal to `0`")  # noqa: E501

        self._shared_logical_used = shared_logical_used

    @property
    def system_free_space(self):
        """Gets the system_free_space of this SpaceMetricsByAppliance.  # noqa: E501

        Space formerly used by the system for internal needs that will be reused for the same purpose as additional storage is provisioned. Was added in version 3.0.0.0.  # noqa: E501

        :return: The system_free_space of this SpaceMetricsByAppliance.  # noqa: E501
        :rtype: int
        """
        return self._system_free_space

    @system_free_space.setter
    def system_free_space(self, system_free_space):
        """Sets the system_free_space of this SpaceMetricsByAppliance.

        Space formerly used by the system for internal needs that will be reused for the same purpose as additional storage is provisioned. Was added in version 3.0.0.0.  # noqa: E501

        :param system_free_space: The system_free_space of this SpaceMetricsByAppliance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                system_free_space is not None and system_free_space > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `system_free_space`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                system_free_space is not None and system_free_space < 0):  # noqa: E501
            raise ValueError("Invalid value for `system_free_space`, must be a value greater than or equal to `0`")  # noqa: E501

        self._system_free_space = system_free_space

    @property
    def repeat_count(self):
        """Gets the repeat_count of this SpaceMetricsByAppliance.  # noqa: E501

        Number of times the metrics are repeated.  # noqa: E501

        :return: The repeat_count of this SpaceMetricsByAppliance.  # noqa: E501
        :rtype: int
        """
        return self._repeat_count

    @repeat_count.setter
    def repeat_count(self, repeat_count):
        """Sets the repeat_count of this SpaceMetricsByAppliance.

        Number of times the metrics are repeated.  # noqa: E501

        :param repeat_count: The repeat_count of this SpaceMetricsByAppliance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                repeat_count is not None and repeat_count > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `repeat_count`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                repeat_count is not None and repeat_count < 0):  # noqa: E501
            raise ValueError("Invalid value for `repeat_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._repeat_count = repeat_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SpaceMetricsByAppliance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpaceMetricsByAppliance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SpaceMetricsByAppliance):
            return True

        return self.to_dict() != other.to_dict()
