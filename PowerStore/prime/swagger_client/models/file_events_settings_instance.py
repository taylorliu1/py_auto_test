# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class FileEventsSettingsInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'events_category': 'FileEventsCategoryEnum',
        'open_file_no_access': 'bool',
        'open_file_read': 'bool',
        'open_file_write': 'bool',
        'create_file': 'bool',
        'create_dir': 'bool',
        'delete_file': 'bool',
        'delete_dir': 'bool',
        'close_modified': 'bool',
        'close_unmodified': 'bool',
        'rename_file': 'bool',
        'rename_dir': 'bool',
        'set_acl_file': 'bool',
        'set_acl_dir': 'bool',
        'open_dir': 'bool',
        'close_dir': 'bool',
        'file_read': 'bool',
        'file_write': 'bool',
        'set_sec_file': 'bool',
        'set_sec_dir': 'bool',
        'open_file_read_offline': 'bool',
        'open_file_write_offline': 'bool'
    }

    attribute_map = {
        'events_category': 'events_category',
        'open_file_no_access': 'open_file_no_access',
        'open_file_read': 'open_file_read',
        'open_file_write': 'open_file_write',
        'create_file': 'create_file',
        'create_dir': 'create_dir',
        'delete_file': 'delete_file',
        'delete_dir': 'delete_dir',
        'close_modified': 'close_modified',
        'close_unmodified': 'close_unmodified',
        'rename_file': 'rename_file',
        'rename_dir': 'rename_dir',
        'set_acl_file': 'set_acl_file',
        'set_acl_dir': 'set_acl_dir',
        'open_dir': 'open_dir',
        'close_dir': 'close_dir',
        'file_read': 'file_read',
        'file_write': 'file_write',
        'set_sec_file': 'set_sec_file',
        'set_sec_dir': 'set_sec_dir',
        'open_file_read_offline': 'open_file_read_offline',
        'open_file_write_offline': 'open_file_write_offline'
    }

    def __init__(self, events_category=None, open_file_no_access=False, open_file_read=False, open_file_write=False, create_file=False, create_dir=False, delete_file=False, delete_dir=False, close_modified=False, close_unmodified=False, rename_file=False, rename_dir=False, set_acl_file=False, set_acl_dir=False, open_dir=False, close_dir=False, file_read=False, file_write=False, set_sec_file=False, set_sec_dir=False, open_file_read_offline=False, open_file_write_offline=False, _configuration=None):  # noqa: E501
        """FileEventsSettingsInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._events_category = None
        self._open_file_no_access = None
        self._open_file_read = None
        self._open_file_write = None
        self._create_file = None
        self._create_dir = None
        self._delete_file = None
        self._delete_dir = None
        self._close_modified = None
        self._close_unmodified = None
        self._rename_file = None
        self._rename_dir = None
        self._set_acl_file = None
        self._set_acl_dir = None
        self._open_dir = None
        self._close_dir = None
        self._file_read = None
        self._file_write = None
        self._set_sec_file = None
        self._set_sec_dir = None
        self._open_file_read_offline = None
        self._open_file_write_offline = None
        self.discriminator = None

        if events_category is not None:
            self.events_category = events_category
        if open_file_no_access is not None:
            self.open_file_no_access = open_file_no_access
        if open_file_read is not None:
            self.open_file_read = open_file_read
        if open_file_write is not None:
            self.open_file_write = open_file_write
        if create_file is not None:
            self.create_file = create_file
        if create_dir is not None:
            self.create_dir = create_dir
        if delete_file is not None:
            self.delete_file = delete_file
        if delete_dir is not None:
            self.delete_dir = delete_dir
        if close_modified is not None:
            self.close_modified = close_modified
        if close_unmodified is not None:
            self.close_unmodified = close_unmodified
        if rename_file is not None:
            self.rename_file = rename_file
        if rename_dir is not None:
            self.rename_dir = rename_dir
        if set_acl_file is not None:
            self.set_acl_file = set_acl_file
        if set_acl_dir is not None:
            self.set_acl_dir = set_acl_dir
        if open_dir is not None:
            self.open_dir = open_dir
        if close_dir is not None:
            self.close_dir = close_dir
        if file_read is not None:
            self.file_read = file_read
        if file_write is not None:
            self.file_write = file_write
        if set_sec_file is not None:
            self.set_sec_file = set_sec_file
        if set_sec_dir is not None:
            self.set_sec_dir = set_sec_dir
        if open_file_read_offline is not None:
            self.open_file_read_offline = open_file_read_offline
        if open_file_write_offline is not None:
            self.open_file_write_offline = open_file_write_offline

    @property
    def events_category(self):
        """Gets the events_category of this FileEventsSettingsInstance.  # noqa: E501


        :return: The events_category of this FileEventsSettingsInstance.  # noqa: E501
        :rtype: FileEventsCategoryEnum
        """
        return self._events_category

    @events_category.setter
    def events_category(self, events_category):
        """Sets the events_category of this FileEventsSettingsInstance.


        :param events_category: The events_category of this FileEventsSettingsInstance.  # noqa: E501
        :type: FileEventsCategoryEnum
        """

        self._events_category = events_category

    @property
    def open_file_no_access(self):
        """Gets the open_file_no_access of this FileEventsSettingsInstance.  # noqa: E501

        Sends a notification when a file is opened for a change other than read or write access. Protocols: SMB, NFS(v4).   # noqa: E501

        :return: The open_file_no_access of this FileEventsSettingsInstance.  # noqa: E501
        :rtype: bool
        """
        return self._open_file_no_access

    @open_file_no_access.setter
    def open_file_no_access(self, open_file_no_access):
        """Sets the open_file_no_access of this FileEventsSettingsInstance.

        Sends a notification when a file is opened for a change other than read or write access. Protocols: SMB, NFS(v4).   # noqa: E501

        :param open_file_no_access: The open_file_no_access of this FileEventsSettingsInstance.  # noqa: E501
        :type: bool
        """

        self._open_file_no_access = open_file_no_access

    @property
    def open_file_read(self):
        """Gets the open_file_read of this FileEventsSettingsInstance.  # noqa: E501

        Sends a notification when a file is opened for read access. Protocols: SMB, NFS(v4).   # noqa: E501

        :return: The open_file_read of this FileEventsSettingsInstance.  # noqa: E501
        :rtype: bool
        """
        return self._open_file_read

    @open_file_read.setter
    def open_file_read(self, open_file_read):
        """Sets the open_file_read of this FileEventsSettingsInstance.

        Sends a notification when a file is opened for read access. Protocols: SMB, NFS(v4).   # noqa: E501

        :param open_file_read: The open_file_read of this FileEventsSettingsInstance.  # noqa: E501
        :type: bool
        """

        self._open_file_read = open_file_read

    @property
    def open_file_write(self):
        """Gets the open_file_write of this FileEventsSettingsInstance.  # noqa: E501

        Sends a notification when a file is opened for write access. Protocols: SMB, NFS(v4).   # noqa: E501

        :return: The open_file_write of this FileEventsSettingsInstance.  # noqa: E501
        :rtype: bool
        """
        return self._open_file_write

    @open_file_write.setter
    def open_file_write(self, open_file_write):
        """Sets the open_file_write of this FileEventsSettingsInstance.

        Sends a notification when a file is opened for write access. Protocols: SMB, NFS(v4).   # noqa: E501

        :param open_file_write: The open_file_write of this FileEventsSettingsInstance.  # noqa: E501
        :type: bool
        """

        self._open_file_write = open_file_write

    @property
    def create_file(self):
        """Gets the create_file of this FileEventsSettingsInstance.  # noqa: E501

        Sends a notification when a file is created. Protocols: SMB, NFS(v3/v4).   # noqa: E501

        :return: The create_file of this FileEventsSettingsInstance.  # noqa: E501
        :rtype: bool
        """
        return self._create_file

    @create_file.setter
    def create_file(self, create_file):
        """Sets the create_file of this FileEventsSettingsInstance.

        Sends a notification when a file is created. Protocols: SMB, NFS(v3/v4).   # noqa: E501

        :param create_file: The create_file of this FileEventsSettingsInstance.  # noqa: E501
        :type: bool
        """

        self._create_file = create_file

    @property
    def create_dir(self):
        """Gets the create_dir of this FileEventsSettingsInstance.  # noqa: E501

        Sends a notification when a directory is created. Protocols: SMB, NFS(v3/v4).   # noqa: E501

        :return: The create_dir of this FileEventsSettingsInstance.  # noqa: E501
        :rtype: bool
        """
        return self._create_dir

    @create_dir.setter
    def create_dir(self, create_dir):
        """Sets the create_dir of this FileEventsSettingsInstance.

        Sends a notification when a directory is created. Protocols: SMB, NFS(v3/v4).   # noqa: E501

        :param create_dir: The create_dir of this FileEventsSettingsInstance.  # noqa: E501
        :type: bool
        """

        self._create_dir = create_dir

    @property
    def delete_file(self):
        """Gets the delete_file of this FileEventsSettingsInstance.  # noqa: E501

        Sends a notification when a file is deleted. Protocols: SMB, NFS(v3/v4).   # noqa: E501

        :return: The delete_file of this FileEventsSettingsInstance.  # noqa: E501
        :rtype: bool
        """
        return self._delete_file

    @delete_file.setter
    def delete_file(self, delete_file):
        """Sets the delete_file of this FileEventsSettingsInstance.

        Sends a notification when a file is deleted. Protocols: SMB, NFS(v3/v4).   # noqa: E501

        :param delete_file: The delete_file of this FileEventsSettingsInstance.  # noqa: E501
        :type: bool
        """

        self._delete_file = delete_file

    @property
    def delete_dir(self):
        """Gets the delete_dir of this FileEventsSettingsInstance.  # noqa: E501

        Sends a notification when a directory is deleted. Protocols: SMB, NFS(v3/v4).   # noqa: E501

        :return: The delete_dir of this FileEventsSettingsInstance.  # noqa: E501
        :rtype: bool
        """
        return self._delete_dir

    @delete_dir.setter
    def delete_dir(self, delete_dir):
        """Sets the delete_dir of this FileEventsSettingsInstance.

        Sends a notification when a directory is deleted. Protocols: SMB, NFS(v3/v4).   # noqa: E501

        :param delete_dir: The delete_dir of this FileEventsSettingsInstance.  # noqa: E501
        :type: bool
        """

        self._delete_dir = delete_dir

    @property
    def close_modified(self):
        """Gets the close_modified of this FileEventsSettingsInstance.  # noqa: E501

        Sends a notification when a file was modified before closing. Protocols: SMB, NFS(v4).   # noqa: E501

        :return: The close_modified of this FileEventsSettingsInstance.  # noqa: E501
        :rtype: bool
        """
        return self._close_modified

    @close_modified.setter
    def close_modified(self, close_modified):
        """Sets the close_modified of this FileEventsSettingsInstance.

        Sends a notification when a file was modified before closing. Protocols: SMB, NFS(v4).   # noqa: E501

        :param close_modified: The close_modified of this FileEventsSettingsInstance.  # noqa: E501
        :type: bool
        """

        self._close_modified = close_modified

    @property
    def close_unmodified(self):
        """Gets the close_unmodified of this FileEventsSettingsInstance.  # noqa: E501

        Sends a notification when a file was not modified before closing. Protocols: SMB, NFS(v4).   # noqa: E501

        :return: The close_unmodified of this FileEventsSettingsInstance.  # noqa: E501
        :rtype: bool
        """
        return self._close_unmodified

    @close_unmodified.setter
    def close_unmodified(self, close_unmodified):
        """Sets the close_unmodified of this FileEventsSettingsInstance.

        Sends a notification when a file was not modified before closing. Protocols: SMB, NFS(v4).   # noqa: E501

        :param close_unmodified: The close_unmodified of this FileEventsSettingsInstance.  # noqa: E501
        :type: bool
        """

        self._close_unmodified = close_unmodified

    @property
    def rename_file(self):
        """Gets the rename_file of this FileEventsSettingsInstance.  # noqa: E501

        Sends a notification when a file is renamed. Protocols: SMB, NFS(v3/v4).   # noqa: E501

        :return: The rename_file of this FileEventsSettingsInstance.  # noqa: E501
        :rtype: bool
        """
        return self._rename_file

    @rename_file.setter
    def rename_file(self, rename_file):
        """Sets the rename_file of this FileEventsSettingsInstance.

        Sends a notification when a file is renamed. Protocols: SMB, NFS(v3/v4).   # noqa: E501

        :param rename_file: The rename_file of this FileEventsSettingsInstance.  # noqa: E501
        :type: bool
        """

        self._rename_file = rename_file

    @property
    def rename_dir(self):
        """Gets the rename_dir of this FileEventsSettingsInstance.  # noqa: E501

        Sends a notification when a directory is renamed. Protocols: SMB, NFS(v3/v4).   # noqa: E501

        :return: The rename_dir of this FileEventsSettingsInstance.  # noqa: E501
        :rtype: bool
        """
        return self._rename_dir

    @rename_dir.setter
    def rename_dir(self, rename_dir):
        """Sets the rename_dir of this FileEventsSettingsInstance.

        Sends a notification when a directory is renamed. Protocols: SMB, NFS(v3/v4).   # noqa: E501

        :param rename_dir: The rename_dir of this FileEventsSettingsInstance.  # noqa: E501
        :type: bool
        """

        self._rename_dir = rename_dir

    @property
    def set_acl_file(self):
        """Gets the set_acl_file of this FileEventsSettingsInstance.  # noqa: E501

        Sends a notification when the security descriptor (ACL) on a files is modified. Protocols: SMB.   # noqa: E501

        :return: The set_acl_file of this FileEventsSettingsInstance.  # noqa: E501
        :rtype: bool
        """
        return self._set_acl_file

    @set_acl_file.setter
    def set_acl_file(self, set_acl_file):
        """Sets the set_acl_file of this FileEventsSettingsInstance.

        Sends a notification when the security descriptor (ACL) on a files is modified. Protocols: SMB.   # noqa: E501

        :param set_acl_file: The set_acl_file of this FileEventsSettingsInstance.  # noqa: E501
        :type: bool
        """

        self._set_acl_file = set_acl_file

    @property
    def set_acl_dir(self):
        """Gets the set_acl_dir of this FileEventsSettingsInstance.  # noqa: E501

        Sends a notification when the secuirty descriptor (ACL) on a directory is modified. Protocols: SMB.   # noqa: E501

        :return: The set_acl_dir of this FileEventsSettingsInstance.  # noqa: E501
        :rtype: bool
        """
        return self._set_acl_dir

    @set_acl_dir.setter
    def set_acl_dir(self, set_acl_dir):
        """Sets the set_acl_dir of this FileEventsSettingsInstance.

        Sends a notification when the secuirty descriptor (ACL) on a directory is modified. Protocols: SMB.   # noqa: E501

        :param set_acl_dir: The set_acl_dir of this FileEventsSettingsInstance.  # noqa: E501
        :type: bool
        """

        self._set_acl_dir = set_acl_dir

    @property
    def open_dir(self):
        """Gets the open_dir of this FileEventsSettingsInstance.  # noqa: E501

        Sends a notification when a directory is opened. Protocols: SMB.   # noqa: E501

        :return: The open_dir of this FileEventsSettingsInstance.  # noqa: E501
        :rtype: bool
        """
        return self._open_dir

    @open_dir.setter
    def open_dir(self, open_dir):
        """Sets the open_dir of this FileEventsSettingsInstance.

        Sends a notification when a directory is opened. Protocols: SMB.   # noqa: E501

        :param open_dir: The open_dir of this FileEventsSettingsInstance.  # noqa: E501
        :type: bool
        """

        self._open_dir = open_dir

    @property
    def close_dir(self):
        """Gets the close_dir of this FileEventsSettingsInstance.  # noqa: E501

        Sends a notification when a directory is closed. Protocols: SMB.   # noqa: E501

        :return: The close_dir of this FileEventsSettingsInstance.  # noqa: E501
        :rtype: bool
        """
        return self._close_dir

    @close_dir.setter
    def close_dir(self, close_dir):
        """Sets the close_dir of this FileEventsSettingsInstance.

        Sends a notification when a directory is closed. Protocols: SMB.   # noqa: E501

        :param close_dir: The close_dir of this FileEventsSettingsInstance.  # noqa: E501
        :type: bool
        """

        self._close_dir = close_dir

    @property
    def file_read(self):
        """Gets the file_read of this FileEventsSettingsInstance.  # noqa: E501

        Sends a notification when a file read is received over NFS. Protocols: NFS(v3/v4).   # noqa: E501

        :return: The file_read of this FileEventsSettingsInstance.  # noqa: E501
        :rtype: bool
        """
        return self._file_read

    @file_read.setter
    def file_read(self, file_read):
        """Sets the file_read of this FileEventsSettingsInstance.

        Sends a notification when a file read is received over NFS. Protocols: NFS(v3/v4).   # noqa: E501

        :param file_read: The file_read of this FileEventsSettingsInstance.  # noqa: E501
        :type: bool
        """

        self._file_read = file_read

    @property
    def file_write(self):
        """Gets the file_write of this FileEventsSettingsInstance.  # noqa: E501

        Sends a notification when a file write is received over NFS. Protocols: NFS(v3/v4).   # noqa: E501

        :return: The file_write of this FileEventsSettingsInstance.  # noqa: E501
        :rtype: bool
        """
        return self._file_write

    @file_write.setter
    def file_write(self, file_write):
        """Sets the file_write of this FileEventsSettingsInstance.

        Sends a notification when a file write is received over NFS. Protocols: NFS(v3/v4).   # noqa: E501

        :param file_write: The file_write of this FileEventsSettingsInstance.  # noqa: E501
        :type: bool
        """

        self._file_write = file_write

    @property
    def set_sec_file(self):
        """Gets the set_sec_file of this FileEventsSettingsInstance.  # noqa: E501

        Sends a notification when a file security modification is received over NFS. Protocols: NFS(v3/v4).   # noqa: E501

        :return: The set_sec_file of this FileEventsSettingsInstance.  # noqa: E501
        :rtype: bool
        """
        return self._set_sec_file

    @set_sec_file.setter
    def set_sec_file(self, set_sec_file):
        """Sets the set_sec_file of this FileEventsSettingsInstance.

        Sends a notification when a file security modification is received over NFS. Protocols: NFS(v3/v4).   # noqa: E501

        :param set_sec_file: The set_sec_file of this FileEventsSettingsInstance.  # noqa: E501
        :type: bool
        """

        self._set_sec_file = set_sec_file

    @property
    def set_sec_dir(self):
        """Gets the set_sec_dir of this FileEventsSettingsInstance.  # noqa: E501

        Sends a notification when a directory security modification is received over NFS. Protocols: NFS(v3/v4).   # noqa: E501

        :return: The set_sec_dir of this FileEventsSettingsInstance.  # noqa: E501
        :rtype: bool
        """
        return self._set_sec_dir

    @set_sec_dir.setter
    def set_sec_dir(self, set_sec_dir):
        """Sets the set_sec_dir of this FileEventsSettingsInstance.

        Sends a notification when a directory security modification is received over NFS. Protocols: NFS(v3/v4).   # noqa: E501

        :param set_sec_dir: The set_sec_dir of this FileEventsSettingsInstance.  # noqa: E501
        :type: bool
        """

        self._set_sec_dir = set_sec_dir

    @property
    def open_file_read_offline(self):
        """Gets the open_file_read_offline of this FileEventsSettingsInstance.  # noqa: E501

        Sends a notification when a offline file is opened for read access. Protocols: SMB, NFS(v4).   # noqa: E501

        :return: The open_file_read_offline of this FileEventsSettingsInstance.  # noqa: E501
        :rtype: bool
        """
        return self._open_file_read_offline

    @open_file_read_offline.setter
    def open_file_read_offline(self, open_file_read_offline):
        """Sets the open_file_read_offline of this FileEventsSettingsInstance.

        Sends a notification when a offline file is opened for read access. Protocols: SMB, NFS(v4).   # noqa: E501

        :param open_file_read_offline: The open_file_read_offline of this FileEventsSettingsInstance.  # noqa: E501
        :type: bool
        """

        self._open_file_read_offline = open_file_read_offline

    @property
    def open_file_write_offline(self):
        """Gets the open_file_write_offline of this FileEventsSettingsInstance.  # noqa: E501

        Sends a notification when a offline file in opened for write access. Protocols: SMB, NFS(v4).   # noqa: E501

        :return: The open_file_write_offline of this FileEventsSettingsInstance.  # noqa: E501
        :rtype: bool
        """
        return self._open_file_write_offline

    @open_file_write_offline.setter
    def open_file_write_offline(self, open_file_write_offline):
        """Sets the open_file_write_offline of this FileEventsSettingsInstance.

        Sends a notification when a offline file in opened for write access. Protocols: SMB, NFS(v4).   # noqa: E501

        :param open_file_write_offline: The open_file_write_offline of this FileEventsSettingsInstance.  # noqa: E501
        :type: bool
        """

        self._open_file_write_offline = open_file_write_offline

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileEventsSettingsInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileEventsSettingsInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FileEventsSettingsInstance):
            return True

        return self.to_dict() != other.to_dict()
