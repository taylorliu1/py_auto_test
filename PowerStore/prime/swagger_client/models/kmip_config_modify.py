# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class KmipConfigModify(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_enabled': 'bool',
        'servers': 'list[str]',
        'add_servers': 'list[str]',
        'remove_servers': 'list[str]',
        'port': 'int',
        'server_timeout': 'int',
        'username': 'str',
        'password': 'str'
    }

    attribute_map = {
        'is_enabled': 'is_enabled',
        'servers': 'servers',
        'add_servers': 'add_servers',
        'remove_servers': 'remove_servers',
        'port': 'port',
        'server_timeout': 'server_timeout',
        'username': 'username',
        'password': 'password'
    }

    def __init__(self, is_enabled=None, servers=None, add_servers=None, remove_servers=None, port=5696, server_timeout=5, username=None, password=None, _configuration=None):  # noqa: E501
        """KmipConfigModify - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._is_enabled = None
        self._servers = None
        self._add_servers = None
        self._remove_servers = None
        self._port = None
        self._server_timeout = None
        self._username = None
        self._password = None
        self.discriminator = None

        if is_enabled is not None:
            self.is_enabled = is_enabled
        if servers is not None:
            self.servers = servers
        if add_servers is not None:
            self.add_servers = add_servers
        if remove_servers is not None:
            self.remove_servers = remove_servers
        if port is not None:
            self.port = port
        if server_timeout is not None:
            self.server_timeout = server_timeout
        if username is not None:
            self.username = username
        if password is not None:
            self.password = password

    @property
    def is_enabled(self):
        """Gets the is_enabled of this KmipConfigModify.  # noqa: E501

        Whether KMIP is enabled. To enable KMIP, at least one operational member server must be defined.  # noqa: E501

        :return: The is_enabled of this KmipConfigModify.  # noqa: E501
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this KmipConfigModify.

        Whether KMIP is enabled. To enable KMIP, at least one operational member server must be defined.  # noqa: E501

        :param is_enabled: The is_enabled of this KmipConfigModify.  # noqa: E501
        :type: bool
        """

        self._is_enabled = is_enabled

    @property
    def servers(self):
        """Gets the servers of this KmipConfigModify.  # noqa: E501

        Replace all of the KMIP server addresses. Addresses may be IPv4, IPv6, or host names. Replace operation is mutually exclusive and is NOT allowed to be combined with add/remove_members operations.  # noqa: E501

        :return: The servers of this KmipConfigModify.  # noqa: E501
        :rtype: list[str]
        """
        return self._servers

    @servers.setter
    def servers(self, servers):
        """Sets the servers of this KmipConfigModify.

        Replace all of the KMIP server addresses. Addresses may be IPv4, IPv6, or host names. Replace operation is mutually exclusive and is NOT allowed to be combined with add/remove_members operations.  # noqa: E501

        :param servers: The servers of this KmipConfigModify.  # noqa: E501
        :type: list[str]
        """

        self._servers = servers

    @property
    def add_servers(self):
        """Gets the add_servers of this KmipConfigModify.  # noqa: E501

        Add KMIP server addresses. Addresses may be IPv4, IPv6, or host names. Note, members may be removed and added as a combined operation call but they are executed sequentially. The remove_members operation will be run BEFORE the add_members operation.  # noqa: E501

        :return: The add_servers of this KmipConfigModify.  # noqa: E501
        :rtype: list[str]
        """
        return self._add_servers

    @add_servers.setter
    def add_servers(self, add_servers):
        """Sets the add_servers of this KmipConfigModify.

        Add KMIP server addresses. Addresses may be IPv4, IPv6, or host names. Note, members may be removed and added as a combined operation call but they are executed sequentially. The remove_members operation will be run BEFORE the add_members operation.  # noqa: E501

        :param add_servers: The add_servers of this KmipConfigModify.  # noqa: E501
        :type: list[str]
        """

        self._add_servers = add_servers

    @property
    def remove_servers(self):
        """Gets the remove_servers of this KmipConfigModify.  # noqa: E501

        Remove KMIP server addresses. Note, members may be removed and added as a combined operation call but they are executed sequentially. The remove_members operation will be run BEFORE the add_members operation.  # noqa: E501

        :return: The remove_servers of this KmipConfigModify.  # noqa: E501
        :rtype: list[str]
        """
        return self._remove_servers

    @remove_servers.setter
    def remove_servers(self, remove_servers):
        """Sets the remove_servers of this KmipConfigModify.

        Remove KMIP server addresses. Note, members may be removed and added as a combined operation call but they are executed sequentially. The remove_members operation will be run BEFORE the add_members operation.  # noqa: E501

        :param remove_servers: The remove_servers of this KmipConfigModify.  # noqa: E501
        :type: list[str]
        """

        self._remove_servers = remove_servers

    @property
    def port(self):
        """Gets the port of this KmipConfigModify.  # noqa: E501

        Port number for establishing connection to a KMIP server (defaults to 5696).  # noqa: E501

        :return: The port of this KmipConfigModify.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this KmipConfigModify.

        Port number for establishing connection to a KMIP server (defaults to 5696).  # noqa: E501

        :param port: The port of this KmipConfigModify.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                port is not None and port > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                port is not None and port < 0):  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value greater than or equal to `0`")  # noqa: E501

        self._port = port

    @property
    def server_timeout(self):
        """Gets the server_timeout of this KmipConfigModify.  # noqa: E501

        Timeout for establishing a connection to a KMIP server. If the system does not receive a reply from the KMIP server before the specified timeout, it stops sending requests. Default value is 5 (5 seconds).  # noqa: E501

        :return: The server_timeout of this KmipConfigModify.  # noqa: E501
        :rtype: int
        """
        return self._server_timeout

    @server_timeout.setter
    def server_timeout(self, server_timeout):
        """Sets the server_timeout of this KmipConfigModify.

        Timeout for establishing a connection to a KMIP server. If the system does not receive a reply from the KMIP server before the specified timeout, it stops sending requests. Default value is 5 (5 seconds).  # noqa: E501

        :param server_timeout: The server_timeout of this KmipConfigModify.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                server_timeout is not None and server_timeout > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `server_timeout`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                server_timeout is not None and server_timeout < 0):  # noqa: E501
            raise ValueError("Invalid value for `server_timeout`, must be a value greater than or equal to `0`")  # noqa: E501

        self._server_timeout = server_timeout

    @property
    def username(self):
        """Gets the username of this KmipConfigModify.  # noqa: E501

        Username for accessing the KMIP server.  # noqa: E501

        :return: The username of this KmipConfigModify.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this KmipConfigModify.

        Username for accessing the KMIP server.  # noqa: E501

        :param username: The username of this KmipConfigModify.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def password(self):
        """Gets the password of this KmipConfigModify.  # noqa: E501

        Password for accessing the KMIP server.  # noqa: E501

        :return: The password of this KmipConfigModify.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this KmipConfigModify.

        Password for accessing the KMIP server.  # noqa: E501

        :param password: The password of this KmipConfigModify.  # noqa: E501
        :type: str
        """

        self._password = password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KmipConfigModify, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KmipConfigModify):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, KmipConfigModify):
            return True

        return self.to_dict() != other.to_dict()
