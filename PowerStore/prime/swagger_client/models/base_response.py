# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class BaseResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'response_type': 'str'
    }

    attribute_map = {
        'response_type': 'response_type'
    }

    discriminator_value_class_map = {
        'job_appliance_time_to_full_response': 'JobApplianceTimeToFullResponse',
        'job_snapshot_rule_clone_response': 'JobSnapshotRuleCloneResponse',
        'job_cluster_validate_create_response': 'JobClusterValidateCreateResponse',
        'job_replication_rule_clone_response': 'JobReplicationRuleCloneResponse',
        'job_virtual_machine_snapshot_response': 'JobVirtualMachineSnapshotResponse',
        'job_migration_session_create_response': 'JobMigrationSessionCreateResponse',
        'job_import_vmax_storage_group_import_snapshot_policy_response': 'JobImportVmaxStorageGroupImportSnapshotPolicyResponse',
        'job_volume_group_refresh_response': 'JobVolumeGroupRefreshResponse',
        'job_import_netapp_volume_import_snapshot_schedules_response': 'JobImportNetappVolumeImportSnapshotSchedulesResponse',
        'job_job_response': 'JobJobResponse',
        'job_create_response': 'JobCreateResponse',
        'job_file_system_clone_response': 'JobFileSystemCloneResponse',
        'job_appliance_validate_create_response': 'JobApplianceValidateCreateResponse',
        'job_migration_recommendation_create_migration_sessions_response': 'JobMigrationRecommendationCreateMigrationSessionsResponse',
        'job_base_capacity_forecast_response': 'JobBaseCapacityForecastResponse',
        'job_error_response': 'JobErrorResponse',
        'job_file_system_restore_response': 'JobFileSystemRestoreResponse',
        'job_replication_session_stop_failover_test_response': 'JobReplicationSessionStopFailoverTestResponse',
        'job_volume_snapshot_response': 'JobVolumeSnapshotResponse',
        'job_appliance_create_error_response': 'JobApplianceCreateErrorResponse',
        'job_cluster_time_to_full_response': 'JobClusterTimeToFullResponse',
        'job_appliance_forecast_response': 'JobApplianceForecastResponse',
        'job_cluster_create_error_response': 'JobClusterCreateErrorResponse',
        'job_volume_group_clone_response': 'JobVolumeGroupCloneResponse',
        'job_volume_restore_response': 'JobVolumeRestoreResponse',
        'job_volume_group_snapshot_response': 'JobVolumeGroupSnapshotResponse',
        'job_policy_clone_response': 'JobPolicyCloneResponse',
        'job_volume_refresh_response': 'JobVolumeRefreshResponse',
        'job_volume_group_restore_response': 'JobVolumeGroupRestoreResponse',
        'job_metrics_archive_generate_response': 'JobMetricsArchiveGenerateResponse',
        'job_volume_configure_metro_response': 'JobVolumeConfigureMetroResponse',
        'job_volume_clone_response': 'JobVolumeCloneResponse',
        'job_keystore_archive_regenerate_response': 'JobKeystoreArchiveRegenerateResponse',
        'job_vvol_error_response': 'JobVvolErrorResponse',
        'job_x509_certificate_csr_response': 'JobX509CertificateCsrResponse',
        'job_cluster_forecast_response': 'JobClusterForecastResponse',
        'job_file_system_snapshot_response': 'JobFileSystemSnapshotResponse'
    }

    def __init__(self, response_type=None, _configuration=None):  # noqa: E501
        """BaseResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._response_type = None
        self.discriminator = 'response_type'

        self.response_type = response_type

    @property
    def response_type(self):
        """Gets the response_type of this BaseResponse.  # noqa: E501


        :return: The response_type of this BaseResponse.  # noqa: E501
        :rtype: str
        """
        return self._response_type

    @response_type.setter
    def response_type(self, response_type):
        """Sets the response_type of this BaseResponse.


        :param response_type: The response_type of this BaseResponse.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and response_type is None:
            raise ValueError("Invalid value for `response_type`, must not be `None`")  # noqa: E501

        self._response_type = response_type

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BaseResponse):
            return True

        return self.to_dict() != other.to_dict()
