# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class ReplicationSessionInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'state': 'ReplicationStateEnum',
        'role': 'ReplicationRoleEnum',
        'resource_type': 'ReplicatedResourceTypeEnum',
        'data_transfer_state': 'DataTransferStateEnum',
        'type': 'ReplicationSessionTypeEnum',
        'last_sync_timestamp': 'datetime',
        'local_resource_id': 'str',
        'remote_resource_id': 'str',
        'remote_system_id': 'str',
        'progress_percentage': 'int',
        'estimated_completion_timestamp': 'datetime',
        'replication_rule_id': 'str',
        'last_sync_duration': 'int',
        'next_sync_timestamp': 'datetime',
        'storage_element_pairs': 'list[ReplicationElementPair]',
        'failover_test_in_progress': 'bool',
        'error_code': 'str',
        'data_connection_state': 'DataConnectionStateEnum',
        'parent_replication_session_id': 'str',
        'local_resource_state': 'ReplicationResourceStateEnum',
        'state_l10n': 'str',
        'role_l10n': 'str',
        'resource_type_l10n': 'str',
        'data_transfer_state_l10n': 'str',
        'type_l10n': 'str',
        'data_connection_state_l10n': 'str',
        'local_resource_state_l10n': 'str',
        'remote_system': 'RemoteSystemInstance',
        'migration_session': 'MigrationSessionInstance',
        'replication_rule': 'ReplicationRuleInstance'
    }

    attribute_map = {
        'id': 'id',
        'state': 'state',
        'role': 'role',
        'resource_type': 'resource_type',
        'data_transfer_state': 'data_transfer_state',
        'type': 'type',
        'last_sync_timestamp': 'last_sync_timestamp',
        'local_resource_id': 'local_resource_id',
        'remote_resource_id': 'remote_resource_id',
        'remote_system_id': 'remote_system_id',
        'progress_percentage': 'progress_percentage',
        'estimated_completion_timestamp': 'estimated_completion_timestamp',
        'replication_rule_id': 'replication_rule_id',
        'last_sync_duration': 'last_sync_duration',
        'next_sync_timestamp': 'next_sync_timestamp',
        'storage_element_pairs': 'storage_element_pairs',
        'failover_test_in_progress': 'failover_test_in_progress',
        'error_code': 'error_code',
        'data_connection_state': 'data_connection_state',
        'parent_replication_session_id': 'parent_replication_session_id',
        'local_resource_state': 'local_resource_state',
        'state_l10n': 'state_l10n',
        'role_l10n': 'role_l10n',
        'resource_type_l10n': 'resource_type_l10n',
        'data_transfer_state_l10n': 'data_transfer_state_l10n',
        'type_l10n': 'type_l10n',
        'data_connection_state_l10n': 'data_connection_state_l10n',
        'local_resource_state_l10n': 'local_resource_state_l10n',
        'remote_system': 'remote_system',
        'migration_session': 'migration_session',
        'replication_rule': 'replication_rule'
    }

    def __init__(self, id=None, state=None, role=None, resource_type=None, data_transfer_state=None, type=None, last_sync_timestamp=None, local_resource_id=None, remote_resource_id=None, remote_system_id=None, progress_percentage=None, estimated_completion_timestamp=None, replication_rule_id=None, last_sync_duration=None, next_sync_timestamp=None, storage_element_pairs=None, failover_test_in_progress=False, error_code=None, data_connection_state=None, parent_replication_session_id=None, local_resource_state=None, state_l10n=None, role_l10n=None, resource_type_l10n=None, data_transfer_state_l10n=None, type_l10n=None, data_connection_state_l10n=None, local_resource_state_l10n=None, remote_system=None, migration_session=None, replication_rule=None, _configuration=None):  # noqa: E501
        """ReplicationSessionInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._state = None
        self._role = None
        self._resource_type = None
        self._data_transfer_state = None
        self._type = None
        self._last_sync_timestamp = None
        self._local_resource_id = None
        self._remote_resource_id = None
        self._remote_system_id = None
        self._progress_percentage = None
        self._estimated_completion_timestamp = None
        self._replication_rule_id = None
        self._last_sync_duration = None
        self._next_sync_timestamp = None
        self._storage_element_pairs = None
        self._failover_test_in_progress = None
        self._error_code = None
        self._data_connection_state = None
        self._parent_replication_session_id = None
        self._local_resource_state = None
        self._state_l10n = None
        self._role_l10n = None
        self._resource_type_l10n = None
        self._data_transfer_state_l10n = None
        self._type_l10n = None
        self._data_connection_state_l10n = None
        self._local_resource_state_l10n = None
        self._remote_system = None
        self._migration_session = None
        self._replication_rule = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if state is not None:
            self.state = state
        if role is not None:
            self.role = role
        if resource_type is not None:
            self.resource_type = resource_type
        if data_transfer_state is not None:
            self.data_transfer_state = data_transfer_state
        if type is not None:
            self.type = type
        if last_sync_timestamp is not None:
            self.last_sync_timestamp = last_sync_timestamp
        if local_resource_id is not None:
            self.local_resource_id = local_resource_id
        if remote_resource_id is not None:
            self.remote_resource_id = remote_resource_id
        if remote_system_id is not None:
            self.remote_system_id = remote_system_id
        if progress_percentage is not None:
            self.progress_percentage = progress_percentage
        if estimated_completion_timestamp is not None:
            self.estimated_completion_timestamp = estimated_completion_timestamp
        if replication_rule_id is not None:
            self.replication_rule_id = replication_rule_id
        if last_sync_duration is not None:
            self.last_sync_duration = last_sync_duration
        if next_sync_timestamp is not None:
            self.next_sync_timestamp = next_sync_timestamp
        if storage_element_pairs is not None:
            self.storage_element_pairs = storage_element_pairs
        if failover_test_in_progress is not None:
            self.failover_test_in_progress = failover_test_in_progress
        if error_code is not None:
            self.error_code = error_code
        if data_connection_state is not None:
            self.data_connection_state = data_connection_state
        if parent_replication_session_id is not None:
            self.parent_replication_session_id = parent_replication_session_id
        if local_resource_state is not None:
            self.local_resource_state = local_resource_state
        if state_l10n is not None:
            self.state_l10n = state_l10n
        if role_l10n is not None:
            self.role_l10n = role_l10n
        if resource_type_l10n is not None:
            self.resource_type_l10n = resource_type_l10n
        if data_transfer_state_l10n is not None:
            self.data_transfer_state_l10n = data_transfer_state_l10n
        if type_l10n is not None:
            self.type_l10n = type_l10n
        if data_connection_state_l10n is not None:
            self.data_connection_state_l10n = data_connection_state_l10n
        if local_resource_state_l10n is not None:
            self.local_resource_state_l10n = local_resource_state_l10n
        if remote_system is not None:
            self.remote_system = remote_system
        if migration_session is not None:
            self.migration_session = migration_session
        if replication_rule is not None:
            self.replication_rule = replication_rule

    @property
    def id(self):
        """Gets the id of this ReplicationSessionInstance.  # noqa: E501

        Unique identifier of the replication session instance.   # noqa: E501

        :return: The id of this ReplicationSessionInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReplicationSessionInstance.

        Unique identifier of the replication session instance.   # noqa: E501

        :param id: The id of this ReplicationSessionInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def state(self):
        """Gets the state of this ReplicationSessionInstance.  # noqa: E501

        Current state of the replication session.   # noqa: E501

        :return: The state of this ReplicationSessionInstance.  # noqa: E501
        :rtype: ReplicationStateEnum
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ReplicationSessionInstance.

        Current state of the replication session.   # noqa: E501

        :param state: The state of this ReplicationSessionInstance.  # noqa: E501
        :type: ReplicationStateEnum
        """

        self._state = state

    @property
    def role(self):
        """Gets the role of this ReplicationSessionInstance.  # noqa: E501

        Role of the replication session.   # noqa: E501

        :return: The role of this ReplicationSessionInstance.  # noqa: E501
        :rtype: ReplicationRoleEnum
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this ReplicationSessionInstance.

        Role of the replication session.   # noqa: E501

        :param role: The role of this ReplicationSessionInstance.  # noqa: E501
        :type: ReplicationRoleEnum
        """

        self._role = role

    @property
    def resource_type(self):
        """Gets the resource_type of this ReplicationSessionInstance.  # noqa: E501

        Type of the storage resource.   # noqa: E501

        :return: The resource_type of this ReplicationSessionInstance.  # noqa: E501
        :rtype: ReplicatedResourceTypeEnum
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this ReplicationSessionInstance.

        Type of the storage resource.   # noqa: E501

        :param resource_type: The resource_type of this ReplicationSessionInstance.  # noqa: E501
        :type: ReplicatedResourceTypeEnum
        """

        self._resource_type = resource_type

    @property
    def data_transfer_state(self):
        """Gets the data_transfer_state of this ReplicationSessionInstance.  # noqa: E501

         Was added in version 3.0.0.0.  # noqa: E501

        :return: The data_transfer_state of this ReplicationSessionInstance.  # noqa: E501
        :rtype: DataTransferStateEnum
        """
        return self._data_transfer_state

    @data_transfer_state.setter
    def data_transfer_state(self, data_transfer_state):
        """Sets the data_transfer_state of this ReplicationSessionInstance.

         Was added in version 3.0.0.0.  # noqa: E501

        :param data_transfer_state: The data_transfer_state of this ReplicationSessionInstance.  # noqa: E501
        :type: DataTransferStateEnum
        """

        self._data_transfer_state = data_transfer_state

    @property
    def type(self):
        """Gets the type of this ReplicationSessionInstance.  # noqa: E501

         Was added in version 3.0.0.0.  # noqa: E501

        :return: The type of this ReplicationSessionInstance.  # noqa: E501
        :rtype: ReplicationSessionTypeEnum
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ReplicationSessionInstance.

         Was added in version 3.0.0.0.  # noqa: E501

        :param type: The type of this ReplicationSessionInstance.  # noqa: E501
        :type: ReplicationSessionTypeEnum
        """

        self._type = type

    @property
    def last_sync_timestamp(self):
        """Gets the last_sync_timestamp of this ReplicationSessionInstance.  # noqa: E501

        Time of last successful synchronization. For metro type replication sessions, this property is updated only during asynchronous copy phases. This is not supported for Nas Server replication sessions.   # noqa: E501

        :return: The last_sync_timestamp of this ReplicationSessionInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._last_sync_timestamp

    @last_sync_timestamp.setter
    def last_sync_timestamp(self, last_sync_timestamp):
        """Sets the last_sync_timestamp of this ReplicationSessionInstance.

        Time of last successful synchronization. For metro type replication sessions, this property is updated only during asynchronous copy phases. This is not supported for Nas Server replication sessions.   # noqa: E501

        :param last_sync_timestamp: The last_sync_timestamp of this ReplicationSessionInstance.  # noqa: E501
        :type: datetime
        """

        self._last_sync_timestamp = last_sync_timestamp

    @property
    def local_resource_id(self):
        """Gets the local_resource_id of this ReplicationSessionInstance.  # noqa: E501

        Unique identifier of the local storage resource for the replication session.   # noqa: E501

        :return: The local_resource_id of this ReplicationSessionInstance.  # noqa: E501
        :rtype: str
        """
        return self._local_resource_id

    @local_resource_id.setter
    def local_resource_id(self, local_resource_id):
        """Sets the local_resource_id of this ReplicationSessionInstance.

        Unique identifier of the local storage resource for the replication session.   # noqa: E501

        :param local_resource_id: The local_resource_id of this ReplicationSessionInstance.  # noqa: E501
        :type: str
        """

        self._local_resource_id = local_resource_id

    @property
    def remote_resource_id(self):
        """Gets the remote_resource_id of this ReplicationSessionInstance.  # noqa: E501

        Unique identifier of the remote storage resource for the replication session.   # noqa: E501

        :return: The remote_resource_id of this ReplicationSessionInstance.  # noqa: E501
        :rtype: str
        """
        return self._remote_resource_id

    @remote_resource_id.setter
    def remote_resource_id(self, remote_resource_id):
        """Sets the remote_resource_id of this ReplicationSessionInstance.

        Unique identifier of the remote storage resource for the replication session.   # noqa: E501

        :param remote_resource_id: The remote_resource_id of this ReplicationSessionInstance.  # noqa: E501
        :type: str
        """

        self._remote_resource_id = remote_resource_id

    @property
    def remote_system_id(self):
        """Gets the remote_system_id of this ReplicationSessionInstance.  # noqa: E501

        Unique identifier of the remote system instance.   # noqa: E501

        :return: The remote_system_id of this ReplicationSessionInstance.  # noqa: E501
        :rtype: str
        """
        return self._remote_system_id

    @remote_system_id.setter
    def remote_system_id(self, remote_system_id):
        """Sets the remote_system_id of this ReplicationSessionInstance.

        Unique identifier of the remote system instance.   # noqa: E501

        :param remote_system_id: The remote_system_id of this ReplicationSessionInstance.  # noqa: E501
        :type: str
        """

        self._remote_system_id = remote_system_id

    @property
    def progress_percentage(self):
        """Gets the progress_percentage of this ReplicationSessionInstance.  # noqa: E501

        Progress of the current replication operation. This value is only available from the source system for the replication session, and is not supported for Nas Server replication sessions.   # noqa: E501

        :return: The progress_percentage of this ReplicationSessionInstance.  # noqa: E501
        :rtype: int
        """
        return self._progress_percentage

    @progress_percentage.setter
    def progress_percentage(self, progress_percentage):
        """Sets the progress_percentage of this ReplicationSessionInstance.

        Progress of the current replication operation. This value is only available from the source system for the replication session, and is not supported for Nas Server replication sessions.   # noqa: E501

        :param progress_percentage: The progress_percentage of this ReplicationSessionInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                progress_percentage is not None and progress_percentage > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `progress_percentage`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                progress_percentage is not None and progress_percentage < 0):  # noqa: E501
            raise ValueError("Invalid value for `progress_percentage`, must be a value greater than or equal to `0`")  # noqa: E501

        self._progress_percentage = progress_percentage

    @property
    def estimated_completion_timestamp(self):
        """Gets the estimated_completion_timestamp of this ReplicationSessionInstance.  # noqa: E501

        Estimated completion time of the current replication operation. This is not supported for Nas Server replication sessions.   # noqa: E501

        :return: The estimated_completion_timestamp of this ReplicationSessionInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._estimated_completion_timestamp

    @estimated_completion_timestamp.setter
    def estimated_completion_timestamp(self, estimated_completion_timestamp):
        """Sets the estimated_completion_timestamp of this ReplicationSessionInstance.

        Estimated completion time of the current replication operation. This is not supported for Nas Server replication sessions.   # noqa: E501

        :param estimated_completion_timestamp: The estimated_completion_timestamp of this ReplicationSessionInstance.  # noqa: E501
        :type: datetime
        """

        self._estimated_completion_timestamp = estimated_completion_timestamp

    @property
    def replication_rule_id(self):
        """Gets the replication_rule_id of this ReplicationSessionInstance.  # noqa: E501

        Associated replication rule instance if created by policy engine.   # noqa: E501

        :return: The replication_rule_id of this ReplicationSessionInstance.  # noqa: E501
        :rtype: str
        """
        return self._replication_rule_id

    @replication_rule_id.setter
    def replication_rule_id(self, replication_rule_id):
        """Sets the replication_rule_id of this ReplicationSessionInstance.

        Associated replication rule instance if created by policy engine.   # noqa: E501

        :param replication_rule_id: The replication_rule_id of this ReplicationSessionInstance.  # noqa: E501
        :type: str
        """

        self._replication_rule_id = replication_rule_id

    @property
    def last_sync_duration(self):
        """Gets the last_sync_duration of this ReplicationSessionInstance.  # noqa: E501

        Elapsed time of the last synchronization operation in milliseconds.  This is not supported for Nas Server replication sessions. For metro type replication sessions, this property is updated only during asynchronous copy phases.  Was added in version 2.0.0.0.  # noqa: E501

        :return: The last_sync_duration of this ReplicationSessionInstance.  # noqa: E501
        :rtype: int
        """
        return self._last_sync_duration

    @last_sync_duration.setter
    def last_sync_duration(self, last_sync_duration):
        """Sets the last_sync_duration of this ReplicationSessionInstance.

        Elapsed time of the last synchronization operation in milliseconds.  This is not supported for Nas Server replication sessions. For metro type replication sessions, this property is updated only during asynchronous copy phases.  Was added in version 2.0.0.0.  # noqa: E501

        :param last_sync_duration: The last_sync_duration of this ReplicationSessionInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                last_sync_duration is not None and last_sync_duration > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `last_sync_duration`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                last_sync_duration is not None and last_sync_duration < 0):  # noqa: E501
            raise ValueError("Invalid value for `last_sync_duration`, must be a value greater than or equal to `0`")  # noqa: E501

        self._last_sync_duration = last_sync_duration

    @property
    def next_sync_timestamp(self):
        """Gets the next_sync_timestamp of this ReplicationSessionInstance.  # noqa: E501

        Estimated start time of the next automatic synchronization operation. This is applicable to asynchronous type replication sessions. This is not supported for Nas Server replication sessions.  Was added in version 2.0.0.0.  # noqa: E501

        :return: The next_sync_timestamp of this ReplicationSessionInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._next_sync_timestamp

    @next_sync_timestamp.setter
    def next_sync_timestamp(self, next_sync_timestamp):
        """Sets the next_sync_timestamp of this ReplicationSessionInstance.

        Estimated start time of the next automatic synchronization operation. This is applicable to asynchronous type replication sessions. This is not supported for Nas Server replication sessions.  Was added in version 2.0.0.0.  # noqa: E501

        :param next_sync_timestamp: The next_sync_timestamp of this ReplicationSessionInstance.  # noqa: E501
        :type: datetime
        """

        self._next_sync_timestamp = next_sync_timestamp

    @property
    def storage_element_pairs(self):
        """Gets the storage_element_pairs of this ReplicationSessionInstance.  # noqa: E501

        List of storage element pairs for a replication session. For a volume or volume group replication session, the replicating storage elements are of type 'volume’. For a virtual volume replication session, the replicating storage elements are of type 'virtual volume’. For a volume group replication session, there will be as many pairs of storage elements as the number of volumes in the volume group. For volume/virtual volume replication session, there will be only one storage element pair.   Filtering on the fields of this embedded resource is not supported.  # noqa: E501

        :return: The storage_element_pairs of this ReplicationSessionInstance.  # noqa: E501
        :rtype: list[ReplicationElementPair]
        """
        return self._storage_element_pairs

    @storage_element_pairs.setter
    def storage_element_pairs(self, storage_element_pairs):
        """Sets the storage_element_pairs of this ReplicationSessionInstance.

        List of storage element pairs for a replication session. For a volume or volume group replication session, the replicating storage elements are of type 'volume’. For a virtual volume replication session, the replicating storage elements are of type 'virtual volume’. For a volume group replication session, there will be as many pairs of storage elements as the number of volumes in the volume group. For volume/virtual volume replication session, there will be only one storage element pair.   Filtering on the fields of this embedded resource is not supported.  # noqa: E501

        :param storage_element_pairs: The storage_element_pairs of this ReplicationSessionInstance.  # noqa: E501
        :type: list[ReplicationElementPair]
        """

        self._storage_element_pairs = storage_element_pairs

    @property
    def failover_test_in_progress(self):
        """Gets the failover_test_in_progress of this ReplicationSessionInstance.  # noqa: E501

        Indicates whether a test failover is in progress on the destination system of this replication session. This is not supported for Nas Server replication sessions.  Was added in version 2.0.0.0.  # noqa: E501

        :return: The failover_test_in_progress of this ReplicationSessionInstance.  # noqa: E501
        :rtype: bool
        """
        return self._failover_test_in_progress

    @failover_test_in_progress.setter
    def failover_test_in_progress(self, failover_test_in_progress):
        """Sets the failover_test_in_progress of this ReplicationSessionInstance.

        Indicates whether a test failover is in progress on the destination system of this replication session. This is not supported for Nas Server replication sessions.  Was added in version 2.0.0.0.  # noqa: E501

        :param failover_test_in_progress: The failover_test_in_progress of this ReplicationSessionInstance.  # noqa: E501
        :type: bool
        """

        self._failover_test_in_progress = failover_test_in_progress

    @property
    def error_code(self):
        """Gets the error_code of this ReplicationSessionInstance.  # noqa: E501

        Error code for the asynchronous copy phase failure.  Was added in version 3.0.0.0.  # noqa: E501

        :return: The error_code of this ReplicationSessionInstance.  # noqa: E501
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this ReplicationSessionInstance.

        Error code for the asynchronous copy phase failure.  Was added in version 3.0.0.0.  # noqa: E501

        :param error_code: The error_code of this ReplicationSessionInstance.  # noqa: E501
        :type: str
        """

        self._error_code = error_code

    @property
    def data_connection_state(self):
        """Gets the data_connection_state of this ReplicationSessionInstance.  # noqa: E501

        State of the data connection.  Was added in version 3.0.0.0.  # noqa: E501

        :return: The data_connection_state of this ReplicationSessionInstance.  # noqa: E501
        :rtype: DataConnectionStateEnum
        """
        return self._data_connection_state

    @data_connection_state.setter
    def data_connection_state(self, data_connection_state):
        """Sets the data_connection_state of this ReplicationSessionInstance.

        State of the data connection.  Was added in version 3.0.0.0.  # noqa: E501

        :param data_connection_state: The data_connection_state of this ReplicationSessionInstance.  # noqa: E501
        :type: DataConnectionStateEnum
        """

        self._data_connection_state = data_connection_state

    @property
    def parent_replication_session_id(self):
        """Gets the parent_replication_session_id of this ReplicationSessionInstance.  # noqa: E501

        Parent Replication session identifier. This is only applicable for replication sessions of type file system.  Was added in version 3.0.0.0.  # noqa: E501

        :return: The parent_replication_session_id of this ReplicationSessionInstance.  # noqa: E501
        :rtype: str
        """
        return self._parent_replication_session_id

    @parent_replication_session_id.setter
    def parent_replication_session_id(self, parent_replication_session_id):
        """Sets the parent_replication_session_id of this ReplicationSessionInstance.

        Parent Replication session identifier. This is only applicable for replication sessions of type file system.  Was added in version 3.0.0.0.  # noqa: E501

        :param parent_replication_session_id: The parent_replication_session_id of this ReplicationSessionInstance.  # noqa: E501
        :type: str
        """

        self._parent_replication_session_id = parent_replication_session_id

    @property
    def local_resource_state(self):
        """Gets the local_resource_state of this ReplicationSessionInstance.  # noqa: E501

         Was added in version 3.0.0.0.  # noqa: E501

        :return: The local_resource_state of this ReplicationSessionInstance.  # noqa: E501
        :rtype: ReplicationResourceStateEnum
        """
        return self._local_resource_state

    @local_resource_state.setter
    def local_resource_state(self, local_resource_state):
        """Sets the local_resource_state of this ReplicationSessionInstance.

         Was added in version 3.0.0.0.  # noqa: E501

        :param local_resource_state: The local_resource_state of this ReplicationSessionInstance.  # noqa: E501
        :type: ReplicationResourceStateEnum
        """

        self._local_resource_state = local_resource_state

    @property
    def state_l10n(self):
        """Gets the state_l10n of this ReplicationSessionInstance.  # noqa: E501

        Localized message string corresponding to state  # noqa: E501

        :return: The state_l10n of this ReplicationSessionInstance.  # noqa: E501
        :rtype: str
        """
        return self._state_l10n

    @state_l10n.setter
    def state_l10n(self, state_l10n):
        """Sets the state_l10n of this ReplicationSessionInstance.

        Localized message string corresponding to state  # noqa: E501

        :param state_l10n: The state_l10n of this ReplicationSessionInstance.  # noqa: E501
        :type: str
        """

        self._state_l10n = state_l10n

    @property
    def role_l10n(self):
        """Gets the role_l10n of this ReplicationSessionInstance.  # noqa: E501

        Localized message string corresponding to role  # noqa: E501

        :return: The role_l10n of this ReplicationSessionInstance.  # noqa: E501
        :rtype: str
        """
        return self._role_l10n

    @role_l10n.setter
    def role_l10n(self, role_l10n):
        """Sets the role_l10n of this ReplicationSessionInstance.

        Localized message string corresponding to role  # noqa: E501

        :param role_l10n: The role_l10n of this ReplicationSessionInstance.  # noqa: E501
        :type: str
        """

        self._role_l10n = role_l10n

    @property
    def resource_type_l10n(self):
        """Gets the resource_type_l10n of this ReplicationSessionInstance.  # noqa: E501

        Localized message string corresponding to resource_type  # noqa: E501

        :return: The resource_type_l10n of this ReplicationSessionInstance.  # noqa: E501
        :rtype: str
        """
        return self._resource_type_l10n

    @resource_type_l10n.setter
    def resource_type_l10n(self, resource_type_l10n):
        """Sets the resource_type_l10n of this ReplicationSessionInstance.

        Localized message string corresponding to resource_type  # noqa: E501

        :param resource_type_l10n: The resource_type_l10n of this ReplicationSessionInstance.  # noqa: E501
        :type: str
        """

        self._resource_type_l10n = resource_type_l10n

    @property
    def data_transfer_state_l10n(self):
        """Gets the data_transfer_state_l10n of this ReplicationSessionInstance.  # noqa: E501

        Localized message string corresponding to data_transfer_state Was added in version 3.0.0.0.  # noqa: E501

        :return: The data_transfer_state_l10n of this ReplicationSessionInstance.  # noqa: E501
        :rtype: str
        """
        return self._data_transfer_state_l10n

    @data_transfer_state_l10n.setter
    def data_transfer_state_l10n(self, data_transfer_state_l10n):
        """Sets the data_transfer_state_l10n of this ReplicationSessionInstance.

        Localized message string corresponding to data_transfer_state Was added in version 3.0.0.0.  # noqa: E501

        :param data_transfer_state_l10n: The data_transfer_state_l10n of this ReplicationSessionInstance.  # noqa: E501
        :type: str
        """

        self._data_transfer_state_l10n = data_transfer_state_l10n

    @property
    def type_l10n(self):
        """Gets the type_l10n of this ReplicationSessionInstance.  # noqa: E501

        Localized message string corresponding to type Was added in version 3.0.0.0.  # noqa: E501

        :return: The type_l10n of this ReplicationSessionInstance.  # noqa: E501
        :rtype: str
        """
        return self._type_l10n

    @type_l10n.setter
    def type_l10n(self, type_l10n):
        """Sets the type_l10n of this ReplicationSessionInstance.

        Localized message string corresponding to type Was added in version 3.0.0.0.  # noqa: E501

        :param type_l10n: The type_l10n of this ReplicationSessionInstance.  # noqa: E501
        :type: str
        """

        self._type_l10n = type_l10n

    @property
    def data_connection_state_l10n(self):
        """Gets the data_connection_state_l10n of this ReplicationSessionInstance.  # noqa: E501

        Localized message string corresponding to data_connection_state Was added in version 3.0.0.0.  # noqa: E501

        :return: The data_connection_state_l10n of this ReplicationSessionInstance.  # noqa: E501
        :rtype: str
        """
        return self._data_connection_state_l10n

    @data_connection_state_l10n.setter
    def data_connection_state_l10n(self, data_connection_state_l10n):
        """Sets the data_connection_state_l10n of this ReplicationSessionInstance.

        Localized message string corresponding to data_connection_state Was added in version 3.0.0.0.  # noqa: E501

        :param data_connection_state_l10n: The data_connection_state_l10n of this ReplicationSessionInstance.  # noqa: E501
        :type: str
        """

        self._data_connection_state_l10n = data_connection_state_l10n

    @property
    def local_resource_state_l10n(self):
        """Gets the local_resource_state_l10n of this ReplicationSessionInstance.  # noqa: E501

        Localized message string corresponding to local_resource_state Was added in version 3.0.0.0.  # noqa: E501

        :return: The local_resource_state_l10n of this ReplicationSessionInstance.  # noqa: E501
        :rtype: str
        """
        return self._local_resource_state_l10n

    @local_resource_state_l10n.setter
    def local_resource_state_l10n(self, local_resource_state_l10n):
        """Sets the local_resource_state_l10n of this ReplicationSessionInstance.

        Localized message string corresponding to local_resource_state Was added in version 3.0.0.0.  # noqa: E501

        :param local_resource_state_l10n: The local_resource_state_l10n of this ReplicationSessionInstance.  # noqa: E501
        :type: str
        """

        self._local_resource_state_l10n = local_resource_state_l10n

    @property
    def remote_system(self):
        """Gets the remote_system of this ReplicationSessionInstance.  # noqa: E501

        This is the embeddable reference form of remote_system_id attribute.  # noqa: E501

        :return: The remote_system of this ReplicationSessionInstance.  # noqa: E501
        :rtype: RemoteSystemInstance
        """
        return self._remote_system

    @remote_system.setter
    def remote_system(self, remote_system):
        """Sets the remote_system of this ReplicationSessionInstance.

        This is the embeddable reference form of remote_system_id attribute.  # noqa: E501

        :param remote_system: The remote_system of this ReplicationSessionInstance.  # noqa: E501
        :type: RemoteSystemInstance
        """

        self._remote_system = remote_system

    @property
    def migration_session(self):
        """Gets the migration_session of this ReplicationSessionInstance.  # noqa: E501

        This is the embeddable reference form of migration_session_id attribute.  # noqa: E501

        :return: The migration_session of this ReplicationSessionInstance.  # noqa: E501
        :rtype: MigrationSessionInstance
        """
        return self._migration_session

    @migration_session.setter
    def migration_session(self, migration_session):
        """Sets the migration_session of this ReplicationSessionInstance.

        This is the embeddable reference form of migration_session_id attribute.  # noqa: E501

        :param migration_session: The migration_session of this ReplicationSessionInstance.  # noqa: E501
        :type: MigrationSessionInstance
        """

        self._migration_session = migration_session

    @property
    def replication_rule(self):
        """Gets the replication_rule of this ReplicationSessionInstance.  # noqa: E501

        This is the embeddable reference form of replication_rule_id attribute.  # noqa: E501

        :return: The replication_rule of this ReplicationSessionInstance.  # noqa: E501
        :rtype: ReplicationRuleInstance
        """
        return self._replication_rule

    @replication_rule.setter
    def replication_rule(self, replication_rule):
        """Sets the replication_rule of this ReplicationSessionInstance.

        This is the embeddable reference form of replication_rule_id attribute.  # noqa: E501

        :param replication_rule: The replication_rule of this ReplicationSessionInstance.  # noqa: E501
        :type: ReplicationRuleInstance
        """

        self._replication_rule = replication_rule

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReplicationSessionInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReplicationSessionInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReplicationSessionInstance):
            return True

        return self.to_dict() != other.to_dict()
