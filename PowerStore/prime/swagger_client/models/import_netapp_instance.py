# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class ImportNetappInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'management_address': 'str',
        'serial_number': 'str',
        'api_version': 'str',
        'supported_import_type': 'SupportedImportTypeEnum',
        'state': 'NetAppSVMStateEnum',
        'user_name': 'str',
        'last_updated_timestamp': 'datetime',
        'supported_import_type_l10n': 'str',
        'state_l10n': 'str',
        'import_netapp_volumes': 'list[ImportNetappVolumeInstance]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'management_address': 'management_address',
        'serial_number': 'serial_number',
        'api_version': 'api_version',
        'supported_import_type': 'supported_import_type',
        'state': 'state',
        'user_name': 'user_name',
        'last_updated_timestamp': 'last_updated_timestamp',
        'supported_import_type_l10n': 'supported_import_type_l10n',
        'state_l10n': 'state_l10n',
        'import_netapp_volumes': 'import_netapp_volumes'
    }

    def __init__(self, id=None, name=None, management_address=None, serial_number=None, api_version=None, supported_import_type=None, state=None, user_name=None, last_updated_timestamp=None, supported_import_type_l10n=None, state_l10n=None, import_netapp_volumes=None, _configuration=None):  # noqa: E501
        """ImportNetappInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._management_address = None
        self._serial_number = None
        self._api_version = None
        self._supported_import_type = None
        self._state = None
        self._user_name = None
        self._last_updated_timestamp = None
        self._supported_import_type_l10n = None
        self._state_l10n = None
        self._import_netapp_volumes = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if management_address is not None:
            self.management_address = management_address
        if serial_number is not None:
            self.serial_number = serial_number
        if api_version is not None:
            self.api_version = api_version
        if supported_import_type is not None:
            self.supported_import_type = supported_import_type
        if state is not None:
            self.state = state
        if user_name is not None:
            self.user_name = user_name
        if last_updated_timestamp is not None:
            self.last_updated_timestamp = last_updated_timestamp
        if supported_import_type_l10n is not None:
            self.supported_import_type_l10n = supported_import_type_l10n
        if state_l10n is not None:
            self.state_l10n = state_l10n
        if import_netapp_volumes is not None:
            self.import_netapp_volumes = import_netapp_volumes

    @property
    def id(self):
        """Gets the id of this ImportNetappInstance.  # noqa: E501

        Unique identifier of the storage system that is a source storage system for import.  # noqa: E501

        :return: The id of this ImportNetappInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ImportNetappInstance.

        Unique identifier of the storage system that is a source storage system for import.  # noqa: E501

        :param id: The id of this ImportNetappInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ImportNetappInstance.  # noqa: E501

        Name of the NetApp storage system.  This property supports case-insensitive filtering.  # noqa: E501

        :return: The name of this ImportNetappInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ImportNetappInstance.

        Name of the NetApp storage system.  This property supports case-insensitive filtering.  # noqa: E501

        :param name: The name of this ImportNetappInstance.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def management_address(self):
        """Gets the management_address of this ImportNetappInstance.  # noqa: E501

        Management address to use for communicating with the NetApp storage system. The address can be an IPv4 address or FQDN (Fully Qualified Domain Name).  # noqa: E501

        :return: The management_address of this ImportNetappInstance.  # noqa: E501
        :rtype: str
        """
        return self._management_address

    @management_address.setter
    def management_address(self, management_address):
        """Sets the management_address of this ImportNetappInstance.

        Management address to use for communicating with the NetApp storage system. The address can be an IPv4 address or FQDN (Fully Qualified Domain Name).  # noqa: E501

        :param management_address: The management_address of this ImportNetappInstance.  # noqa: E501
        :type: str
        """

        self._management_address = management_address

    @property
    def serial_number(self):
        """Gets the serial_number of this ImportNetappInstance.  # noqa: E501

        Serial number will be the SVM uuid.  # noqa: E501

        :return: The serial_number of this ImportNetappInstance.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this ImportNetappInstance.

        Serial number will be the SVM uuid.  # noqa: E501

        :param serial_number: The serial_number of this ImportNetappInstance.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def api_version(self):
        """Gets the api_version of this ImportNetappInstance.  # noqa: E501

        Version of the ONTAP API that manages the NetApp storage system.  # noqa: E501

        :return: The api_version of this ImportNetappInstance.  # noqa: E501
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this ImportNetappInstance.

        Version of the ONTAP API that manages the NetApp storage system.  # noqa: E501

        :param api_version: The api_version of this ImportNetappInstance.  # noqa: E501
        :type: str
        """

        self._api_version = api_version

    @property
    def supported_import_type(self):
        """Gets the supported_import_type of this ImportNetappInstance.  # noqa: E501


        :return: The supported_import_type of this ImportNetappInstance.  # noqa: E501
        :rtype: SupportedImportTypeEnum
        """
        return self._supported_import_type

    @supported_import_type.setter
    def supported_import_type(self, supported_import_type):
        """Sets the supported_import_type of this ImportNetappInstance.


        :param supported_import_type: The supported_import_type of this ImportNetappInstance.  # noqa: E501
        :type: SupportedImportTypeEnum
        """

        self._supported_import_type = supported_import_type

    @property
    def state(self):
        """Gets the state of this ImportNetappInstance.  # noqa: E501


        :return: The state of this ImportNetappInstance.  # noqa: E501
        :rtype: NetAppSVMStateEnum
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ImportNetappInstance.


        :param state: The state of this ImportNetappInstance.  # noqa: E501
        :type: NetAppSVMStateEnum
        """

        self._state = state

    @property
    def user_name(self):
        """Gets the user_name of this ImportNetappInstance.  # noqa: E501

        User account name used to communicate with the NetApp storage system.  # noqa: E501

        :return: The user_name of this ImportNetappInstance.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this ImportNetappInstance.

        User account name used to communicate with the NetApp storage system.  # noqa: E501

        :param user_name: The user_name of this ImportNetappInstance.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def last_updated_timestamp(self):
        """Gets the last_updated_timestamp of this ImportNetappInstance.  # noqa: E501

        Date and time when the NetApp storage system details were last updated. These details include the NetApp storage system and information about its importable volumes. The timestamp is updated when the NetApp storage system is created and whenever the importable volumes is discovered.  # noqa: E501

        :return: The last_updated_timestamp of this ImportNetappInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated_timestamp

    @last_updated_timestamp.setter
    def last_updated_timestamp(self, last_updated_timestamp):
        """Sets the last_updated_timestamp of this ImportNetappInstance.

        Date and time when the NetApp storage system details were last updated. These details include the NetApp storage system and information about its importable volumes. The timestamp is updated when the NetApp storage system is created and whenever the importable volumes is discovered.  # noqa: E501

        :param last_updated_timestamp: The last_updated_timestamp of this ImportNetappInstance.  # noqa: E501
        :type: datetime
        """

        self._last_updated_timestamp = last_updated_timestamp

    @property
    def supported_import_type_l10n(self):
        """Gets the supported_import_type_l10n of this ImportNetappInstance.  # noqa: E501

        Localized message string corresponding to supported_import_type Was added in version 3.0.0.0.  # noqa: E501

        :return: The supported_import_type_l10n of this ImportNetappInstance.  # noqa: E501
        :rtype: str
        """
        return self._supported_import_type_l10n

    @supported_import_type_l10n.setter
    def supported_import_type_l10n(self, supported_import_type_l10n):
        """Sets the supported_import_type_l10n of this ImportNetappInstance.

        Localized message string corresponding to supported_import_type Was added in version 3.0.0.0.  # noqa: E501

        :param supported_import_type_l10n: The supported_import_type_l10n of this ImportNetappInstance.  # noqa: E501
        :type: str
        """

        self._supported_import_type_l10n = supported_import_type_l10n

    @property
    def state_l10n(self):
        """Gets the state_l10n of this ImportNetappInstance.  # noqa: E501

        Localized message string corresponding to state Was added in version 3.0.0.0.  # noqa: E501

        :return: The state_l10n of this ImportNetappInstance.  # noqa: E501
        :rtype: str
        """
        return self._state_l10n

    @state_l10n.setter
    def state_l10n(self, state_l10n):
        """Sets the state_l10n of this ImportNetappInstance.

        Localized message string corresponding to state Was added in version 3.0.0.0.  # noqa: E501

        :param state_l10n: The state_l10n of this ImportNetappInstance.  # noqa: E501
        :type: str
        """

        self._state_l10n = state_l10n

    @property
    def import_netapp_volumes(self):
        """Gets the import_netapp_volumes of this ImportNetappInstance.  # noqa: E501

        This is the inverse of the resource type import_netapp_volume association.  # noqa: E501

        :return: The import_netapp_volumes of this ImportNetappInstance.  # noqa: E501
        :rtype: list[ImportNetappVolumeInstance]
        """
        return self._import_netapp_volumes

    @import_netapp_volumes.setter
    def import_netapp_volumes(self, import_netapp_volumes):
        """Sets the import_netapp_volumes of this ImportNetappInstance.

        This is the inverse of the resource type import_netapp_volume association.  # noqa: E501

        :param import_netapp_volumes: The import_netapp_volumes of this ImportNetappInstance.  # noqa: E501
        :type: list[ImportNetappVolumeInstance]
        """

        self._import_netapp_volumes = import_netapp_volumes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImportNetappInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportNetappInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImportNetappInstance):
            return True

        return self.to_dict() != other.to_dict()
