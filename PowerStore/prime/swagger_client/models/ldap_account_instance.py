# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class LdapAccountInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'type': 'LDAPAccountTypeEnum',
        'dn': 'str',
        'domain_id': 'str',
        'role_id': 'str',
        'type_l10n': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'type': 'type',
        'dn': 'dn',
        'domain_id': 'domain_id',
        'role_id': 'role_id',
        'type_l10n': 'type_l10n'
    }

    def __init__(self, id=None, name=None, type=None, dn=None, domain_id=None, role_id=None, type_l10n=None, _configuration=None):  # noqa: E501
        """LdapAccountInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._type = None
        self._dn = None
        self._domain_id = None
        self._role_id = None
        self._type_l10n = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if dn is not None:
            self.dn = dn
        if domain_id is not None:
            self.domain_id = domain_id
        if role_id is not None:
            self.role_id = role_id
        if type_l10n is not None:
            self.type_l10n = type_l10n

    @property
    def id(self):
        """Gets the id of this LdapAccountInstance.  # noqa: E501

        Unique identifier of the LDAP account.  # noqa: E501

        :return: The id of this LdapAccountInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LdapAccountInstance.

        Unique identifier of the LDAP account.  # noqa: E501

        :param id: The id of this LdapAccountInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this LdapAccountInstance.  # noqa: E501

        Name of the LDAP account.  # noqa: E501

        :return: The name of this LdapAccountInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LdapAccountInstance.

        Name of the LDAP account.  # noqa: E501

        :param name: The name of this LdapAccountInstance.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this LdapAccountInstance.  # noqa: E501


        :return: The type of this LdapAccountInstance.  # noqa: E501
        :rtype: LDAPAccountTypeEnum
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LdapAccountInstance.


        :param type: The type of this LdapAccountInstance.  # noqa: E501
        :type: LDAPAccountTypeEnum
        """

        self._type = type

    @property
    def dn(self):
        """Gets the dn of this LdapAccountInstance.  # noqa: E501

        Distinguished name for LDAP user or group from which the LDAP account is mapped.  # noqa: E501

        :return: The dn of this LdapAccountInstance.  # noqa: E501
        :rtype: str
        """
        return self._dn

    @dn.setter
    def dn(self, dn):
        """Sets the dn of this LdapAccountInstance.

        Distinguished name for LDAP user or group from which the LDAP account is mapped.  # noqa: E501

        :param dn: The dn of this LdapAccountInstance.  # noqa: E501
        :type: str
        """

        self._dn = dn

    @property
    def domain_id(self):
        """Gets the domain_id of this LdapAccountInstance.  # noqa: E501

        Unique identifier of the LDAP domain to which the LDAP account belongs.  # noqa: E501

        :return: The domain_id of this LdapAccountInstance.  # noqa: E501
        :rtype: str
        """
        return self._domain_id

    @domain_id.setter
    def domain_id(self, domain_id):
        """Sets the domain_id of this LdapAccountInstance.

        Unique identifier of the LDAP domain to which the LDAP account belongs.  # noqa: E501

        :param domain_id: The domain_id of this LdapAccountInstance.  # noqa: E501
        :type: str
        """

        self._domain_id = domain_id

    @property
    def role_id(self):
        """Gets the role_id of this LdapAccountInstance.  # noqa: E501

        Unique identifier of the role to which the LDAP account is mapped.  # noqa: E501

        :return: The role_id of this LdapAccountInstance.  # noqa: E501
        :rtype: str
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """Sets the role_id of this LdapAccountInstance.

        Unique identifier of the role to which the LDAP account is mapped.  # noqa: E501

        :param role_id: The role_id of this LdapAccountInstance.  # noqa: E501
        :type: str
        """

        self._role_id = role_id

    @property
    def type_l10n(self):
        """Gets the type_l10n of this LdapAccountInstance.  # noqa: E501

        Localized message string corresponding to type Was added in version 1.0.3.  # noqa: E501

        :return: The type_l10n of this LdapAccountInstance.  # noqa: E501
        :rtype: str
        """
        return self._type_l10n

    @type_l10n.setter
    def type_l10n(self, type_l10n):
        """Sets the type_l10n of this LdapAccountInstance.

        Localized message string corresponding to type Was added in version 1.0.3.  # noqa: E501

        :param type_l10n: The type_l10n of this LdapAccountInstance.  # noqa: E501
        :type: str
        """

        self._type_l10n = type_l10n

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LdapAccountInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LdapAccountInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LdapAccountInstance):
            return True

        return self.to_dict() != other.to_dict()
