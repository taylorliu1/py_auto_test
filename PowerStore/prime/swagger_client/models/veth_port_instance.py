# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class VethPortInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'partner_id': 'str',
        'appliance_id': 'str',
        'node_id': 'str',
        'name': 'str',
        'mac_address': 'str',
        'is_link_up': 'bool',
        'current_speed': 'int',
        'current_mtu': 'int',
        'vswitch_name': 'str',
        'vswitch_port_group_name': 'str',
        'vswitch_port_id': 'int',
        'vswitch_port_name': 'str',
        'ip_ports': 'list[IpPortInstance]',
        'partner': 'VethPortInstance',
        'appliance': 'ApplianceInstance',
        'node': 'NodeInstance'
    }

    attribute_map = {
        'id': 'id',
        'partner_id': 'partner_id',
        'appliance_id': 'appliance_id',
        'node_id': 'node_id',
        'name': 'name',
        'mac_address': 'mac_address',
        'is_link_up': 'is_link_up',
        'current_speed': 'current_speed',
        'current_mtu': 'current_mtu',
        'vswitch_name': 'vswitch_name',
        'vswitch_port_group_name': 'vswitch_port_group_name',
        'vswitch_port_id': 'vswitch_port_id',
        'vswitch_port_name': 'vswitch_port_name',
        'ip_ports': 'ip_ports',
        'partner': 'partner',
        'appliance': 'appliance',
        'node': 'node'
    }

    def __init__(self, id=None, partner_id=None, appliance_id=None, node_id=None, name=None, mac_address=None, is_link_up=None, current_speed=None, current_mtu=None, vswitch_name=None, vswitch_port_group_name=None, vswitch_port_id=None, vswitch_port_name=None, ip_ports=None, partner=None, appliance=None, node=None, _configuration=None):  # noqa: E501
        """VethPortInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._partner_id = None
        self._appliance_id = None
        self._node_id = None
        self._name = None
        self._mac_address = None
        self._is_link_up = None
        self._current_speed = None
        self._current_mtu = None
        self._vswitch_name = None
        self._vswitch_port_group_name = None
        self._vswitch_port_id = None
        self._vswitch_port_name = None
        self._ip_ports = None
        self._partner = None
        self._appliance = None
        self._node = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if partner_id is not None:
            self.partner_id = partner_id
        if appliance_id is not None:
            self.appliance_id = appliance_id
        if node_id is not None:
            self.node_id = node_id
        if name is not None:
            self.name = name
        if mac_address is not None:
            self.mac_address = mac_address
        if is_link_up is not None:
            self.is_link_up = is_link_up
        if current_speed is not None:
            self.current_speed = current_speed
        if current_mtu is not None:
            self.current_mtu = current_mtu
        if vswitch_name is not None:
            self.vswitch_name = vswitch_name
        if vswitch_port_group_name is not None:
            self.vswitch_port_group_name = vswitch_port_group_name
        if vswitch_port_id is not None:
            self.vswitch_port_id = vswitch_port_id
        if vswitch_port_name is not None:
            self.vswitch_port_name = vswitch_port_name
        if ip_ports is not None:
            self.ip_ports = ip_ports
        if partner is not None:
            self.partner = partner
        if appliance is not None:
            self.appliance = appliance
        if node is not None:
            self.node = node

    @property
    def id(self):
        """Gets the id of this VethPortInstance.  # noqa: E501

        Unique identifier of the virtual Ethernet port instance.  # noqa: E501

        :return: The id of this VethPortInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VethPortInstance.

        Unique identifier of the virtual Ethernet port instance.  # noqa: E501

        :param id: The id of this VethPortInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def partner_id(self):
        """Gets the partner_id of this VethPortInstance.  # noqa: E501

        Identifier of the virtual Ethernet port with the same logical location on the other node of the appliance. Partner ports are configured symmetrically for HA and load balancing purposes within the appliance. Was added in version 2.0.0.0.  # noqa: E501

        :return: The partner_id of this VethPortInstance.  # noqa: E501
        :rtype: str
        """
        return self._partner_id

    @partner_id.setter
    def partner_id(self, partner_id):
        """Sets the partner_id of this VethPortInstance.

        Identifier of the virtual Ethernet port with the same logical location on the other node of the appliance. Partner ports are configured symmetrically for HA and load balancing purposes within the appliance. Was added in version 2.0.0.0.  # noqa: E501

        :param partner_id: The partner_id of this VethPortInstance.  # noqa: E501
        :type: str
        """

        self._partner_id = partner_id

    @property
    def appliance_id(self):
        """Gets the appliance_id of this VethPortInstance.  # noqa: E501

        Unique identifier of the appliance.  # noqa: E501

        :return: The appliance_id of this VethPortInstance.  # noqa: E501
        :rtype: str
        """
        return self._appliance_id

    @appliance_id.setter
    def appliance_id(self, appliance_id):
        """Sets the appliance_id of this VethPortInstance.

        Unique identifier of the appliance.  # noqa: E501

        :param appliance_id: The appliance_id of this VethPortInstance.  # noqa: E501
        :type: str
        """

        self._appliance_id = appliance_id

    @property
    def node_id(self):
        """Gets the node_id of this VethPortInstance.  # noqa: E501

        Unique identifier of the cluster.  # noqa: E501

        :return: The node_id of this VethPortInstance.  # noqa: E501
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this VethPortInstance.

        Unique identifier of the cluster.  # noqa: E501

        :param node_id: The node_id of this VethPortInstance.  # noqa: E501
        :type: str
        """

        self._node_id = node_id

    @property
    def name(self):
        """Gets the name of this VethPortInstance.  # noqa: E501

        Virtual Ethernet port name.  This property supports case-insensitive filtering.  # noqa: E501

        :return: The name of this VethPortInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VethPortInstance.

        Virtual Ethernet port name.  This property supports case-insensitive filtering.  # noqa: E501

        :param name: The name of this VethPortInstance.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def mac_address(self):
        """Gets the mac_address of this VethPortInstance.  # noqa: E501

        Virtual Ethernet port MAC address.  # noqa: E501

        :return: The mac_address of this VethPortInstance.  # noqa: E501
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this VethPortInstance.

        Virtual Ethernet port MAC address.  # noqa: E501

        :param mac_address: The mac_address of this VethPortInstance.  # noqa: E501
        :type: str
        """

        self._mac_address = mac_address

    @property
    def is_link_up(self):
        """Gets the is_link_up of this VethPortInstance.  # noqa: E501

        Indicates whether the virtual Ethernet port's link is up. Values are: * true - Link is up. * false - Link is down.   # noqa: E501

        :return: The is_link_up of this VethPortInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_link_up

    @is_link_up.setter
    def is_link_up(self, is_link_up):
        """Sets the is_link_up of this VethPortInstance.

        Indicates whether the virtual Ethernet port's link is up. Values are: * true - Link is up. * false - Link is down.   # noqa: E501

        :param is_link_up: The is_link_up of this VethPortInstance.  # noqa: E501
        :type: bool
        """

        self._is_link_up = is_link_up

    @property
    def current_speed(self):
        """Gets the current_speed of this VethPortInstance.  # noqa: E501

        Virtual Ethernet port transmission speed, in bits/sec (bps).  # noqa: E501

        :return: The current_speed of this VethPortInstance.  # noqa: E501
        :rtype: int
        """
        return self._current_speed

    @current_speed.setter
    def current_speed(self, current_speed):
        """Sets the current_speed of this VethPortInstance.

        Virtual Ethernet port transmission speed, in bits/sec (bps).  # noqa: E501

        :param current_speed: The current_speed of this VethPortInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                current_speed is not None and current_speed > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `current_speed`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                current_speed is not None and current_speed < 0):  # noqa: E501
            raise ValueError("Invalid value for `current_speed`, must be a value greater than or equal to `0`")  # noqa: E501

        self._current_speed = current_speed

    @property
    def current_mtu(self):
        """Gets the current_mtu of this VethPortInstance.  # noqa: E501

        Maximum Transmission Unit (MTU) packet size that the virtual Ethernet port can transmit.  # noqa: E501

        :return: The current_mtu of this VethPortInstance.  # noqa: E501
        :rtype: int
        """
        return self._current_mtu

    @current_mtu.setter
    def current_mtu(self, current_mtu):
        """Sets the current_mtu of this VethPortInstance.

        Maximum Transmission Unit (MTU) packet size that the virtual Ethernet port can transmit.  # noqa: E501

        :param current_mtu: The current_mtu of this VethPortInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                current_mtu is not None and current_mtu > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `current_mtu`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                current_mtu is not None and current_mtu < 0):  # noqa: E501
            raise ValueError("Invalid value for `current_mtu`, must be a value greater than or equal to `0`")  # noqa: E501

        self._current_mtu = current_mtu

    @property
    def vswitch_name(self):
        """Gets the vswitch_name of this VethPortInstance.  # noqa: E501

        Name of the virtual switch that holds the virtual Ethernet port.  # noqa: E501

        :return: The vswitch_name of this VethPortInstance.  # noqa: E501
        :rtype: str
        """
        return self._vswitch_name

    @vswitch_name.setter
    def vswitch_name(self, vswitch_name):
        """Sets the vswitch_name of this VethPortInstance.

        Name of the virtual switch that holds the virtual Ethernet port.  # noqa: E501

        :param vswitch_name: The vswitch_name of this VethPortInstance.  # noqa: E501
        :type: str
        """

        self._vswitch_name = vswitch_name

    @property
    def vswitch_port_group_name(self):
        """Gets the vswitch_port_group_name of this VethPortInstance.  # noqa: E501

        Name of the virtual switch port group to which the virtual Ethernet port is assigned.  # noqa: E501

        :return: The vswitch_port_group_name of this VethPortInstance.  # noqa: E501
        :rtype: str
        """
        return self._vswitch_port_group_name

    @vswitch_port_group_name.setter
    def vswitch_port_group_name(self, vswitch_port_group_name):
        """Sets the vswitch_port_group_name of this VethPortInstance.

        Name of the virtual switch port group to which the virtual Ethernet port is assigned.  # noqa: E501

        :param vswitch_port_group_name: The vswitch_port_group_name of this VethPortInstance.  # noqa: E501
        :type: str
        """

        self._vswitch_port_group_name = vswitch_port_group_name

    @property
    def vswitch_port_id(self):
        """Gets the vswitch_port_id of this VethPortInstance.  # noqa: E501

        Unique identifier of the virtual switch port associated with the virtual Ethernet port.  # noqa: E501

        :return: The vswitch_port_id of this VethPortInstance.  # noqa: E501
        :rtype: int
        """
        return self._vswitch_port_id

    @vswitch_port_id.setter
    def vswitch_port_id(self, vswitch_port_id):
        """Sets the vswitch_port_id of this VethPortInstance.

        Unique identifier of the virtual switch port associated with the virtual Ethernet port.  # noqa: E501

        :param vswitch_port_id: The vswitch_port_id of this VethPortInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                vswitch_port_id is not None and vswitch_port_id > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `vswitch_port_id`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                vswitch_port_id is not None and vswitch_port_id < 0):  # noqa: E501
            raise ValueError("Invalid value for `vswitch_port_id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._vswitch_port_id = vswitch_port_id

    @property
    def vswitch_port_name(self):
        """Gets the vswitch_port_name of this VethPortInstance.  # noqa: E501

        Name of the virtual switch port associated with the virtual Ethernet port.  This property supports case-insensitive filtering.  # noqa: E501

        :return: The vswitch_port_name of this VethPortInstance.  # noqa: E501
        :rtype: str
        """
        return self._vswitch_port_name

    @vswitch_port_name.setter
    def vswitch_port_name(self, vswitch_port_name):
        """Sets the vswitch_port_name of this VethPortInstance.

        Name of the virtual switch port associated with the virtual Ethernet port.  This property supports case-insensitive filtering.  # noqa: E501

        :param vswitch_port_name: The vswitch_port_name of this VethPortInstance.  # noqa: E501
        :type: str
        """

        self._vswitch_port_name = vswitch_port_name

    @property
    def ip_ports(self):
        """Gets the ip_ports of this VethPortInstance.  # noqa: E501

        This is the inverse of the resource type ip_port association.  # noqa: E501

        :return: The ip_ports of this VethPortInstance.  # noqa: E501
        :rtype: list[IpPortInstance]
        """
        return self._ip_ports

    @ip_ports.setter
    def ip_ports(self, ip_ports):
        """Sets the ip_ports of this VethPortInstance.

        This is the inverse of the resource type ip_port association.  # noqa: E501

        :param ip_ports: The ip_ports of this VethPortInstance.  # noqa: E501
        :type: list[IpPortInstance]
        """

        self._ip_ports = ip_ports

    @property
    def partner(self):
        """Gets the partner of this VethPortInstance.  # noqa: E501

        This is the embeddable reference form of partner_id attribute.  # noqa: E501

        :return: The partner of this VethPortInstance.  # noqa: E501
        :rtype: VethPortInstance
        """
        return self._partner

    @partner.setter
    def partner(self, partner):
        """Sets the partner of this VethPortInstance.

        This is the embeddable reference form of partner_id attribute.  # noqa: E501

        :param partner: The partner of this VethPortInstance.  # noqa: E501
        :type: VethPortInstance
        """

        self._partner = partner

    @property
    def appliance(self):
        """Gets the appliance of this VethPortInstance.  # noqa: E501

        This is the embeddable reference form of appliance_id attribute.  # noqa: E501

        :return: The appliance of this VethPortInstance.  # noqa: E501
        :rtype: ApplianceInstance
        """
        return self._appliance

    @appliance.setter
    def appliance(self, appliance):
        """Sets the appliance of this VethPortInstance.

        This is the embeddable reference form of appliance_id attribute.  # noqa: E501

        :param appliance: The appliance of this VethPortInstance.  # noqa: E501
        :type: ApplianceInstance
        """

        self._appliance = appliance

    @property
    def node(self):
        """Gets the node of this VethPortInstance.  # noqa: E501

        This is the embeddable reference form of node_id attribute.  # noqa: E501

        :return: The node of this VethPortInstance.  # noqa: E501
        :rtype: NodeInstance
        """
        return self._node

    @node.setter
    def node(self, node):
        """Sets the node of this VethPortInstance.

        This is the embeddable reference form of node_id attribute.  # noqa: E501

        :param node: The node of this VethPortInstance.  # noqa: E501
        :type: NodeInstance
        """

        self._node = node

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VethPortInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VethPortInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VethPortInstance):
            return True

        return self.to_dict() != other.to_dict()
