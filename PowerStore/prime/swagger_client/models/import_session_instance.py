# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class ImportSessionInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'type': 'ImportSessionTypeEnum',
        'name': 'str',
        'global_storage_discovery_address': 'str',
        'description': 'str',
        'remote_system_id': 'str',
        'source_resource_id': 'str',
        'destination_resource_id': 'str',
        'destination_resource_type': 'ImportDestinationResourceTypeEnum',
        'parent_session_id': 'str',
        'state': 'ImportSessionStateEnum',
        'estimated_completion_timestamp': 'datetime',
        'progress_percentage': 'int',
        'average_transfer_rate': 'int',
        'current_transfer_rate': 'int',
        'protection_policy_id': 'str',
        'volume_group_id': 'str',
        'automatic_cutover': 'bool',
        'scheduled_timestamp': 'datetime',
        'error': 'ErrorInstance',
        'last_update_timestamp': 'datetime',
        'type_l10n': 'str',
        'destination_resource_type_l10n': 'str',
        'state_l10n': 'str',
        'remote_system': 'RemoteSystemInstance'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'name': 'name',
        'global_storage_discovery_address': 'global_storage_discovery_address',
        'description': 'description',
        'remote_system_id': 'remote_system_id',
        'source_resource_id': 'source_resource_id',
        'destination_resource_id': 'destination_resource_id',
        'destination_resource_type': 'destination_resource_type',
        'parent_session_id': 'parent_session_id',
        'state': 'state',
        'estimated_completion_timestamp': 'estimated_completion_timestamp',
        'progress_percentage': 'progress_percentage',
        'average_transfer_rate': 'average_transfer_rate',
        'current_transfer_rate': 'current_transfer_rate',
        'protection_policy_id': 'protection_policy_id',
        'volume_group_id': 'volume_group_id',
        'automatic_cutover': 'automatic_cutover',
        'scheduled_timestamp': 'scheduled_timestamp',
        'error': 'error',
        'last_update_timestamp': 'last_update_timestamp',
        'type_l10n': 'type_l10n',
        'destination_resource_type_l10n': 'destination_resource_type_l10n',
        'state_l10n': 'state_l10n',
        'remote_system': 'remote_system'
    }

    def __init__(self, id=None, type=None, name=None, global_storage_discovery_address=None, description=None, remote_system_id=None, source_resource_id=None, destination_resource_id=None, destination_resource_type=None, parent_session_id=None, state=None, estimated_completion_timestamp=None, progress_percentage=None, average_transfer_rate=None, current_transfer_rate=None, protection_policy_id=None, volume_group_id=None, automatic_cutover=False, scheduled_timestamp=None, error=None, last_update_timestamp=None, type_l10n=None, destination_resource_type_l10n=None, state_l10n=None, remote_system=None, _configuration=None):  # noqa: E501
        """ImportSessionInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._type = None
        self._name = None
        self._global_storage_discovery_address = None
        self._description = None
        self._remote_system_id = None
        self._source_resource_id = None
        self._destination_resource_id = None
        self._destination_resource_type = None
        self._parent_session_id = None
        self._state = None
        self._estimated_completion_timestamp = None
        self._progress_percentage = None
        self._average_transfer_rate = None
        self._current_transfer_rate = None
        self._protection_policy_id = None
        self._volume_group_id = None
        self._automatic_cutover = None
        self._scheduled_timestamp = None
        self._error = None
        self._last_update_timestamp = None
        self._type_l10n = None
        self._destination_resource_type_l10n = None
        self._state_l10n = None
        self._remote_system = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if name is not None:
            self.name = name
        if global_storage_discovery_address is not None:
            self.global_storage_discovery_address = global_storage_discovery_address
        if description is not None:
            self.description = description
        if remote_system_id is not None:
            self.remote_system_id = remote_system_id
        if source_resource_id is not None:
            self.source_resource_id = source_resource_id
        if destination_resource_id is not None:
            self.destination_resource_id = destination_resource_id
        if destination_resource_type is not None:
            self.destination_resource_type = destination_resource_type
        if parent_session_id is not None:
            self.parent_session_id = parent_session_id
        if state is not None:
            self.state = state
        if estimated_completion_timestamp is not None:
            self.estimated_completion_timestamp = estimated_completion_timestamp
        if progress_percentage is not None:
            self.progress_percentage = progress_percentage
        if average_transfer_rate is not None:
            self.average_transfer_rate = average_transfer_rate
        if current_transfer_rate is not None:
            self.current_transfer_rate = current_transfer_rate
        if protection_policy_id is not None:
            self.protection_policy_id = protection_policy_id
        if volume_group_id is not None:
            self.volume_group_id = volume_group_id
        if automatic_cutover is not None:
            self.automatic_cutover = automatic_cutover
        if scheduled_timestamp is not None:
            self.scheduled_timestamp = scheduled_timestamp
        if error is not None:
            self.error = error
        if last_update_timestamp is not None:
            self.last_update_timestamp = last_update_timestamp
        if type_l10n is not None:
            self.type_l10n = type_l10n
        if destination_resource_type_l10n is not None:
            self.destination_resource_type_l10n = destination_resource_type_l10n
        if state_l10n is not None:
            self.state_l10n = state_l10n
        if remote_system is not None:
            self.remote_system = remote_system

    @property
    def id(self):
        """Gets the id of this ImportSessionInstance.  # noqa: E501

        Unique identifier of the import session.  # noqa: E501

        :return: The id of this ImportSessionInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ImportSessionInstance.

        Unique identifier of the import session.  # noqa: E501

        :param id: The id of this ImportSessionInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this ImportSessionInstance.  # noqa: E501

         Was added in version 1.0.2.  # noqa: E501

        :return: The type of this ImportSessionInstance.  # noqa: E501
        :rtype: ImportSessionTypeEnum
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ImportSessionInstance.

         Was added in version 1.0.2.  # noqa: E501

        :param type: The type of this ImportSessionInstance.  # noqa: E501
        :type: ImportSessionTypeEnum
        """

        self._type = type

    @property
    def name(self):
        """Gets the name of this ImportSessionInstance.  # noqa: E501

        User-specified name of the import session.  This property supports case-insensitive filtering.  # noqa: E501

        :return: The name of this ImportSessionInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ImportSessionInstance.

        User-specified name of the import session.  This property supports case-insensitive filtering.  # noqa: E501

        :param name: The name of this ImportSessionInstance.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def global_storage_discovery_address(self):
        """Gets the global_storage_discovery_address of this ImportSessionInstance.  # noqa: E501

        Global storage discovery iSCSI ip address that will be used for import workflow. The address can be an IPv4 address or FQDN (Fully Qualified Domain Name). Was added in version 3.0.0.0.  # noqa: E501

        :return: The global_storage_discovery_address of this ImportSessionInstance.  # noqa: E501
        :rtype: str
        """
        return self._global_storage_discovery_address

    @global_storage_discovery_address.setter
    def global_storage_discovery_address(self, global_storage_discovery_address):
        """Sets the global_storage_discovery_address of this ImportSessionInstance.

        Global storage discovery iSCSI ip address that will be used for import workflow. The address can be an IPv4 address or FQDN (Fully Qualified Domain Name). Was added in version 3.0.0.0.  # noqa: E501

        :param global_storage_discovery_address: The global_storage_discovery_address of this ImportSessionInstance.  # noqa: E501
        :type: str
        """

        self._global_storage_discovery_address = global_storage_discovery_address

    @property
    def description(self):
        """Gets the description of this ImportSessionInstance.  # noqa: E501

        User-specified description of the import session.  # noqa: E501

        :return: The description of this ImportSessionInstance.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ImportSessionInstance.

        User-specified description of the import session.  # noqa: E501

        :param description: The description of this ImportSessionInstance.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def remote_system_id(self):
        """Gets the remote_system_id of this ImportSessionInstance.  # noqa: E501

        Unique identifier of the storage system that contains the source volume or consistency group to be imported.  # noqa: E501

        :return: The remote_system_id of this ImportSessionInstance.  # noqa: E501
        :rtype: str
        """
        return self._remote_system_id

    @remote_system_id.setter
    def remote_system_id(self, remote_system_id):
        """Sets the remote_system_id of this ImportSessionInstance.

        Unique identifier of the storage system that contains the source volume or consistency group to be imported.  # noqa: E501

        :param remote_system_id: The remote_system_id of this ImportSessionInstance.  # noqa: E501
        :type: str
        """

        self._remote_system_id = remote_system_id

    @property
    def source_resource_id(self):
        """Gets the source_resource_id of this ImportSessionInstance.  # noqa: E501

        Unique identifier of the volume or consistency group to be imported.  # noqa: E501

        :return: The source_resource_id of this ImportSessionInstance.  # noqa: E501
        :rtype: str
        """
        return self._source_resource_id

    @source_resource_id.setter
    def source_resource_id(self, source_resource_id):
        """Sets the source_resource_id of this ImportSessionInstance.

        Unique identifier of the volume or consistency group to be imported.  # noqa: E501

        :param source_resource_id: The source_resource_id of this ImportSessionInstance.  # noqa: E501
        :type: str
        """

        self._source_resource_id = source_resource_id

    @property
    def destination_resource_id(self):
        """Gets the destination_resource_id of this ImportSessionInstance.  # noqa: E501

        Unique identifier of the destination volume or volume group created as part of the import process.  # noqa: E501

        :return: The destination_resource_id of this ImportSessionInstance.  # noqa: E501
        :rtype: str
        """
        return self._destination_resource_id

    @destination_resource_id.setter
    def destination_resource_id(self, destination_resource_id):
        """Sets the destination_resource_id of this ImportSessionInstance.

        Unique identifier of the destination volume or volume group created as part of the import process.  # noqa: E501

        :param destination_resource_id: The destination_resource_id of this ImportSessionInstance.  # noqa: E501
        :type: str
        """

        self._destination_resource_id = destination_resource_id

    @property
    def destination_resource_type(self):
        """Gets the destination_resource_type of this ImportSessionInstance.  # noqa: E501


        :return: The destination_resource_type of this ImportSessionInstance.  # noqa: E501
        :rtype: ImportDestinationResourceTypeEnum
        """
        return self._destination_resource_type

    @destination_resource_type.setter
    def destination_resource_type(self, destination_resource_type):
        """Sets the destination_resource_type of this ImportSessionInstance.


        :param destination_resource_type: The destination_resource_type of this ImportSessionInstance.  # noqa: E501
        :type: ImportDestinationResourceTypeEnum
        """

        self._destination_resource_type = destination_resource_type

    @property
    def parent_session_id(self):
        """Gets the parent_session_id of this ImportSessionInstance.  # noqa: E501

        For a volume that is part of a consistency group import, this value is the session identifier of the import session. For an individual volume import, this value is null.  # noqa: E501

        :return: The parent_session_id of this ImportSessionInstance.  # noqa: E501
        :rtype: str
        """
        return self._parent_session_id

    @parent_session_id.setter
    def parent_session_id(self, parent_session_id):
        """Sets the parent_session_id of this ImportSessionInstance.

        For a volume that is part of a consistency group import, this value is the session identifier of the import session. For an individual volume import, this value is null.  # noqa: E501

        :param parent_session_id: The parent_session_id of this ImportSessionInstance.  # noqa: E501
        :type: str
        """

        self._parent_session_id = parent_session_id

    @property
    def state(self):
        """Gets the state of this ImportSessionInstance.  # noqa: E501


        :return: The state of this ImportSessionInstance.  # noqa: E501
        :rtype: ImportSessionStateEnum
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ImportSessionInstance.


        :param state: The state of this ImportSessionInstance.  # noqa: E501
        :type: ImportSessionStateEnum
        """

        self._state = state

    @property
    def estimated_completion_timestamp(self):
        """Gets the estimated_completion_timestamp of this ImportSessionInstance.  # noqa: E501

        When the import is in the Copy_In_Progress state, this value indicates the estimated time at which the data copy will complete. Before the import is in the Copy_In_Progress state, the value is null.  # noqa: E501

        :return: The estimated_completion_timestamp of this ImportSessionInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._estimated_completion_timestamp

    @estimated_completion_timestamp.setter
    def estimated_completion_timestamp(self, estimated_completion_timestamp):
        """Sets the estimated_completion_timestamp of this ImportSessionInstance.

        When the import is in the Copy_In_Progress state, this value indicates the estimated time at which the data copy will complete. Before the import is in the Copy_In_Progress state, the value is null.  # noqa: E501

        :param estimated_completion_timestamp: The estimated_completion_timestamp of this ImportSessionInstance.  # noqa: E501
        :type: datetime
        """

        self._estimated_completion_timestamp = estimated_completion_timestamp

    @property
    def progress_percentage(self):
        """Gets the progress_percentage of this ImportSessionInstance.  # noqa: E501

        When the import is in the Copy_In_Progress state, this value indicates the completion percent for the import. Before the import is in the Copy_In_Progress state, this value is 0. After the cutover or if there is a failure, this value is null.  # noqa: E501

        :return: The progress_percentage of this ImportSessionInstance.  # noqa: E501
        :rtype: int
        """
        return self._progress_percentage

    @progress_percentage.setter
    def progress_percentage(self, progress_percentage):
        """Sets the progress_percentage of this ImportSessionInstance.

        When the import is in the Copy_In_Progress state, this value indicates the completion percent for the import. Before the import is in the Copy_In_Progress state, this value is 0. After the cutover or if there is a failure, this value is null.  # noqa: E501

        :param progress_percentage: The progress_percentage of this ImportSessionInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                progress_percentage is not None and progress_percentage > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `progress_percentage`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                progress_percentage is not None and progress_percentage < 0):  # noqa: E501
            raise ValueError("Invalid value for `progress_percentage`, must be a value greater than or equal to `0`")  # noqa: E501

        self._progress_percentage = progress_percentage

    @property
    def average_transfer_rate(self):
        """Gets the average_transfer_rate of this ImportSessionInstance.  # noqa: E501

        Average transfer rate of a data import operation in bytes/sec over the whole copy period. Before and after the import is in the Copy_In_Progress state, this value is null.  # noqa: E501

        :return: The average_transfer_rate of this ImportSessionInstance.  # noqa: E501
        :rtype: int
        """
        return self._average_transfer_rate

    @average_transfer_rate.setter
    def average_transfer_rate(self, average_transfer_rate):
        """Sets the average_transfer_rate of this ImportSessionInstance.

        Average transfer rate of a data import operation in bytes/sec over the whole copy period. Before and after the import is in the Copy_In_Progress state, this value is null.  # noqa: E501

        :param average_transfer_rate: The average_transfer_rate of this ImportSessionInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                average_transfer_rate is not None and average_transfer_rate > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `average_transfer_rate`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                average_transfer_rate is not None and average_transfer_rate < 0):  # noqa: E501
            raise ValueError("Invalid value for `average_transfer_rate`, must be a value greater than or equal to `0`")  # noqa: E501

        self._average_transfer_rate = average_transfer_rate

    @property
    def current_transfer_rate(self):
        """Gets the current_transfer_rate of this ImportSessionInstance.  # noqa: E501

        Current transfer rate of a data import operation in bytes/sec. Before and after the import is in the Copy_In_Progress state, this value is null.  # noqa: E501

        :return: The current_transfer_rate of this ImportSessionInstance.  # noqa: E501
        :rtype: int
        """
        return self._current_transfer_rate

    @current_transfer_rate.setter
    def current_transfer_rate(self, current_transfer_rate):
        """Sets the current_transfer_rate of this ImportSessionInstance.

        Current transfer rate of a data import operation in bytes/sec. Before and after the import is in the Copy_In_Progress state, this value is null.  # noqa: E501

        :param current_transfer_rate: The current_transfer_rate of this ImportSessionInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                current_transfer_rate is not None and current_transfer_rate > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `current_transfer_rate`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                current_transfer_rate is not None and current_transfer_rate < 0):  # noqa: E501
            raise ValueError("Invalid value for `current_transfer_rate`, must be a value greater than or equal to `0`")  # noqa: E501

        self._current_transfer_rate = current_transfer_rate

    @property
    def protection_policy_id(self):
        """Gets the protection_policy_id of this ImportSessionInstance.  # noqa: E501

        Unique identifier of the local protection policy in the PowerStore storage system that will be applied on an imported destination volume or consistency group after cutover. Only snapshot policies are supported in an import. Once the import completes, you can add a replication policy.  # noqa: E501

        :return: The protection_policy_id of this ImportSessionInstance.  # noqa: E501
        :rtype: str
        """
        return self._protection_policy_id

    @protection_policy_id.setter
    def protection_policy_id(self, protection_policy_id):
        """Sets the protection_policy_id of this ImportSessionInstance.

        Unique identifier of the local protection policy in the PowerStore storage system that will be applied on an imported destination volume or consistency group after cutover. Only snapshot policies are supported in an import. Once the import completes, you can add a replication policy.  # noqa: E501

        :param protection_policy_id: The protection_policy_id of this ImportSessionInstance.  # noqa: E501
        :type: str
        """

        self._protection_policy_id = protection_policy_id

    @property
    def volume_group_id(self):
        """Gets the volume_group_id of this ImportSessionInstance.  # noqa: E501

        Unique identifier of the volume group to which the destination volume will be added, if any.  # noqa: E501

        :return: The volume_group_id of this ImportSessionInstance.  # noqa: E501
        :rtype: str
        """
        return self._volume_group_id

    @volume_group_id.setter
    def volume_group_id(self, volume_group_id):
        """Sets the volume_group_id of this ImportSessionInstance.

        Unique identifier of the volume group to which the destination volume will be added, if any.  # noqa: E501

        :param volume_group_id: The volume_group_id of this ImportSessionInstance.  # noqa: E501
        :type: str
        """

        self._volume_group_id = volume_group_id

    @property
    def automatic_cutover(self):
        """Gets the automatic_cutover of this ImportSessionInstance.  # noqa: E501

        Indicates whether the import session cutover is manual (true) or automatic (false).  # noqa: E501

        :return: The automatic_cutover of this ImportSessionInstance.  # noqa: E501
        :rtype: bool
        """
        return self._automatic_cutover

    @automatic_cutover.setter
    def automatic_cutover(self, automatic_cutover):
        """Sets the automatic_cutover of this ImportSessionInstance.

        Indicates whether the import session cutover is manual (true) or automatic (false).  # noqa: E501

        :param automatic_cutover: The automatic_cutover of this ImportSessionInstance.  # noqa: E501
        :type: bool
        """

        self._automatic_cutover = automatic_cutover

    @property
    def scheduled_timestamp(self):
        """Gets the scheduled_timestamp of this ImportSessionInstance.  # noqa: E501

        Date and time at which the import session is scheduled to run. The date is specified in ISO 8601 format with the time expressed in UTC format.  # noqa: E501

        :return: The scheduled_timestamp of this ImportSessionInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._scheduled_timestamp

    @scheduled_timestamp.setter
    def scheduled_timestamp(self, scheduled_timestamp):
        """Sets the scheduled_timestamp of this ImportSessionInstance.

        Date and time at which the import session is scheduled to run. The date is specified in ISO 8601 format with the time expressed in UTC format.  # noqa: E501

        :param scheduled_timestamp: The scheduled_timestamp of this ImportSessionInstance.  # noqa: E501
        :type: datetime
        """

        self._scheduled_timestamp = scheduled_timestamp

    @property
    def error(self):
        """Gets the error of this ImportSessionInstance.  # noqa: E501


        :return: The error of this ImportSessionInstance.  # noqa: E501
        :rtype: ErrorInstance
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ImportSessionInstance.


        :param error: The error of this ImportSessionInstance.  # noqa: E501
        :type: ErrorInstance
        """

        self._error = error

    @property
    def last_update_timestamp(self):
        """Gets the last_update_timestamp of this ImportSessionInstance.  # noqa: E501

        Date and time when was the import was last updated. This value is updated each time the import job updates.  # noqa: E501

        :return: The last_update_timestamp of this ImportSessionInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update_timestamp

    @last_update_timestamp.setter
    def last_update_timestamp(self, last_update_timestamp):
        """Sets the last_update_timestamp of this ImportSessionInstance.

        Date and time when was the import was last updated. This value is updated each time the import job updates.  # noqa: E501

        :param last_update_timestamp: The last_update_timestamp of this ImportSessionInstance.  # noqa: E501
        :type: datetime
        """

        self._last_update_timestamp = last_update_timestamp

    @property
    def type_l10n(self):
        """Gets the type_l10n of this ImportSessionInstance.  # noqa: E501

        Localized message string corresponding to type Was added in version 1.0.2.  # noqa: E501

        :return: The type_l10n of this ImportSessionInstance.  # noqa: E501
        :rtype: str
        """
        return self._type_l10n

    @type_l10n.setter
    def type_l10n(self, type_l10n):
        """Sets the type_l10n of this ImportSessionInstance.

        Localized message string corresponding to type Was added in version 1.0.2.  # noqa: E501

        :param type_l10n: The type_l10n of this ImportSessionInstance.  # noqa: E501
        :type: str
        """

        self._type_l10n = type_l10n

    @property
    def destination_resource_type_l10n(self):
        """Gets the destination_resource_type_l10n of this ImportSessionInstance.  # noqa: E501

        Localized message string corresponding to destination_resource_type  # noqa: E501

        :return: The destination_resource_type_l10n of this ImportSessionInstance.  # noqa: E501
        :rtype: str
        """
        return self._destination_resource_type_l10n

    @destination_resource_type_l10n.setter
    def destination_resource_type_l10n(self, destination_resource_type_l10n):
        """Sets the destination_resource_type_l10n of this ImportSessionInstance.

        Localized message string corresponding to destination_resource_type  # noqa: E501

        :param destination_resource_type_l10n: The destination_resource_type_l10n of this ImportSessionInstance.  # noqa: E501
        :type: str
        """

        self._destination_resource_type_l10n = destination_resource_type_l10n

    @property
    def state_l10n(self):
        """Gets the state_l10n of this ImportSessionInstance.  # noqa: E501

        Localized message string corresponding to state  # noqa: E501

        :return: The state_l10n of this ImportSessionInstance.  # noqa: E501
        :rtype: str
        """
        return self._state_l10n

    @state_l10n.setter
    def state_l10n(self, state_l10n):
        """Sets the state_l10n of this ImportSessionInstance.

        Localized message string corresponding to state  # noqa: E501

        :param state_l10n: The state_l10n of this ImportSessionInstance.  # noqa: E501
        :type: str
        """

        self._state_l10n = state_l10n

    @property
    def remote_system(self):
        """Gets the remote_system of this ImportSessionInstance.  # noqa: E501

        This is the embeddable reference form of remote_system_id attribute.  # noqa: E501

        :return: The remote_system of this ImportSessionInstance.  # noqa: E501
        :rtype: RemoteSystemInstance
        """
        return self._remote_system

    @remote_system.setter
    def remote_system(self, remote_system):
        """Sets the remote_system of this ImportSessionInstance.

        This is the embeddable reference form of remote_system_id attribute.  # noqa: E501

        :param remote_system: The remote_system of this ImportSessionInstance.  # noqa: E501
        :type: RemoteSystemInstance
        """

        self._remote_system = remote_system

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImportSessionInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportSessionInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImportSessionInstance):
            return True

        return self.to_dict() != other.to_dict()
