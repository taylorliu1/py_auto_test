# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class SnapshotRuleCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'interval': 'SnapRuleIntervalEnum',
        'time_of_day': 'str',
        'timezone': 'TimeZoneEnum',
        'days_of_week': 'list[DaysOfWeekEnum]',
        'desired_retention': 'int',
        'is_read_only': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'interval': 'interval',
        'time_of_day': 'time_of_day',
        'timezone': 'timezone',
        'days_of_week': 'days_of_week',
        'desired_retention': 'desired_retention',
        'is_read_only': 'is_read_only'
    }

    def __init__(self, name=None, interval=None, time_of_day=None, timezone=None, days_of_week=None, desired_retention=None, is_read_only=False, _configuration=None):  # noqa: E501
        """SnapshotRuleCreate - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._interval = None
        self._time_of_day = None
        self._timezone = None
        self._days_of_week = None
        self._desired_retention = None
        self._is_read_only = None
        self.discriminator = None

        self.name = name
        if interval is not None:
            self.interval = interval
        if time_of_day is not None:
            self.time_of_day = time_of_day
        if timezone is not None:
            self.timezone = timezone
        if days_of_week is not None:
            self.days_of_week = days_of_week
        self.desired_retention = desired_retention
        if is_read_only is not None:
            self.is_read_only = is_read_only

    @property
    def name(self):
        """Gets the name of this SnapshotRuleCreate.  # noqa: E501

        Name of the snapshot rule.  # noqa: E501

        :return: The name of this SnapshotRuleCreate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SnapshotRuleCreate.

        Name of the snapshot rule.  # noqa: E501

        :param name: The name of this SnapshotRuleCreate.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 128):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def interval(self):
        """Gets the interval of this SnapshotRuleCreate.  # noqa: E501


        :return: The interval of this SnapshotRuleCreate.  # noqa: E501
        :rtype: SnapRuleIntervalEnum
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this SnapshotRuleCreate.


        :param interval: The interval of this SnapshotRuleCreate.  # noqa: E501
        :type: SnapRuleIntervalEnum
        """

        self._interval = interval

    @property
    def time_of_day(self):
        """Gets the time_of_day of this SnapshotRuleCreate.  # noqa: E501

        Time of the day to take a daily snapshot, with format \"hh:mm\" using a 24 hour clock. Either the interval parameter or the time_of_day parameter may be set, but not both.   # noqa: E501

        :return: The time_of_day of this SnapshotRuleCreate.  # noqa: E501
        :rtype: str
        """
        return self._time_of_day

    @time_of_day.setter
    def time_of_day(self, time_of_day):
        """Sets the time_of_day of this SnapshotRuleCreate.

        Time of the day to take a daily snapshot, with format \"hh:mm\" using a 24 hour clock. Either the interval parameter or the time_of_day parameter may be set, but not both.   # noqa: E501

        :param time_of_day: The time_of_day of this SnapshotRuleCreate.  # noqa: E501
        :type: str
        """

        self._time_of_day = time_of_day

    @property
    def timezone(self):
        """Gets the timezone of this SnapshotRuleCreate.  # noqa: E501

         Was added in version 2.0.0.0.  # noqa: E501

        :return: The timezone of this SnapshotRuleCreate.  # noqa: E501
        :rtype: TimeZoneEnum
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this SnapshotRuleCreate.

         Was added in version 2.0.0.0.  # noqa: E501

        :param timezone: The timezone of this SnapshotRuleCreate.  # noqa: E501
        :type: TimeZoneEnum
        """

        self._timezone = timezone

    @property
    def days_of_week(self):
        """Gets the days_of_week of this SnapshotRuleCreate.  # noqa: E501

        Days of the week when the snapshot rule should be applied. Days are determined based on the UTC time zone, unless the time_of_day and timezone properties are set.   # noqa: E501

        :return: The days_of_week of this SnapshotRuleCreate.  # noqa: E501
        :rtype: list[DaysOfWeekEnum]
        """
        return self._days_of_week

    @days_of_week.setter
    def days_of_week(self, days_of_week):
        """Sets the days_of_week of this SnapshotRuleCreate.

        Days of the week when the snapshot rule should be applied. Days are determined based on the UTC time zone, unless the time_of_day and timezone properties are set.   # noqa: E501

        :param days_of_week: The days_of_week of this SnapshotRuleCreate.  # noqa: E501
        :type: list[DaysOfWeekEnum]
        """

        self._days_of_week = days_of_week

    @property
    def desired_retention(self):
        """Gets the desired_retention of this SnapshotRuleCreate.  # noqa: E501

        Desired snapshot retention period in hours. The system will retain snapshots for this time period.   # noqa: E501

        :return: The desired_retention of this SnapshotRuleCreate.  # noqa: E501
        :rtype: int
        """
        return self._desired_retention

    @desired_retention.setter
    def desired_retention(self, desired_retention):
        """Sets the desired_retention of this SnapshotRuleCreate.

        Desired snapshot retention period in hours. The system will retain snapshots for this time period.   # noqa: E501

        :param desired_retention: The desired_retention of this SnapshotRuleCreate.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and desired_retention is None:
            raise ValueError("Invalid value for `desired_retention`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                desired_retention is not None and desired_retention > 8760):  # noqa: E501
            raise ValueError("Invalid value for `desired_retention`, must be a value less than or equal to `8760`")  # noqa: E501
        if (self._configuration.client_side_validation and
                desired_retention is not None and desired_retention < 1):  # noqa: E501
            raise ValueError("Invalid value for `desired_retention`, must be a value greater than or equal to `1`")  # noqa: E501

        self._desired_retention = desired_retention

    @property
    def is_read_only(self):
        """Gets the is_read_only of this SnapshotRuleCreate.  # noqa: E501

        Indicates whether this snapshot rule can be modified.  Was added in version 3.0.0.0.  # noqa: E501

        :return: The is_read_only of this SnapshotRuleCreate.  # noqa: E501
        :rtype: bool
        """
        return self._is_read_only

    @is_read_only.setter
    def is_read_only(self, is_read_only):
        """Sets the is_read_only of this SnapshotRuleCreate.

        Indicates whether this snapshot rule can be modified.  Was added in version 3.0.0.0.  # noqa: E501

        :param is_read_only: The is_read_only of this SnapshotRuleCreate.  # noqa: E501
        :type: bool
        """

        self._is_read_only = is_read_only

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SnapshotRuleCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SnapshotRuleCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SnapshotRuleCreate):
            return True

        return self.to_dict() != other.to_dict()
