# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class ResourceActionEnum(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    ADD_MEMBERS = "add_members"
    ADD_OR_REPLACE = "add_or_replace"
    ATTACH = "attach"
    ATTACH_VOLZS = "attach_volzs"
    BIND = "bind"
    BULK_DISABLE_MIRROR = "bulk_disable_mirror"
    BULK_ENABLE_MIRROR = "bulk_enable_mirror"
    CANCEL = "cancel"
    CHECK_SNAPSHOTS_PEER_METADATA = "check_snapshots_peer_metadata"
    CLEANUP = "cleanup"
    CLONE = "clone"
    CONFIGURE_METRO = "configure_metro"
    CREATE = "create"
    CREATE_MIGRATION_SESSIONS = "create_migration_sessions"
    CREATE_NAS_VOLUME_SESSION = "create_nas_volume_session"
    CUTOVER = "cutover"
    DECOMMISSION = "decommission"
    DELETE = "delete"
    DEMOTE = "demote"
    DESTINATION_OBJECTS_SYNC = "destination_objects_sync"
    DETACH = "detach"
    DISCOVER = "discover"
    DOWNLOAD = "download"
    DRIVE_FAILURE_TOLERANCE_LEVEL_AVAILABILITY = "drive_failure_tolerance_level_availability"
    EMPTY = "empty"
    ENABLE = "enable"
    END_METRO = "end_metro"
    ESTIMATE_APPLIANCE_FREE_SPACE = "estimate_appliance_free_space"
    EXCHANGE = "exchange"
    EXPIRE_RECOVERY_SNAPSHOTS = "expire_recovery_snapshots"
    EXTEND_TRIAL = "extend_trial"
    FAILOVER = "failover"
    FILE_CREATE_HELPER = "file_create_helper"
    FILE_DELETE_HELPER = "file_delete_helper"
    FORECAST = "forecast"
    FRACTURE = "fracture"
    GENERATE = "generate"
    GET_CA_SERVER_CERT = "get_ca_server_cert"
    GET_METRO_TPG_MESH = "get_metro_tpg_mesh"
    GET_REPLICATED_NAS_SERVER = "get_replicated_nas_server"
    IMPORT_SNAPSHOT_POLICY = "import_snapshot_policy"
    IMPORT_SNAPSHOT_PROFILES = "import_snapshot_profiles"
    IMPORT_SNAPSHOT_SCHEDULES = "import_snapshot_schedules"
    INSTALL = "install"
    JOIN = "join"
    MODIFY = "modify"
    MOUNT = "mount"
    NAS_UNINSTALL = "nas_uninstall"
    OBJECT_SYNC = "object_sync"
    PAUSE = "pause"
    PING = "ping"
    PROMOTE = "promote"
    PUHC = "puhc"
    QUERY_APPLIANCES = "query_appliances"
    QUERY_DESTINATIONS_DETAILS = "query_destinations_details"
    QUERY_DETAILS = "query_details"
    QUERY_TARGET = "query_target"
    QUERY_VOLZS = "query_volzs"
    RECOVER = "recover"
    REDISCOVER = "rediscover"
    REFRESH = "refresh"
    REFRESH_QUOTA = "refresh_quota"
    REGENERATE = "regenerate"
    REMOVE_MEMBERS = "remove_members"
    REPLACE = "replace"
    REPORT = "report"
    REPROTECT = "reprotect"
    RESET_CERTIFICATES = "reset_certificates"
    RESTORE = "restore"
    RESTORE_PSTX_CONFIG = "restore_pstx_config"
    RESUME = "resume"
    RETRIEVE = "retrieve"
    SCALE = "scale"
    SET_DESTINATION_ELEMENTS_PROPERTIES = "set_destination_elements_properties"
    SNAPSHOT = "snapshot"
    SNAPSHOT_DESTINATION = "snapshot_destination"
    START_FAILOVER_TEST = "start_failover_test"
    START_MIGRATION_SESSIONS = "start_migration_sessions"
    STOP_FAILOVER_TEST = "stop_failover_test"
    SWITCH_MODE_TO_METRO_SYNC = "switch_mode_to_metro_sync"
    SWITCH_MODE_TO_SYNC = "switch_mode_to_sync"
    SYNC = "sync"
    SYNC_NODE_AFFINITY = "sync_node_affinity"
    SYNC_SNAPSHOT = "sync_snapshot"
    TEST = "test"
    TIME_TO_FULL = "time_to_full"
    UNJOIN = "unjoin"
    UNMOUNT = "unmount"
    UPDATE_DTS = "update_dts"
    UPDATE_PROPERTIES = "update_properties"
    UPDATE_SOFTWARE = "update_software"
    UPDATE_USER_MAPPINGS = "update_user_mappings"
    UPGRADE = "upgrade"
    UPLOAD = "upload"
    UPLOAD_CERTIFICATE = "upload_certificate"
    UPLOAD_CONFIG = "upload_config"
    UPLOAD_KEYTAB = "upload_keytab"
    VALIDATE_CREATE = "validate_create"
    VALIDATE_POWER_DOWN = "validate_power_down"
    VALIDATE_UPGRADE = "validate_upgrade"
    VCENTER_DISCOVER = "vcenter_discover"
    VERIFY = "verify"
    VERIFY_LOCAL = "verify_local"
    VERSION = "version"

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self, _configuration=None):  # noqa: E501
        """ResourceActionEnum - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResourceActionEnum, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourceActionEnum):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResourceActionEnum):
            return True

        return self.to_dict() != other.to_dict()
