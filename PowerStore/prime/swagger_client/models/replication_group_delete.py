# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class ReplicationGroupDelete(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'delete_session': 'bool',
        'delete_members': 'bool',
        'unassign_members': 'bool'
    }

    attribute_map = {
        'delete_session': 'delete_session',
        'delete_members': 'delete_members',
        'unassign_members': 'unassign_members'
    }

    def __init__(self, delete_session=False, delete_members=False, unassign_members=False, _configuration=None):  # noqa: E501
        """ReplicationGroupDelete - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._delete_session = None
        self._delete_members = None
        self._unassign_members = None
        self.discriminator = None

        if delete_session is not None:
            self.delete_session = delete_session
        if delete_members is not None:
            self.delete_members = delete_members
        if unassign_members is not None:
            self.unassign_members = unassign_members

    @property
    def delete_session(self):
        """Gets the delete_session of this ReplicationGroupDelete.  # noqa: E501

        Normally, only replication groups without a session can be deleted. This option overrides that behavior and deletes replication session before deleting the replication group. Note that this option only deletes the session on local appliance. Peer session and replication group won't be affected and may require separate delete operation.  # noqa: E501

        :return: The delete_session of this ReplicationGroupDelete.  # noqa: E501
        :rtype: bool
        """
        return self._delete_session

    @delete_session.setter
    def delete_session(self, delete_session):
        """Sets the delete_session of this ReplicationGroupDelete.

        Normally, only replication groups without a session can be deleted. This option overrides that behavior and deletes replication session before deleting the replication group. Note that this option only deletes the session on local appliance. Peer session and replication group won't be affected and may require separate delete operation.  # noqa: E501

        :param delete_session: The delete_session of this ReplicationGroupDelete.  # noqa: E501
        :type: bool
        """

        self._delete_session = delete_session

    @property
    def delete_members(self):
        """Gets the delete_members of this ReplicationGroupDelete.  # noqa: E501

        Normally, only empty replication groups can be deleted. This option overrides that behavior and deletes member vVols before deleting the replication group. Deletes bound and attached vVols, which is equivalent to virtual_volume delete with force set to true. May not be used together with unassign_members.  # noqa: E501

        :return: The delete_members of this ReplicationGroupDelete.  # noqa: E501
        :rtype: bool
        """
        return self._delete_members

    @delete_members.setter
    def delete_members(self, delete_members):
        """Sets the delete_members of this ReplicationGroupDelete.

        Normally, only empty replication groups can be deleted. This option overrides that behavior and deletes member vVols before deleting the replication group. Deletes bound and attached vVols, which is equivalent to virtual_volume delete with force set to true. May not be used together with unassign_members.  # noqa: E501

        :param delete_members: The delete_members of this ReplicationGroupDelete.  # noqa: E501
        :type: bool
        """

        self._delete_members = delete_members

    @property
    def unassign_members(self):
        """Gets the unassign_members of this ReplicationGroupDelete.  # noqa: E501

        Normally, only empty replication groups can be deleted. This option overrides that behavior and unassigns replication group from member vVols before deleting the replication group. May not be used together with delete_members.  # noqa: E501

        :return: The unassign_members of this ReplicationGroupDelete.  # noqa: E501
        :rtype: bool
        """
        return self._unassign_members

    @unassign_members.setter
    def unassign_members(self, unassign_members):
        """Sets the unassign_members of this ReplicationGroupDelete.

        Normally, only empty replication groups can be deleted. This option overrides that behavior and unassigns replication group from member vVols before deleting the replication group. May not be used together with delete_members.  # noqa: E501

        :param unassign_members: The unassign_members of this ReplicationGroupDelete.  # noqa: E501
        :type: bool
        """

        self._unassign_members = unassign_members

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReplicationGroupDelete, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReplicationGroupDelete):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReplicationGroupDelete):
            return True

        return self.to_dict() != other.to_dict()
