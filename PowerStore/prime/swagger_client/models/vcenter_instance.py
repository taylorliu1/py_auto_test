# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class VcenterInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'instance_uuid': 'str',
        'address': 'str',
        'username': 'str',
        'version': 'str',
        'vendor_provider_status': 'VendorProviderStatusEnum',
        'vendor_provider_status_l10n': 'str',
        'virtual_machines': 'list[VirtualMachineInstance]',
        'datastores': 'list[DatastoreInstance]',
        'vsphere_hosts': 'list[VsphereHostInstance]'
    }

    attribute_map = {
        'id': 'id',
        'instance_uuid': 'instance_uuid',
        'address': 'address',
        'username': 'username',
        'version': 'version',
        'vendor_provider_status': 'vendor_provider_status',
        'vendor_provider_status_l10n': 'vendor_provider_status_l10n',
        'virtual_machines': 'virtual_machines',
        'datastores': 'datastores',
        'vsphere_hosts': 'vsphere_hosts'
    }

    def __init__(self, id=None, instance_uuid=None, address=None, username=None, version=None, vendor_provider_status=None, vendor_provider_status_l10n=None, virtual_machines=None, datastores=None, vsphere_hosts=None, _configuration=None):  # noqa: E501
        """VcenterInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._instance_uuid = None
        self._address = None
        self._username = None
        self._version = None
        self._vendor_provider_status = None
        self._vendor_provider_status_l10n = None
        self._virtual_machines = None
        self._datastores = None
        self._vsphere_hosts = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if instance_uuid is not None:
            self.instance_uuid = instance_uuid
        if address is not None:
            self.address = address
        if username is not None:
            self.username = username
        if version is not None:
            self.version = version
        if vendor_provider_status is not None:
            self.vendor_provider_status = vendor_provider_status
        if vendor_provider_status_l10n is not None:
            self.vendor_provider_status_l10n = vendor_provider_status_l10n
        if virtual_machines is not None:
            self.virtual_machines = virtual_machines
        if datastores is not None:
            self.datastores = datastores
        if vsphere_hosts is not None:
            self.vsphere_hosts = vsphere_hosts

    @property
    def id(self):
        """Gets the id of this VcenterInstance.  # noqa: E501

        Unique identifier of the vCenter instance.  # noqa: E501

        :return: The id of this VcenterInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VcenterInstance.

        Unique identifier of the vCenter instance.  # noqa: E501

        :param id: The id of this VcenterInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def instance_uuid(self):
        """Gets the instance_uuid of this VcenterInstance.  # noqa: E501

        UUID instance of the vCenter.  # noqa: E501

        :return: The instance_uuid of this VcenterInstance.  # noqa: E501
        :rtype: str
        """
        return self._instance_uuid

    @instance_uuid.setter
    def instance_uuid(self, instance_uuid):
        """Sets the instance_uuid of this VcenterInstance.

        UUID instance of the vCenter.  # noqa: E501

        :param instance_uuid: The instance_uuid of this VcenterInstance.  # noqa: E501
        :type: str
        """

        self._instance_uuid = instance_uuid

    @property
    def address(self):
        """Gets the address of this VcenterInstance.  # noqa: E501

        IP address of vCenter host, in IPv4, IPv6, or hostname format.  # noqa: E501

        :return: The address of this VcenterInstance.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this VcenterInstance.

        IP address of vCenter host, in IPv4, IPv6, or hostname format.  # noqa: E501

        :param address: The address of this VcenterInstance.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def username(self):
        """Gets the username of this VcenterInstance.  # noqa: E501

        User name to login to vCenter.  # noqa: E501

        :return: The username of this VcenterInstance.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this VcenterInstance.

        User name to login to vCenter.  # noqa: E501

        :param username: The username of this VcenterInstance.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def version(self):
        """Gets the version of this VcenterInstance.  # noqa: E501

        Version of the vCenter including its build number. Was added in version 3.0.0.0.  # noqa: E501

        :return: The version of this VcenterInstance.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this VcenterInstance.

        Version of the vCenter including its build number. Was added in version 3.0.0.0.  # noqa: E501

        :param version: The version of this VcenterInstance.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def vendor_provider_status(self):
        """Gets the vendor_provider_status of this VcenterInstance.  # noqa: E501

        General status of the VASA vendor provider in vCenter. A VASA vendor provider is required for HCI deployments, and optional for SAN deployments. To register or re-register the VASA vendor provider, pass appropriate storage system credentials using the modify request. Was added in version 2.0.0.0.  # noqa: E501

        :return: The vendor_provider_status of this VcenterInstance.  # noqa: E501
        :rtype: VendorProviderStatusEnum
        """
        return self._vendor_provider_status

    @vendor_provider_status.setter
    def vendor_provider_status(self, vendor_provider_status):
        """Sets the vendor_provider_status of this VcenterInstance.

        General status of the VASA vendor provider in vCenter. A VASA vendor provider is required for HCI deployments, and optional for SAN deployments. To register or re-register the VASA vendor provider, pass appropriate storage system credentials using the modify request. Was added in version 2.0.0.0.  # noqa: E501

        :param vendor_provider_status: The vendor_provider_status of this VcenterInstance.  # noqa: E501
        :type: VendorProviderStatusEnum
        """

        self._vendor_provider_status = vendor_provider_status

    @property
    def vendor_provider_status_l10n(self):
        """Gets the vendor_provider_status_l10n of this VcenterInstance.  # noqa: E501

        Localized message string corresponding to vendor_provider_status Was added in version 2.0.0.0.  # noqa: E501

        :return: The vendor_provider_status_l10n of this VcenterInstance.  # noqa: E501
        :rtype: str
        """
        return self._vendor_provider_status_l10n

    @vendor_provider_status_l10n.setter
    def vendor_provider_status_l10n(self, vendor_provider_status_l10n):
        """Sets the vendor_provider_status_l10n of this VcenterInstance.

        Localized message string corresponding to vendor_provider_status Was added in version 2.0.0.0.  # noqa: E501

        :param vendor_provider_status_l10n: The vendor_provider_status_l10n of this VcenterInstance.  # noqa: E501
        :type: str
        """

        self._vendor_provider_status_l10n = vendor_provider_status_l10n

    @property
    def virtual_machines(self):
        """Gets the virtual_machines of this VcenterInstance.  # noqa: E501

        This is the inverse of the resource type virtual_machine association.  # noqa: E501

        :return: The virtual_machines of this VcenterInstance.  # noqa: E501
        :rtype: list[VirtualMachineInstance]
        """
        return self._virtual_machines

    @virtual_machines.setter
    def virtual_machines(self, virtual_machines):
        """Sets the virtual_machines of this VcenterInstance.

        This is the inverse of the resource type virtual_machine association.  # noqa: E501

        :param virtual_machines: The virtual_machines of this VcenterInstance.  # noqa: E501
        :type: list[VirtualMachineInstance]
        """

        self._virtual_machines = virtual_machines

    @property
    def datastores(self):
        """Gets the datastores of this VcenterInstance.  # noqa: E501

        This is the inverse of the resource type datastore association.  # noqa: E501

        :return: The datastores of this VcenterInstance.  # noqa: E501
        :rtype: list[DatastoreInstance]
        """
        return self._datastores

    @datastores.setter
    def datastores(self, datastores):
        """Sets the datastores of this VcenterInstance.

        This is the inverse of the resource type datastore association.  # noqa: E501

        :param datastores: The datastores of this VcenterInstance.  # noqa: E501
        :type: list[DatastoreInstance]
        """

        self._datastores = datastores

    @property
    def vsphere_hosts(self):
        """Gets the vsphere_hosts of this VcenterInstance.  # noqa: E501

        This is the inverse of the resource type vsphere_host association.  # noqa: E501

        :return: The vsphere_hosts of this VcenterInstance.  # noqa: E501
        :rtype: list[VsphereHostInstance]
        """
        return self._vsphere_hosts

    @vsphere_hosts.setter
    def vsphere_hosts(self, vsphere_hosts):
        """Sets the vsphere_hosts of this VcenterInstance.

        This is the inverse of the resource type vsphere_host association.  # noqa: E501

        :param vsphere_hosts: The vsphere_hosts of this VcenterInstance.  # noqa: E501
        :type: list[VsphereHostInstance]
        """

        self._vsphere_hosts = vsphere_hosts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VcenterInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VcenterInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VcenterInstance):
            return True

        return self.to_dict() != other.to_dict()
