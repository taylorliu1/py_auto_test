# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class PhysicalSwitchConnectionInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'port': 'int',
        'connect_method': 'PhysicalSwitchConnectMethodEnum',
        'username': 'str',
        'physical_switch_id': 'str',
        'connect_method_l10n': 'str',
        'physical_switch': 'PhysicalSwitchInstance'
    }

    attribute_map = {
        'address': 'address',
        'port': 'port',
        'connect_method': 'connect_method',
        'username': 'username',
        'physical_switch_id': 'physical_switch_id',
        'connect_method_l10n': 'connect_method_l10n',
        'physical_switch': 'physical_switch'
    }

    def __init__(self, address=None, port=None, connect_method=None, username=None, physical_switch_id=None, connect_method_l10n=None, physical_switch=None, _configuration=None):  # noqa: E501
        """PhysicalSwitchConnectionInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._address = None
        self._port = None
        self._connect_method = None
        self._username = None
        self._physical_switch_id = None
        self._connect_method_l10n = None
        self._physical_switch = None
        self.discriminator = None

        if address is not None:
            self.address = address
        if port is not None:
            self.port = port
        if connect_method is not None:
            self.connect_method = connect_method
        if username is not None:
            self.username = username
        if physical_switch_id is not None:
            self.physical_switch_id = physical_switch_id
        if connect_method_l10n is not None:
            self.connect_method_l10n = connect_method_l10n
        if physical_switch is not None:
            self.physical_switch = physical_switch

    @property
    def address(self):
        """Gets the address of this PhysicalSwitchConnectionInstance.  # noqa: E501

        Physical switch address in IPv4 or IPv6 or DNS hostname format.  # noqa: E501

        :return: The address of this PhysicalSwitchConnectionInstance.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this PhysicalSwitchConnectionInstance.

        Physical switch address in IPv4 or IPv6 or DNS hostname format.  # noqa: E501

        :param address: The address of this PhysicalSwitchConnectionInstance.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                address is not None and len(address) > 255):
            raise ValueError("Invalid value for `address`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                address is not None and len(address) < 1):
            raise ValueError("Invalid value for `address`, length must be greater than or equal to `1`")  # noqa: E501

        self._address = address

    @property
    def port(self):
        """Gets the port of this PhysicalSwitchConnectionInstance.  # noqa: E501

        Port used for connection to switch.  # noqa: E501

        :return: The port of this PhysicalSwitchConnectionInstance.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this PhysicalSwitchConnectionInstance.

        Port used for connection to switch.  # noqa: E501

        :param port: The port of this PhysicalSwitchConnectionInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                port is not None and port > 65535):  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value less than or equal to `65535`")  # noqa: E501
        if (self._configuration.client_side_validation and
                port is not None and port < 0):  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value greater than or equal to `0`")  # noqa: E501

        self._port = port

    @property
    def connect_method(self):
        """Gets the connect_method of this PhysicalSwitchConnectionInstance.  # noqa: E501


        :return: The connect_method of this PhysicalSwitchConnectionInstance.  # noqa: E501
        :rtype: PhysicalSwitchConnectMethodEnum
        """
        return self._connect_method

    @connect_method.setter
    def connect_method(self, connect_method):
        """Sets the connect_method of this PhysicalSwitchConnectionInstance.


        :param connect_method: The connect_method of this PhysicalSwitchConnectionInstance.  # noqa: E501
        :type: PhysicalSwitchConnectMethodEnum
        """

        self._connect_method = connect_method

    @property
    def username(self):
        """Gets the username of this PhysicalSwitchConnectionInstance.  # noqa: E501

        Username to connect a physical switch for SSH connection method.  # noqa: E501

        :return: The username of this PhysicalSwitchConnectionInstance.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this PhysicalSwitchConnectionInstance.

        Username to connect a physical switch for SSH connection method.  # noqa: E501

        :param username: The username of this PhysicalSwitchConnectionInstance.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                username is not None and len(username) > 128):
            raise ValueError("Invalid value for `username`, length must be less than or equal to `128`")  # noqa: E501

        self._username = username

    @property
    def physical_switch_id(self):
        """Gets the physical_switch_id of this PhysicalSwitchConnectionInstance.  # noqa: E501

        Id of physical switch to which connection belongs.  # noqa: E501

        :return: The physical_switch_id of this PhysicalSwitchConnectionInstance.  # noqa: E501
        :rtype: str
        """
        return self._physical_switch_id

    @physical_switch_id.setter
    def physical_switch_id(self, physical_switch_id):
        """Sets the physical_switch_id of this PhysicalSwitchConnectionInstance.

        Id of physical switch to which connection belongs.  # noqa: E501

        :param physical_switch_id: The physical_switch_id of this PhysicalSwitchConnectionInstance.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                physical_switch_id is not None and len(physical_switch_id) > 128):
            raise ValueError("Invalid value for `physical_switch_id`, length must be less than or equal to `128`")  # noqa: E501

        self._physical_switch_id = physical_switch_id

    @property
    def connect_method_l10n(self):
        """Gets the connect_method_l10n of this PhysicalSwitchConnectionInstance.  # noqa: E501

        Localized message string corresponding to connect_method  # noqa: E501

        :return: The connect_method_l10n of this PhysicalSwitchConnectionInstance.  # noqa: E501
        :rtype: str
        """
        return self._connect_method_l10n

    @connect_method_l10n.setter
    def connect_method_l10n(self, connect_method_l10n):
        """Sets the connect_method_l10n of this PhysicalSwitchConnectionInstance.

        Localized message string corresponding to connect_method  # noqa: E501

        :param connect_method_l10n: The connect_method_l10n of this PhysicalSwitchConnectionInstance.  # noqa: E501
        :type: str
        """

        self._connect_method_l10n = connect_method_l10n

    @property
    def physical_switch(self):
        """Gets the physical_switch of this PhysicalSwitchConnectionInstance.  # noqa: E501

        This is the embeddable reference form of physical_switch_id attribute.  # noqa: E501

        :return: The physical_switch of this PhysicalSwitchConnectionInstance.  # noqa: E501
        :rtype: PhysicalSwitchInstance
        """
        return self._physical_switch

    @physical_switch.setter
    def physical_switch(self, physical_switch):
        """Sets the physical_switch of this PhysicalSwitchConnectionInstance.

        This is the embeddable reference form of physical_switch_id attribute.  # noqa: E501

        :param physical_switch: The physical_switch of this PhysicalSwitchConnectionInstance.  # noqa: E501
        :type: PhysicalSwitchInstance
        """

        self._physical_switch = physical_switch

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PhysicalSwitchConnectionInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PhysicalSwitchConnectionInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PhysicalSwitchConnectionInstance):
            return True

        return self.to_dict() != other.to_dict()
