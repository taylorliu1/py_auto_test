# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class AlertModify(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_acknowledged': 'bool',
        'acknowledged_severity': 'SeverityEnum'
    }

    attribute_map = {
        'is_acknowledged': 'is_acknowledged',
        'acknowledged_severity': 'acknowledged_severity'
    }

    def __init__(self, is_acknowledged=None, acknowledged_severity=None, _configuration=None):  # noqa: E501
        """AlertModify - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._is_acknowledged = None
        self._acknowledged_severity = None
        self.discriminator = None

        self.is_acknowledged = is_acknowledged
        if acknowledged_severity is not None:
            self.acknowledged_severity = acknowledged_severity

    @property
    def is_acknowledged(self):
        """Gets the is_acknowledged of this AlertModify.  # noqa: E501

        Indicates whether the alert has been acknowledged.  # noqa: E501

        :return: The is_acknowledged of this AlertModify.  # noqa: E501
        :rtype: bool
        """
        return self._is_acknowledged

    @is_acknowledged.setter
    def is_acknowledged(self, is_acknowledged):
        """Sets the is_acknowledged of this AlertModify.

        Indicates whether the alert has been acknowledged.  # noqa: E501

        :param is_acknowledged: The is_acknowledged of this AlertModify.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and is_acknowledged is None:
            raise ValueError("Invalid value for `is_acknowledged`, must not be `None`")  # noqa: E501

        self._is_acknowledged = is_acknowledged

    @property
    def acknowledged_severity(self):
        """Gets the acknowledged_severity of this AlertModify.  # noqa: E501


        :return: The acknowledged_severity of this AlertModify.  # noqa: E501
        :rtype: SeverityEnum
        """
        return self._acknowledged_severity

    @acknowledged_severity.setter
    def acknowledged_severity(self, acknowledged_severity):
        """Sets the acknowledged_severity of this AlertModify.


        :param acknowledged_severity: The acknowledged_severity of this AlertModify.  # noqa: E501
        :type: SeverityEnum
        """

        self._acknowledged_severity = acknowledged_severity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlertModify, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlertModify):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AlertModify):
            return True

        return self.to_dict() != other.to_dict()
