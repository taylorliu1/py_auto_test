# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class NfsServerInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'host_name': 'str',
        'nas_server_id': 'str',
        'is_nfsv3_enabled': 'bool',
        'is_nfsv4_enabled': 'bool',
        'is_secure_enabled': 'bool',
        'is_use_smb_config_enabled': 'bool',
        'service_principal_name': 'str',
        'is_joined': 'bool',
        'is_extended_credentials_enabled': 'bool',
        'credentials_cache_ttl': 'int',
        'nas_server': 'NasServerInstance'
    }

    attribute_map = {
        'id': 'id',
        'host_name': 'host_name',
        'nas_server_id': 'nas_server_id',
        'is_nfsv3_enabled': 'is_nfsv3_enabled',
        'is_nfsv4_enabled': 'is_nfsv4_enabled',
        'is_secure_enabled': 'is_secure_enabled',
        'is_use_smb_config_enabled': 'is_use_smb_config_enabled',
        'service_principal_name': 'service_principal_name',
        'is_joined': 'is_joined',
        'is_extended_credentials_enabled': 'is_extended_credentials_enabled',
        'credentials_cache_ttl': 'credentials_cache_TTL',
        'nas_server': 'nas_server'
    }

    def __init__(self, id=None, host_name=None, nas_server_id=None, is_nfsv3_enabled=None, is_nfsv4_enabled=None, is_secure_enabled=None, is_use_smb_config_enabled=False, service_principal_name=None, is_joined=None, is_extended_credentials_enabled=False, credentials_cache_ttl=15, nas_server=None, _configuration=None):  # noqa: E501
        """NfsServerInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._host_name = None
        self._nas_server_id = None
        self._is_nfsv3_enabled = None
        self._is_nfsv4_enabled = None
        self._is_secure_enabled = None
        self._is_use_smb_config_enabled = None
        self._service_principal_name = None
        self._is_joined = None
        self._is_extended_credentials_enabled = None
        self._credentials_cache_ttl = None
        self._nas_server = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if host_name is not None:
            self.host_name = host_name
        if nas_server_id is not None:
            self.nas_server_id = nas_server_id
        if is_nfsv3_enabled is not None:
            self.is_nfsv3_enabled = is_nfsv3_enabled
        if is_nfsv4_enabled is not None:
            self.is_nfsv4_enabled = is_nfsv4_enabled
        if is_secure_enabled is not None:
            self.is_secure_enabled = is_secure_enabled
        if is_use_smb_config_enabled is not None:
            self.is_use_smb_config_enabled = is_use_smb_config_enabled
        if service_principal_name is not None:
            self.service_principal_name = service_principal_name
        if is_joined is not None:
            self.is_joined = is_joined
        if is_extended_credentials_enabled is not None:
            self.is_extended_credentials_enabled = is_extended_credentials_enabled
        if credentials_cache_ttl is not None:
            self.credentials_cache_ttl = credentials_cache_ttl
        if nas_server is not None:
            self.nas_server = nas_server

    @property
    def id(self):
        """Gets the id of this NfsServerInstance.  # noqa: E501

        Unique identifier of the NFS server.  # noqa: E501

        :return: The id of this NfsServerInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NfsServerInstance.

        Unique identifier of the NFS server.  # noqa: E501

        :param id: The id of this NfsServerInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def host_name(self):
        """Gets the host_name of this NfsServerInstance.  # noqa: E501

        The name that will be used by NFS clients to connect to this NFS server. This name is required when using secure NFS, except when is_use_smb_config_enabled is true. In this case host_name is forced to the SMB server computer name, and must not be specified.   # noqa: E501

        :return: The host_name of this NfsServerInstance.  # noqa: E501
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this NfsServerInstance.

        The name that will be used by NFS clients to connect to this NFS server. This name is required when using secure NFS, except when is_use_smb_config_enabled is true. In this case host_name is forced to the SMB server computer name, and must not be specified.   # noqa: E501

        :param host_name: The host_name of this NfsServerInstance.  # noqa: E501
        :type: str
        """

        self._host_name = host_name

    @property
    def nas_server_id(self):
        """Gets the nas_server_id of this NfsServerInstance.  # noqa: E501

        The unique identifier of the NAS server that serves this share.  # noqa: E501

        :return: The nas_server_id of this NfsServerInstance.  # noqa: E501
        :rtype: str
        """
        return self._nas_server_id

    @nas_server_id.setter
    def nas_server_id(self, nas_server_id):
        """Sets the nas_server_id of this NfsServerInstance.

        The unique identifier of the NAS server that serves this share.  # noqa: E501

        :param nas_server_id: The nas_server_id of this NfsServerInstance.  # noqa: E501
        :type: str
        """

        self._nas_server_id = nas_server_id

    @property
    def is_nfsv3_enabled(self):
        """Gets the is_nfsv3_enabled of this NfsServerInstance.  # noqa: E501

        Indicates whether NFSv3 is enabled on the NAS server. When enabled, NFS shares can be accessed with NFSv3. When disabled, NFS shares cannot be accessed with NFSv3 protocol. - true - NFSv3 is enabled on the specified NAS server. - false - NFSv3 is disabled on the specified NAS server.   # noqa: E501

        :return: The is_nfsv3_enabled of this NfsServerInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_nfsv3_enabled

    @is_nfsv3_enabled.setter
    def is_nfsv3_enabled(self, is_nfsv3_enabled):
        """Sets the is_nfsv3_enabled of this NfsServerInstance.

        Indicates whether NFSv3 is enabled on the NAS server. When enabled, NFS shares can be accessed with NFSv3. When disabled, NFS shares cannot be accessed with NFSv3 protocol. - true - NFSv3 is enabled on the specified NAS server. - false - NFSv3 is disabled on the specified NAS server.   # noqa: E501

        :param is_nfsv3_enabled: The is_nfsv3_enabled of this NfsServerInstance.  # noqa: E501
        :type: bool
        """

        self._is_nfsv3_enabled = is_nfsv3_enabled

    @property
    def is_nfsv4_enabled(self):
        """Gets the is_nfsv4_enabled of this NfsServerInstance.  # noqa: E501

        Indicates whether NFSv4 is enabled on the NAS server. When enabled, NFS shares can be accessed with NFSv4. When disabled, NFS shares cannot be accessed with NFSv4 protocol. - true - NFSv4 is enabled on the specified NAS server. - false - NFSv4 is disabled on the specified NAS server.   # noqa: E501

        :return: The is_nfsv4_enabled of this NfsServerInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_nfsv4_enabled

    @is_nfsv4_enabled.setter
    def is_nfsv4_enabled(self, is_nfsv4_enabled):
        """Sets the is_nfsv4_enabled of this NfsServerInstance.

        Indicates whether NFSv4 is enabled on the NAS server. When enabled, NFS shares can be accessed with NFSv4. When disabled, NFS shares cannot be accessed with NFSv4 protocol. - true - NFSv4 is enabled on the specified NAS server. - false - NFSv4 is disabled on the specified NAS server.   # noqa: E501

        :param is_nfsv4_enabled: The is_nfsv4_enabled of this NfsServerInstance.  # noqa: E501
        :type: bool
        """

        self._is_nfsv4_enabled = is_nfsv4_enabled

    @property
    def is_secure_enabled(self):
        """Gets the is_secure_enabled of this NfsServerInstance.  # noqa: E501

        Indicates whether secure NFS is enabled on the NFS server. - true - Secure NFS is enabled. - false - Secure NFS is disabled.   # noqa: E501

        :return: The is_secure_enabled of this NfsServerInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_secure_enabled

    @is_secure_enabled.setter
    def is_secure_enabled(self, is_secure_enabled):
        """Sets the is_secure_enabled of this NfsServerInstance.

        Indicates whether secure NFS is enabled on the NFS server. - true - Secure NFS is enabled. - false - Secure NFS is disabled.   # noqa: E501

        :param is_secure_enabled: The is_secure_enabled of this NfsServerInstance.  # noqa: E501
        :type: bool
        """

        self._is_secure_enabled = is_secure_enabled

    @property
    def is_use_smb_config_enabled(self):
        """Gets the is_use_smb_config_enabled of this NfsServerInstance.  # noqa: E501

        Indicates whether SMB authentication is used to authenticate to the KDC. Values are: - true: Indicates that the configured SMB Server settings are used for Kerberos authentication. - false: Indicates that Kerberos uses its own settings.   # noqa: E501

        :return: The is_use_smb_config_enabled of this NfsServerInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_use_smb_config_enabled

    @is_use_smb_config_enabled.setter
    def is_use_smb_config_enabled(self, is_use_smb_config_enabled):
        """Sets the is_use_smb_config_enabled of this NfsServerInstance.

        Indicates whether SMB authentication is used to authenticate to the KDC. Values are: - true: Indicates that the configured SMB Server settings are used for Kerberos authentication. - false: Indicates that Kerberos uses its own settings.   # noqa: E501

        :param is_use_smb_config_enabled: The is_use_smb_config_enabled of this NfsServerInstance.  # noqa: E501
        :type: bool
        """

        self._is_use_smb_config_enabled = is_use_smb_config_enabled

    @property
    def service_principal_name(self):
        """Gets the service_principal_name of this NfsServerInstance.  # noqa: E501

        The Service Principal Name (SPN) for the NFS server. This name is updated automatically when the NFS server configuration changes.  # noqa: E501

        :return: The service_principal_name of this NfsServerInstance.  # noqa: E501
        :rtype: str
        """
        return self._service_principal_name

    @service_principal_name.setter
    def service_principal_name(self, service_principal_name):
        """Sets the service_principal_name of this NfsServerInstance.

        The Service Principal Name (SPN) for the NFS server. This name is updated automatically when the NFS server configuration changes.  # noqa: E501

        :param service_principal_name: The service_principal_name of this NfsServerInstance.  # noqa: E501
        :type: str
        """

        self._service_principal_name = service_principal_name

    @property
    def is_joined(self):
        """Gets the is_joined of this NfsServerInstance.  # noqa: E501

        Indicates whether the NFS server is joined to Active Directory. Required for Secure NFS. Always false when secure NFS is disabled and kdc_type is not MS Windows.  # noqa: E501

        :return: The is_joined of this NfsServerInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_joined

    @is_joined.setter
    def is_joined(self, is_joined):
        """Sets the is_joined of this NfsServerInstance.

        Indicates whether the NFS server is joined to Active Directory. Required for Secure NFS. Always false when secure NFS is disabled and kdc_type is not MS Windows.  # noqa: E501

        :param is_joined: The is_joined of this NfsServerInstance.  # noqa: E501
        :type: bool
        """

        self._is_joined = is_joined

    @property
    def is_extended_credentials_enabled(self):
        """Gets the is_extended_credentials_enabled of this NfsServerInstance.  # noqa: E501

        Indicates whether the NFS server supports more than 16 Unix groups in a Unix credential. Valid values are: - true - NFS server supports more than 16 Unix groups in a Unix credential. The NFS server will send additional request to Unix Directory service to identify Unix groups. - false - NFS server supports more than 16 Unix groups in a Unix credential. The NFS server will send additional request to Unix Directory service to identify Unix groups. Note - The NFS server builds its own Unix credential when it supports more than 16 groups. This process can slow the performance.   # noqa: E501

        :return: The is_extended_credentials_enabled of this NfsServerInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_extended_credentials_enabled

    @is_extended_credentials_enabled.setter
    def is_extended_credentials_enabled(self, is_extended_credentials_enabled):
        """Sets the is_extended_credentials_enabled of this NfsServerInstance.

        Indicates whether the NFS server supports more than 16 Unix groups in a Unix credential. Valid values are: - true - NFS server supports more than 16 Unix groups in a Unix credential. The NFS server will send additional request to Unix Directory service to identify Unix groups. - false - NFS server supports more than 16 Unix groups in a Unix credential. The NFS server will send additional request to Unix Directory service to identify Unix groups. Note - The NFS server builds its own Unix credential when it supports more than 16 groups. This process can slow the performance.   # noqa: E501

        :param is_extended_credentials_enabled: The is_extended_credentials_enabled of this NfsServerInstance.  # noqa: E501
        :type: bool
        """

        self._is_extended_credentials_enabled = is_extended_credentials_enabled

    @property
    def credentials_cache_ttl(self):
        """Gets the credentials_cache_ttl of this NfsServerInstance.  # noqa: E501

        Sets the Time-To-Live (in minutes) expiration timestamp for a Windows entry in the credentials cache. When failed mapping entries expire, the system retries mapping the UID to the SID.  # noqa: E501

        :return: The credentials_cache_ttl of this NfsServerInstance.  # noqa: E501
        :rtype: int
        """
        return self._credentials_cache_ttl

    @credentials_cache_ttl.setter
    def credentials_cache_ttl(self, credentials_cache_ttl):
        """Sets the credentials_cache_ttl of this NfsServerInstance.

        Sets the Time-To-Live (in minutes) expiration timestamp for a Windows entry in the credentials cache. When failed mapping entries expire, the system retries mapping the UID to the SID.  # noqa: E501

        :param credentials_cache_ttl: The credentials_cache_ttl of this NfsServerInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                credentials_cache_ttl is not None and credentials_cache_ttl > 35791394):  # noqa: E501
            raise ValueError("Invalid value for `credentials_cache_ttl`, must be a value less than or equal to `35791394`")  # noqa: E501
        if (self._configuration.client_side_validation and
                credentials_cache_ttl is not None and credentials_cache_ttl < 1):  # noqa: E501
            raise ValueError("Invalid value for `credentials_cache_ttl`, must be a value greater than or equal to `1`")  # noqa: E501

        self._credentials_cache_ttl = credentials_cache_ttl

    @property
    def nas_server(self):
        """Gets the nas_server of this NfsServerInstance.  # noqa: E501

        This is the embeddable reference form of nas_server_id attribute.  # noqa: E501

        :return: The nas_server of this NfsServerInstance.  # noqa: E501
        :rtype: NasServerInstance
        """
        return self._nas_server

    @nas_server.setter
    def nas_server(self, nas_server):
        """Sets the nas_server of this NfsServerInstance.

        This is the embeddable reference form of nas_server_id attribute.  # noqa: E501

        :param nas_server: The nas_server of this NfsServerInstance.  # noqa: E501
        :type: NasServerInstance
        """

        self._nas_server = nas_server

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NfsServerInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NfsServerInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NfsServerInstance):
            return True

        return self.to_dict() != other.to_dict()
