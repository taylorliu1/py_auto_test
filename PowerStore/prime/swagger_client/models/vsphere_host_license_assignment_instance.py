# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class VsphereHostLicenseAssignmentInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'vsphere_host_id': 'str',
        'license_key': 'str',
        'name': 'str',
        'edition_key': 'str',
        'expiration_date': 'datetime',
        'vsphere_host': 'VsphereHostInstance'
    }

    attribute_map = {
        'id': 'id',
        'vsphere_host_id': 'vsphere_host_id',
        'license_key': 'license_key',
        'name': 'name',
        'edition_key': 'edition_key',
        'expiration_date': 'expiration_date',
        'vsphere_host': 'vsphere_host'
    }

    def __init__(self, id=None, vsphere_host_id=None, license_key=None, name=None, edition_key=None, expiration_date=None, vsphere_host=None, _configuration=None):  # noqa: E501
        """VsphereHostLicenseAssignmentInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._vsphere_host_id = None
        self._license_key = None
        self._name = None
        self._edition_key = None
        self._expiration_date = None
        self._vsphere_host = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if vsphere_host_id is not None:
            self.vsphere_host_id = vsphere_host_id
        if license_key is not None:
            self.license_key = license_key
        if name is not None:
            self.name = name
        if edition_key is not None:
            self.edition_key = edition_key
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if vsphere_host is not None:
            self.vsphere_host = vsphere_host

    @property
    def id(self):
        """Gets the id of this VsphereHostLicenseAssignmentInstance.  # noqa: E501

        Unique identifier of the vsphere_host_license_assignment instance.  # noqa: E501

        :return: The id of this VsphereHostLicenseAssignmentInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VsphereHostLicenseAssignmentInstance.

        Unique identifier of the vsphere_host_license_assignment instance.  # noqa: E501

        :param id: The id of this VsphereHostLicenseAssignmentInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def vsphere_host_id(self):
        """Gets the vsphere_host_id of this VsphereHostLicenseAssignmentInstance.  # noqa: E501

        Unique identifier of the vsphere_host instance.  # noqa: E501

        :return: The vsphere_host_id of this VsphereHostLicenseAssignmentInstance.  # noqa: E501
        :rtype: str
        """
        return self._vsphere_host_id

    @vsphere_host_id.setter
    def vsphere_host_id(self, vsphere_host_id):
        """Sets the vsphere_host_id of this VsphereHostLicenseAssignmentInstance.

        Unique identifier of the vsphere_host instance.  # noqa: E501

        :param vsphere_host_id: The vsphere_host_id of this VsphereHostLicenseAssignmentInstance.  # noqa: E501
        :type: str
        """

        self._vsphere_host_id = vsphere_host_id

    @property
    def license_key(self):
        """Gets the license_key of this VsphereHostLicenseAssignmentInstance.  # noqa: E501

        Obfuscated key of the license.  # noqa: E501

        :return: The license_key of this VsphereHostLicenseAssignmentInstance.  # noqa: E501
        :rtype: str
        """
        return self._license_key

    @license_key.setter
    def license_key(self, license_key):
        """Sets the license_key of this VsphereHostLicenseAssignmentInstance.

        Obfuscated key of the license.  # noqa: E501

        :param license_key: The license_key of this VsphereHostLicenseAssignmentInstance.  # noqa: E501
        :type: str
        """

        self._license_key = license_key

    @property
    def name(self):
        """Gets the name of this VsphereHostLicenseAssignmentInstance.  # noqa: E501

        License full name.  This property supports case-insensitive filtering.  # noqa: E501

        :return: The name of this VsphereHostLicenseAssignmentInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VsphereHostLicenseAssignmentInstance.

        License full name.  This property supports case-insensitive filtering.  # noqa: E501

        :param name: The name of this VsphereHostLicenseAssignmentInstance.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def edition_key(self):
        """Gets the edition_key of this VsphereHostLicenseAssignmentInstance.  # noqa: E501

        License type.  # noqa: E501

        :return: The edition_key of this VsphereHostLicenseAssignmentInstance.  # noqa: E501
        :rtype: str
        """
        return self._edition_key

    @edition_key.setter
    def edition_key(self, edition_key):
        """Sets the edition_key of this VsphereHostLicenseAssignmentInstance.

        License type.  # noqa: E501

        :param edition_key: The edition_key of this VsphereHostLicenseAssignmentInstance.  # noqa: E501
        :type: str
        """

        self._edition_key = edition_key

    @property
    def expiration_date(self):
        """Gets the expiration_date of this VsphereHostLicenseAssignmentInstance.  # noqa: E501

        License expiration date.  # noqa: E501

        :return: The expiration_date of this VsphereHostLicenseAssignmentInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this VsphereHostLicenseAssignmentInstance.

        License expiration date.  # noqa: E501

        :param expiration_date: The expiration_date of this VsphereHostLicenseAssignmentInstance.  # noqa: E501
        :type: datetime
        """

        self._expiration_date = expiration_date

    @property
    def vsphere_host(self):
        """Gets the vsphere_host of this VsphereHostLicenseAssignmentInstance.  # noqa: E501

        This is the embeddable reference form of vsphere_host_id attribute.  # noqa: E501

        :return: The vsphere_host of this VsphereHostLicenseAssignmentInstance.  # noqa: E501
        :rtype: VsphereHostInstance
        """
        return self._vsphere_host

    @vsphere_host.setter
    def vsphere_host(self, vsphere_host):
        """Sets the vsphere_host of this VsphereHostLicenseAssignmentInstance.

        This is the embeddable reference form of vsphere_host_id attribute.  # noqa: E501

        :param vsphere_host: The vsphere_host of this VsphereHostLicenseAssignmentInstance.  # noqa: E501
        :type: VsphereHostInstance
        """

        self._vsphere_host = vsphere_host

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VsphereHostLicenseAssignmentInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VsphereHostLicenseAssignmentInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VsphereHostLicenseAssignmentInstance):
            return True

        return self.to_dict() != other.to_dict()
