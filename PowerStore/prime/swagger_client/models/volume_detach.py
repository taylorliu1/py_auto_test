# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class VolumeDetach(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'host_id': 'str',
        'host_group_id': 'str',
        'clear_host_agent_data': 'bool'
    }

    attribute_map = {
        'host_id': 'host_id',
        'host_group_id': 'host_group_id',
        'clear_host_agent_data': 'clear_host_agent_data'
    }

    def __init__(self, host_id=None, host_group_id=None, clear_host_agent_data=False, _configuration=None):  # noqa: E501
        """VolumeDetach - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._host_id = None
        self._host_group_id = None
        self._clear_host_agent_data = None
        self.discriminator = None

        if host_id is not None:
            self.host_id = host_id
        if host_group_id is not None:
            self.host_group_id = host_group_id
        if clear_host_agent_data is not None:
            self.clear_host_agent_data = clear_host_agent_data

    @property
    def host_id(self):
        """Gets the host_id of this VolumeDetach.  # noqa: E501

        Unique identifier of the host to be detached from this volume. Only one of host_id or host_group_id can be supplied. name:{name} can be used instead of {id}. For example:'host_id':'name:host_name'  # noqa: E501

        :return: The host_id of this VolumeDetach.  # noqa: E501
        :rtype: str
        """
        return self._host_id

    @host_id.setter
    def host_id(self, host_id):
        """Sets the host_id of this VolumeDetach.

        Unique identifier of the host to be detached from this volume. Only one of host_id or host_group_id can be supplied. name:{name} can be used instead of {id}. For example:'host_id':'name:host_name'  # noqa: E501

        :param host_id: The host_id of this VolumeDetach.  # noqa: E501
        :type: str
        """

        self._host_id = host_id

    @property
    def host_group_id(self):
        """Gets the host_group_id of this VolumeDetach.  # noqa: E501

        Unique identifier of the host group to be detached from this volume. Only one of host_id or host_group_id can be supplied. name:{name} can be used instead of {id}. For example:'host_group_id':'name:host_group_name'  # noqa: E501

        :return: The host_group_id of this VolumeDetach.  # noqa: E501
        :rtype: str
        """
        return self._host_group_id

    @host_group_id.setter
    def host_group_id(self, host_group_id):
        """Sets the host_group_id of this VolumeDetach.

        Unique identifier of the host group to be detached from this volume. Only one of host_id or host_group_id can be supplied. name:{name} can be used instead of {id}. For example:'host_group_id':'name:host_group_name'  # noqa: E501

        :param host_group_id: The host_group_id of this VolumeDetach.  # noqa: E501
        :type: str
        """

        self._host_group_id = host_group_id

    @property
    def clear_host_agent_data(self):
        """Gets the clear_host_agent_data of this VolumeDetach.  # noqa: E501

        Indicates if any saved host agent metadata should be cleared if this is the final detach of a volume being imported from another storage array, i.e. no other hosts or host groups are attached to the volume. Was added in version 3.0.0.0.  # noqa: E501

        :return: The clear_host_agent_data of this VolumeDetach.  # noqa: E501
        :rtype: bool
        """
        return self._clear_host_agent_data

    @clear_host_agent_data.setter
    def clear_host_agent_data(self, clear_host_agent_data):
        """Sets the clear_host_agent_data of this VolumeDetach.

        Indicates if any saved host agent metadata should be cleared if this is the final detach of a volume being imported from another storage array, i.e. no other hosts or host groups are attached to the volume. Was added in version 3.0.0.0.  # noqa: E501

        :param clear_host_agent_data: The clear_host_agent_data of this VolumeDetach.  # noqa: E501
        :type: bool
        """

        self._clear_host_agent_data = clear_host_agent_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VolumeDetach, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VolumeDetach):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VolumeDetach):
            return True

        return self.to_dict() != other.to_dict()
