# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class SmbServerCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nas_server_id': 'str',
        'is_standalone': 'bool',
        'computer_name': 'str',
        'domain': 'str',
        'netbios_name': 'str',
        'workgroup': 'str',
        'description': 'str',
        'local_admin_password': 'str'
    }

    attribute_map = {
        'nas_server_id': 'nas_server_id',
        'is_standalone': 'is_standalone',
        'computer_name': 'computer_name',
        'domain': 'domain',
        'netbios_name': 'netbios_name',
        'workgroup': 'workgroup',
        'description': 'description',
        'local_admin_password': 'local_admin_password'
    }

    def __init__(self, nas_server_id=None, is_standalone=None, computer_name=None, domain=None, netbios_name=None, workgroup=None, description=None, local_admin_password=None, _configuration=None):  # noqa: E501
        """SmbServerCreate - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._nas_server_id = None
        self._is_standalone = None
        self._computer_name = None
        self._domain = None
        self._netbios_name = None
        self._workgroup = None
        self._description = None
        self._local_admin_password = None
        self.discriminator = None

        self.nas_server_id = nas_server_id
        self.is_standalone = is_standalone
        if computer_name is not None:
            self.computer_name = computer_name
        if domain is not None:
            self.domain = domain
        if netbios_name is not None:
            self.netbios_name = netbios_name
        if workgroup is not None:
            self.workgroup = workgroup
        if description is not None:
            self.description = description
        self.local_admin_password = local_admin_password

    @property
    def nas_server_id(self):
        """Gets the nas_server_id of this SmbServerCreate.  # noqa: E501

        Unique identifier of the NAS server. name:{name} can be used instead of {id}. For example:'nas_server_id':'name:nas_server_name'  # noqa: E501

        :return: The nas_server_id of this SmbServerCreate.  # noqa: E501
        :rtype: str
        """
        return self._nas_server_id

    @nas_server_id.setter
    def nas_server_id(self, nas_server_id):
        """Sets the nas_server_id of this SmbServerCreate.

        Unique identifier of the NAS server. name:{name} can be used instead of {id}. For example:'nas_server_id':'name:nas_server_name'  # noqa: E501

        :param nas_server_id: The nas_server_id of this SmbServerCreate.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and nas_server_id is None:
            raise ValueError("Invalid value for `nas_server_id`, must not be `None`")  # noqa: E501

        self._nas_server_id = nas_server_id

    @property
    def is_standalone(self):
        """Gets the is_standalone of this SmbServerCreate.  # noqa: E501

        Indicates whether the SMB server is standalone. Values are: - true - SMB server is standalone. - false - SMB server is joined to the Active Directory.   # noqa: E501

        :return: The is_standalone of this SmbServerCreate.  # noqa: E501
        :rtype: bool
        """
        return self._is_standalone

    @is_standalone.setter
    def is_standalone(self, is_standalone):
        """Sets the is_standalone of this SmbServerCreate.

        Indicates whether the SMB server is standalone. Values are: - true - SMB server is standalone. - false - SMB server is joined to the Active Directory.   # noqa: E501

        :param is_standalone: The is_standalone of this SmbServerCreate.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and is_standalone is None:
            raise ValueError("Invalid value for `is_standalone`, must not be `None`")  # noqa: E501

        self._is_standalone = is_standalone

    @property
    def computer_name(self):
        """Gets the computer_name of this SmbServerCreate.  # noqa: E501

        DNS name of the associated computer account when the SMB server is joined to an Active Directory domain. This name is limited to 63 bytes and must not contain the following characters -   - comma (.)   - tilde (~)   - colon (:)   - exclamation point (!)   - at sign (@)   - number sign (#)   - dollar sign ($)   - percent (%)   - caret (^)   - ampersand (&)   - apostrophe (')   - period (.) - note that if you enter string with period only the first word will be kept   - parentheses (())   - braces ({})   - underscore (_)   - white space (blank) as defined by the Microsoft naming convention (see https://support.microsoft.com/en-us/help/909264/)   # noqa: E501

        :return: The computer_name of this SmbServerCreate.  # noqa: E501
        :rtype: str
        """
        return self._computer_name

    @computer_name.setter
    def computer_name(self, computer_name):
        """Sets the computer_name of this SmbServerCreate.

        DNS name of the associated computer account when the SMB server is joined to an Active Directory domain. This name is limited to 63 bytes and must not contain the following characters -   - comma (.)   - tilde (~)   - colon (:)   - exclamation point (!)   - at sign (@)   - number sign (#)   - dollar sign ($)   - percent (%)   - caret (^)   - ampersand (&)   - apostrophe (')   - period (.) - note that if you enter string with period only the first word will be kept   - parentheses (())   - braces ({})   - underscore (_)   - white space (blank) as defined by the Microsoft naming convention (see https://support.microsoft.com/en-us/help/909264/)   # noqa: E501

        :param computer_name: The computer_name of this SmbServerCreate.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                computer_name is not None and len(computer_name) > 63):
            raise ValueError("Invalid value for `computer_name`, length must be less than or equal to `63`")  # noqa: E501
        if (self._configuration.client_side_validation and
                computer_name is not None and len(computer_name) < 1):
            raise ValueError("Invalid value for `computer_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._computer_name = computer_name

    @property
    def domain(self):
        """Gets the domain of this SmbServerCreate.  # noqa: E501

        Domain name where SMB server is registered in Active Directory, if applicable.  # noqa: E501

        :return: The domain of this SmbServerCreate.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this SmbServerCreate.

        Domain name where SMB server is registered in Active Directory, if applicable.  # noqa: E501

        :param domain: The domain of this SmbServerCreate.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                domain is not None and len(domain) > 255):
            raise ValueError("Invalid value for `domain`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                domain is not None and len(domain) < 1):
            raise ValueError("Invalid value for `domain`, length must be greater than or equal to `1`")  # noqa: E501

        self._domain = domain

    @property
    def netbios_name(self):
        """Gets the netbios_name of this SmbServerCreate.  # noqa: E501

        NetBIOS name is the network name of the standalone SMB server. SMB servers joined to Active Directory also have NetBIOS Name, defaulted to the 15 first characters of the computer_name attribute. Administrators can specify a custom NetBIOS Name for a SMB server using this attribute. NetBIOS name is limited to 15 characters and cannot contain the following characters -   - backslash (\\)   - slash mark (/)   - colon (:)   - asterisk (*)   - question mark (?)   - quotation mark (\"\")   - less than sign (<)   - greater than sign (>)   - vertical bar (|) as defined by the Microsoft naming convention (see https://support.microsoft.com/en-us/help/909264/)   # noqa: E501

        :return: The netbios_name of this SmbServerCreate.  # noqa: E501
        :rtype: str
        """
        return self._netbios_name

    @netbios_name.setter
    def netbios_name(self, netbios_name):
        """Sets the netbios_name of this SmbServerCreate.

        NetBIOS name is the network name of the standalone SMB server. SMB servers joined to Active Directory also have NetBIOS Name, defaulted to the 15 first characters of the computer_name attribute. Administrators can specify a custom NetBIOS Name for a SMB server using this attribute. NetBIOS name is limited to 15 characters and cannot contain the following characters -   - backslash (\\)   - slash mark (/)   - colon (:)   - asterisk (*)   - question mark (?)   - quotation mark (\"\")   - less than sign (<)   - greater than sign (>)   - vertical bar (|) as defined by the Microsoft naming convention (see https://support.microsoft.com/en-us/help/909264/)   # noqa: E501

        :param netbios_name: The netbios_name of this SmbServerCreate.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                netbios_name is not None and len(netbios_name) > 15):
            raise ValueError("Invalid value for `netbios_name`, length must be less than or equal to `15`")  # noqa: E501
        if (self._configuration.client_side_validation and
                netbios_name is not None and len(netbios_name) < 1):
            raise ValueError("Invalid value for `netbios_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._netbios_name = netbios_name

    @property
    def workgroup(self):
        """Gets the workgroup of this SmbServerCreate.  # noqa: E501

        Applies to standalone SMB servers only. Windows network workgroup for the SMB server. Workgroup names are limited to 15 alphanumeric ASCII characters.   # noqa: E501

        :return: The workgroup of this SmbServerCreate.  # noqa: E501
        :rtype: str
        """
        return self._workgroup

    @workgroup.setter
    def workgroup(self, workgroup):
        """Sets the workgroup of this SmbServerCreate.

        Applies to standalone SMB servers only. Windows network workgroup for the SMB server. Workgroup names are limited to 15 alphanumeric ASCII characters.   # noqa: E501

        :param workgroup: The workgroup of this SmbServerCreate.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                workgroup is not None and len(workgroup) > 15):
            raise ValueError("Invalid value for `workgroup`, length must be less than or equal to `15`")  # noqa: E501
        if (self._configuration.client_side_validation and
                workgroup is not None and len(workgroup) < 1):
            raise ValueError("Invalid value for `workgroup`, length must be greater than or equal to `1`")  # noqa: E501

        self._workgroup = workgroup

    @property
    def description(self):
        """Gets the description of this SmbServerCreate.  # noqa: E501

        Description of the SMB server in UTF-8 characters.  # noqa: E501

        :return: The description of this SmbServerCreate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SmbServerCreate.

        Description of the SMB server in UTF-8 characters.  # noqa: E501

        :param description: The description of this SmbServerCreate.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                description is not None and len(description) > 48):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `48`")  # noqa: E501
        if (self._configuration.client_side_validation and
                description is not None and len(description) < 0):
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")  # noqa: E501

        self._description = description

    @property
    def local_admin_password(self):
        """Gets the local_admin_password of this SmbServerCreate.  # noqa: E501

        Regardless of the type of the SMB server, standalone or in the domain, a local administrator user must be created. local_admin_password is the password of this user. ***Note The maximum length of a password that a human user could actually type to log into Windows is 127 characters (the limitation is in the Windows GUI).***   # noqa: E501

        :return: The local_admin_password of this SmbServerCreate.  # noqa: E501
        :rtype: str
        """
        return self._local_admin_password

    @local_admin_password.setter
    def local_admin_password(self, local_admin_password):
        """Sets the local_admin_password of this SmbServerCreate.

        Regardless of the type of the SMB server, standalone or in the domain, a local administrator user must be created. local_admin_password is the password of this user. ***Note The maximum length of a password that a human user could actually type to log into Windows is 127 characters (the limitation is in the Windows GUI).***   # noqa: E501

        :param local_admin_password: The local_admin_password of this SmbServerCreate.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and local_admin_password is None:
            raise ValueError("Invalid value for `local_admin_password`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                local_admin_password is not None and len(local_admin_password) > 256):
            raise ValueError("Invalid value for `local_admin_password`, length must be less than or equal to `256`")  # noqa: E501
        if (self._configuration.client_side_validation and
                local_admin_password is not None and len(local_admin_password) < 0):
            raise ValueError("Invalid value for `local_admin_password`, length must be greater than or equal to `0`")  # noqa: E501

        self._local_admin_password = local_admin_password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SmbServerCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SmbServerCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SmbServerCreate):
            return True

        return self.to_dict() != other.to_dict()
