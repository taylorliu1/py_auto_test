# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class VolumeEndMetro(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'delete_remote_volume': 'bool',
        'force': 'bool'
    }

    attribute_map = {
        'delete_remote_volume': 'delete_remote_volume',
        'force': 'force'
    }

    def __init__(self, delete_remote_volume=False, force=False, _configuration=None):  # noqa: E501
        """VolumeEndMetro - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._delete_remote_volume = None
        self._force = None
        self.discriminator = None

        if delete_remote_volume is not None:
            self.delete_remote_volume = delete_remote_volume
        if force is not None:
            self.force = force

    @property
    def delete_remote_volume(self):
        """Gets the delete_remote_volume of this VolumeEndMetro.  # noqa: E501

        Whether or not to delete the remote volume during the removal.  # noqa: E501

        :return: The delete_remote_volume of this VolumeEndMetro.  # noqa: E501
        :rtype: bool
        """
        return self._delete_remote_volume

    @delete_remote_volume.setter
    def delete_remote_volume(self, delete_remote_volume):
        """Sets the delete_remote_volume of this VolumeEndMetro.

        Whether or not to delete the remote volume during the removal.  # noqa: E501

        :param delete_remote_volume: The delete_remote_volume of this VolumeEndMetro.  # noqa: E501
        :type: bool
        """

        self._delete_remote_volume = delete_remote_volume

    @property
    def force(self):
        """Gets the force of this VolumeEndMetro.  # noqa: E501

        If the force option is specified, any errors returned while attempting to tear down the remote side of the metro session will be ignored and the remote side may be left in an indeterminate state. If any errors occur on the local side the operation can still fail. It is not recommended to use this option unless the remote side is known to be down.  # noqa: E501

        :return: The force of this VolumeEndMetro.  # noqa: E501
        :rtype: bool
        """
        return self._force

    @force.setter
    def force(self, force):
        """Sets the force of this VolumeEndMetro.

        If the force option is specified, any errors returned while attempting to tear down the remote side of the metro session will be ignored and the remote side may be left in an indeterminate state. If any errors occur on the local side the operation can still fail. It is not recommended to use this option unless the remote side is known to be down.  # noqa: E501

        :param force: The force of this VolumeEndMetro.  # noqa: E501
        :type: bool
        """

        self._force = force

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VolumeEndMetro, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VolumeEndMetro):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VolumeEndMetro):
            return True

        return self.to_dict() != other.to_dict()
