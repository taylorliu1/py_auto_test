# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class LocalUserModify(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'role_id': 'str',
        'is_locked': 'bool',
        'current_password': 'str',
        'password': 'str'
    }

    attribute_map = {
        'role_id': 'role_id',
        'is_locked': 'is_locked',
        'current_password': 'current_password',
        'password': 'password'
    }

    def __init__(self, role_id=None, is_locked=None, current_password=None, password=None, _configuration=None):  # noqa: E501
        """LocalUserModify - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._role_id = None
        self._is_locked = None
        self._current_password = None
        self._password = None
        self.discriminator = None

        if role_id is not None:
            self.role_id = role_id
        if is_locked is not None:
            self.is_locked = is_locked
        if current_password is not None:
            self.current_password = current_password
        if password is not None:
            self.password = password

    @property
    def role_id(self):
        """Gets the role_id of this LocalUserModify.  # noqa: E501

        The unique identifier of the new role to which the local user has to be mapped. Where role_id \"1\" is for Administrator, \"2\" is for Storage Administrator, \"3\" is for Operator, \"4\" is for VM Administrator and \"5\" is for Security Administrator. A local user with either an administration or a security administration role can change the role of any other local user. You cannot change the role of the account you are currently logged-in to. name:{name} can be used instead of {id}. For example:'role_id':'name:role_name'  # noqa: E501

        :return: The role_id of this LocalUserModify.  # noqa: E501
        :rtype: str
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """Sets the role_id of this LocalUserModify.

        The unique identifier of the new role to which the local user has to be mapped. Where role_id \"1\" is for Administrator, \"2\" is for Storage Administrator, \"3\" is for Operator, \"4\" is for VM Administrator and \"5\" is for Security Administrator. A local user with either an administration or a security administration role can change the role of any other local user. You cannot change the role of the account you are currently logged-in to. name:{name} can be used instead of {id}. For example:'role_id':'name:role_name'  # noqa: E501

        :param role_id: The role_id of this LocalUserModify.  # noqa: E501
        :type: str
        """

        self._role_id = role_id

    @property
    def is_locked(self):
        """Gets the is_locked of this LocalUserModify.  # noqa: E501

        Lock or unlock the local user account. Local user with administration/security administration role can lock or unlock any other local user account. You cannot lock an account you are currently logged-in to.  # noqa: E501

        :return: The is_locked of this LocalUserModify.  # noqa: E501
        :rtype: bool
        """
        return self._is_locked

    @is_locked.setter
    def is_locked(self, is_locked):
        """Sets the is_locked of this LocalUserModify.

        Lock or unlock the local user account. Local user with administration/security administration role can lock or unlock any other local user account. You cannot lock an account you are currently logged-in to.  # noqa: E501

        :param is_locked: The is_locked of this LocalUserModify.  # noqa: E501
        :type: bool
        """

        self._is_locked = is_locked

    @property
    def current_password(self):
        """Gets the current_password of this LocalUserModify.  # noqa: E501

        Current password of the local user. Any local user can change his own password by providing current_password along with the new password.  # noqa: E501

        :return: The current_password of this LocalUserModify.  # noqa: E501
        :rtype: str
        """
        return self._current_password

    @current_password.setter
    def current_password(self, current_password):
        """Sets the current_password of this LocalUserModify.

        Current password of the local user. Any local user can change his own password by providing current_password along with the new password.  # noqa: E501

        :param current_password: The current_password of this LocalUserModify.  # noqa: E501
        :type: str
        """

        self._current_password = current_password

    @property
    def password(self):
        """Gets the password of this LocalUserModify.  # noqa: E501

        New password of the local user. Local user with administrator or security administrator role can reset the password of other local user accounts without providing the current password. You cannot reset the password of the account you are currently logged-in to.  # noqa: E501

        :return: The password of this LocalUserModify.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this LocalUserModify.

        New password of the local user. Local user with administrator or security administrator role can reset the password of other local user accounts without providing the current password. You cannot reset the password of the account you are currently logged-in to.  # noqa: E501

        :param password: The password of this LocalUserModify.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                password is not None and len(password) > 40):
            raise ValueError("Invalid value for `password`, length must be less than or equal to `40`")  # noqa: E501
        if (self._configuration.client_side_validation and
                password is not None and len(password) < 8):
            raise ValueError("Invalid value for `password`, length must be greater than or equal to `8`")  # noqa: E501

        self._password = password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LocalUserModify, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LocalUserModify):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LocalUserModify):
            return True

        return self.to_dict() != other.to_dict()
