# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class PerformanceMetricsNfsv4ByNodeRollup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'node_id': 'str',
        'appliance_id': 'str',
        'timestamp': 'datetime',
        'repeat_count': 'int',
        'avg_md_ops': 'float',
        'max_failed_md_ops': 'float',
        'avg_failed_md_ops': 'float',
        'avg_md_latency': 'float',
        'max_avg_md_latency': 'float',
        'max_read_iops': 'float',
        'avg_read_iops': 'float',
        'max_write_iops': 'float',
        'avg_write_iops': 'float',
        'max_total_iops': 'float',
        'avg_total_iops': 'float'
    }

    attribute_map = {
        'node_id': 'node_id',
        'appliance_id': 'appliance_id',
        'timestamp': 'timestamp',
        'repeat_count': 'repeat_count',
        'avg_md_ops': 'avg_md_ops',
        'max_failed_md_ops': 'max_failed_md_ops',
        'avg_failed_md_ops': 'avg_failed_md_ops',
        'avg_md_latency': 'avg_md_latency',
        'max_avg_md_latency': 'max_avg_md_latency',
        'max_read_iops': 'max_read_iops',
        'avg_read_iops': 'avg_read_iops',
        'max_write_iops': 'max_write_iops',
        'avg_write_iops': 'avg_write_iops',
        'max_total_iops': 'max_total_iops',
        'avg_total_iops': 'avg_total_iops'
    }

    def __init__(self, node_id=None, appliance_id=None, timestamp=None, repeat_count=None, avg_md_ops=None, max_failed_md_ops=None, avg_failed_md_ops=None, avg_md_latency=None, max_avg_md_latency=None, max_read_iops=None, avg_read_iops=None, max_write_iops=None, avg_write_iops=None, max_total_iops=None, avg_total_iops=None, _configuration=None):  # noqa: E501
        """PerformanceMetricsNfsv4ByNodeRollup - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._node_id = None
        self._appliance_id = None
        self._timestamp = None
        self._repeat_count = None
        self._avg_md_ops = None
        self._max_failed_md_ops = None
        self._avg_failed_md_ops = None
        self._avg_md_latency = None
        self._max_avg_md_latency = None
        self._max_read_iops = None
        self._avg_read_iops = None
        self._max_write_iops = None
        self._avg_write_iops = None
        self._max_total_iops = None
        self._avg_total_iops = None
        self.discriminator = None

        if node_id is not None:
            self.node_id = node_id
        if appliance_id is not None:
            self.appliance_id = appliance_id
        if timestamp is not None:
            self.timestamp = timestamp
        if repeat_count is not None:
            self.repeat_count = repeat_count
        if avg_md_ops is not None:
            self.avg_md_ops = avg_md_ops
        if max_failed_md_ops is not None:
            self.max_failed_md_ops = max_failed_md_ops
        if avg_failed_md_ops is not None:
            self.avg_failed_md_ops = avg_failed_md_ops
        if avg_md_latency is not None:
            self.avg_md_latency = avg_md_latency
        if max_avg_md_latency is not None:
            self.max_avg_md_latency = max_avg_md_latency
        if max_read_iops is not None:
            self.max_read_iops = max_read_iops
        if avg_read_iops is not None:
            self.avg_read_iops = avg_read_iops
        if max_write_iops is not None:
            self.max_write_iops = max_write_iops
        if avg_write_iops is not None:
            self.avg_write_iops = avg_write_iops
        if max_total_iops is not None:
            self.max_total_iops = max_total_iops
        if avg_total_iops is not None:
            self.avg_total_iops = avg_total_iops

    @property
    def node_id(self):
        """Gets the node_id of this PerformanceMetricsNfsv4ByNodeRollup.  # noqa: E501

        Unique identifier of the node.  # noqa: E501

        :return: The node_id of this PerformanceMetricsNfsv4ByNodeRollup.  # noqa: E501
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this PerformanceMetricsNfsv4ByNodeRollup.

        Unique identifier of the node.  # noqa: E501

        :param node_id: The node_id of this PerformanceMetricsNfsv4ByNodeRollup.  # noqa: E501
        :type: str
        """

        self._node_id = node_id

    @property
    def appliance_id(self):
        """Gets the appliance_id of this PerformanceMetricsNfsv4ByNodeRollup.  # noqa: E501

        Unique identifier of the appliance. Was added in version 3.0.0.0.  # noqa: E501

        :return: The appliance_id of this PerformanceMetricsNfsv4ByNodeRollup.  # noqa: E501
        :rtype: str
        """
        return self._appliance_id

    @appliance_id.setter
    def appliance_id(self, appliance_id):
        """Sets the appliance_id of this PerformanceMetricsNfsv4ByNodeRollup.

        Unique identifier of the appliance. Was added in version 3.0.0.0.  # noqa: E501

        :param appliance_id: The appliance_id of this PerformanceMetricsNfsv4ByNodeRollup.  # noqa: E501
        :type: str
        """

        self._appliance_id = appliance_id

    @property
    def timestamp(self):
        """Gets the timestamp of this PerformanceMetricsNfsv4ByNodeRollup.  # noqa: E501

        Time at the beginning of sample period.  # noqa: E501

        :return: The timestamp of this PerformanceMetricsNfsv4ByNodeRollup.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this PerformanceMetricsNfsv4ByNodeRollup.

        Time at the beginning of sample period.  # noqa: E501

        :param timestamp: The timestamp of this PerformanceMetricsNfsv4ByNodeRollup.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def repeat_count(self):
        """Gets the repeat_count of this PerformanceMetricsNfsv4ByNodeRollup.  # noqa: E501

        Number of consecutive sampling periods during which there were no changes in the metrics values. If the value is omitted from the response, it is 1 (no additional repeats).   # noqa: E501

        :return: The repeat_count of this PerformanceMetricsNfsv4ByNodeRollup.  # noqa: E501
        :rtype: int
        """
        return self._repeat_count

    @repeat_count.setter
    def repeat_count(self, repeat_count):
        """Sets the repeat_count of this PerformanceMetricsNfsv4ByNodeRollup.

        Number of consecutive sampling periods during which there were no changes in the metrics values. If the value is omitted from the response, it is 1 (no additional repeats).   # noqa: E501

        :param repeat_count: The repeat_count of this PerformanceMetricsNfsv4ByNodeRollup.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                repeat_count is not None and repeat_count > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `repeat_count`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                repeat_count is not None and repeat_count < 0):  # noqa: E501
            raise ValueError("Invalid value for `repeat_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._repeat_count = repeat_count

    @property
    def avg_md_ops(self):
        """Gets the avg_md_ops of this PerformanceMetricsNfsv4ByNodeRollup.  # noqa: E501

        Average md operations per second.  # noqa: E501

        :return: The avg_md_ops of this PerformanceMetricsNfsv4ByNodeRollup.  # noqa: E501
        :rtype: float
        """
        return self._avg_md_ops

    @avg_md_ops.setter
    def avg_md_ops(self, avg_md_ops):
        """Sets the avg_md_ops of this PerformanceMetricsNfsv4ByNodeRollup.

        Average md operations per second.  # noqa: E501

        :param avg_md_ops: The avg_md_ops of this PerformanceMetricsNfsv4ByNodeRollup.  # noqa: E501
        :type: float
        """

        self._avg_md_ops = avg_md_ops

    @property
    def max_failed_md_ops(self):
        """Gets the max_failed_md_ops of this PerformanceMetricsNfsv4ByNodeRollup.  # noqa: E501

        Max failed operations per second.  # noqa: E501

        :return: The max_failed_md_ops of this PerformanceMetricsNfsv4ByNodeRollup.  # noqa: E501
        :rtype: float
        """
        return self._max_failed_md_ops

    @max_failed_md_ops.setter
    def max_failed_md_ops(self, max_failed_md_ops):
        """Sets the max_failed_md_ops of this PerformanceMetricsNfsv4ByNodeRollup.

        Max failed operations per second.  # noqa: E501

        :param max_failed_md_ops: The max_failed_md_ops of this PerformanceMetricsNfsv4ByNodeRollup.  # noqa: E501
        :type: float
        """

        self._max_failed_md_ops = max_failed_md_ops

    @property
    def avg_failed_md_ops(self):
        """Gets the avg_failed_md_ops of this PerformanceMetricsNfsv4ByNodeRollup.  # noqa: E501

        Average failed operations per second.  # noqa: E501

        :return: The avg_failed_md_ops of this PerformanceMetricsNfsv4ByNodeRollup.  # noqa: E501
        :rtype: float
        """
        return self._avg_failed_md_ops

    @avg_failed_md_ops.setter
    def avg_failed_md_ops(self, avg_failed_md_ops):
        """Sets the avg_failed_md_ops of this PerformanceMetricsNfsv4ByNodeRollup.

        Average failed operations per second.  # noqa: E501

        :param avg_failed_md_ops: The avg_failed_md_ops of this PerformanceMetricsNfsv4ByNodeRollup.  # noqa: E501
        :type: float
        """

        self._avg_failed_md_ops = avg_failed_md_ops

    @property
    def avg_md_latency(self):
        """Gets the avg_md_latency of this PerformanceMetricsNfsv4ByNodeRollup.  # noqa: E501

        Average md latency per second.  # noqa: E501

        :return: The avg_md_latency of this PerformanceMetricsNfsv4ByNodeRollup.  # noqa: E501
        :rtype: float
        """
        return self._avg_md_latency

    @avg_md_latency.setter
    def avg_md_latency(self, avg_md_latency):
        """Sets the avg_md_latency of this PerformanceMetricsNfsv4ByNodeRollup.

        Average md latency per second.  # noqa: E501

        :param avg_md_latency: The avg_md_latency of this PerformanceMetricsNfsv4ByNodeRollup.  # noqa: E501
        :type: float
        """

        self._avg_md_latency = avg_md_latency

    @property
    def max_avg_md_latency(self):
        """Gets the max_avg_md_latency of this PerformanceMetricsNfsv4ByNodeRollup.  # noqa: E501

        Maximum average md latency per second.  # noqa: E501

        :return: The max_avg_md_latency of this PerformanceMetricsNfsv4ByNodeRollup.  # noqa: E501
        :rtype: float
        """
        return self._max_avg_md_latency

    @max_avg_md_latency.setter
    def max_avg_md_latency(self, max_avg_md_latency):
        """Sets the max_avg_md_latency of this PerformanceMetricsNfsv4ByNodeRollup.

        Maximum average md latency per second.  # noqa: E501

        :param max_avg_md_latency: The max_avg_md_latency of this PerformanceMetricsNfsv4ByNodeRollup.  # noqa: E501
        :type: float
        """

        self._max_avg_md_latency = max_avg_md_latency

    @property
    def max_read_iops(self):
        """Gets the max_read_iops of this PerformanceMetricsNfsv4ByNodeRollup.  # noqa: E501

        Maximum read operations per second.  # noqa: E501

        :return: The max_read_iops of this PerformanceMetricsNfsv4ByNodeRollup.  # noqa: E501
        :rtype: float
        """
        return self._max_read_iops

    @max_read_iops.setter
    def max_read_iops(self, max_read_iops):
        """Sets the max_read_iops of this PerformanceMetricsNfsv4ByNodeRollup.

        Maximum read operations per second.  # noqa: E501

        :param max_read_iops: The max_read_iops of this PerformanceMetricsNfsv4ByNodeRollup.  # noqa: E501
        :type: float
        """

        self._max_read_iops = max_read_iops

    @property
    def avg_read_iops(self):
        """Gets the avg_read_iops of this PerformanceMetricsNfsv4ByNodeRollup.  # noqa: E501

        Average read operations per second.  # noqa: E501

        :return: The avg_read_iops of this PerformanceMetricsNfsv4ByNodeRollup.  # noqa: E501
        :rtype: float
        """
        return self._avg_read_iops

    @avg_read_iops.setter
    def avg_read_iops(self, avg_read_iops):
        """Sets the avg_read_iops of this PerformanceMetricsNfsv4ByNodeRollup.

        Average read operations per second.  # noqa: E501

        :param avg_read_iops: The avg_read_iops of this PerformanceMetricsNfsv4ByNodeRollup.  # noqa: E501
        :type: float
        """

        self._avg_read_iops = avg_read_iops

    @property
    def max_write_iops(self):
        """Gets the max_write_iops of this PerformanceMetricsNfsv4ByNodeRollup.  # noqa: E501

        Maximum write operations per second.  # noqa: E501

        :return: The max_write_iops of this PerformanceMetricsNfsv4ByNodeRollup.  # noqa: E501
        :rtype: float
        """
        return self._max_write_iops

    @max_write_iops.setter
    def max_write_iops(self, max_write_iops):
        """Sets the max_write_iops of this PerformanceMetricsNfsv4ByNodeRollup.

        Maximum write operations per second.  # noqa: E501

        :param max_write_iops: The max_write_iops of this PerformanceMetricsNfsv4ByNodeRollup.  # noqa: E501
        :type: float
        """

        self._max_write_iops = max_write_iops

    @property
    def avg_write_iops(self):
        """Gets the avg_write_iops of this PerformanceMetricsNfsv4ByNodeRollup.  # noqa: E501

        Average write operations per second.  # noqa: E501

        :return: The avg_write_iops of this PerformanceMetricsNfsv4ByNodeRollup.  # noqa: E501
        :rtype: float
        """
        return self._avg_write_iops

    @avg_write_iops.setter
    def avg_write_iops(self, avg_write_iops):
        """Sets the avg_write_iops of this PerformanceMetricsNfsv4ByNodeRollup.

        Average write operations per second.  # noqa: E501

        :param avg_write_iops: The avg_write_iops of this PerformanceMetricsNfsv4ByNodeRollup.  # noqa: E501
        :type: float
        """

        self._avg_write_iops = avg_write_iops

    @property
    def max_total_iops(self):
        """Gets the max_total_iops of this PerformanceMetricsNfsv4ByNodeRollup.  # noqa: E501

        Maximum read and write operations per second.  # noqa: E501

        :return: The max_total_iops of this PerformanceMetricsNfsv4ByNodeRollup.  # noqa: E501
        :rtype: float
        """
        return self._max_total_iops

    @max_total_iops.setter
    def max_total_iops(self, max_total_iops):
        """Sets the max_total_iops of this PerformanceMetricsNfsv4ByNodeRollup.

        Maximum read and write operations per second.  # noqa: E501

        :param max_total_iops: The max_total_iops of this PerformanceMetricsNfsv4ByNodeRollup.  # noqa: E501
        :type: float
        """

        self._max_total_iops = max_total_iops

    @property
    def avg_total_iops(self):
        """Gets the avg_total_iops of this PerformanceMetricsNfsv4ByNodeRollup.  # noqa: E501

        Average read and write operations per second.  # noqa: E501

        :return: The avg_total_iops of this PerformanceMetricsNfsv4ByNodeRollup.  # noqa: E501
        :rtype: float
        """
        return self._avg_total_iops

    @avg_total_iops.setter
    def avg_total_iops(self, avg_total_iops):
        """Sets the avg_total_iops of this PerformanceMetricsNfsv4ByNodeRollup.

        Average read and write operations per second.  # noqa: E501

        :param avg_total_iops: The avg_total_iops of this PerformanceMetricsNfsv4ByNodeRollup.  # noqa: E501
        :type: float
        """

        self._avg_total_iops = avg_total_iops

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PerformanceMetricsNfsv4ByNodeRollup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PerformanceMetricsNfsv4ByNodeRollup):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PerformanceMetricsNfsv4ByNodeRollup):
            return True

        return self.to_dict() != other.to_dict()
