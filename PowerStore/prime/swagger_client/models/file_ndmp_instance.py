# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class FileNdmpInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'nas_server_id': 'str',
        'user_name': 'str',
        'nas_server': 'NasServerInstance'
    }

    attribute_map = {
        'id': 'id',
        'nas_server_id': 'nas_server_id',
        'user_name': 'user_name',
        'nas_server': 'nas_server'
    }

    def __init__(self, id=None, nas_server_id=None, user_name=None, nas_server=None, _configuration=None):  # noqa: E501
        """FileNdmpInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._nas_server_id = None
        self._user_name = None
        self._nas_server = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if nas_server_id is not None:
            self.nas_server_id = nas_server_id
        if user_name is not None:
            self.user_name = user_name
        if nas_server is not None:
            self.nas_server = nas_server

    @property
    def id(self):
        """Gets the id of this FileNdmpInstance.  # noqa: E501

        Unique identifier of the NDMP service object.  # noqa: E501

        :return: The id of this FileNdmpInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FileNdmpInstance.

        Unique identifier of the NDMP service object.  # noqa: E501

        :param id: The id of this FileNdmpInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def nas_server_id(self):
        """Gets the nas_server_id of this FileNdmpInstance.  # noqa: E501

        Unique identifier of the NAS server to be configured with these NDMP settings.  # noqa: E501

        :return: The nas_server_id of this FileNdmpInstance.  # noqa: E501
        :rtype: str
        """
        return self._nas_server_id

    @nas_server_id.setter
    def nas_server_id(self, nas_server_id):
        """Sets the nas_server_id of this FileNdmpInstance.

        Unique identifier of the NAS server to be configured with these NDMP settings.  # noqa: E501

        :param nas_server_id: The nas_server_id of this FileNdmpInstance.  # noqa: E501
        :type: str
        """

        self._nas_server_id = nas_server_id

    @property
    def user_name(self):
        """Gets the user_name of this FileNdmpInstance.  # noqa: E501

        User name for accessing the NDMP service.  # noqa: E501

        :return: The user_name of this FileNdmpInstance.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this FileNdmpInstance.

        User name for accessing the NDMP service.  # noqa: E501

        :param user_name: The user_name of this FileNdmpInstance.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def nas_server(self):
        """Gets the nas_server of this FileNdmpInstance.  # noqa: E501

        This is the embeddable reference form of nas_server_id attribute.  # noqa: E501

        :return: The nas_server of this FileNdmpInstance.  # noqa: E501
        :rtype: NasServerInstance
        """
        return self._nas_server

    @nas_server.setter
    def nas_server(self, nas_server):
        """Sets the nas_server of this FileNdmpInstance.

        This is the embeddable reference form of nas_server_id attribute.  # noqa: E501

        :param nas_server: The nas_server of this FileNdmpInstance.  # noqa: E501
        :type: NasServerInstance
        """

        self._nas_server = nas_server

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileNdmpInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileNdmpInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FileNdmpInstance):
            return True

        return self.to_dict() != other.to_dict()
