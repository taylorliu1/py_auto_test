# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class X509CertificateModify(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'certificate': 'str',
        'is_current': 'bool'
    }

    attribute_map = {
        'certificate': 'certificate',
        'is_current': 'is_current'
    }

    def __init__(self, certificate=None, is_current=None, _configuration=None):  # noqa: E501
        """X509CertificateModify - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._certificate = None
        self._is_current = None
        self.discriminator = None

        if certificate is not None:
            self.certificate = certificate
        self.is_current = is_current

    @property
    def certificate(self):
        """Gets the certificate of this X509CertificateModify.  # noqa: E501

        Concatenated PEM encoded x509_certificate string from end-entity certificate to root certificate.  # noqa: E501

        :return: The certificate of this X509CertificateModify.  # noqa: E501
        :rtype: str
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this X509CertificateModify.

        Concatenated PEM encoded x509_certificate string from end-entity certificate to root certificate.  # noqa: E501

        :param certificate: The certificate of this X509CertificateModify.  # noqa: E501
        :type: str
        """

        self._certificate = certificate

    @property
    def is_current(self):
        """Gets the is_current of this X509CertificateModify.  # noqa: E501

        Indicate whether this is the current key set being used or next key set to be used in the future. When importing third party CA signed certificate for securing the management traffic, this value must be true.  # noqa: E501

        :return: The is_current of this X509CertificateModify.  # noqa: E501
        :rtype: bool
        """
        return self._is_current

    @is_current.setter
    def is_current(self, is_current):
        """Sets the is_current of this X509CertificateModify.

        Indicate whether this is the current key set being used or next key set to be used in the future. When importing third party CA signed certificate for securing the management traffic, this value must be true.  # noqa: E501

        :param is_current: The is_current of this X509CertificateModify.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and is_current is None:
            raise ValueError("Invalid value for `is_current`, must not be `None`")  # noqa: E501

        self._is_current = is_current

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(X509CertificateModify, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, X509CertificateModify):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, X509CertificateModify):
            return True

        return self.to_dict() != other.to_dict()
