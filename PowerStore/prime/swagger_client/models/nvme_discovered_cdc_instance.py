# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class NvmeDiscoveredCdcInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'ip_pool_address_id': 'str',
        'nvme_cdc_address': 'str',
        'nvme_cdc_port': 'int',
        'nvme_cdc_nqn': 'str',
        'nvme_cdc_connection_state': 'NvmeCdcConnectionStateEnum',
        'nvme_cdc_connection_state_l10n': 'str',
        'ip_pool_address': 'IpPoolAddressInstance'
    }

    attribute_map = {
        'id': 'id',
        'ip_pool_address_id': 'ip_pool_address_id',
        'nvme_cdc_address': 'nvme_cdc_address',
        'nvme_cdc_port': 'nvme_cdc_port',
        'nvme_cdc_nqn': 'nvme_cdc_nqn',
        'nvme_cdc_connection_state': 'nvme_cdc_connection_state',
        'nvme_cdc_connection_state_l10n': 'nvme_cdc_connection_state_l10n',
        'ip_pool_address': 'ip_pool_address'
    }

    def __init__(self, id=None, ip_pool_address_id=None, nvme_cdc_address=None, nvme_cdc_port=None, nvme_cdc_nqn=None, nvme_cdc_connection_state=None, nvme_cdc_connection_state_l10n=None, ip_pool_address=None, _configuration=None):  # noqa: E501
        """NvmeDiscoveredCdcInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._ip_pool_address_id = None
        self._nvme_cdc_address = None
        self._nvme_cdc_port = None
        self._nvme_cdc_nqn = None
        self._nvme_cdc_connection_state = None
        self._nvme_cdc_connection_state_l10n = None
        self._ip_pool_address = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if ip_pool_address_id is not None:
            self.ip_pool_address_id = ip_pool_address_id
        if nvme_cdc_address is not None:
            self.nvme_cdc_address = nvme_cdc_address
        if nvme_cdc_port is not None:
            self.nvme_cdc_port = nvme_cdc_port
        if nvme_cdc_nqn is not None:
            self.nvme_cdc_nqn = nvme_cdc_nqn
        if nvme_cdc_connection_state is not None:
            self.nvme_cdc_connection_state = nvme_cdc_connection_state
        if nvme_cdc_connection_state_l10n is not None:
            self.nvme_cdc_connection_state_l10n = nvme_cdc_connection_state_l10n
        if ip_pool_address is not None:
            self.ip_pool_address = ip_pool_address

    @property
    def id(self):
        """Gets the id of this NvmeDiscoveredCdcInstance.  # noqa: E501

        Unique identifier of the CDC.  # noqa: E501

        :return: The id of this NvmeDiscoveredCdcInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NvmeDiscoveredCdcInstance.

        Unique identifier of the CDC.  # noqa: E501

        :param id: The id of this NvmeDiscoveredCdcInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def ip_pool_address_id(self):
        """Gets the ip_pool_address_id of this NvmeDiscoveredCdcInstance.  # noqa: E501

        Identifier of the IP address being used for NVMe/TCP through which CDC was discovered.  # noqa: E501

        :return: The ip_pool_address_id of this NvmeDiscoveredCdcInstance.  # noqa: E501
        :rtype: str
        """
        return self._ip_pool_address_id

    @ip_pool_address_id.setter
    def ip_pool_address_id(self, ip_pool_address_id):
        """Sets the ip_pool_address_id of this NvmeDiscoveredCdcInstance.

        Identifier of the IP address being used for NVMe/TCP through which CDC was discovered.  # noqa: E501

        :param ip_pool_address_id: The ip_pool_address_id of this NvmeDiscoveredCdcInstance.  # noqa: E501
        :type: str
        """

        self._ip_pool_address_id = ip_pool_address_id

    @property
    def nvme_cdc_address(self):
        """Gets the nvme_cdc_address of this NvmeDiscoveredCdcInstance.  # noqa: E501

        IP address of the CDC.  # noqa: E501

        :return: The nvme_cdc_address of this NvmeDiscoveredCdcInstance.  # noqa: E501
        :rtype: str
        """
        return self._nvme_cdc_address

    @nvme_cdc_address.setter
    def nvme_cdc_address(self, nvme_cdc_address):
        """Sets the nvme_cdc_address of this NvmeDiscoveredCdcInstance.

        IP address of the CDC.  # noqa: E501

        :param nvme_cdc_address: The nvme_cdc_address of this NvmeDiscoveredCdcInstance.  # noqa: E501
        :type: str
        """

        self._nvme_cdc_address = nvme_cdc_address

    @property
    def nvme_cdc_port(self):
        """Gets the nvme_cdc_port of this NvmeDiscoveredCdcInstance.  # noqa: E501

        TCP port of the CDC.  # noqa: E501

        :return: The nvme_cdc_port of this NvmeDiscoveredCdcInstance.  # noqa: E501
        :rtype: int
        """
        return self._nvme_cdc_port

    @nvme_cdc_port.setter
    def nvme_cdc_port(self, nvme_cdc_port):
        """Sets the nvme_cdc_port of this NvmeDiscoveredCdcInstance.

        TCP port of the CDC.  # noqa: E501

        :param nvme_cdc_port: The nvme_cdc_port of this NvmeDiscoveredCdcInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                nvme_cdc_port is not None and nvme_cdc_port > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `nvme_cdc_port`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                nvme_cdc_port is not None and nvme_cdc_port < 0):  # noqa: E501
            raise ValueError("Invalid value for `nvme_cdc_port`, must be a value greater than or equal to `0`")  # noqa: E501

        self._nvme_cdc_port = nvme_cdc_port

    @property
    def nvme_cdc_nqn(self):
        """Gets the nvme_cdc_nqn of this NvmeDiscoveredCdcInstance.  # noqa: E501

        NVMe Qualified Name of the CDC.  # noqa: E501

        :return: The nvme_cdc_nqn of this NvmeDiscoveredCdcInstance.  # noqa: E501
        :rtype: str
        """
        return self._nvme_cdc_nqn

    @nvme_cdc_nqn.setter
    def nvme_cdc_nqn(self, nvme_cdc_nqn):
        """Sets the nvme_cdc_nqn of this NvmeDiscoveredCdcInstance.

        NVMe Qualified Name of the CDC.  # noqa: E501

        :param nvme_cdc_nqn: The nvme_cdc_nqn of this NvmeDiscoveredCdcInstance.  # noqa: E501
        :type: str
        """

        self._nvme_cdc_nqn = nvme_cdc_nqn

    @property
    def nvme_cdc_connection_state(self):
        """Gets the nvme_cdc_connection_state of this NvmeDiscoveredCdcInstance.  # noqa: E501


        :return: The nvme_cdc_connection_state of this NvmeDiscoveredCdcInstance.  # noqa: E501
        :rtype: NvmeCdcConnectionStateEnum
        """
        return self._nvme_cdc_connection_state

    @nvme_cdc_connection_state.setter
    def nvme_cdc_connection_state(self, nvme_cdc_connection_state):
        """Sets the nvme_cdc_connection_state of this NvmeDiscoveredCdcInstance.


        :param nvme_cdc_connection_state: The nvme_cdc_connection_state of this NvmeDiscoveredCdcInstance.  # noqa: E501
        :type: NvmeCdcConnectionStateEnum
        """

        self._nvme_cdc_connection_state = nvme_cdc_connection_state

    @property
    def nvme_cdc_connection_state_l10n(self):
        """Gets the nvme_cdc_connection_state_l10n of this NvmeDiscoveredCdcInstance.  # noqa: E501

        Localized message string corresponding to nvme_cdc_connection_state Was added in version 3.0.0.0.  # noqa: E501

        :return: The nvme_cdc_connection_state_l10n of this NvmeDiscoveredCdcInstance.  # noqa: E501
        :rtype: str
        """
        return self._nvme_cdc_connection_state_l10n

    @nvme_cdc_connection_state_l10n.setter
    def nvme_cdc_connection_state_l10n(self, nvme_cdc_connection_state_l10n):
        """Sets the nvme_cdc_connection_state_l10n of this NvmeDiscoveredCdcInstance.

        Localized message string corresponding to nvme_cdc_connection_state Was added in version 3.0.0.0.  # noqa: E501

        :param nvme_cdc_connection_state_l10n: The nvme_cdc_connection_state_l10n of this NvmeDiscoveredCdcInstance.  # noqa: E501
        :type: str
        """

        self._nvme_cdc_connection_state_l10n = nvme_cdc_connection_state_l10n

    @property
    def ip_pool_address(self):
        """Gets the ip_pool_address of this NvmeDiscoveredCdcInstance.  # noqa: E501

        This is the embeddable reference form of ip_pool_address_id attribute.  # noqa: E501

        :return: The ip_pool_address of this NvmeDiscoveredCdcInstance.  # noqa: E501
        :rtype: IpPoolAddressInstance
        """
        return self._ip_pool_address

    @ip_pool_address.setter
    def ip_pool_address(self, ip_pool_address):
        """Sets the ip_pool_address of this NvmeDiscoveredCdcInstance.

        This is the embeddable reference form of ip_pool_address_id attribute.  # noqa: E501

        :param ip_pool_address: The ip_pool_address of this NvmeDiscoveredCdcInstance.  # noqa: E501
        :type: IpPoolAddressInstance
        """

        self._ip_pool_address = ip_pool_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NvmeDiscoveredCdcInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NvmeDiscoveredCdcInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NvmeDiscoveredCdcInstance):
            return True

        return self.to_dict() != other.to_dict()
