# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class NetworkCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'NetworkTypeEnum',
        'name': 'str',
        'ip_version': 'IpVersionTypeEnum',
        'purposes': 'list[NetworkPurposeEnum]',
        'vlan_id': 'int',
        'gateway': 'str',
        'prefix_length': 'int',
        'storage_discovery_address': 'str',
        'cluster_mgmt_address': 'str',
        'mtu': 'int',
        'add_addresses': 'list[str]',
        'nvme_discovery_mode': 'NVMeDiscoveryModeEnum',
        'nvme_cdc_address': 'str',
        'nvme_cdc_port': 'int'
    }

    attribute_map = {
        'type': 'type',
        'name': 'name',
        'ip_version': 'ip_version',
        'purposes': 'purposes',
        'vlan_id': 'vlan_id',
        'gateway': 'gateway',
        'prefix_length': 'prefix_length',
        'storage_discovery_address': 'storage_discovery_address',
        'cluster_mgmt_address': 'cluster_mgmt_address',
        'mtu': 'mtu',
        'add_addresses': 'add_addresses',
        'nvme_discovery_mode': 'nvme_discovery_mode',
        'nvme_cdc_address': 'nvme_cdc_address',
        'nvme_cdc_port': 'nvme_cdc_port'
    }

    def __init__(self, type=None, name=None, ip_version=None, purposes=None, vlan_id=None, gateway=None, prefix_length=None, storage_discovery_address=None, cluster_mgmt_address=None, mtu=None, add_addresses=None, nvme_discovery_mode=None, nvme_cdc_address=None, nvme_cdc_port=8009, _configuration=None):  # noqa: E501
        """NetworkCreate - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._type = None
        self._name = None
        self._ip_version = None
        self._purposes = None
        self._vlan_id = None
        self._gateway = None
        self._prefix_length = None
        self._storage_discovery_address = None
        self._cluster_mgmt_address = None
        self._mtu = None
        self._add_addresses = None
        self._nvme_discovery_mode = None
        self._nvme_cdc_address = None
        self._nvme_cdc_port = None
        self.discriminator = None

        self.type = type
        self.name = name
        self.ip_version = ip_version
        self.purposes = purposes
        if vlan_id is not None:
            self.vlan_id = vlan_id
        if gateway is not None:
            self.gateway = gateway
        self.prefix_length = prefix_length
        if storage_discovery_address is not None:
            self.storage_discovery_address = storage_discovery_address
        if cluster_mgmt_address is not None:
            self.cluster_mgmt_address = cluster_mgmt_address
        self.mtu = mtu
        if add_addresses is not None:
            self.add_addresses = add_addresses
        if nvme_discovery_mode is not None:
            self.nvme_discovery_mode = nvme_discovery_mode
        if nvme_cdc_address is not None:
            self.nvme_cdc_address = nvme_cdc_address
        if nvme_cdc_port is not None:
            self.nvme_cdc_port = nvme_cdc_port

    @property
    def type(self):
        """Gets the type of this NetworkCreate.  # noqa: E501


        :return: The type of this NetworkCreate.  # noqa: E501
        :rtype: NetworkTypeEnum
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NetworkCreate.


        :param type: The type of this NetworkCreate.  # noqa: E501
        :type: NetworkTypeEnum
        """
        if self._configuration.client_side_validation and type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def name(self):
        """Gets the name of this NetworkCreate.  # noqa: E501

        Name of the network.  # noqa: E501

        :return: The name of this NetworkCreate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NetworkCreate.

        Name of the network.  # noqa: E501

        :param name: The name of this NetworkCreate.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 128):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def ip_version(self):
        """Gets the ip_version of this NetworkCreate.  # noqa: E501


        :return: The ip_version of this NetworkCreate.  # noqa: E501
        :rtype: IpVersionTypeEnum
        """
        return self._ip_version

    @ip_version.setter
    def ip_version(self, ip_version):
        """Sets the ip_version of this NetworkCreate.


        :param ip_version: The ip_version of this NetworkCreate.  # noqa: E501
        :type: IpVersionTypeEnum
        """
        if self._configuration.client_side_validation and ip_version is None:
            raise ValueError("Invalid value for `ip_version`, must not be `None`")  # noqa: E501

        self._ip_version = ip_version

    @property
    def purposes(self):
        """Gets the purposes of this NetworkCreate.  # noqa: E501

        * Purposes of the network. * This returns a list of purposes for the networks that support multiple purposes per network, like storage network. * Returns an empty list for the single purposed networks, like management, vMotion, ICD and ICM.   # noqa: E501

        :return: The purposes of this NetworkCreate.  # noqa: E501
        :rtype: list[NetworkPurposeEnum]
        """
        return self._purposes

    @purposes.setter
    def purposes(self, purposes):
        """Sets the purposes of this NetworkCreate.

        * Purposes of the network. * This returns a list of purposes for the networks that support multiple purposes per network, like storage network. * Returns an empty list for the single purposed networks, like management, vMotion, ICD and ICM.   # noqa: E501

        :param purposes: The purposes of this NetworkCreate.  # noqa: E501
        :type: list[NetworkPurposeEnum]
        """
        if self._configuration.client_side_validation and purposes is None:
            raise ValueError("Invalid value for `purposes`, must not be `None`")  # noqa: E501

        self._purposes = purposes

    @property
    def vlan_id(self):
        """Gets the vlan_id of this NetworkCreate.  # noqa: E501

        VLAN identifier.  # noqa: E501

        :return: The vlan_id of this NetworkCreate.  # noqa: E501
        :rtype: int
        """
        return self._vlan_id

    @vlan_id.setter
    def vlan_id(self, vlan_id):
        """Sets the vlan_id of this NetworkCreate.

        VLAN identifier.  # noqa: E501

        :param vlan_id: The vlan_id of this NetworkCreate.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                vlan_id is not None and vlan_id > 4094):  # noqa: E501
            raise ValueError("Invalid value for `vlan_id`, must be a value less than or equal to `4094`")  # noqa: E501
        if (self._configuration.client_side_validation and
                vlan_id is not None and vlan_id < 0):  # noqa: E501
            raise ValueError("Invalid value for `vlan_id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._vlan_id = vlan_id

    @property
    def gateway(self):
        """Gets the gateway of this NetworkCreate.  # noqa: E501

        * Network gateway in IPv4 or IPv6 format, corresponding to the network's IP version. * Specify empty string to remove the gateway.   # noqa: E501

        :return: The gateway of this NetworkCreate.  # noqa: E501
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this NetworkCreate.

        * Network gateway in IPv4 or IPv6 format, corresponding to the network's IP version. * Specify empty string to remove the gateway.   # noqa: E501

        :param gateway: The gateway of this NetworkCreate.  # noqa: E501
        :type: str
        """

        self._gateway = gateway

    @property
    def prefix_length(self):
        """Gets the prefix_length of this NetworkCreate.  # noqa: E501

        Network prefix length. (Used for both IPv4 and IPv6).  # noqa: E501

        :return: The prefix_length of this NetworkCreate.  # noqa: E501
        :rtype: int
        """
        return self._prefix_length

    @prefix_length.setter
    def prefix_length(self, prefix_length):
        """Sets the prefix_length of this NetworkCreate.

        Network prefix length. (Used for both IPv4 and IPv6).  # noqa: E501

        :param prefix_length: The prefix_length of this NetworkCreate.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and prefix_length is None:
            raise ValueError("Invalid value for `prefix_length`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                prefix_length is not None and prefix_length > 127):  # noqa: E501
            raise ValueError("Invalid value for `prefix_length`, must be a value less than or equal to `127`")  # noqa: E501
        if (self._configuration.client_side_validation and
                prefix_length is not None and prefix_length < 1):  # noqa: E501
            raise ValueError("Invalid value for `prefix_length`, must be a value greater than or equal to `1`")  # noqa: E501

        self._prefix_length = prefix_length

    @property
    def storage_discovery_address(self):
        """Gets the storage_discovery_address of this NetworkCreate.  # noqa: E501

        * New storage discovery IP address in IPv4 or IPv6 format, corresponding to the network's IP version. * This can only be specified when creating the storage network. * Specify empty string to omit the storage discovery IP address.   # noqa: E501

        :return: The storage_discovery_address of this NetworkCreate.  # noqa: E501
        :rtype: str
        """
        return self._storage_discovery_address

    @storage_discovery_address.setter
    def storage_discovery_address(self, storage_discovery_address):
        """Sets the storage_discovery_address of this NetworkCreate.

        * New storage discovery IP address in IPv4 or IPv6 format, corresponding to the network's IP version. * This can only be specified when creating the storage network. * Specify empty string to omit the storage discovery IP address.   # noqa: E501

        :param storage_discovery_address: The storage_discovery_address of this NetworkCreate.  # noqa: E501
        :type: str
        """

        self._storage_discovery_address = storage_discovery_address

    @property
    def cluster_mgmt_address(self):
        """Gets the cluster_mgmt_address of this NetworkCreate.  # noqa: E501

        * Cluster management IP address in IPv4 or IPv6 format, corresponding to the network's IP version. * This can only be specified when creating these network types - * - File_Mobility - floating IP address for file mobility network.  Was added in version 3.0.0.0.  # noqa: E501

        :return: The cluster_mgmt_address of this NetworkCreate.  # noqa: E501
        :rtype: str
        """
        return self._cluster_mgmt_address

    @cluster_mgmt_address.setter
    def cluster_mgmt_address(self, cluster_mgmt_address):
        """Sets the cluster_mgmt_address of this NetworkCreate.

        * Cluster management IP address in IPv4 or IPv6 format, corresponding to the network's IP version. * This can only be specified when creating these network types - * - File_Mobility - floating IP address for file mobility network.  Was added in version 3.0.0.0.  # noqa: E501

        :param cluster_mgmt_address: The cluster_mgmt_address of this NetworkCreate.  # noqa: E501
        :type: str
        """

        self._cluster_mgmt_address = cluster_mgmt_address

    @property
    def mtu(self):
        """Gets the mtu of this NetworkCreate.  # noqa: E501

        Maximum Transmission Unit (MTU) packet size set on network interfaces, in bytes.  # noqa: E501

        :return: The mtu of this NetworkCreate.  # noqa: E501
        :rtype: int
        """
        return self._mtu

    @mtu.setter
    def mtu(self, mtu):
        """Sets the mtu of this NetworkCreate.

        Maximum Transmission Unit (MTU) packet size set on network interfaces, in bytes.  # noqa: E501

        :param mtu: The mtu of this NetworkCreate.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and mtu is None:
            raise ValueError("Invalid value for `mtu`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                mtu is not None and mtu > 9000):  # noqa: E501
            raise ValueError("Invalid value for `mtu`, must be a value less than or equal to `9000`")  # noqa: E501
        if (self._configuration.client_side_validation and
                mtu is not None and mtu < 1280):  # noqa: E501
            raise ValueError("Invalid value for `mtu`, must be a value greater than or equal to `1280`")  # noqa: E501

        self._mtu = mtu

    @property
    def add_addresses(self):
        """Gets the add_addresses of this NetworkCreate.  # noqa: E501

        IP addresses to add in IPv4 or IPv6 format.  # noqa: E501

        :return: The add_addresses of this NetworkCreate.  # noqa: E501
        :rtype: list[str]
        """
        return self._add_addresses

    @add_addresses.setter
    def add_addresses(self, add_addresses):
        """Sets the add_addresses of this NetworkCreate.

        IP addresses to add in IPv4 or IPv6 format.  # noqa: E501

        :param add_addresses: The add_addresses of this NetworkCreate.  # noqa: E501
        :type: list[str]
        """

        self._add_addresses = add_addresses

    @property
    def nvme_discovery_mode(self):
        """Gets the nvme_discovery_mode of this NetworkCreate.  # noqa: E501

         Was added in version 3.0.0.0.  # noqa: E501

        :return: The nvme_discovery_mode of this NetworkCreate.  # noqa: E501
        :rtype: NVMeDiscoveryModeEnum
        """
        return self._nvme_discovery_mode

    @nvme_discovery_mode.setter
    def nvme_discovery_mode(self, nvme_discovery_mode):
        """Sets the nvme_discovery_mode of this NetworkCreate.

         Was added in version 3.0.0.0.  # noqa: E501

        :param nvme_discovery_mode: The nvme_discovery_mode of this NetworkCreate.  # noqa: E501
        :type: NVMeDiscoveryModeEnum
        """

        self._nvme_discovery_mode = nvme_discovery_mode

    @property
    def nvme_cdc_address(self):
        """Gets the nvme_cdc_address of this NetworkCreate.  # noqa: E501

        IP address of the NVMe Centralized Discovery Controller (CDC). This is only applicable if network contains NVMe_TCP among its purposes, and nvme_discovery_mode is set to Manual_CDC.  Was added in version 3.0.0.0.  # noqa: E501

        :return: The nvme_cdc_address of this NetworkCreate.  # noqa: E501
        :rtype: str
        """
        return self._nvme_cdc_address

    @nvme_cdc_address.setter
    def nvme_cdc_address(self, nvme_cdc_address):
        """Sets the nvme_cdc_address of this NetworkCreate.

        IP address of the NVMe Centralized Discovery Controller (CDC). This is only applicable if network contains NVMe_TCP among its purposes, and nvme_discovery_mode is set to Manual_CDC.  Was added in version 3.0.0.0.  # noqa: E501

        :param nvme_cdc_address: The nvme_cdc_address of this NetworkCreate.  # noqa: E501
        :type: str
        """

        self._nvme_cdc_address = nvme_cdc_address

    @property
    def nvme_cdc_port(self):
        """Gets the nvme_cdc_port of this NetworkCreate.  # noqa: E501

        TCP port of the NVMe Centralized Discovery Controller (CDC). This is only applicable if network contains NVMe_TCP among its purposes, and nvme_discovery_mode is set to Manual_CDC. The valid values: 8009 or from 49152 to 49999 or 50100 to 65535.  Was added in version 3.0.0.0.  # noqa: E501

        :return: The nvme_cdc_port of this NetworkCreate.  # noqa: E501
        :rtype: int
        """
        return self._nvme_cdc_port

    @nvme_cdc_port.setter
    def nvme_cdc_port(self, nvme_cdc_port):
        """Sets the nvme_cdc_port of this NetworkCreate.

        TCP port of the NVMe Centralized Discovery Controller (CDC). This is only applicable if network contains NVMe_TCP among its purposes, and nvme_discovery_mode is set to Manual_CDC. The valid values: 8009 or from 49152 to 49999 or 50100 to 65535.  Was added in version 3.0.0.0.  # noqa: E501

        :param nvme_cdc_port: The nvme_cdc_port of this NetworkCreate.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                nvme_cdc_port is not None and nvme_cdc_port > 65535):  # noqa: E501
            raise ValueError("Invalid value for `nvme_cdc_port`, must be a value less than or equal to `65535`")  # noqa: E501
        if (self._configuration.client_side_validation and
                nvme_cdc_port is not None and nvme_cdc_port < 8009):  # noqa: E501
            raise ValueError("Invalid value for `nvme_cdc_port`, must be a value greater than or equal to `8009`")  # noqa: E501

        self._nvme_cdc_port = nvme_cdc_port

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetworkCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NetworkCreate):
            return True

        return self.to_dict() != other.to_dict()
