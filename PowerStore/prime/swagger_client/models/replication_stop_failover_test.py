# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class ReplicationStopFailoverTest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'create_end_of_test_snapshot': 'bool',
        'force': 'bool'
    }

    attribute_map = {
        'create_end_of_test_snapshot': 'create_end_of_test_snapshot',
        'force': 'force'
    }

    def __init__(self, create_end_of_test_snapshot=False, force=False, _configuration=None):  # noqa: E501
        """ReplicationStopFailoverTest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._create_end_of_test_snapshot = None
        self._force = None
        self.discriminator = None

        if create_end_of_test_snapshot is not None:
            self.create_end_of_test_snapshot = create_end_of_test_snapshot
        if force is not None:
            self.force = force

    @property
    def create_end_of_test_snapshot(self):
        """Gets the create_end_of_test_snapshot of this ReplicationStopFailoverTest.  # noqa: E501

        Indicates whether a snapshot of the destination resource should be created at the end of the test.  If set to true, the name of the created snapshot will contain a timestamp indicating its time of creation and will be of the format \"failover_test_STOPPED_&lt;timestamp&gt;\". The snapshot will be set to automatically expire after a system determined interval.   # noqa: E501

        :return: The create_end_of_test_snapshot of this ReplicationStopFailoverTest.  # noqa: E501
        :rtype: bool
        """
        return self._create_end_of_test_snapshot

    @create_end_of_test_snapshot.setter
    def create_end_of_test_snapshot(self, create_end_of_test_snapshot):
        """Sets the create_end_of_test_snapshot of this ReplicationStopFailoverTest.

        Indicates whether a snapshot of the destination resource should be created at the end of the test.  If set to true, the name of the created snapshot will contain a timestamp indicating its time of creation and will be of the format \"failover_test_STOPPED_&lt;timestamp&gt;\". The snapshot will be set to automatically expire after a system determined interval.   # noqa: E501

        :param create_end_of_test_snapshot: The create_end_of_test_snapshot of this ReplicationStopFailoverTest.  # noqa: E501
        :type: bool
        """

        self._create_end_of_test_snapshot = create_end_of_test_snapshot

    @property
    def force(self):
        """Gets the force of this ReplicationStopFailoverTest.  # noqa: E501

        By default a failover test cannot be stopped if the remote system is not reachable. This option allows for stopping the test even if the remote system is down. The intention is to enable disaster recovery to a point in time different than the one under test.  # noqa: E501

        :return: The force of this ReplicationStopFailoverTest.  # noqa: E501
        :rtype: bool
        """
        return self._force

    @force.setter
    def force(self, force):
        """Sets the force of this ReplicationStopFailoverTest.

        By default a failover test cannot be stopped if the remote system is not reachable. This option allows for stopping the test even if the remote system is down. The intention is to enable disaster recovery to a point in time different than the one under test.  # noqa: E501

        :param force: The force of this ReplicationStopFailoverTest.  # noqa: E501
        :type: bool
        """

        self._force = force

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReplicationStopFailoverTest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReplicationStopFailoverTest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReplicationStopFailoverTest):
            return True

        return self.to_dict() != other.to_dict()
