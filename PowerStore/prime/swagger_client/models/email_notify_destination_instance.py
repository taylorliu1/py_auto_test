# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class EmailNotifyDestinationInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'email_address': 'str',
        'notify_critical': 'bool',
        'notify_major': 'bool',
        'notify_minor': 'bool',
        'notify_info': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'email_address': 'email_address',
        'notify_critical': 'notify_critical',
        'notify_major': 'notify_major',
        'notify_minor': 'notify_minor',
        'notify_info': 'notify_info'
    }

    def __init__(self, id=None, email_address=None, notify_critical=None, notify_major=None, notify_minor=None, notify_info=None, _configuration=None):  # noqa: E501
        """EmailNotifyDestinationInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._email_address = None
        self._notify_critical = None
        self._notify_major = None
        self._notify_minor = None
        self._notify_info = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if email_address is not None:
            self.email_address = email_address
        if notify_critical is not None:
            self.notify_critical = notify_critical
        if notify_major is not None:
            self.notify_major = notify_major
        if notify_minor is not None:
            self.notify_minor = notify_minor
        if notify_info is not None:
            self.notify_info = notify_info

    @property
    def id(self):
        """Gets the id of this EmailNotifyDestinationInstance.  # noqa: E501

        Unique identifier of the email notification destination.  # noqa: E501

        :return: The id of this EmailNotifyDestinationInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EmailNotifyDestinationInstance.

        Unique identifier of the email notification destination.  # noqa: E501

        :param id: The id of this EmailNotifyDestinationInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def email_address(self):
        """Gets the email_address of this EmailNotifyDestinationInstance.  # noqa: E501

        Email address to receive notifications.  # noqa: E501

        :return: The email_address of this EmailNotifyDestinationInstance.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this EmailNotifyDestinationInstance.

        Email address to receive notifications.  # noqa: E501

        :param email_address: The email_address of this EmailNotifyDestinationInstance.  # noqa: E501
        :type: str
        """

        self._email_address = email_address

    @property
    def notify_critical(self):
        """Gets the notify_critical of this EmailNotifyDestinationInstance.  # noqa: E501

        Whether to send notifications for critical alerts.  # noqa: E501

        :return: The notify_critical of this EmailNotifyDestinationInstance.  # noqa: E501
        :rtype: bool
        """
        return self._notify_critical

    @notify_critical.setter
    def notify_critical(self, notify_critical):
        """Sets the notify_critical of this EmailNotifyDestinationInstance.

        Whether to send notifications for critical alerts.  # noqa: E501

        :param notify_critical: The notify_critical of this EmailNotifyDestinationInstance.  # noqa: E501
        :type: bool
        """

        self._notify_critical = notify_critical

    @property
    def notify_major(self):
        """Gets the notify_major of this EmailNotifyDestinationInstance.  # noqa: E501

        Whether to send notifications for major alerts.  # noqa: E501

        :return: The notify_major of this EmailNotifyDestinationInstance.  # noqa: E501
        :rtype: bool
        """
        return self._notify_major

    @notify_major.setter
    def notify_major(self, notify_major):
        """Sets the notify_major of this EmailNotifyDestinationInstance.

        Whether to send notifications for major alerts.  # noqa: E501

        :param notify_major: The notify_major of this EmailNotifyDestinationInstance.  # noqa: E501
        :type: bool
        """

        self._notify_major = notify_major

    @property
    def notify_minor(self):
        """Gets the notify_minor of this EmailNotifyDestinationInstance.  # noqa: E501

        Whether to send notifications for minor alerts.  # noqa: E501

        :return: The notify_minor of this EmailNotifyDestinationInstance.  # noqa: E501
        :rtype: bool
        """
        return self._notify_minor

    @notify_minor.setter
    def notify_minor(self, notify_minor):
        """Sets the notify_minor of this EmailNotifyDestinationInstance.

        Whether to send notifications for minor alerts.  # noqa: E501

        :param notify_minor: The notify_minor of this EmailNotifyDestinationInstance.  # noqa: E501
        :type: bool
        """

        self._notify_minor = notify_minor

    @property
    def notify_info(self):
        """Gets the notify_info of this EmailNotifyDestinationInstance.  # noqa: E501

        Whether to send notifications for informational alerts.  # noqa: E501

        :return: The notify_info of this EmailNotifyDestinationInstance.  # noqa: E501
        :rtype: bool
        """
        return self._notify_info

    @notify_info.setter
    def notify_info(self, notify_info):
        """Sets the notify_info of this EmailNotifyDestinationInstance.

        Whether to send notifications for informational alerts.  # noqa: E501

        :param notify_info: The notify_info of this EmailNotifyDestinationInstance.  # noqa: E501
        :type: bool
        """

        self._notify_info = notify_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmailNotifyDestinationInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmailNotifyDestinationInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EmailNotifyDestinationInstance):
            return True

        return self.to_dict() != other.to_dict()
