# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class ImportXtremioInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'management_address': 'str',
        'serial_number': 'str',
        'cluster_guid': 'str',
        'platform': 'XtremIOPlatformEnum',
        'software_version': 'str',
        'xms_version': 'str',
        'supported_import_type': 'SupportedImportTypeEnum',
        'state': 'XtremIOStateEnum',
        'severity': 'XtremIOObjectSeverityEnum',
        'user_name': 'str',
        'last_updated_timestamp': 'datetime',
        'platform_l10n': 'str',
        'supported_import_type_l10n': 'str',
        'state_l10n': 'str',
        'severity_l10n': 'str',
        'import_xtremio_volumes': 'list[ImportXtremioVolumeInstance]',
        'import_xtremio_consistency_groups': 'list[ImportXtremioConsistencyGroupInstance]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'management_address': 'management_address',
        'serial_number': 'serial_number',
        'cluster_guid': 'cluster_guid',
        'platform': 'platform',
        'software_version': 'software_version',
        'xms_version': 'xms_version',
        'supported_import_type': 'supported_import_type',
        'state': 'state',
        'severity': 'severity',
        'user_name': 'user_name',
        'last_updated_timestamp': 'last_updated_timestamp',
        'platform_l10n': 'platform_l10n',
        'supported_import_type_l10n': 'supported_import_type_l10n',
        'state_l10n': 'state_l10n',
        'severity_l10n': 'severity_l10n',
        'import_xtremio_volumes': 'import_xtremio_volumes',
        'import_xtremio_consistency_groups': 'import_xtremio_consistency_groups'
    }

    def __init__(self, id=None, name=None, management_address=None, serial_number=None, cluster_guid=None, platform=None, software_version=None, xms_version=None, supported_import_type=None, state=None, severity=None, user_name=None, last_updated_timestamp=None, platform_l10n=None, supported_import_type_l10n=None, state_l10n=None, severity_l10n=None, import_xtremio_volumes=None, import_xtremio_consistency_groups=None, _configuration=None):  # noqa: E501
        """ImportXtremioInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._management_address = None
        self._serial_number = None
        self._cluster_guid = None
        self._platform = None
        self._software_version = None
        self._xms_version = None
        self._supported_import_type = None
        self._state = None
        self._severity = None
        self._user_name = None
        self._last_updated_timestamp = None
        self._platform_l10n = None
        self._supported_import_type_l10n = None
        self._state_l10n = None
        self._severity_l10n = None
        self._import_xtremio_volumes = None
        self._import_xtremio_consistency_groups = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if management_address is not None:
            self.management_address = management_address
        if serial_number is not None:
            self.serial_number = serial_number
        if cluster_guid is not None:
            self.cluster_guid = cluster_guid
        if platform is not None:
            self.platform = platform
        if software_version is not None:
            self.software_version = software_version
        if xms_version is not None:
            self.xms_version = xms_version
        if supported_import_type is not None:
            self.supported_import_type = supported_import_type
        if state is not None:
            self.state = state
        if severity is not None:
            self.severity = severity
        if user_name is not None:
            self.user_name = user_name
        if last_updated_timestamp is not None:
            self.last_updated_timestamp = last_updated_timestamp
        if platform_l10n is not None:
            self.platform_l10n = platform_l10n
        if supported_import_type_l10n is not None:
            self.supported_import_type_l10n = supported_import_type_l10n
        if state_l10n is not None:
            self.state_l10n = state_l10n
        if severity_l10n is not None:
            self.severity_l10n = severity_l10n
        if import_xtremio_volumes is not None:
            self.import_xtremio_volumes = import_xtremio_volumes
        if import_xtremio_consistency_groups is not None:
            self.import_xtremio_consistency_groups = import_xtremio_consistency_groups

    @property
    def id(self):
        """Gets the id of this ImportXtremioInstance.  # noqa: E501

        Unique identifier of the XtremIO storage system that is a source storage system for import.  # noqa: E501

        :return: The id of this ImportXtremioInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ImportXtremioInstance.

        Unique identifier of the XtremIO storage system that is a source storage system for import.  # noqa: E501

        :param id: The id of this ImportXtremioInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ImportXtremioInstance.  # noqa: E501

        Name of the XtremIO storage system.  This property supports case-insensitive filtering.  # noqa: E501

        :return: The name of this ImportXtremioInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ImportXtremioInstance.

        Name of the XtremIO storage system.  This property supports case-insensitive filtering.  # noqa: E501

        :param name: The name of this ImportXtremioInstance.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def management_address(self):
        """Gets the management_address of this ImportXtremioInstance.  # noqa: E501

        Management address to use for communicating with the XtremIO storage system. The address can be an IPv4 address or FQDN (Fully Qualified Domain Name).  # noqa: E501

        :return: The management_address of this ImportXtremioInstance.  # noqa: E501
        :rtype: str
        """
        return self._management_address

    @management_address.setter
    def management_address(self, management_address):
        """Sets the management_address of this ImportXtremioInstance.

        Management address to use for communicating with the XtremIO storage system. The address can be an IPv4 address or FQDN (Fully Qualified Domain Name).  # noqa: E501

        :param management_address: The management_address of this ImportXtremioInstance.  # noqa: E501
        :type: str
        """

        self._management_address = management_address

    @property
    def serial_number(self):
        """Gets the serial_number of this ImportXtremioInstance.  # noqa: E501

        Serial number of the XtremIO storage system.  # noqa: E501

        :return: The serial_number of this ImportXtremioInstance.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this ImportXtremioInstance.

        Serial number of the XtremIO storage system.  # noqa: E501

        :param serial_number: The serial_number of this ImportXtremioInstance.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def cluster_guid(self):
        """Gets the cluster_guid of this ImportXtremioInstance.  # noqa: E501

        Cluster GUID of the XtremIO storage system.  # noqa: E501

        :return: The cluster_guid of this ImportXtremioInstance.  # noqa: E501
        :rtype: str
        """
        return self._cluster_guid

    @cluster_guid.setter
    def cluster_guid(self, cluster_guid):
        """Sets the cluster_guid of this ImportXtremioInstance.

        Cluster GUID of the XtremIO storage system.  # noqa: E501

        :param cluster_guid: The cluster_guid of this ImportXtremioInstance.  # noqa: E501
        :type: str
        """

        self._cluster_guid = cluster_guid

    @property
    def platform(self):
        """Gets the platform of this ImportXtremioInstance.  # noqa: E501


        :return: The platform of this ImportXtremioInstance.  # noqa: E501
        :rtype: XtremIOPlatformEnum
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this ImportXtremioInstance.


        :param platform: The platform of this ImportXtremioInstance.  # noqa: E501
        :type: XtremIOPlatformEnum
        """

        self._platform = platform

    @property
    def software_version(self):
        """Gets the software_version of this ImportXtremioInstance.  # noqa: E501

        Software version of the XtremIO storage system.  # noqa: E501

        :return: The software_version of this ImportXtremioInstance.  # noqa: E501
        :rtype: str
        """
        return self._software_version

    @software_version.setter
    def software_version(self, software_version):
        """Sets the software_version of this ImportXtremioInstance.

        Software version of the XtremIO storage system.  # noqa: E501

        :param software_version: The software_version of this ImportXtremioInstance.  # noqa: E501
        :type: str
        """

        self._software_version = software_version

    @property
    def xms_version(self):
        """Gets the xms_version of this ImportXtremioInstance.  # noqa: E501

        Version of the XMS instance that manages the XtremIO storage system.  # noqa: E501

        :return: The xms_version of this ImportXtremioInstance.  # noqa: E501
        :rtype: str
        """
        return self._xms_version

    @xms_version.setter
    def xms_version(self, xms_version):
        """Sets the xms_version of this ImportXtremioInstance.

        Version of the XMS instance that manages the XtremIO storage system.  # noqa: E501

        :param xms_version: The xms_version of this ImportXtremioInstance.  # noqa: E501
        :type: str
        """

        self._xms_version = xms_version

    @property
    def supported_import_type(self):
        """Gets the supported_import_type of this ImportXtremioInstance.  # noqa: E501


        :return: The supported_import_type of this ImportXtremioInstance.  # noqa: E501
        :rtype: SupportedImportTypeEnum
        """
        return self._supported_import_type

    @supported_import_type.setter
    def supported_import_type(self, supported_import_type):
        """Sets the supported_import_type of this ImportXtremioInstance.


        :param supported_import_type: The supported_import_type of this ImportXtremioInstance.  # noqa: E501
        :type: SupportedImportTypeEnum
        """

        self._supported_import_type = supported_import_type

    @property
    def state(self):
        """Gets the state of this ImportXtremioInstance.  # noqa: E501


        :return: The state of this ImportXtremioInstance.  # noqa: E501
        :rtype: XtremIOStateEnum
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ImportXtremioInstance.


        :param state: The state of this ImportXtremioInstance.  # noqa: E501
        :type: XtremIOStateEnum
        """

        self._state = state

    @property
    def severity(self):
        """Gets the severity of this ImportXtremioInstance.  # noqa: E501


        :return: The severity of this ImportXtremioInstance.  # noqa: E501
        :rtype: XtremIOObjectSeverityEnum
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this ImportXtremioInstance.


        :param severity: The severity of this ImportXtremioInstance.  # noqa: E501
        :type: XtremIOObjectSeverityEnum
        """

        self._severity = severity

    @property
    def user_name(self):
        """Gets the user_name of this ImportXtremioInstance.  # noqa: E501

        User account name used to communicate with the XtremIO storage system.  # noqa: E501

        :return: The user_name of this ImportXtremioInstance.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this ImportXtremioInstance.

        User account name used to communicate with the XtremIO storage system.  # noqa: E501

        :param user_name: The user_name of this ImportXtremioInstance.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def last_updated_timestamp(self):
        """Gets the last_updated_timestamp of this ImportXtremioInstance.  # noqa: E501

        Date and time when the XtremIO storage system details were last updated. These details include the XtremIO storage system and information about its importable volumes and consistency groups. The timestamp is updated when the XtremIO storage system is created and whenever the importable volumes and consistency groups are discovered.  # noqa: E501

        :return: The last_updated_timestamp of this ImportXtremioInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated_timestamp

    @last_updated_timestamp.setter
    def last_updated_timestamp(self, last_updated_timestamp):
        """Sets the last_updated_timestamp of this ImportXtremioInstance.

        Date and time when the XtremIO storage system details were last updated. These details include the XtremIO storage system and information about its importable volumes and consistency groups. The timestamp is updated when the XtremIO storage system is created and whenever the importable volumes and consistency groups are discovered.  # noqa: E501

        :param last_updated_timestamp: The last_updated_timestamp of this ImportXtremioInstance.  # noqa: E501
        :type: datetime
        """

        self._last_updated_timestamp = last_updated_timestamp

    @property
    def platform_l10n(self):
        """Gets the platform_l10n of this ImportXtremioInstance.  # noqa: E501

        Localized message string corresponding to platform Was added in version 1.0.2.  # noqa: E501

        :return: The platform_l10n of this ImportXtremioInstance.  # noqa: E501
        :rtype: str
        """
        return self._platform_l10n

    @platform_l10n.setter
    def platform_l10n(self, platform_l10n):
        """Sets the platform_l10n of this ImportXtremioInstance.

        Localized message string corresponding to platform Was added in version 1.0.2.  # noqa: E501

        :param platform_l10n: The platform_l10n of this ImportXtremioInstance.  # noqa: E501
        :type: str
        """

        self._platform_l10n = platform_l10n

    @property
    def supported_import_type_l10n(self):
        """Gets the supported_import_type_l10n of this ImportXtremioInstance.  # noqa: E501

        Localized message string corresponding to supported_import_type Was added in version 1.0.2.  # noqa: E501

        :return: The supported_import_type_l10n of this ImportXtremioInstance.  # noqa: E501
        :rtype: str
        """
        return self._supported_import_type_l10n

    @supported_import_type_l10n.setter
    def supported_import_type_l10n(self, supported_import_type_l10n):
        """Sets the supported_import_type_l10n of this ImportXtremioInstance.

        Localized message string corresponding to supported_import_type Was added in version 1.0.2.  # noqa: E501

        :param supported_import_type_l10n: The supported_import_type_l10n of this ImportXtremioInstance.  # noqa: E501
        :type: str
        """

        self._supported_import_type_l10n = supported_import_type_l10n

    @property
    def state_l10n(self):
        """Gets the state_l10n of this ImportXtremioInstance.  # noqa: E501

        Localized message string corresponding to state Was added in version 1.0.2.  # noqa: E501

        :return: The state_l10n of this ImportXtremioInstance.  # noqa: E501
        :rtype: str
        """
        return self._state_l10n

    @state_l10n.setter
    def state_l10n(self, state_l10n):
        """Sets the state_l10n of this ImportXtremioInstance.

        Localized message string corresponding to state Was added in version 1.0.2.  # noqa: E501

        :param state_l10n: The state_l10n of this ImportXtremioInstance.  # noqa: E501
        :type: str
        """

        self._state_l10n = state_l10n

    @property
    def severity_l10n(self):
        """Gets the severity_l10n of this ImportXtremioInstance.  # noqa: E501

        Localized message string corresponding to severity Was added in version 1.0.2.  # noqa: E501

        :return: The severity_l10n of this ImportXtremioInstance.  # noqa: E501
        :rtype: str
        """
        return self._severity_l10n

    @severity_l10n.setter
    def severity_l10n(self, severity_l10n):
        """Sets the severity_l10n of this ImportXtremioInstance.

        Localized message string corresponding to severity Was added in version 1.0.2.  # noqa: E501

        :param severity_l10n: The severity_l10n of this ImportXtremioInstance.  # noqa: E501
        :type: str
        """

        self._severity_l10n = severity_l10n

    @property
    def import_xtremio_volumes(self):
        """Gets the import_xtremio_volumes of this ImportXtremioInstance.  # noqa: E501

        This is the inverse of the resource type import_xtremio_volume association.  # noqa: E501

        :return: The import_xtremio_volumes of this ImportXtremioInstance.  # noqa: E501
        :rtype: list[ImportXtremioVolumeInstance]
        """
        return self._import_xtremio_volumes

    @import_xtremio_volumes.setter
    def import_xtremio_volumes(self, import_xtremio_volumes):
        """Sets the import_xtremio_volumes of this ImportXtremioInstance.

        This is the inverse of the resource type import_xtremio_volume association.  # noqa: E501

        :param import_xtremio_volumes: The import_xtremio_volumes of this ImportXtremioInstance.  # noqa: E501
        :type: list[ImportXtremioVolumeInstance]
        """

        self._import_xtremio_volumes = import_xtremio_volumes

    @property
    def import_xtremio_consistency_groups(self):
        """Gets the import_xtremio_consistency_groups of this ImportXtremioInstance.  # noqa: E501

        This is the inverse of the resource type import_xtremio_consistency_group association.  # noqa: E501

        :return: The import_xtremio_consistency_groups of this ImportXtremioInstance.  # noqa: E501
        :rtype: list[ImportXtremioConsistencyGroupInstance]
        """
        return self._import_xtremio_consistency_groups

    @import_xtremio_consistency_groups.setter
    def import_xtremio_consistency_groups(self, import_xtremio_consistency_groups):
        """Sets the import_xtremio_consistency_groups of this ImportXtremioInstance.

        This is the inverse of the resource type import_xtremio_consistency_group association.  # noqa: E501

        :param import_xtremio_consistency_groups: The import_xtremio_consistency_groups of this ImportXtremioInstance.  # noqa: E501
        :type: list[ImportXtremioConsistencyGroupInstance]
        """

        self._import_xtremio_consistency_groups = import_xtremio_consistency_groups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImportXtremioInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportXtremioInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImportXtremioInstance):
            return True

        return self.to_dict() != other.to_dict()
