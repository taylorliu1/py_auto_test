# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class ImportPsgroupVolumeInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'is_online': 'bool',
        'import_psgroup_id': 'str',
        'name': 'str',
        'size': 'int',
        'block_size': 'VolumeBlockSizeEnum',
        'wwn': 'str',
        'is_read_only': 'bool',
        'migration_state': 'ImportStatusEnum',
        'importable_criteria': 'VolumeImportableCriteriaEnum',
        'host_volume_ids': 'list[str]',
        'block_size_l10n': 'str',
        'migration_state_l10n': 'str',
        'importable_criteria_l10n': 'str',
        'import_psgroup': 'ImportPsgroupInstance'
    }

    attribute_map = {
        'id': 'id',
        'is_online': 'is_online',
        'import_psgroup_id': 'import_psgroup_id',
        'name': 'name',
        'size': 'size',
        'block_size': 'block_size',
        'wwn': 'wwn',
        'is_read_only': 'is_read_only',
        'migration_state': 'migration_state',
        'importable_criteria': 'importable_criteria',
        'host_volume_ids': 'host_volume_ids',
        'block_size_l10n': 'block_size_l10n',
        'migration_state_l10n': 'migration_state_l10n',
        'importable_criteria_l10n': 'importable_criteria_l10n',
        'import_psgroup': 'import_psgroup'
    }

    def __init__(self, id=None, is_online=None, import_psgroup_id=None, name=None, size=None, block_size=None, wwn=None, is_read_only=None, migration_state=None, importable_criteria=None, host_volume_ids=None, block_size_l10n=None, migration_state_l10n=None, importable_criteria_l10n=None, import_psgroup=None, _configuration=None):  # noqa: E501
        """ImportPsgroupVolumeInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._is_online = None
        self._import_psgroup_id = None
        self._name = None
        self._size = None
        self._block_size = None
        self._wwn = None
        self._is_read_only = None
        self._migration_state = None
        self._importable_criteria = None
        self._host_volume_ids = None
        self._block_size_l10n = None
        self._migration_state_l10n = None
        self._importable_criteria_l10n = None
        self._import_psgroup = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if is_online is not None:
            self.is_online = is_online
        if import_psgroup_id is not None:
            self.import_psgroup_id = import_psgroup_id
        if name is not None:
            self.name = name
        if size is not None:
            self.size = size
        if block_size is not None:
            self.block_size = block_size
        if wwn is not None:
            self.wwn = wwn
        if is_read_only is not None:
            self.is_read_only = is_read_only
        if migration_state is not None:
            self.migration_state = migration_state
        if importable_criteria is not None:
            self.importable_criteria = importable_criteria
        if host_volume_ids is not None:
            self.host_volume_ids = host_volume_ids
        if block_size_l10n is not None:
            self.block_size_l10n = block_size_l10n
        if migration_state_l10n is not None:
            self.migration_state_l10n = migration_state_l10n
        if importable_criteria_l10n is not None:
            self.importable_criteria_l10n = importable_criteria_l10n
        if import_psgroup is not None:
            self.import_psgroup = import_psgroup

    @property
    def id(self):
        """Gets the id of this ImportPsgroupVolumeInstance.  # noqa: E501

        Unique identifier of the volume.  # noqa: E501

        :return: The id of this ImportPsgroupVolumeInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ImportPsgroupVolumeInstance.

        Unique identifier of the volume.  # noqa: E501

        :param id: The id of this ImportPsgroupVolumeInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_online(self):
        """Gets the is_online of this ImportPsgroupVolumeInstance.  # noqa: E501

        Indicates whether the volume is online.  # noqa: E501

        :return: The is_online of this ImportPsgroupVolumeInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_online

    @is_online.setter
    def is_online(self, is_online):
        """Sets the is_online of this ImportPsgroupVolumeInstance.

        Indicates whether the volume is online.  # noqa: E501

        :param is_online: The is_online of this ImportPsgroupVolumeInstance.  # noqa: E501
        :type: bool
        """

        self._is_online = is_online

    @property
    def import_psgroup_id(self):
        """Gets the import_psgroup_id of this ImportPsgroupVolumeInstance.  # noqa: E501

        Unique identifier of the PS Group with which the volume is associated.  # noqa: E501

        :return: The import_psgroup_id of this ImportPsgroupVolumeInstance.  # noqa: E501
        :rtype: str
        """
        return self._import_psgroup_id

    @import_psgroup_id.setter
    def import_psgroup_id(self, import_psgroup_id):
        """Sets the import_psgroup_id of this ImportPsgroupVolumeInstance.

        Unique identifier of the PS Group with which the volume is associated.  # noqa: E501

        :param import_psgroup_id: The import_psgroup_id of this ImportPsgroupVolumeInstance.  # noqa: E501
        :type: str
        """

        self._import_psgroup_id = import_psgroup_id

    @property
    def name(self):
        """Gets the name of this ImportPsgroupVolumeInstance.  # noqa: E501

        Name of the volume.  This property supports case-insensitive filtering.  # noqa: E501

        :return: The name of this ImportPsgroupVolumeInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ImportPsgroupVolumeInstance.

        Name of the volume.  This property supports case-insensitive filtering.  # noqa: E501

        :param name: The name of this ImportPsgroupVolumeInstance.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def size(self):
        """Gets the size of this ImportPsgroupVolumeInstance.  # noqa: E501

        Size of the volume, in bytes.  # noqa: E501

        :return: The size of this ImportPsgroupVolumeInstance.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ImportPsgroupVolumeInstance.

        Size of the volume, in bytes.  # noqa: E501

        :param size: The size of this ImportPsgroupVolumeInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                size is not None and size > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `size`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                size is not None and size < 0):  # noqa: E501
            raise ValueError("Invalid value for `size`, must be a value greater than or equal to `0`")  # noqa: E501

        self._size = size

    @property
    def block_size(self):
        """Gets the block_size of this ImportPsgroupVolumeInstance.  # noqa: E501


        :return: The block_size of this ImportPsgroupVolumeInstance.  # noqa: E501
        :rtype: VolumeBlockSizeEnum
        """
        return self._block_size

    @block_size.setter
    def block_size(self, block_size):
        """Sets the block_size of this ImportPsgroupVolumeInstance.


        :param block_size: The block_size of this ImportPsgroupVolumeInstance.  # noqa: E501
        :type: VolumeBlockSizeEnum
        """

        self._block_size = block_size

    @property
    def wwn(self):
        """Gets the wwn of this ImportPsgroupVolumeInstance.  # noqa: E501

        Unique WWN of the volume.  # noqa: E501

        :return: The wwn of this ImportPsgroupVolumeInstance.  # noqa: E501
        :rtype: str
        """
        return self._wwn

    @wwn.setter
    def wwn(self, wwn):
        """Sets the wwn of this ImportPsgroupVolumeInstance.

        Unique WWN of the volume.  # noqa: E501

        :param wwn: The wwn of this ImportPsgroupVolumeInstance.  # noqa: E501
        :type: str
        """

        self._wwn = wwn

    @property
    def is_read_only(self):
        """Gets the is_read_only of this ImportPsgroupVolumeInstance.  # noqa: E501

        Indicates whether the volume is read-only.  # noqa: E501

        :return: The is_read_only of this ImportPsgroupVolumeInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_read_only

    @is_read_only.setter
    def is_read_only(self, is_read_only):
        """Sets the is_read_only of this ImportPsgroupVolumeInstance.

        Indicates whether the volume is read-only.  # noqa: E501

        :param is_read_only: The is_read_only of this ImportPsgroupVolumeInstance.  # noqa: E501
        :type: bool
        """

        self._is_read_only = is_read_only

    @property
    def migration_state(self):
        """Gets the migration_state of this ImportPsgroupVolumeInstance.  # noqa: E501


        :return: The migration_state of this ImportPsgroupVolumeInstance.  # noqa: E501
        :rtype: ImportStatusEnum
        """
        return self._migration_state

    @migration_state.setter
    def migration_state(self, migration_state):
        """Sets the migration_state of this ImportPsgroupVolumeInstance.


        :param migration_state: The migration_state of this ImportPsgroupVolumeInstance.  # noqa: E501
        :type: ImportStatusEnum
        """

        self._migration_state = migration_state

    @property
    def importable_criteria(self):
        """Gets the importable_criteria of this ImportPsgroupVolumeInstance.  # noqa: E501

        Volume import criteria. If the value is not Ready, the volume is not importable.   # noqa: E501

        :return: The importable_criteria of this ImportPsgroupVolumeInstance.  # noqa: E501
        :rtype: VolumeImportableCriteriaEnum
        """
        return self._importable_criteria

    @importable_criteria.setter
    def importable_criteria(self, importable_criteria):
        """Sets the importable_criteria of this ImportPsgroupVolumeInstance.

        Volume import criteria. If the value is not Ready, the volume is not importable.   # noqa: E501

        :param importable_criteria: The importable_criteria of this ImportPsgroupVolumeInstance.  # noqa: E501
        :type: VolumeImportableCriteriaEnum
        """

        self._importable_criteria = importable_criteria

    @property
    def host_volume_ids(self):
        """Gets the host_volume_ids of this ImportPsgroupVolumeInstance.  # noqa: E501

        Unique identifiers of the host volumes associated with the volume.  # noqa: E501

        :return: The host_volume_ids of this ImportPsgroupVolumeInstance.  # noqa: E501
        :rtype: list[str]
        """
        return self._host_volume_ids

    @host_volume_ids.setter
    def host_volume_ids(self, host_volume_ids):
        """Sets the host_volume_ids of this ImportPsgroupVolumeInstance.

        Unique identifiers of the host volumes associated with the volume.  # noqa: E501

        :param host_volume_ids: The host_volume_ids of this ImportPsgroupVolumeInstance.  # noqa: E501
        :type: list[str]
        """

        self._host_volume_ids = host_volume_ids

    @property
    def block_size_l10n(self):
        """Gets the block_size_l10n of this ImportPsgroupVolumeInstance.  # noqa: E501

        Localized message string corresponding to block_size  # noqa: E501

        :return: The block_size_l10n of this ImportPsgroupVolumeInstance.  # noqa: E501
        :rtype: str
        """
        return self._block_size_l10n

    @block_size_l10n.setter
    def block_size_l10n(self, block_size_l10n):
        """Sets the block_size_l10n of this ImportPsgroupVolumeInstance.

        Localized message string corresponding to block_size  # noqa: E501

        :param block_size_l10n: The block_size_l10n of this ImportPsgroupVolumeInstance.  # noqa: E501
        :type: str
        """

        self._block_size_l10n = block_size_l10n

    @property
    def migration_state_l10n(self):
        """Gets the migration_state_l10n of this ImportPsgroupVolumeInstance.  # noqa: E501

        Localized message string corresponding to migration_state  # noqa: E501

        :return: The migration_state_l10n of this ImportPsgroupVolumeInstance.  # noqa: E501
        :rtype: str
        """
        return self._migration_state_l10n

    @migration_state_l10n.setter
    def migration_state_l10n(self, migration_state_l10n):
        """Sets the migration_state_l10n of this ImportPsgroupVolumeInstance.

        Localized message string corresponding to migration_state  # noqa: E501

        :param migration_state_l10n: The migration_state_l10n of this ImportPsgroupVolumeInstance.  # noqa: E501
        :type: str
        """

        self._migration_state_l10n = migration_state_l10n

    @property
    def importable_criteria_l10n(self):
        """Gets the importable_criteria_l10n of this ImportPsgroupVolumeInstance.  # noqa: E501

        Localized message string corresponding to importable_criteria  # noqa: E501

        :return: The importable_criteria_l10n of this ImportPsgroupVolumeInstance.  # noqa: E501
        :rtype: str
        """
        return self._importable_criteria_l10n

    @importable_criteria_l10n.setter
    def importable_criteria_l10n(self, importable_criteria_l10n):
        """Sets the importable_criteria_l10n of this ImportPsgroupVolumeInstance.

        Localized message string corresponding to importable_criteria  # noqa: E501

        :param importable_criteria_l10n: The importable_criteria_l10n of this ImportPsgroupVolumeInstance.  # noqa: E501
        :type: str
        """

        self._importable_criteria_l10n = importable_criteria_l10n

    @property
    def import_psgroup(self):
        """Gets the import_psgroup of this ImportPsgroupVolumeInstance.  # noqa: E501

        This is the embeddable reference form of import_psgroup_id attribute.  # noqa: E501

        :return: The import_psgroup of this ImportPsgroupVolumeInstance.  # noqa: E501
        :rtype: ImportPsgroupInstance
        """
        return self._import_psgroup

    @import_psgroup.setter
    def import_psgroup(self, import_psgroup):
        """Sets the import_psgroup of this ImportPsgroupVolumeInstance.

        This is the embeddable reference form of import_psgroup_id attribute.  # noqa: E501

        :param import_psgroup: The import_psgroup of this ImportPsgroupVolumeInstance.  # noqa: E501
        :type: ImportPsgroupInstance
        """

        self._import_psgroup = import_psgroup

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImportPsgroupVolumeInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportPsgroupVolumeInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImportPsgroupVolumeInstance):
            return True

        return self.to_dict() != other.to_dict()
