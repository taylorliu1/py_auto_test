# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class ReplicationRuleModify(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'rpo': 'RPOEnum',
        'remote_system_id': 'str',
        'alert_threshold': 'int'
    }

    attribute_map = {
        'name': 'name',
        'rpo': 'rpo',
        'remote_system_id': 'remote_system_id',
        'alert_threshold': 'alert_threshold'
    }

    def __init__(self, name=None, rpo=None, remote_system_id=None, alert_threshold=None, _configuration=None):  # noqa: E501
        """ReplicationRuleModify - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._rpo = None
        self._remote_system_id = None
        self._alert_threshold = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if rpo is not None:
            self.rpo = rpo
        if remote_system_id is not None:
            self.remote_system_id = remote_system_id
        if alert_threshold is not None:
            self.alert_threshold = alert_threshold

    @property
    def name(self):
        """Gets the name of this ReplicationRuleModify.  # noqa: E501

        Name of the replication rule.  # noqa: E501

        :return: The name of this ReplicationRuleModify.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReplicationRuleModify.

        Name of the replication rule.  # noqa: E501

        :param name: The name of this ReplicationRuleModify.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 128):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def rpo(self):
        """Gets the rpo of this ReplicationRuleModify.  # noqa: E501


        :return: The rpo of this ReplicationRuleModify.  # noqa: E501
        :rtype: RPOEnum
        """
        return self._rpo

    @rpo.setter
    def rpo(self, rpo):
        """Sets the rpo of this ReplicationRuleModify.


        :param rpo: The rpo of this ReplicationRuleModify.  # noqa: E501
        :type: RPOEnum
        """

        self._rpo = rpo

    @property
    def remote_system_id(self):
        """Gets the remote_system_id of this ReplicationRuleModify.  # noqa: E501

        Unique identifier of the remote system to which this replication rule will replicate the associated storage resources.  name:{name} can be used instead of {id}. For example:'remote_system_id':'name:remote_system_name'  # noqa: E501

        :return: The remote_system_id of this ReplicationRuleModify.  # noqa: E501
        :rtype: str
        """
        return self._remote_system_id

    @remote_system_id.setter
    def remote_system_id(self, remote_system_id):
        """Sets the remote_system_id of this ReplicationRuleModify.

        Unique identifier of the remote system to which this replication rule will replicate the associated storage resources.  name:{name} can be used instead of {id}. For example:'remote_system_id':'name:remote_system_name'  # noqa: E501

        :param remote_system_id: The remote_system_id of this ReplicationRuleModify.  # noqa: E501
        :type: str
        """

        self._remote_system_id = remote_system_id

    @property
    def alert_threshold(self):
        """Gets the alert_threshold of this ReplicationRuleModify.  # noqa: E501

        Number of minutes the system will wait before generating a compliance alert when a replication session does not meet the RPO.   # noqa: E501

        :return: The alert_threshold of this ReplicationRuleModify.  # noqa: E501
        :rtype: int
        """
        return self._alert_threshold

    @alert_threshold.setter
    def alert_threshold(self, alert_threshold):
        """Sets the alert_threshold of this ReplicationRuleModify.

        Number of minutes the system will wait before generating a compliance alert when a replication session does not meet the RPO.   # noqa: E501

        :param alert_threshold: The alert_threshold of this ReplicationRuleModify.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                alert_threshold is not None and alert_threshold > 1440):  # noqa: E501
            raise ValueError("Invalid value for `alert_threshold`, must be a value less than or equal to `1440`")  # noqa: E501
        if (self._configuration.client_side_validation and
                alert_threshold is not None and alert_threshold < 0):  # noqa: E501
            raise ValueError("Invalid value for `alert_threshold`, must be a value greater than or equal to `0`")  # noqa: E501

        self._alert_threshold = alert_threshold

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReplicationRuleModify, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReplicationRuleModify):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReplicationRuleModify):
            return True

        return self.to_dict() != other.to_dict()
