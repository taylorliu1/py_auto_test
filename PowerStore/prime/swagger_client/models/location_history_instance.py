# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class LocationHistoryInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'from_appliance_id': 'str',
        'to_appliance_id': 'str',
        'reason': 'LocationHistoryReasonEnum',
        'migrated_on': 'datetime',
        'reason_l10n': 'str'
    }

    attribute_map = {
        'from_appliance_id': 'from_appliance_id',
        'to_appliance_id': 'to_appliance_id',
        'reason': 'reason',
        'migrated_on': 'migrated_on',
        'reason_l10n': 'reason_l10n'
    }

    def __init__(self, from_appliance_id=None, to_appliance_id=None, reason=None, migrated_on=None, reason_l10n=None, _configuration=None):  # noqa: E501
        """LocationHistoryInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._from_appliance_id = None
        self._to_appliance_id = None
        self._reason = None
        self._migrated_on = None
        self._reason_l10n = None
        self.discriminator = None

        if from_appliance_id is not None:
            self.from_appliance_id = from_appliance_id
        if to_appliance_id is not None:
            self.to_appliance_id = to_appliance_id
        if reason is not None:
            self.reason = reason
        if migrated_on is not None:
            self.migrated_on = migrated_on
        if reason_l10n is not None:
            self.reason_l10n = reason_l10n

    @property
    def from_appliance_id(self):
        """Gets the from_appliance_id of this LocationHistoryInstance.  # noqa: E501

        Unique identifier of the appliance from which the volume was relocated.  # noqa: E501

        :return: The from_appliance_id of this LocationHistoryInstance.  # noqa: E501
        :rtype: str
        """
        return self._from_appliance_id

    @from_appliance_id.setter
    def from_appliance_id(self, from_appliance_id):
        """Sets the from_appliance_id of this LocationHistoryInstance.

        Unique identifier of the appliance from which the volume was relocated.  # noqa: E501

        :param from_appliance_id: The from_appliance_id of this LocationHistoryInstance.  # noqa: E501
        :type: str
        """

        self._from_appliance_id = from_appliance_id

    @property
    def to_appliance_id(self):
        """Gets the to_appliance_id of this LocationHistoryInstance.  # noqa: E501

        Unique identifier of the appliance to which the volume was relocated.  # noqa: E501

        :return: The to_appliance_id of this LocationHistoryInstance.  # noqa: E501
        :rtype: str
        """
        return self._to_appliance_id

    @to_appliance_id.setter
    def to_appliance_id(self, to_appliance_id):
        """Sets the to_appliance_id of this LocationHistoryInstance.

        Unique identifier of the appliance to which the volume was relocated.  # noqa: E501

        :param to_appliance_id: The to_appliance_id of this LocationHistoryInstance.  # noqa: E501
        :type: str
        """

        self._to_appliance_id = to_appliance_id

    @property
    def reason(self):
        """Gets the reason of this LocationHistoryInstance.  # noqa: E501


        :return: The reason of this LocationHistoryInstance.  # noqa: E501
        :rtype: LocationHistoryReasonEnum
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this LocationHistoryInstance.


        :param reason: The reason of this LocationHistoryInstance.  # noqa: E501
        :type: LocationHistoryReasonEnum
        """

        self._reason = reason

    @property
    def migrated_on(self):
        """Gets the migrated_on of this LocationHistoryInstance.  # noqa: E501

        Time when the storage resource location changed.  # noqa: E501

        :return: The migrated_on of this LocationHistoryInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._migrated_on

    @migrated_on.setter
    def migrated_on(self, migrated_on):
        """Sets the migrated_on of this LocationHistoryInstance.

        Time when the storage resource location changed.  # noqa: E501

        :param migrated_on: The migrated_on of this LocationHistoryInstance.  # noqa: E501
        :type: datetime
        """

        self._migrated_on = migrated_on

    @property
    def reason_l10n(self):
        """Gets the reason_l10n of this LocationHistoryInstance.  # noqa: E501

        Localized message string corresponding to reason  # noqa: E501

        :return: The reason_l10n of this LocationHistoryInstance.  # noqa: E501
        :rtype: str
        """
        return self._reason_l10n

    @reason_l10n.setter
    def reason_l10n(self, reason_l10n):
        """Sets the reason_l10n of this LocationHistoryInstance.

        Localized message string corresponding to reason  # noqa: E501

        :param reason_l10n: The reason_l10n of this LocationHistoryInstance.  # noqa: E501
        :type: str
        """

        self._reason_l10n = reason_l10n

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LocationHistoryInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LocationHistoryInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LocationHistoryInstance):
            return True

        return self.to_dict() != other.to_dict()
