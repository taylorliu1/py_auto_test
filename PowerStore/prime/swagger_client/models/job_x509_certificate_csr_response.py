# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class JobX509CertificateCsrResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'type': 'X509CertificateUsageTypeEnum',
        'service': 'X509CertificateServiceEnum',
        'scope': 'str',
        'is_current': 'bool',
        'is_valid': 'bool',
        'members': 'list[MemberCertificateInstance]',
        'certificate_request': 'str',
        'type_l10n': 'str',
        'service_l10n': 'str'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'service': 'service',
        'scope': 'scope',
        'is_current': 'is_current',
        'is_valid': 'is_valid',
        'members': 'members',
        'certificate_request': 'certificate_request',
        'type_l10n': 'type_l10n',
        'service_l10n': 'service_l10n'
    }

    def __init__(self, id=None, type=None, service=None, scope=None, is_current=None, is_valid=None, members=None, certificate_request=None, type_l10n=None, service_l10n=None, _configuration=None):  # noqa: E501
        """JobX509CertificateCsrResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._type = None
        self._service = None
        self._scope = None
        self._is_current = None
        self._is_valid = None
        self._members = None
        self._certificate_request = None
        self._type_l10n = None
        self._service_l10n = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if service is not None:
            self.service = service
        if scope is not None:
            self.scope = scope
        if is_current is not None:
            self.is_current = is_current
        if is_valid is not None:
            self.is_valid = is_valid
        if members is not None:
            self.members = members
        if certificate_request is not None:
            self.certificate_request = certificate_request
        if type_l10n is not None:
            self.type_l10n = type_l10n
        if service_l10n is not None:
            self.service_l10n = service_l10n

    @property
    def id(self):
        """Gets the id of this JobX509CertificateCsrResponse.  # noqa: E501

        Unique ID of x509_certificate.  # noqa: E501

        :return: The id of this JobX509CertificateCsrResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JobX509CertificateCsrResponse.

        Unique ID of x509_certificate.  # noqa: E501

        :param id: The id of this JobX509CertificateCsrResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this JobX509CertificateCsrResponse.  # noqa: E501


        :return: The type of this JobX509CertificateCsrResponse.  # noqa: E501
        :rtype: X509CertificateUsageTypeEnum
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this JobX509CertificateCsrResponse.


        :param type: The type of this JobX509CertificateCsrResponse.  # noqa: E501
        :type: X509CertificateUsageTypeEnum
        """

        self._type = type

    @property
    def service(self):
        """Gets the service of this JobX509CertificateCsrResponse.  # noqa: E501


        :return: The service of this JobX509CertificateCsrResponse.  # noqa: E501
        :rtype: X509CertificateServiceEnum
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this JobX509CertificateCsrResponse.


        :param service: The service of this JobX509CertificateCsrResponse.  # noqa: E501
        :type: X509CertificateServiceEnum
        """

        self._service = service

    @property
    def scope(self):
        """Gets the scope of this JobX509CertificateCsrResponse.  # noqa: E501

        Scope defines a subset of certificates belonging to one service. Scope here defines what Certificate Signing Request (CSR) can be generated. The scope for CSR Response only includes: - Certificate with Service Management_HTTP and Type of Server, Scope value can only be External - Certificate with Service VASA_HTTP and Type of Server, Scope value can be null(unused and optional) - Certificate with Service KMIP_HTTP and Type of Client, Scope value can be null(unused and optional) - Certificate with Service Syslog_HTTP and Type of Client, Scope value can be null(unused and optional)   # noqa: E501

        :return: The scope of this JobX509CertificateCsrResponse.  # noqa: E501
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this JobX509CertificateCsrResponse.

        Scope defines a subset of certificates belonging to one service. Scope here defines what Certificate Signing Request (CSR) can be generated. The scope for CSR Response only includes: - Certificate with Service Management_HTTP and Type of Server, Scope value can only be External - Certificate with Service VASA_HTTP and Type of Server, Scope value can be null(unused and optional) - Certificate with Service KMIP_HTTP and Type of Client, Scope value can be null(unused and optional) - Certificate with Service Syslog_HTTP and Type of Client, Scope value can be null(unused and optional)   # noqa: E501

        :param scope: The scope of this JobX509CertificateCsrResponse.  # noqa: E501
        :type: str
        """

        self._scope = scope

    @property
    def is_current(self):
        """Gets the is_current of this JobX509CertificateCsrResponse.  # noqa: E501

        Indicates whether this is the current X509 certificate to be used by the service or this X509 certificate will be used in the future. When is_current is false for a X509 Certificate, this X509 Certificate will not be picked up by the service. Potential usage of this attribute is to prepare for the certificate roll-over/rotation.  # noqa: E501

        :return: The is_current of this JobX509CertificateCsrResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_current

    @is_current.setter
    def is_current(self, is_current):
        """Sets the is_current of this JobX509CertificateCsrResponse.

        Indicates whether this is the current X509 certificate to be used by the service or this X509 certificate will be used in the future. When is_current is false for a X509 Certificate, this X509 Certificate will not be picked up by the service. Potential usage of this attribute is to prepare for the certificate roll-over/rotation.  # noqa: E501

        :param is_current: The is_current of this JobX509CertificateCsrResponse.  # noqa: E501
        :type: bool
        """

        self._is_current = is_current

    @property
    def is_valid(self):
        """Gets the is_valid of this JobX509CertificateCsrResponse.  # noqa: E501

        Indicate whether this is a valid X509 Certificate. When X509 certificate is expired or X509 Certificate of server type missing either a private key or a valid certificate entry, it will be false.  # noqa: E501

        :return: The is_valid of this JobX509CertificateCsrResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_valid

    @is_valid.setter
    def is_valid(self, is_valid):
        """Sets the is_valid of this JobX509CertificateCsrResponse.

        Indicate whether this is a valid X509 Certificate. When X509 certificate is expired or X509 Certificate of server type missing either a private key or a valid certificate entry, it will be false.  # noqa: E501

        :param is_valid: The is_valid of this JobX509CertificateCsrResponse.  # noqa: E501
        :type: bool
        """

        self._is_valid = is_valid

    @property
    def members(self):
        """Gets the members of this JobX509CertificateCsrResponse.  # noqa: E501

        Member certificates included in this x509_certificate. It will be empty in csr creation response.  # noqa: E501

        :return: The members of this JobX509CertificateCsrResponse.  # noqa: E501
        :rtype: list[MemberCertificateInstance]
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this JobX509CertificateCsrResponse.

        Member certificates included in this x509_certificate. It will be empty in csr creation response.  # noqa: E501

        :param members: The members of this JobX509CertificateCsrResponse.  # noqa: E501
        :type: list[MemberCertificateInstance]
        """

        self._members = members

    @property
    def certificate_request(self):
        """Gets the certificate_request of this JobX509CertificateCsrResponse.  # noqa: E501

        PEM encoded certificate signing request.  # noqa: E501

        :return: The certificate_request of this JobX509CertificateCsrResponse.  # noqa: E501
        :rtype: str
        """
        return self._certificate_request

    @certificate_request.setter
    def certificate_request(self, certificate_request):
        """Sets the certificate_request of this JobX509CertificateCsrResponse.

        PEM encoded certificate signing request.  # noqa: E501

        :param certificate_request: The certificate_request of this JobX509CertificateCsrResponse.  # noqa: E501
        :type: str
        """

        self._certificate_request = certificate_request

    @property
    def type_l10n(self):
        """Gets the type_l10n of this JobX509CertificateCsrResponse.  # noqa: E501

        Localized message string corresponding to type Was added in version 2.0.0.0.  # noqa: E501

        :return: The type_l10n of this JobX509CertificateCsrResponse.  # noqa: E501
        :rtype: str
        """
        return self._type_l10n

    @type_l10n.setter
    def type_l10n(self, type_l10n):
        """Sets the type_l10n of this JobX509CertificateCsrResponse.

        Localized message string corresponding to type Was added in version 2.0.0.0.  # noqa: E501

        :param type_l10n: The type_l10n of this JobX509CertificateCsrResponse.  # noqa: E501
        :type: str
        """

        self._type_l10n = type_l10n

    @property
    def service_l10n(self):
        """Gets the service_l10n of this JobX509CertificateCsrResponse.  # noqa: E501

        Localized message string corresponding to service Was added in version 2.0.0.0.  # noqa: E501

        :return: The service_l10n of this JobX509CertificateCsrResponse.  # noqa: E501
        :rtype: str
        """
        return self._service_l10n

    @service_l10n.setter
    def service_l10n(self, service_l10n):
        """Sets the service_l10n of this JobX509CertificateCsrResponse.

        Localized message string corresponding to service Was added in version 2.0.0.0.  # noqa: E501

        :param service_l10n: The service_l10n of this JobX509CertificateCsrResponse.  # noqa: E501
        :type: str
        """

        self._service_l10n = service_l10n

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobX509CertificateCsrResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobX509CertificateCsrResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JobX509CertificateCsrResponse):
            return True

        return self.to_dict() != other.to_dict()
