# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class ConsistencyGroupMemberHostGroupMapping(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'volume_wwn': 'str',
        'host_group_ids': 'list[str]'
    }

    attribute_map = {
        'volume_wwn': 'volume_wwn',
        'host_group_ids': 'host_group_ids'
    }

    def __init__(self, volume_wwn=None, host_group_ids=None, _configuration=None):  # noqa: E501
        """ConsistencyGroupMemberHostGroupMapping - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._volume_wwn = None
        self._host_group_ids = None
        self.discriminator = None

        if volume_wwn is not None:
            self.volume_wwn = volume_wwn
        if host_group_ids is not None:
            self.host_group_ids = host_group_ids

    @property
    def volume_wwn(self):
        """Gets the volume_wwn of this ConsistencyGroupMemberHostGroupMapping.  # noqa: E501

        WWN of the source consistency group member volume.  # noqa: E501

        :return: The volume_wwn of this ConsistencyGroupMemberHostGroupMapping.  # noqa: E501
        :rtype: str
        """
        return self._volume_wwn

    @volume_wwn.setter
    def volume_wwn(self, volume_wwn):
        """Sets the volume_wwn of this ConsistencyGroupMemberHostGroupMapping.

        WWN of the source consistency group member volume.  # noqa: E501

        :param volume_wwn: The volume_wwn of this ConsistencyGroupMemberHostGroupMapping.  # noqa: E501
        :type: str
        """

        self._volume_wwn = volume_wwn

    @property
    def host_group_ids(self):
        """Gets the host_group_ids of this ConsistencyGroupMemberHostGroupMapping.  # noqa: E501

        Unique identifiers of the host groups that map to the destination volume group member volume for an agentless import session.  # noqa: E501

        :return: The host_group_ids of this ConsistencyGroupMemberHostGroupMapping.  # noqa: E501
        :rtype: list[str]
        """
        return self._host_group_ids

    @host_group_ids.setter
    def host_group_ids(self, host_group_ids):
        """Sets the host_group_ids of this ConsistencyGroupMemberHostGroupMapping.

        Unique identifiers of the host groups that map to the destination volume group member volume for an agentless import session.  # noqa: E501

        :param host_group_ids: The host_group_ids of this ConsistencyGroupMemberHostGroupMapping.  # noqa: E501
        :type: list[str]
        """

        self._host_group_ids = host_group_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConsistencyGroupMemberHostGroupMapping, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConsistencyGroupMemberHostGroupMapping):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConsistencyGroupMemberHostGroupMapping):
            return True

        return self.to_dict() != other.to_dict()
