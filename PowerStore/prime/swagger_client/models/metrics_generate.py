# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class MetricsGenerate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entity': 'MetricsEntityEnum',
        'entity_id': 'str',
        'interval': 'MetricsIntervalEnum'
    }

    attribute_map = {
        'entity': 'entity',
        'entity_id': 'entity_id',
        'interval': 'interval'
    }

    def __init__(self, entity=None, entity_id=None, interval=None, _configuration=None):  # noqa: E501
        """MetricsGenerate - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._entity = None
        self._entity_id = None
        self._interval = None
        self.discriminator = None

        self.entity = entity
        self.entity_id = entity_id
        if interval is not None:
            self.interval = interval

    @property
    def entity(self):
        """Gets the entity of this MetricsGenerate.  # noqa: E501


        :return: The entity of this MetricsGenerate.  # noqa: E501
        :rtype: MetricsEntityEnum
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this MetricsGenerate.


        :param entity: The entity of this MetricsGenerate.  # noqa: E501
        :type: MetricsEntityEnum
        """
        if self._configuration.client_side_validation and entity is None:
            raise ValueError("Invalid value for `entity`, must not be `None`")  # noqa: E501

        self._entity = entity

    @property
    def entity_id(self):
        """Gets the entity_id of this MetricsGenerate.  # noqa: E501

        Identifier for specific entity.  # noqa: E501

        :return: The entity_id of this MetricsGenerate.  # noqa: E501
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this MetricsGenerate.

        Identifier for specific entity.  # noqa: E501

        :param entity_id: The entity_id of this MetricsGenerate.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and entity_id is None:
            raise ValueError("Invalid value for `entity_id`, must not be `None`")  # noqa: E501

        self._entity_id = entity_id

    @property
    def interval(self):
        """Gets the interval of this MetricsGenerate.  # noqa: E501


        :return: The interval of this MetricsGenerate.  # noqa: E501
        :rtype: MetricsIntervalEnum
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this MetricsGenerate.


        :param interval: The interval of this MetricsGenerate.  # noqa: E501
        :type: MetricsIntervalEnum
        """

        self._interval = interval

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetricsGenerate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetricsGenerate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MetricsGenerate):
            return True

        return self.to_dict() != other.to_dict()
