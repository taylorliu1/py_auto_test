# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class BaseSpaceMetricsByVmRollup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vm_id': 'str',
        'timestamp': 'datetime',
        'last_logical_provisioned': 'int',
        'last_logical_used': 'int',
        'last_unique_physical_used': 'int',
        'last_snap_clone_logical_used': 'int',
        'last_thin_savings': 'float',
        'last_snapshot_savings': 'float',
        'max_logical_provisioned': 'int',
        'max_logical_used': 'int',
        'max_unique_physical_used': 'int',
        'max_snap_clone_logical_used': 'int',
        'max_thin_savings': 'float',
        'max_snapshot_savings': 'float',
        'repeat_count': 'int'
    }

    attribute_map = {
        'vm_id': 'vm_id',
        'timestamp': 'timestamp',
        'last_logical_provisioned': 'last_logical_provisioned',
        'last_logical_used': 'last_logical_used',
        'last_unique_physical_used': 'last_unique_physical_used',
        'last_snap_clone_logical_used': 'last_snap_clone_logical_used',
        'last_thin_savings': 'last_thin_savings',
        'last_snapshot_savings': 'last_snapshot_savings',
        'max_logical_provisioned': 'max_logical_provisioned',
        'max_logical_used': 'max_logical_used',
        'max_unique_physical_used': 'max_unique_physical_used',
        'max_snap_clone_logical_used': 'max_snap_clone_logical_used',
        'max_thin_savings': 'max_thin_savings',
        'max_snapshot_savings': 'max_snapshot_savings',
        'repeat_count': 'repeat_count'
    }

    def __init__(self, vm_id=None, timestamp=None, last_logical_provisioned=None, last_logical_used=None, last_unique_physical_used=None, last_snap_clone_logical_used=None, last_thin_savings=None, last_snapshot_savings=None, max_logical_provisioned=None, max_logical_used=None, max_unique_physical_used=None, max_snap_clone_logical_used=None, max_thin_savings=None, max_snapshot_savings=None, repeat_count=None, _configuration=None):  # noqa: E501
        """BaseSpaceMetricsByVmRollup - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._vm_id = None
        self._timestamp = None
        self._last_logical_provisioned = None
        self._last_logical_used = None
        self._last_unique_physical_used = None
        self._last_snap_clone_logical_used = None
        self._last_thin_savings = None
        self._last_snapshot_savings = None
        self._max_logical_provisioned = None
        self._max_logical_used = None
        self._max_unique_physical_used = None
        self._max_snap_clone_logical_used = None
        self._max_thin_savings = None
        self._max_snapshot_savings = None
        self._repeat_count = None
        self.discriminator = None

        if vm_id is not None:
            self.vm_id = vm_id
        if timestamp is not None:
            self.timestamp = timestamp
        if last_logical_provisioned is not None:
            self.last_logical_provisioned = last_logical_provisioned
        if last_logical_used is not None:
            self.last_logical_used = last_logical_used
        if last_unique_physical_used is not None:
            self.last_unique_physical_used = last_unique_physical_used
        if last_snap_clone_logical_used is not None:
            self.last_snap_clone_logical_used = last_snap_clone_logical_used
        if last_thin_savings is not None:
            self.last_thin_savings = last_thin_savings
        if last_snapshot_savings is not None:
            self.last_snapshot_savings = last_snapshot_savings
        if max_logical_provisioned is not None:
            self.max_logical_provisioned = max_logical_provisioned
        if max_logical_used is not None:
            self.max_logical_used = max_logical_used
        if max_unique_physical_used is not None:
            self.max_unique_physical_used = max_unique_physical_used
        if max_snap_clone_logical_used is not None:
            self.max_snap_clone_logical_used = max_snap_clone_logical_used
        if max_thin_savings is not None:
            self.max_thin_savings = max_thin_savings
        if max_snapshot_savings is not None:
            self.max_snapshot_savings = max_snapshot_savings
        if repeat_count is not None:
            self.repeat_count = repeat_count

    @property
    def vm_id(self):
        """Gets the vm_id of this BaseSpaceMetricsByVmRollup.  # noqa: E501

        Unique identifier representing a specific virtual machine.  # noqa: E501

        :return: The vm_id of this BaseSpaceMetricsByVmRollup.  # noqa: E501
        :rtype: str
        """
        return self._vm_id

    @vm_id.setter
    def vm_id(self, vm_id):
        """Sets the vm_id of this BaseSpaceMetricsByVmRollup.

        Unique identifier representing a specific virtual machine.  # noqa: E501

        :param vm_id: The vm_id of this BaseSpaceMetricsByVmRollup.  # noqa: E501
        :type: str
        """

        self._vm_id = vm_id

    @property
    def timestamp(self):
        """Gets the timestamp of this BaseSpaceMetricsByVmRollup.  # noqa: E501

        End of sample period.  # noqa: E501

        :return: The timestamp of this BaseSpaceMetricsByVmRollup.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this BaseSpaceMetricsByVmRollup.

        End of sample period.  # noqa: E501

        :param timestamp: The timestamp of this BaseSpaceMetricsByVmRollup.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def last_logical_provisioned(self):
        """Gets the last_logical_provisioned of this BaseSpaceMetricsByVmRollup.  # noqa: E501

        Last logical provisioned space during the period.  # noqa: E501

        :return: The last_logical_provisioned of this BaseSpaceMetricsByVmRollup.  # noqa: E501
        :rtype: int
        """
        return self._last_logical_provisioned

    @last_logical_provisioned.setter
    def last_logical_provisioned(self, last_logical_provisioned):
        """Sets the last_logical_provisioned of this BaseSpaceMetricsByVmRollup.

        Last logical provisioned space during the period.  # noqa: E501

        :param last_logical_provisioned: The last_logical_provisioned of this BaseSpaceMetricsByVmRollup.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                last_logical_provisioned is not None and last_logical_provisioned > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `last_logical_provisioned`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                last_logical_provisioned is not None and last_logical_provisioned < 0):  # noqa: E501
            raise ValueError("Invalid value for `last_logical_provisioned`, must be a value greater than or equal to `0`")  # noqa: E501

        self._last_logical_provisioned = last_logical_provisioned

    @property
    def last_logical_used(self):
        """Gets the last_logical_used of this BaseSpaceMetricsByVmRollup.  # noqa: E501

        Last logical used space during the period.  # noqa: E501

        :return: The last_logical_used of this BaseSpaceMetricsByVmRollup.  # noqa: E501
        :rtype: int
        """
        return self._last_logical_used

    @last_logical_used.setter
    def last_logical_used(self, last_logical_used):
        """Sets the last_logical_used of this BaseSpaceMetricsByVmRollup.

        Last logical used space during the period.  # noqa: E501

        :param last_logical_used: The last_logical_used of this BaseSpaceMetricsByVmRollup.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                last_logical_used is not None and last_logical_used > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `last_logical_used`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                last_logical_used is not None and last_logical_used < 0):  # noqa: E501
            raise ValueError("Invalid value for `last_logical_used`, must be a value greater than or equal to `0`")  # noqa: E501

        self._last_logical_used = last_logical_used

    @property
    def last_unique_physical_used(self):
        """Gets the last_unique_physical_used of this BaseSpaceMetricsByVmRollup.  # noqa: E501

        Last unique physical used space during the period.  # noqa: E501

        :return: The last_unique_physical_used of this BaseSpaceMetricsByVmRollup.  # noqa: E501
        :rtype: int
        """
        return self._last_unique_physical_used

    @last_unique_physical_used.setter
    def last_unique_physical_used(self, last_unique_physical_used):
        """Sets the last_unique_physical_used of this BaseSpaceMetricsByVmRollup.

        Last unique physical used space during the period.  # noqa: E501

        :param last_unique_physical_used: The last_unique_physical_used of this BaseSpaceMetricsByVmRollup.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                last_unique_physical_used is not None and last_unique_physical_used > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `last_unique_physical_used`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                last_unique_physical_used is not None and last_unique_physical_used < 0):  # noqa: E501
            raise ValueError("Invalid value for `last_unique_physical_used`, must be a value greater than or equal to `0`")  # noqa: E501

        self._last_unique_physical_used = last_unique_physical_used

    @property
    def last_snap_clone_logical_used(self):
        """Gets the last_snap_clone_logical_used of this BaseSpaceMetricsByVmRollup.  # noqa: E501

        Last snap and clone logical used space during the period.  # noqa: E501

        :return: The last_snap_clone_logical_used of this BaseSpaceMetricsByVmRollup.  # noqa: E501
        :rtype: int
        """
        return self._last_snap_clone_logical_used

    @last_snap_clone_logical_used.setter
    def last_snap_clone_logical_used(self, last_snap_clone_logical_used):
        """Sets the last_snap_clone_logical_used of this BaseSpaceMetricsByVmRollup.

        Last snap and clone logical used space during the period.  # noqa: E501

        :param last_snap_clone_logical_used: The last_snap_clone_logical_used of this BaseSpaceMetricsByVmRollup.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                last_snap_clone_logical_used is not None and last_snap_clone_logical_used > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `last_snap_clone_logical_used`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                last_snap_clone_logical_used is not None and last_snap_clone_logical_used < 0):  # noqa: E501
            raise ValueError("Invalid value for `last_snap_clone_logical_used`, must be a value greater than or equal to `0`")  # noqa: E501

        self._last_snap_clone_logical_used = last_snap_clone_logical_used

    @property
    def last_thin_savings(self):
        """Gets the last_thin_savings of this BaseSpaceMetricsByVmRollup.  # noqa: E501

        Last thin savings ratio during the period.  # noqa: E501

        :return: The last_thin_savings of this BaseSpaceMetricsByVmRollup.  # noqa: E501
        :rtype: float
        """
        return self._last_thin_savings

    @last_thin_savings.setter
    def last_thin_savings(self, last_thin_savings):
        """Sets the last_thin_savings of this BaseSpaceMetricsByVmRollup.

        Last thin savings ratio during the period.  # noqa: E501

        :param last_thin_savings: The last_thin_savings of this BaseSpaceMetricsByVmRollup.  # noqa: E501
        :type: float
        """

        self._last_thin_savings = last_thin_savings

    @property
    def last_snapshot_savings(self):
        """Gets the last_snapshot_savings of this BaseSpaceMetricsByVmRollup.  # noqa: E501

        Last snapshot savings space during the period.  # noqa: E501

        :return: The last_snapshot_savings of this BaseSpaceMetricsByVmRollup.  # noqa: E501
        :rtype: float
        """
        return self._last_snapshot_savings

    @last_snapshot_savings.setter
    def last_snapshot_savings(self, last_snapshot_savings):
        """Sets the last_snapshot_savings of this BaseSpaceMetricsByVmRollup.

        Last snapshot savings space during the period.  # noqa: E501

        :param last_snapshot_savings: The last_snapshot_savings of this BaseSpaceMetricsByVmRollup.  # noqa: E501
        :type: float
        """

        self._last_snapshot_savings = last_snapshot_savings

    @property
    def max_logical_provisioned(self):
        """Gets the max_logical_provisioned of this BaseSpaceMetricsByVmRollup.  # noqa: E501

        Max logical provisioned space during the period.  # noqa: E501

        :return: The max_logical_provisioned of this BaseSpaceMetricsByVmRollup.  # noqa: E501
        :rtype: int
        """
        return self._max_logical_provisioned

    @max_logical_provisioned.setter
    def max_logical_provisioned(self, max_logical_provisioned):
        """Sets the max_logical_provisioned of this BaseSpaceMetricsByVmRollup.

        Max logical provisioned space during the period.  # noqa: E501

        :param max_logical_provisioned: The max_logical_provisioned of this BaseSpaceMetricsByVmRollup.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                max_logical_provisioned is not None and max_logical_provisioned > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `max_logical_provisioned`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                max_logical_provisioned is not None and max_logical_provisioned < 0):  # noqa: E501
            raise ValueError("Invalid value for `max_logical_provisioned`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_logical_provisioned = max_logical_provisioned

    @property
    def max_logical_used(self):
        """Gets the max_logical_used of this BaseSpaceMetricsByVmRollup.  # noqa: E501

        Max logical used space during the period.  # noqa: E501

        :return: The max_logical_used of this BaseSpaceMetricsByVmRollup.  # noqa: E501
        :rtype: int
        """
        return self._max_logical_used

    @max_logical_used.setter
    def max_logical_used(self, max_logical_used):
        """Sets the max_logical_used of this BaseSpaceMetricsByVmRollup.

        Max logical used space during the period.  # noqa: E501

        :param max_logical_used: The max_logical_used of this BaseSpaceMetricsByVmRollup.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                max_logical_used is not None and max_logical_used > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `max_logical_used`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                max_logical_used is not None and max_logical_used < 0):  # noqa: E501
            raise ValueError("Invalid value for `max_logical_used`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_logical_used = max_logical_used

    @property
    def max_unique_physical_used(self):
        """Gets the max_unique_physical_used of this BaseSpaceMetricsByVmRollup.  # noqa: E501

        Max unique physical used space during the period.  # noqa: E501

        :return: The max_unique_physical_used of this BaseSpaceMetricsByVmRollup.  # noqa: E501
        :rtype: int
        """
        return self._max_unique_physical_used

    @max_unique_physical_used.setter
    def max_unique_physical_used(self, max_unique_physical_used):
        """Sets the max_unique_physical_used of this BaseSpaceMetricsByVmRollup.

        Max unique physical used space during the period.  # noqa: E501

        :param max_unique_physical_used: The max_unique_physical_used of this BaseSpaceMetricsByVmRollup.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                max_unique_physical_used is not None and max_unique_physical_used > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `max_unique_physical_used`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                max_unique_physical_used is not None and max_unique_physical_used < 0):  # noqa: E501
            raise ValueError("Invalid value for `max_unique_physical_used`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_unique_physical_used = max_unique_physical_used

    @property
    def max_snap_clone_logical_used(self):
        """Gets the max_snap_clone_logical_used of this BaseSpaceMetricsByVmRollup.  # noqa: E501

        Max snap and clone logical used space during the period.  # noqa: E501

        :return: The max_snap_clone_logical_used of this BaseSpaceMetricsByVmRollup.  # noqa: E501
        :rtype: int
        """
        return self._max_snap_clone_logical_used

    @max_snap_clone_logical_used.setter
    def max_snap_clone_logical_used(self, max_snap_clone_logical_used):
        """Sets the max_snap_clone_logical_used of this BaseSpaceMetricsByVmRollup.

        Max snap and clone logical used space during the period.  # noqa: E501

        :param max_snap_clone_logical_used: The max_snap_clone_logical_used of this BaseSpaceMetricsByVmRollup.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                max_snap_clone_logical_used is not None and max_snap_clone_logical_used > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `max_snap_clone_logical_used`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                max_snap_clone_logical_used is not None and max_snap_clone_logical_used < 0):  # noqa: E501
            raise ValueError("Invalid value for `max_snap_clone_logical_used`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_snap_clone_logical_used = max_snap_clone_logical_used

    @property
    def max_thin_savings(self):
        """Gets the max_thin_savings of this BaseSpaceMetricsByVmRollup.  # noqa: E501

        Max thin savings ratio during the period.  # noqa: E501

        :return: The max_thin_savings of this BaseSpaceMetricsByVmRollup.  # noqa: E501
        :rtype: float
        """
        return self._max_thin_savings

    @max_thin_savings.setter
    def max_thin_savings(self, max_thin_savings):
        """Sets the max_thin_savings of this BaseSpaceMetricsByVmRollup.

        Max thin savings ratio during the period.  # noqa: E501

        :param max_thin_savings: The max_thin_savings of this BaseSpaceMetricsByVmRollup.  # noqa: E501
        :type: float
        """

        self._max_thin_savings = max_thin_savings

    @property
    def max_snapshot_savings(self):
        """Gets the max_snapshot_savings of this BaseSpaceMetricsByVmRollup.  # noqa: E501

        Max snapshot savings space during the period.  # noqa: E501

        :return: The max_snapshot_savings of this BaseSpaceMetricsByVmRollup.  # noqa: E501
        :rtype: float
        """
        return self._max_snapshot_savings

    @max_snapshot_savings.setter
    def max_snapshot_savings(self, max_snapshot_savings):
        """Sets the max_snapshot_savings of this BaseSpaceMetricsByVmRollup.

        Max snapshot savings space during the period.  # noqa: E501

        :param max_snapshot_savings: The max_snapshot_savings of this BaseSpaceMetricsByVmRollup.  # noqa: E501
        :type: float
        """

        self._max_snapshot_savings = max_snapshot_savings

    @property
    def repeat_count(self):
        """Gets the repeat_count of this BaseSpaceMetricsByVmRollup.  # noqa: E501

        Number of times the metrics are repeated.  # noqa: E501

        :return: The repeat_count of this BaseSpaceMetricsByVmRollup.  # noqa: E501
        :rtype: int
        """
        return self._repeat_count

    @repeat_count.setter
    def repeat_count(self, repeat_count):
        """Sets the repeat_count of this BaseSpaceMetricsByVmRollup.

        Number of times the metrics are repeated.  # noqa: E501

        :param repeat_count: The repeat_count of this BaseSpaceMetricsByVmRollup.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                repeat_count is not None and repeat_count > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `repeat_count`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                repeat_count is not None and repeat_count < 0):  # noqa: E501
            raise ValueError("Invalid value for `repeat_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._repeat_count = repeat_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseSpaceMetricsByVmRollup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseSpaceMetricsByVmRollup):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BaseSpaceMetricsByVmRollup):
            return True

        return self.to_dict() != other.to_dict()
