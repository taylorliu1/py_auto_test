# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class SmbShareCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file_system_id': 'str',
        'path': 'str',
        'name': 'str',
        'description': 'str',
        'is_abe_enabled': 'bool',
        'is_branch_cache_enabled': 'bool',
        'offline_availability': 'SMBShareOfflineAvailabilityEnum',
        'umask': 'str',
        'is_continuous_availability_enabled': 'bool',
        'is_encryption_enabled': 'bool'
    }

    attribute_map = {
        'file_system_id': 'file_system_id',
        'path': 'path',
        'name': 'name',
        'description': 'description',
        'is_abe_enabled': 'is_ABE_enabled',
        'is_branch_cache_enabled': 'is_branch_cache_enabled',
        'offline_availability': 'offline_availability',
        'umask': 'umask',
        'is_continuous_availability_enabled': 'is_continuous_availability_enabled',
        'is_encryption_enabled': 'is_encryption_enabled'
    }

    def __init__(self, file_system_id=None, path=None, name=None, description=None, is_abe_enabled=False, is_branch_cache_enabled=False, offline_availability=None, umask='022', is_continuous_availability_enabled=False, is_encryption_enabled=False, _configuration=None):  # noqa: E501
        """SmbShareCreate - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._file_system_id = None
        self._path = None
        self._name = None
        self._description = None
        self._is_abe_enabled = None
        self._is_branch_cache_enabled = None
        self._offline_availability = None
        self._umask = None
        self._is_continuous_availability_enabled = None
        self._is_encryption_enabled = None
        self.discriminator = None

        self.file_system_id = file_system_id
        self.path = path
        self.name = name
        if description is not None:
            self.description = description
        if is_abe_enabled is not None:
            self.is_abe_enabled = is_abe_enabled
        if is_branch_cache_enabled is not None:
            self.is_branch_cache_enabled = is_branch_cache_enabled
        if offline_availability is not None:
            self.offline_availability = offline_availability
        if umask is not None:
            self.umask = umask
        if is_continuous_availability_enabled is not None:
            self.is_continuous_availability_enabled = is_continuous_availability_enabled
        if is_encryption_enabled is not None:
            self.is_encryption_enabled = is_encryption_enabled

    @property
    def file_system_id(self):
        """Gets the file_system_id of this SmbShareCreate.  # noqa: E501

        Unique identifier of the file system on which the SMB Share will be created. name:{name} can be used instead of {id}. For example:'file_system_id':'name:file_system_name'  # noqa: E501

        :return: The file_system_id of this SmbShareCreate.  # noqa: E501
        :rtype: str
        """
        return self._file_system_id

    @file_system_id.setter
    def file_system_id(self, file_system_id):
        """Sets the file_system_id of this SmbShareCreate.

        Unique identifier of the file system on which the SMB Share will be created. name:{name} can be used instead of {id}. For example:'file_system_id':'name:file_system_name'  # noqa: E501

        :param file_system_id: The file_system_id of this SmbShareCreate.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and file_system_id is None:
            raise ValueError("Invalid value for `file_system_id`, must not be `None`")  # noqa: E501

        self._file_system_id = file_system_id

    @property
    def path(self):
        """Gets the path of this SmbShareCreate.  # noqa: E501

        Local path to the file system or any existing sub-folder of the file system that is shared over the network. This path is relative to the NAS Server and must start with the filesystem's mountpoint path, which is the filesystem name. For example to share the top-level of a filesystem named svr1fs1, which is on the /svr1fs1 mountpoint of the NAS Server, use /svr1fs1 in the path parameter. SMB shares allow you to create multiple network shares for the same local path.   # noqa: E501

        :return: The path of this SmbShareCreate.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this SmbShareCreate.

        Local path to the file system or any existing sub-folder of the file system that is shared over the network. This path is relative to the NAS Server and must start with the filesystem's mountpoint path, which is the filesystem name. For example to share the top-level of a filesystem named svr1fs1, which is on the /svr1fs1 mountpoint of the NAS Server, use /svr1fs1 in the path parameter. SMB shares allow you to create multiple network shares for the same local path.   # noqa: E501

        :param path: The path of this SmbShareCreate.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def name(self):
        """Gets the name of this SmbShareCreate.  # noqa: E501

        SMB share name.  # noqa: E501

        :return: The name of this SmbShareCreate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SmbShareCreate.

        SMB share name.  # noqa: E501

        :param name: The name of this SmbShareCreate.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 80):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `80`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this SmbShareCreate.  # noqa: E501

        SMB share description.  # noqa: E501

        :return: The description of this SmbShareCreate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SmbShareCreate.

        SMB share description.  # noqa: E501

        :param description: The description of this SmbShareCreate.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                description is not None and len(description) > 255):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                description is not None and len(description) < 0):
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")  # noqa: E501

        self._description = description

    @property
    def is_abe_enabled(self):
        """Gets the is_abe_enabled of this SmbShareCreate.  # noqa: E501

        Indicates whether Access-based Enumeration (ABE) is enabled. ABE filters the list of available files and folders on a server to include only those to which the requesting user has access. Values are: - true - ABE is enabled. - false - ABE is disabled.   # noqa: E501

        :return: The is_abe_enabled of this SmbShareCreate.  # noqa: E501
        :rtype: bool
        """
        return self._is_abe_enabled

    @is_abe_enabled.setter
    def is_abe_enabled(self, is_abe_enabled):
        """Sets the is_abe_enabled of this SmbShareCreate.

        Indicates whether Access-based Enumeration (ABE) is enabled. ABE filters the list of available files and folders on a server to include only those to which the requesting user has access. Values are: - true - ABE is enabled. - false - ABE is disabled.   # noqa: E501

        :param is_abe_enabled: The is_abe_enabled of this SmbShareCreate.  # noqa: E501
        :type: bool
        """

        self._is_abe_enabled = is_abe_enabled

    @property
    def is_branch_cache_enabled(self):
        """Gets the is_branch_cache_enabled of this SmbShareCreate.  # noqa: E501

        Indicates whether BranchCace optimization is enabled. BranchCache optimization technology copies content from your main office or hosted cloud content servers and caches the content at branch office locations, allowing client computers at branch offices to access the content locally rather than over the WAN. Values are: - true - BranchCache is enabled. - false - BranchCache is disabled.   # noqa: E501

        :return: The is_branch_cache_enabled of this SmbShareCreate.  # noqa: E501
        :rtype: bool
        """
        return self._is_branch_cache_enabled

    @is_branch_cache_enabled.setter
    def is_branch_cache_enabled(self, is_branch_cache_enabled):
        """Sets the is_branch_cache_enabled of this SmbShareCreate.

        Indicates whether BranchCace optimization is enabled. BranchCache optimization technology copies content from your main office or hosted cloud content servers and caches the content at branch office locations, allowing client computers at branch offices to access the content locally rather than over the WAN. Values are: - true - BranchCache is enabled. - false - BranchCache is disabled.   # noqa: E501

        :param is_branch_cache_enabled: The is_branch_cache_enabled of this SmbShareCreate.  # noqa: E501
        :type: bool
        """

        self._is_branch_cache_enabled = is_branch_cache_enabled

    @property
    def offline_availability(self):
        """Gets the offline_availability of this SmbShareCreate.  # noqa: E501


        :return: The offline_availability of this SmbShareCreate.  # noqa: E501
        :rtype: SMBShareOfflineAvailabilityEnum
        """
        return self._offline_availability

    @offline_availability.setter
    def offline_availability(self, offline_availability):
        """Sets the offline_availability of this SmbShareCreate.


        :param offline_availability: The offline_availability of this SmbShareCreate.  # noqa: E501
        :type: SMBShareOfflineAvailabilityEnum
        """

        self._offline_availability = offline_availability

    @property
    def umask(self):
        """Gets the umask of this SmbShareCreate.  # noqa: E501

        The default UNIX umask for new files created on the Share. If not specified the umask defaults to 022.  # noqa: E501

        :return: The umask of this SmbShareCreate.  # noqa: E501
        :rtype: str
        """
        return self._umask

    @umask.setter
    def umask(self, umask):
        """Sets the umask of this SmbShareCreate.

        The default UNIX umask for new files created on the Share. If not specified the umask defaults to 022.  # noqa: E501

        :param umask: The umask of this SmbShareCreate.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                umask is not None and len(umask) > 3):
            raise ValueError("Invalid value for `umask`, length must be less than or equal to `3`")  # noqa: E501
        if (self._configuration.client_side_validation and
                umask is not None and len(umask) < 3):
            raise ValueError("Invalid value for `umask`, length must be greater than or equal to `3`")  # noqa: E501

        self._umask = umask

    @property
    def is_continuous_availability_enabled(self):
        """Gets the is_continuous_availability_enabled of this SmbShareCreate.  # noqa: E501

        Indicates whether continuous availability for Server Message Block (SMB) 3.0 is enabled for the SMB Share. Values are: - true - Continuous availability for SMB 3.0 is enabled for the SMB Share. - false - Continuous availability for SMB 3.0 is disabled for the SMB Share.   # noqa: E501

        :return: The is_continuous_availability_enabled of this SmbShareCreate.  # noqa: E501
        :rtype: bool
        """
        return self._is_continuous_availability_enabled

    @is_continuous_availability_enabled.setter
    def is_continuous_availability_enabled(self, is_continuous_availability_enabled):
        """Sets the is_continuous_availability_enabled of this SmbShareCreate.

        Indicates whether continuous availability for Server Message Block (SMB) 3.0 is enabled for the SMB Share. Values are: - true - Continuous availability for SMB 3.0 is enabled for the SMB Share. - false - Continuous availability for SMB 3.0 is disabled for the SMB Share.   # noqa: E501

        :param is_continuous_availability_enabled: The is_continuous_availability_enabled of this SmbShareCreate.  # noqa: E501
        :type: bool
        """

        self._is_continuous_availability_enabled = is_continuous_availability_enabled

    @property
    def is_encryption_enabled(self):
        """Gets the is_encryption_enabled of this SmbShareCreate.  # noqa: E501

        Indicates whether encryption for Server Message Block (SMB) 3.0 is enabled at the shared folder level. Values are: - true - encryption for SMB 3.0 is enabled. - false - encryption for SMB 3.0 is disabled.   # noqa: E501

        :return: The is_encryption_enabled of this SmbShareCreate.  # noqa: E501
        :rtype: bool
        """
        return self._is_encryption_enabled

    @is_encryption_enabled.setter
    def is_encryption_enabled(self, is_encryption_enabled):
        """Sets the is_encryption_enabled of this SmbShareCreate.

        Indicates whether encryption for Server Message Block (SMB) 3.0 is enabled at the shared folder level. Values are: - true - encryption for SMB 3.0 is enabled. - false - encryption for SMB 3.0 is disabled.   # noqa: E501

        :param is_encryption_enabled: The is_encryption_enabled of this SmbShareCreate.  # noqa: E501
        :type: bool
        """

        self._is_encryption_enabled = is_encryption_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SmbShareCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SmbShareCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SmbShareCreate):
            return True

        return self.to_dict() != other.to_dict()
