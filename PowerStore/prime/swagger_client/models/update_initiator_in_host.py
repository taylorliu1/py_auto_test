# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class UpdateInitiatorInHost(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'port_name': 'str',
        'chap_single_username': 'str',
        'chap_single_password': 'str',
        'chap_mutual_username': 'str',
        'chap_mutual_password': 'str'
    }

    attribute_map = {
        'port_name': 'port_name',
        'chap_single_username': 'chap_single_username',
        'chap_single_password': 'chap_single_password',
        'chap_mutual_username': 'chap_mutual_username',
        'chap_mutual_password': 'chap_mutual_password'
    }

    def __init__(self, port_name=None, chap_single_username=None, chap_single_password=None, chap_mutual_username=None, chap_mutual_password=None, _configuration=None):  # noqa: E501
        """UpdateInitiatorInHost - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._port_name = None
        self._chap_single_username = None
        self._chap_single_password = None
        self._chap_mutual_username = None
        self._chap_mutual_password = None
        self.discriminator = None

        if port_name is not None:
            self.port_name = port_name
        if chap_single_username is not None:
            self.chap_single_username = chap_single_username
        if chap_single_password is not None:
            self.chap_single_password = chap_single_password
        if chap_mutual_username is not None:
            self.chap_mutual_username = chap_mutual_username
        if chap_mutual_password is not None:
            self.chap_mutual_password = chap_mutual_password

    @property
    def port_name(self):
        """Gets the port_name of this UpdateInitiatorInHost.  # noqa: E501

        Initiator name  # noqa: E501

        :return: The port_name of this UpdateInitiatorInHost.  # noqa: E501
        :rtype: str
        """
        return self._port_name

    @port_name.setter
    def port_name(self, port_name):
        """Sets the port_name of this UpdateInitiatorInHost.

        Initiator name  # noqa: E501

        :param port_name: The port_name of this UpdateInitiatorInHost.  # noqa: E501
        :type: str
        """

        self._port_name = port_name

    @property
    def chap_single_username(self):
        """Gets the chap_single_username of this UpdateInitiatorInHost.  # noqa: E501

        Username for CHAP authentication. This value must be 1 to 64 printable UTF-8 characters. CHAP username is required when the cluster CHAP mode is single authentication.  # noqa: E501

        :return: The chap_single_username of this UpdateInitiatorInHost.  # noqa: E501
        :rtype: str
        """
        return self._chap_single_username

    @chap_single_username.setter
    def chap_single_username(self, chap_single_username):
        """Sets the chap_single_username of this UpdateInitiatorInHost.

        Username for CHAP authentication. This value must be 1 to 64 printable UTF-8 characters. CHAP username is required when the cluster CHAP mode is single authentication.  # noqa: E501

        :param chap_single_username: The chap_single_username of this UpdateInitiatorInHost.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                chap_single_username is not None and len(chap_single_username) > 64):
            raise ValueError("Invalid value for `chap_single_username`, length must be less than or equal to `64`")  # noqa: E501
        if (self._configuration.client_side_validation and
                chap_single_username is not None and len(chap_single_username) < 1):
            raise ValueError("Invalid value for `chap_single_username`, length must be greater than or equal to `1`")  # noqa: E501

        self._chap_single_username = chap_single_username

    @property
    def chap_single_password(self):
        """Gets the chap_single_password of this UpdateInitiatorInHost.  # noqa: E501

        Password for CHAP authentication. This value must be 12 to 64 printable UTF-8 characters. CHAP password is required when the cluster CHAP mode is single authentication.  # noqa: E501

        :return: The chap_single_password of this UpdateInitiatorInHost.  # noqa: E501
        :rtype: str
        """
        return self._chap_single_password

    @chap_single_password.setter
    def chap_single_password(self, chap_single_password):
        """Sets the chap_single_password of this UpdateInitiatorInHost.

        Password for CHAP authentication. This value must be 12 to 64 printable UTF-8 characters. CHAP password is required when the cluster CHAP mode is single authentication.  # noqa: E501

        :param chap_single_password: The chap_single_password of this UpdateInitiatorInHost.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                chap_single_password is not None and len(chap_single_password) > 64):
            raise ValueError("Invalid value for `chap_single_password`, length must be less than or equal to `64`")  # noqa: E501
        if (self._configuration.client_side_validation and
                chap_single_password is not None and len(chap_single_password) < 12):
            raise ValueError("Invalid value for `chap_single_password`, length must be greater than or equal to `12`")  # noqa: E501

        self._chap_single_password = chap_single_password

    @property
    def chap_mutual_username(self):
        """Gets the chap_mutual_username of this UpdateInitiatorInHost.  # noqa: E501

        Username for CHAP authentication. This value must be 1 to 64 printable UTF-8 characters. CHAP username is required when the cluster CHAP mode is mutual authentication.  # noqa: E501

        :return: The chap_mutual_username of this UpdateInitiatorInHost.  # noqa: E501
        :rtype: str
        """
        return self._chap_mutual_username

    @chap_mutual_username.setter
    def chap_mutual_username(self, chap_mutual_username):
        """Sets the chap_mutual_username of this UpdateInitiatorInHost.

        Username for CHAP authentication. This value must be 1 to 64 printable UTF-8 characters. CHAP username is required when the cluster CHAP mode is mutual authentication.  # noqa: E501

        :param chap_mutual_username: The chap_mutual_username of this UpdateInitiatorInHost.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                chap_mutual_username is not None and len(chap_mutual_username) > 64):
            raise ValueError("Invalid value for `chap_mutual_username`, length must be less than or equal to `64`")  # noqa: E501
        if (self._configuration.client_side_validation and
                chap_mutual_username is not None and len(chap_mutual_username) < 1):
            raise ValueError("Invalid value for `chap_mutual_username`, length must be greater than or equal to `1`")  # noqa: E501

        self._chap_mutual_username = chap_mutual_username

    @property
    def chap_mutual_password(self):
        """Gets the chap_mutual_password of this UpdateInitiatorInHost.  # noqa: E501

        Password for CHAP authentication. This value must be 12 to 64 printable UTF-8 characters. CHAP password is required when the cluster CHAP mode is mutual authentication.  # noqa: E501

        :return: The chap_mutual_password of this UpdateInitiatorInHost.  # noqa: E501
        :rtype: str
        """
        return self._chap_mutual_password

    @chap_mutual_password.setter
    def chap_mutual_password(self, chap_mutual_password):
        """Sets the chap_mutual_password of this UpdateInitiatorInHost.

        Password for CHAP authentication. This value must be 12 to 64 printable UTF-8 characters. CHAP password is required when the cluster CHAP mode is mutual authentication.  # noqa: E501

        :param chap_mutual_password: The chap_mutual_password of this UpdateInitiatorInHost.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                chap_mutual_password is not None and len(chap_mutual_password) > 64):
            raise ValueError("Invalid value for `chap_mutual_password`, length must be less than or equal to `64`")  # noqa: E501
        if (self._configuration.client_side_validation and
                chap_mutual_password is not None and len(chap_mutual_password) < 12):
            raise ValueError("Invalid value for `chap_mutual_password`, length must be greater than or equal to `12`")  # noqa: E501

        self._chap_mutual_password = chap_mutual_password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateInitiatorInHost, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateInitiatorInHost):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateInitiatorInHost):
            return True

        return self.to_dict() != other.to_dict()
