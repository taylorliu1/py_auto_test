# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class MetricsArchiveInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'archive_from_timestamp': 'datetime',
        'archive_to_timestamp': 'datetime',
        'size': 'int',
        'downloaded_timestamp': 'datetime',
        'download_uri': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'archive_from_timestamp': 'archive_from_timestamp',
        'archive_to_timestamp': 'archive_to_timestamp',
        'size': 'size',
        'downloaded_timestamp': 'downloaded_timestamp',
        'download_uri': 'download_uri'
    }

    def __init__(self, id=None, name=None, archive_from_timestamp=None, archive_to_timestamp=None, size=None, downloaded_timestamp=None, download_uri=None, _configuration=None):  # noqa: E501
        """MetricsArchiveInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._archive_from_timestamp = None
        self._archive_to_timestamp = None
        self._size = None
        self._downloaded_timestamp = None
        self._download_uri = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if archive_from_timestamp is not None:
            self.archive_from_timestamp = archive_from_timestamp
        if archive_to_timestamp is not None:
            self.archive_to_timestamp = archive_to_timestamp
        if size is not None:
            self.size = size
        if downloaded_timestamp is not None:
            self.downloaded_timestamp = downloaded_timestamp
        if download_uri is not None:
            self.download_uri = download_uri

    @property
    def id(self):
        """Gets the id of this MetricsArchiveInstance.  # noqa: E501

        Unique identifier for this instance.  # noqa: E501

        :return: The id of this MetricsArchiveInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MetricsArchiveInstance.

        Unique identifier for this instance.  # noqa: E501

        :param id: The id of this MetricsArchiveInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this MetricsArchiveInstance.  # noqa: E501

        Archive filename.  This property supports case-insensitive filtering.  # noqa: E501

        :return: The name of this MetricsArchiveInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MetricsArchiveInstance.

        Archive filename.  This property supports case-insensitive filtering.  # noqa: E501

        :param name: The name of this MetricsArchiveInstance.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def archive_from_timestamp(self):
        """Gets the archive_from_timestamp of this MetricsArchiveInstance.  # noqa: E501

        The date and time from which the archive data begins.  # noqa: E501

        :return: The archive_from_timestamp of this MetricsArchiveInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._archive_from_timestamp

    @archive_from_timestamp.setter
    def archive_from_timestamp(self, archive_from_timestamp):
        """Sets the archive_from_timestamp of this MetricsArchiveInstance.

        The date and time from which the archive data begins.  # noqa: E501

        :param archive_from_timestamp: The archive_from_timestamp of this MetricsArchiveInstance.  # noqa: E501
        :type: datetime
        """

        self._archive_from_timestamp = archive_from_timestamp

    @property
    def archive_to_timestamp(self):
        """Gets the archive_to_timestamp of this MetricsArchiveInstance.  # noqa: E501

        The date and time up to which the archive data covers.  # noqa: E501

        :return: The archive_to_timestamp of this MetricsArchiveInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._archive_to_timestamp

    @archive_to_timestamp.setter
    def archive_to_timestamp(self, archive_to_timestamp):
        """Sets the archive_to_timestamp of this MetricsArchiveInstance.

        The date and time up to which the archive data covers.  # noqa: E501

        :param archive_to_timestamp: The archive_to_timestamp of this MetricsArchiveInstance.  # noqa: E501
        :type: datetime
        """

        self._archive_to_timestamp = archive_to_timestamp

    @property
    def size(self):
        """Gets the size of this MetricsArchiveInstance.  # noqa: E501

        The size of the archive in bytes.  # noqa: E501

        :return: The size of this MetricsArchiveInstance.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this MetricsArchiveInstance.

        The size of the archive in bytes.  # noqa: E501

        :param size: The size of this MetricsArchiveInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                size is not None and size > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `size`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                size is not None and size < 0):  # noqa: E501
            raise ValueError("Invalid value for `size`, must be a value greater than or equal to `0`")  # noqa: E501

        self._size = size

    @property
    def downloaded_timestamp(self):
        """Gets the downloaded_timestamp of this MetricsArchiveInstance.  # noqa: E501

        The last date and time that this archive was downloaded.  # noqa: E501

        :return: The downloaded_timestamp of this MetricsArchiveInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._downloaded_timestamp

    @downloaded_timestamp.setter
    def downloaded_timestamp(self, downloaded_timestamp):
        """Sets the downloaded_timestamp of this MetricsArchiveInstance.

        The last date and time that this archive was downloaded.  # noqa: E501

        :param downloaded_timestamp: The downloaded_timestamp of this MetricsArchiveInstance.  # noqa: E501
        :type: datetime
        """

        self._downloaded_timestamp = downloaded_timestamp

    @property
    def download_uri(self):
        """Gets the download_uri of this MetricsArchiveInstance.  # noqa: E501

        The URI to use for downloading the archive.  # noqa: E501

        :return: The download_uri of this MetricsArchiveInstance.  # noqa: E501
        :rtype: str
        """
        return self._download_uri

    @download_uri.setter
    def download_uri(self, download_uri):
        """Sets the download_uri of this MetricsArchiveInstance.

        The URI to use for downloading the archive.  # noqa: E501

        :param download_uri: The download_uri of this MetricsArchiveInstance.  # noqa: E501
        :type: str
        """

        self._download_uri = download_uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetricsArchiveInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetricsArchiveInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MetricsArchiveInstance):
            return True

        return self.to_dict() != other.to_dict()
