# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class IpPurposeTypeEnum(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    MGMT_CLUSTER_FLOATING = "Mgmt_Cluster_Floating"
    MGMT_APPLIANCE_FLOATING = "Mgmt_Appliance_Floating"
    MGMT_NODE_COREOS = "Mgmt_Node_CoreOS"
    MGMT_NODE_HOST = "Mgmt_Node_Host"
    ICM_CLUSTER_FLOATING = "ICM_Cluster_Floating"
    ICM_POSTGRES_FLOATING = "ICM_Postgres_Floating"
    ICM_APPLIANCE_FLOATING = "ICM_Appliance_Floating"
    ICM_CONTROLPATH_FLOATING = "ICM_Controlpath_Floating"
    ICM_NODE_COREOS = "ICM_Node_CoreOS"
    STORAGE_CLUSTER_FLOATING = "Storage_Cluster_Floating"
    STORAGE_ISCSI_INITIATOR = "Storage_Iscsi_Initiator"
    STORAGE_ISCSI_TARGET = "Storage_Iscsi_Target"
    STORAGE_NVME_TCP_PORT = "Storage_NVMe_TCP_Port"
    EXTERNAL_REPLICATION_ISCSI = "External_Replication_Iscsi"
    ICD_NODE = "ICD_Node"
    SDNAS_CLUSTER_FLOATING = "SDNAS_Cluster_Floating"
    SDNAS_NODE = "SDNAS_Node"
    SDNAS_NODE_SERVICEABILITY = "SDNAS_Node_Serviceability"
    FILE_MOBILITY_NODE = "File_Mobility_Node"
    FILE_MOBILITY_FLOATING = "File_Mobility_Floating"
    VMOTION = "VMotion"
    UNUSED = "Unused"
    STORAGE_GLOBAL = "Storage_Global"

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self, _configuration=None):  # noqa: E501
        """IpPurposeTypeEnum - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IpPurposeTypeEnum, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IpPurposeTypeEnum):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IpPurposeTypeEnum):
            return True

        return self.to_dict() != other.to_dict()
