# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class PerformanceRuleInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'io_priority': 'IoPriorityEnum',
        'io_priority_l10n': 'str',
        'policies': 'list[PolicyInstance]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'io_priority': 'io_priority',
        'io_priority_l10n': 'io_priority_l10n',
        'policies': 'policies'
    }

    def __init__(self, id=None, name=None, io_priority=None, io_priority_l10n=None, policies=None, _configuration=None):  # noqa: E501
        """PerformanceRuleInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._io_priority = None
        self._io_priority_l10n = None
        self._policies = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if io_priority is not None:
            self.io_priority = io_priority
        if io_priority_l10n is not None:
            self.io_priority_l10n = io_priority_l10n
        if policies is not None:
            self.policies = policies

    @property
    def id(self):
        """Gets the id of this PerformanceRuleInstance.  # noqa: E501

        Unique identifier representing a performance rule.  # noqa: E501

        :return: The id of this PerformanceRuleInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PerformanceRuleInstance.

        Unique identifier representing a performance rule.  # noqa: E501

        :param id: The id of this PerformanceRuleInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this PerformanceRuleInstance.  # noqa: E501

        Name of the performance rule.  This property supports case-insensitive filtering.  # noqa: E501

        :return: The name of this PerformanceRuleInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PerformanceRuleInstance.

        Name of the performance rule.  This property supports case-insensitive filtering.  # noqa: E501

        :param name: The name of this PerformanceRuleInstance.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def io_priority(self):
        """Gets the io_priority of this PerformanceRuleInstance.  # noqa: E501


        :return: The io_priority of this PerformanceRuleInstance.  # noqa: E501
        :rtype: IoPriorityEnum
        """
        return self._io_priority

    @io_priority.setter
    def io_priority(self, io_priority):
        """Sets the io_priority of this PerformanceRuleInstance.


        :param io_priority: The io_priority of this PerformanceRuleInstance.  # noqa: E501
        :type: IoPriorityEnum
        """

        self._io_priority = io_priority

    @property
    def io_priority_l10n(self):
        """Gets the io_priority_l10n of this PerformanceRuleInstance.  # noqa: E501

        Localized message string corresponding to io_priority  # noqa: E501

        :return: The io_priority_l10n of this PerformanceRuleInstance.  # noqa: E501
        :rtype: str
        """
        return self._io_priority_l10n

    @io_priority_l10n.setter
    def io_priority_l10n(self, io_priority_l10n):
        """Sets the io_priority_l10n of this PerformanceRuleInstance.

        Localized message string corresponding to io_priority  # noqa: E501

        :param io_priority_l10n: The io_priority_l10n of this PerformanceRuleInstance.  # noqa: E501
        :type: str
        """

        self._io_priority_l10n = io_priority_l10n

    @property
    def policies(self):
        """Gets the policies of this PerformanceRuleInstance.  # noqa: E501

        List of the policies that are associated with this performance_rule.  # noqa: E501

        :return: The policies of this PerformanceRuleInstance.  # noqa: E501
        :rtype: list[PolicyInstance]
        """
        return self._policies

    @policies.setter
    def policies(self, policies):
        """Sets the policies of this PerformanceRuleInstance.

        List of the policies that are associated with this performance_rule.  # noqa: E501

        :param policies: The policies of this PerformanceRuleInstance.  # noqa: E501
        :type: list[PolicyInstance]
        """

        self._policies = policies

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PerformanceRuleInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PerformanceRuleInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PerformanceRuleInstance):
            return True

        return self.to_dict() != other.to_dict()
