# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class EthBePortInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'appliance_id': 'str',
        'node_id': 'str',
        'mac_address': 'str',
        'is_link_up': 'bool',
        'speed': 'EthBEPortSpeedEnum',
        'sfp_id': 'str',
        'port_index': 'int',
        'port_connector_type': 'FrontEndPortConnectionTypeEnum',
        'hardware_parent_id': 'str',
        'expected_peer_id': 'str',
        'actual_peer_id': 'str',
        'protocols': 'list[EthBEPortProtocolEnum]',
        'stale_state': 'PortStaleStateEnum',
        'speed_l10n': 'str',
        'port_connector_type_l10n': 'str',
        'protocols_l10n': 'list[str]',
        'stale_state_l10n': 'str',
        'appliance': 'ApplianceInstance',
        'node': 'HardwareInstance',
        'sfp': 'HardwareInstance',
        'hardware_parent': 'HardwareInstance',
        'expected_peer': 'EthBePortInstance',
        'actual_peer': 'EthBePortInstance'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'appliance_id': 'appliance_id',
        'node_id': 'node_id',
        'mac_address': 'mac_address',
        'is_link_up': 'is_link_up',
        'speed': 'speed',
        'sfp_id': 'sfp_id',
        'port_index': 'port_index',
        'port_connector_type': 'port_connector_type',
        'hardware_parent_id': 'hardware_parent_id',
        'expected_peer_id': 'expected_peer_id',
        'actual_peer_id': 'actual_peer_id',
        'protocols': 'protocols',
        'stale_state': 'stale_state',
        'speed_l10n': 'speed_l10n',
        'port_connector_type_l10n': 'port_connector_type_l10n',
        'protocols_l10n': 'protocols_l10n',
        'stale_state_l10n': 'stale_state_l10n',
        'appliance': 'appliance',
        'node': 'node',
        'sfp': 'sfp',
        'hardware_parent': 'hardware_parent',
        'expected_peer': 'expected_peer',
        'actual_peer': 'actual_peer'
    }

    def __init__(self, id=None, name=None, appliance_id=None, node_id=None, mac_address=None, is_link_up=None, speed=None, sfp_id=None, port_index=None, port_connector_type=None, hardware_parent_id=None, expected_peer_id=None, actual_peer_id=None, protocols=None, stale_state=None, speed_l10n=None, port_connector_type_l10n=None, protocols_l10n=None, stale_state_l10n=None, appliance=None, node=None, sfp=None, hardware_parent=None, expected_peer=None, actual_peer=None, _configuration=None):  # noqa: E501
        """EthBePortInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._appliance_id = None
        self._node_id = None
        self._mac_address = None
        self._is_link_up = None
        self._speed = None
        self._sfp_id = None
        self._port_index = None
        self._port_connector_type = None
        self._hardware_parent_id = None
        self._expected_peer_id = None
        self._actual_peer_id = None
        self._protocols = None
        self._stale_state = None
        self._speed_l10n = None
        self._port_connector_type_l10n = None
        self._protocols_l10n = None
        self._stale_state_l10n = None
        self._appliance = None
        self._node = None
        self._sfp = None
        self._hardware_parent = None
        self._expected_peer = None
        self._actual_peer = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if appliance_id is not None:
            self.appliance_id = appliance_id
        if node_id is not None:
            self.node_id = node_id
        if mac_address is not None:
            self.mac_address = mac_address
        if is_link_up is not None:
            self.is_link_up = is_link_up
        if speed is not None:
            self.speed = speed
        if sfp_id is not None:
            self.sfp_id = sfp_id
        if port_index is not None:
            self.port_index = port_index
        if port_connector_type is not None:
            self.port_connector_type = port_connector_type
        if hardware_parent_id is not None:
            self.hardware_parent_id = hardware_parent_id
        if expected_peer_id is not None:
            self.expected_peer_id = expected_peer_id
        if actual_peer_id is not None:
            self.actual_peer_id = actual_peer_id
        if protocols is not None:
            self.protocols = protocols
        if stale_state is not None:
            self.stale_state = stale_state
        if speed_l10n is not None:
            self.speed_l10n = speed_l10n
        if port_connector_type_l10n is not None:
            self.port_connector_type_l10n = port_connector_type_l10n
        if protocols_l10n is not None:
            self.protocols_l10n = protocols_l10n
        if stale_state_l10n is not None:
            self.stale_state_l10n = stale_state_l10n
        if appliance is not None:
            self.appliance = appliance
        if node is not None:
            self.node = node
        if sfp is not None:
            self.sfp = sfp
        if hardware_parent is not None:
            self.hardware_parent = hardware_parent
        if expected_peer is not None:
            self.expected_peer = expected_peer
        if actual_peer is not None:
            self.actual_peer = actual_peer

    @property
    def id(self):
        """Gets the id of this EthBePortInstance.  # noqa: E501

        Unique identifier of the Ethernet Backend port.  # noqa: E501

        :return: The id of this EthBePortInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EthBePortInstance.

        Unique identifier of the Ethernet Backend port.  # noqa: E501

        :param id: The id of this EthBePortInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this EthBePortInstance.  # noqa: E501

        Name of the Ethernet Backend port.  This property supports case-insensitive filtering.  # noqa: E501

        :return: The name of this EthBePortInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EthBePortInstance.

        Name of the Ethernet Backend port.  This property supports case-insensitive filtering.  # noqa: E501

        :param name: The name of this EthBePortInstance.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def appliance_id(self):
        """Gets the appliance_id of this EthBePortInstance.  # noqa: E501

        Unique identifier of the appliance containing the port.  # noqa: E501

        :return: The appliance_id of this EthBePortInstance.  # noqa: E501
        :rtype: str
        """
        return self._appliance_id

    @appliance_id.setter
    def appliance_id(self, appliance_id):
        """Sets the appliance_id of this EthBePortInstance.

        Unique identifier of the appliance containing the port.  # noqa: E501

        :param appliance_id: The appliance_id of this EthBePortInstance.  # noqa: E501
        :type: str
        """

        self._appliance_id = appliance_id

    @property
    def node_id(self):
        """Gets the node_id of this EthBePortInstance.  # noqa: E501

        Unique identifier of the hardware instance of type 'Node' containing the port.  # noqa: E501

        :return: The node_id of this EthBePortInstance.  # noqa: E501
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this EthBePortInstance.

        Unique identifier of the hardware instance of type 'Node' containing the port.  # noqa: E501

        :param node_id: The node_id of this EthBePortInstance.  # noqa: E501
        :type: str
        """

        self._node_id = node_id

    @property
    def mac_address(self):
        """Gets the mac_address of this EthBePortInstance.  # noqa: E501

        The MAC address of the Ethernet Backend port.  # noqa: E501

        :return: The mac_address of this EthBePortInstance.  # noqa: E501
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this EthBePortInstance.

        The MAC address of the Ethernet Backend port.  # noqa: E501

        :param mac_address: The mac_address of this EthBePortInstance.  # noqa: E501
        :type: str
        """

        self._mac_address = mac_address

    @property
    def is_link_up(self):
        """Gets the is_link_up of this EthBePortInstance.  # noqa: E501

        Indicates whether the Ethernet Backend port's link is up. Values are: * true - Link is up. * false - Link is down.   # noqa: E501

        :return: The is_link_up of this EthBePortInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_link_up

    @is_link_up.setter
    def is_link_up(self, is_link_up):
        """Sets the is_link_up of this EthBePortInstance.

        Indicates whether the Ethernet Backend port's link is up. Values are: * true - Link is up. * false - Link is down.   # noqa: E501

        :param is_link_up: The is_link_up of this EthBePortInstance.  # noqa: E501
        :type: bool
        """

        self._is_link_up = is_link_up

    @property
    def speed(self):
        """Gets the speed of this EthBePortInstance.  # noqa: E501


        :return: The speed of this EthBePortInstance.  # noqa: E501
        :rtype: EthBEPortSpeedEnum
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this EthBePortInstance.


        :param speed: The speed of this EthBePortInstance.  # noqa: E501
        :type: EthBEPortSpeedEnum
        """

        self._speed = speed

    @property
    def sfp_id(self):
        """Gets the sfp_id of this EthBePortInstance.  # noqa: E501

        Unique identifier of the hardware instance of type 'SFP' (Small Form-factor Pluggable) inserted into the port.   # noqa: E501

        :return: The sfp_id of this EthBePortInstance.  # noqa: E501
        :rtype: str
        """
        return self._sfp_id

    @sfp_id.setter
    def sfp_id(self, sfp_id):
        """Sets the sfp_id of this EthBePortInstance.

        Unique identifier of the hardware instance of type 'SFP' (Small Form-factor Pluggable) inserted into the port.   # noqa: E501

        :param sfp_id: The sfp_id of this EthBePortInstance.  # noqa: E501
        :type: str
        """

        self._sfp_id = sfp_id

    @property
    def port_index(self):
        """Gets the port_index of this EthBePortInstance.  # noqa: E501

        Index of the Ethernet Backend port in IO module.  # noqa: E501

        :return: The port_index of this EthBePortInstance.  # noqa: E501
        :rtype: int
        """
        return self._port_index

    @port_index.setter
    def port_index(self, port_index):
        """Sets the port_index of this EthBePortInstance.

        Index of the Ethernet Backend port in IO module.  # noqa: E501

        :param port_index: The port_index of this EthBePortInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                port_index is not None and port_index > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `port_index`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                port_index is not None and port_index < 0):  # noqa: E501
            raise ValueError("Invalid value for `port_index`, must be a value greater than or equal to `0`")  # noqa: E501

        self._port_index = port_index

    @property
    def port_connector_type(self):
        """Gets the port_connector_type of this EthBePortInstance.  # noqa: E501


        :return: The port_connector_type of this EthBePortInstance.  # noqa: E501
        :rtype: FrontEndPortConnectionTypeEnum
        """
        return self._port_connector_type

    @port_connector_type.setter
    def port_connector_type(self, port_connector_type):
        """Sets the port_connector_type of this EthBePortInstance.


        :param port_connector_type: The port_connector_type of this EthBePortInstance.  # noqa: E501
        :type: FrontEndPortConnectionTypeEnum
        """

        self._port_connector_type = port_connector_type

    @property
    def hardware_parent_id(self):
        """Gets the hardware_parent_id of this EthBePortInstance.  # noqa: E501

        Unique identifier of the parent hardware instance handling the port.  # noqa: E501

        :return: The hardware_parent_id of this EthBePortInstance.  # noqa: E501
        :rtype: str
        """
        return self._hardware_parent_id

    @hardware_parent_id.setter
    def hardware_parent_id(self, hardware_parent_id):
        """Sets the hardware_parent_id of this EthBePortInstance.

        Unique identifier of the parent hardware instance handling the port.  # noqa: E501

        :param hardware_parent_id: The hardware_parent_id of this EthBePortInstance.  # noqa: E501
        :type: str
        """

        self._hardware_parent_id = hardware_parent_id

    @property
    def expected_peer_id(self):
        """Gets the expected_peer_id of this EthBePortInstance.  # noqa: E501

        Unique identifier of the backend ethernet port which is expected to be connected to this one.   # noqa: E501

        :return: The expected_peer_id of this EthBePortInstance.  # noqa: E501
        :rtype: str
        """
        return self._expected_peer_id

    @expected_peer_id.setter
    def expected_peer_id(self, expected_peer_id):
        """Sets the expected_peer_id of this EthBePortInstance.

        Unique identifier of the backend ethernet port which is expected to be connected to this one.   # noqa: E501

        :param expected_peer_id: The expected_peer_id of this EthBePortInstance.  # noqa: E501
        :type: str
        """

        self._expected_peer_id = expected_peer_id

    @property
    def actual_peer_id(self):
        """Gets the actual_peer_id of this EthBePortInstance.  # noqa: E501

        Unique identifier of the backend ethernet port which is actually connected to this one.   # noqa: E501

        :return: The actual_peer_id of this EthBePortInstance.  # noqa: E501
        :rtype: str
        """
        return self._actual_peer_id

    @actual_peer_id.setter
    def actual_peer_id(self, actual_peer_id):
        """Sets the actual_peer_id of this EthBePortInstance.

        Unique identifier of the backend ethernet port which is actually connected to this one.   # noqa: E501

        :param actual_peer_id: The actual_peer_id of this EthBePortInstance.  # noqa: E501
        :type: str
        """

        self._actual_peer_id = actual_peer_id

    @property
    def protocols(self):
        """Gets the protocols of this EthBePortInstance.  # noqa: E501

        Supported Protocols over Ethernet port. currently only NVMe is supported.   # noqa: E501

        :return: The protocols of this EthBePortInstance.  # noqa: E501
        :rtype: list[EthBEPortProtocolEnum]
        """
        return self._protocols

    @protocols.setter
    def protocols(self, protocols):
        """Sets the protocols of this EthBePortInstance.

        Supported Protocols over Ethernet port. currently only NVMe is supported.   # noqa: E501

        :param protocols: The protocols of this EthBePortInstance.  # noqa: E501
        :type: list[EthBEPortProtocolEnum]
        """

        self._protocols = protocols

    @property
    def stale_state(self):
        """Gets the stale_state of this EthBePortInstance.  # noqa: E501


        :return: The stale_state of this EthBePortInstance.  # noqa: E501
        :rtype: PortStaleStateEnum
        """
        return self._stale_state

    @stale_state.setter
    def stale_state(self, stale_state):
        """Sets the stale_state of this EthBePortInstance.


        :param stale_state: The stale_state of this EthBePortInstance.  # noqa: E501
        :type: PortStaleStateEnum
        """

        self._stale_state = stale_state

    @property
    def speed_l10n(self):
        """Gets the speed_l10n of this EthBePortInstance.  # noqa: E501

        Localized message string corresponding to speed Was added in version 3.0.0.0.  # noqa: E501

        :return: The speed_l10n of this EthBePortInstance.  # noqa: E501
        :rtype: str
        """
        return self._speed_l10n

    @speed_l10n.setter
    def speed_l10n(self, speed_l10n):
        """Sets the speed_l10n of this EthBePortInstance.

        Localized message string corresponding to speed Was added in version 3.0.0.0.  # noqa: E501

        :param speed_l10n: The speed_l10n of this EthBePortInstance.  # noqa: E501
        :type: str
        """

        self._speed_l10n = speed_l10n

    @property
    def port_connector_type_l10n(self):
        """Gets the port_connector_type_l10n of this EthBePortInstance.  # noqa: E501

        Localized message string corresponding to port_connector_type Was added in version 3.0.0.0.  # noqa: E501

        :return: The port_connector_type_l10n of this EthBePortInstance.  # noqa: E501
        :rtype: str
        """
        return self._port_connector_type_l10n

    @port_connector_type_l10n.setter
    def port_connector_type_l10n(self, port_connector_type_l10n):
        """Sets the port_connector_type_l10n of this EthBePortInstance.

        Localized message string corresponding to port_connector_type Was added in version 3.0.0.0.  # noqa: E501

        :param port_connector_type_l10n: The port_connector_type_l10n of this EthBePortInstance.  # noqa: E501
        :type: str
        """

        self._port_connector_type_l10n = port_connector_type_l10n

    @property
    def protocols_l10n(self):
        """Gets the protocols_l10n of this EthBePortInstance.  # noqa: E501

        Localized message array corresponding to protocols Was added in version 3.0.0.0.  # noqa: E501

        :return: The protocols_l10n of this EthBePortInstance.  # noqa: E501
        :rtype: list[str]
        """
        return self._protocols_l10n

    @protocols_l10n.setter
    def protocols_l10n(self, protocols_l10n):
        """Sets the protocols_l10n of this EthBePortInstance.

        Localized message array corresponding to protocols Was added in version 3.0.0.0.  # noqa: E501

        :param protocols_l10n: The protocols_l10n of this EthBePortInstance.  # noqa: E501
        :type: list[str]
        """

        self._protocols_l10n = protocols_l10n

    @property
    def stale_state_l10n(self):
        """Gets the stale_state_l10n of this EthBePortInstance.  # noqa: E501

        Localized message string corresponding to stale_state Was added in version 3.0.0.0.  # noqa: E501

        :return: The stale_state_l10n of this EthBePortInstance.  # noqa: E501
        :rtype: str
        """
        return self._stale_state_l10n

    @stale_state_l10n.setter
    def stale_state_l10n(self, stale_state_l10n):
        """Sets the stale_state_l10n of this EthBePortInstance.

        Localized message string corresponding to stale_state Was added in version 3.0.0.0.  # noqa: E501

        :param stale_state_l10n: The stale_state_l10n of this EthBePortInstance.  # noqa: E501
        :type: str
        """

        self._stale_state_l10n = stale_state_l10n

    @property
    def appliance(self):
        """Gets the appliance of this EthBePortInstance.  # noqa: E501

        This is the embeddable reference form of appliance_id attribute.  # noqa: E501

        :return: The appliance of this EthBePortInstance.  # noqa: E501
        :rtype: ApplianceInstance
        """
        return self._appliance

    @appliance.setter
    def appliance(self, appliance):
        """Sets the appliance of this EthBePortInstance.

        This is the embeddable reference form of appliance_id attribute.  # noqa: E501

        :param appliance: The appliance of this EthBePortInstance.  # noqa: E501
        :type: ApplianceInstance
        """

        self._appliance = appliance

    @property
    def node(self):
        """Gets the node of this EthBePortInstance.  # noqa: E501

        This is the embeddable reference form of node_id attribute.  # noqa: E501

        :return: The node of this EthBePortInstance.  # noqa: E501
        :rtype: HardwareInstance
        """
        return self._node

    @node.setter
    def node(self, node):
        """Sets the node of this EthBePortInstance.

        This is the embeddable reference form of node_id attribute.  # noqa: E501

        :param node: The node of this EthBePortInstance.  # noqa: E501
        :type: HardwareInstance
        """

        self._node = node

    @property
    def sfp(self):
        """Gets the sfp of this EthBePortInstance.  # noqa: E501

        This is the embeddable reference form of sfp_id attribute.  # noqa: E501

        :return: The sfp of this EthBePortInstance.  # noqa: E501
        :rtype: HardwareInstance
        """
        return self._sfp

    @sfp.setter
    def sfp(self, sfp):
        """Sets the sfp of this EthBePortInstance.

        This is the embeddable reference form of sfp_id attribute.  # noqa: E501

        :param sfp: The sfp of this EthBePortInstance.  # noqa: E501
        :type: HardwareInstance
        """

        self._sfp = sfp

    @property
    def hardware_parent(self):
        """Gets the hardware_parent of this EthBePortInstance.  # noqa: E501

        This is the embeddable reference form of hardware_parent_id attribute.  # noqa: E501

        :return: The hardware_parent of this EthBePortInstance.  # noqa: E501
        :rtype: HardwareInstance
        """
        return self._hardware_parent

    @hardware_parent.setter
    def hardware_parent(self, hardware_parent):
        """Sets the hardware_parent of this EthBePortInstance.

        This is the embeddable reference form of hardware_parent_id attribute.  # noqa: E501

        :param hardware_parent: The hardware_parent of this EthBePortInstance.  # noqa: E501
        :type: HardwareInstance
        """

        self._hardware_parent = hardware_parent

    @property
    def expected_peer(self):
        """Gets the expected_peer of this EthBePortInstance.  # noqa: E501

        This is the embeddable reference form of expected_peer_id attribute.  # noqa: E501

        :return: The expected_peer of this EthBePortInstance.  # noqa: E501
        :rtype: EthBePortInstance
        """
        return self._expected_peer

    @expected_peer.setter
    def expected_peer(self, expected_peer):
        """Sets the expected_peer of this EthBePortInstance.

        This is the embeddable reference form of expected_peer_id attribute.  # noqa: E501

        :param expected_peer: The expected_peer of this EthBePortInstance.  # noqa: E501
        :type: EthBePortInstance
        """

        self._expected_peer = expected_peer

    @property
    def actual_peer(self):
        """Gets the actual_peer of this EthBePortInstance.  # noqa: E501

        This is the embeddable reference form of actual_peer_id attribute.  # noqa: E501

        :return: The actual_peer of this EthBePortInstance.  # noqa: E501
        :rtype: EthBePortInstance
        """
        return self._actual_peer

    @actual_peer.setter
    def actual_peer(self, actual_peer):
        """Sets the actual_peer of this EthBePortInstance.

        This is the embeddable reference form of actual_peer_id attribute.  # noqa: E501

        :param actual_peer: The actual_peer of this EthBePortInstance.  # noqa: E501
        :type: EthBePortInstance
        """

        self._actual_peer = actual_peer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EthBePortInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EthBePortInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EthBePortInstance):
            return True

        return self.to_dict() != other.to_dict()
