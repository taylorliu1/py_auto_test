# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class VolumeClone(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'host_id': 'str',
        'host_group_id': 'str',
        'logical_unit_number': 'int',
        'performance_policy_id': 'str',
        'protection_policy_id': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'host_id': 'host_id',
        'host_group_id': 'host_group_id',
        'logical_unit_number': 'logical_unit_number',
        'performance_policy_id': 'performance_policy_id',
        'protection_policy_id': 'protection_policy_id'
    }

    def __init__(self, name=None, description=None, host_id=None, host_group_id=None, logical_unit_number=None, performance_policy_id=None, protection_policy_id=None, _configuration=None):  # noqa: E501
        """VolumeClone - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._description = None
        self._host_id = None
        self._host_group_id = None
        self._logical_unit_number = None
        self._performance_policy_id = None
        self._protection_policy_id = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if host_id is not None:
            self.host_id = host_id
        if host_group_id is not None:
            self.host_group_id = host_group_id
        if logical_unit_number is not None:
            self.logical_unit_number = logical_unit_number
        if performance_policy_id is not None:
            self.performance_policy_id = performance_policy_id
        if protection_policy_id is not None:
            self.protection_policy_id = protection_policy_id

    @property
    def name(self):
        """Gets the name of this VolumeClone.  # noqa: E501

        Name of the clone. This value must contain 128 or fewer printable Unicode characters.  # noqa: E501

        :return: The name of this VolumeClone.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VolumeClone.

        Name of the clone. This value must contain 128 or fewer printable Unicode characters.  # noqa: E501

        :param name: The name of this VolumeClone.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 128):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this VolumeClone.  # noqa: E501

        Description of the clone. This value must contain 128 or fewer printable Unicode characters.  # noqa: E501

        :return: The description of this VolumeClone.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VolumeClone.

        Description of the clone. This value must contain 128 or fewer printable Unicode characters.  # noqa: E501

        :param description: The description of this VolumeClone.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                description is not None and len(description) > 128):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `128`")  # noqa: E501

        self._description = description

    @property
    def host_id(self):
        """Gets the host_id of this VolumeClone.  # noqa: E501

        Unique identifier of the host to be attached to the clone. Only one of host_id or host_group_id can be supplied. name:{name} can be used instead of {id}. For example:'host_id':'name:host_name'  # noqa: E501

        :return: The host_id of this VolumeClone.  # noqa: E501
        :rtype: str
        """
        return self._host_id

    @host_id.setter
    def host_id(self, host_id):
        """Sets the host_id of this VolumeClone.

        Unique identifier of the host to be attached to the clone. Only one of host_id or host_group_id can be supplied. name:{name} can be used instead of {id}. For example:'host_id':'name:host_name'  # noqa: E501

        :param host_id: The host_id of this VolumeClone.  # noqa: E501
        :type: str
        """

        self._host_id = host_id

    @property
    def host_group_id(self):
        """Gets the host_group_id of this VolumeClone.  # noqa: E501

        Unique identifier of the host group to be attached to the clone. Only one of host_id or host_group_id can be supplied. name:{name} can be used instead of {id}. For example:'host_group_id':'name:host_group_name'  # noqa: E501

        :return: The host_group_id of this VolumeClone.  # noqa: E501
        :rtype: str
        """
        return self._host_group_id

    @host_group_id.setter
    def host_group_id(self, host_group_id):
        """Sets the host_group_id of this VolumeClone.

        Unique identifier of the host group to be attached to the clone. Only one of host_id or host_group_id can be supplied. name:{name} can be used instead of {id}. For example:'host_group_id':'name:host_group_name'  # noqa: E501

        :param host_group_id: The host_group_id of this VolumeClone.  # noqa: E501
        :type: str
        """

        self._host_group_id = host_group_id

    @property
    def logical_unit_number(self):
        """Gets the logical_unit_number of this VolumeClone.  # noqa: E501

        Optional logical unit number when creating a mapped volume.  If no host_id or host_group_id is specified, this property is ignored.  # noqa: E501

        :return: The logical_unit_number of this VolumeClone.  # noqa: E501
        :rtype: int
        """
        return self._logical_unit_number

    @logical_unit_number.setter
    def logical_unit_number(self, logical_unit_number):
        """Sets the logical_unit_number of this VolumeClone.

        Optional logical unit number when creating a mapped volume.  If no host_id or host_group_id is specified, this property is ignored.  # noqa: E501

        :param logical_unit_number: The logical_unit_number of this VolumeClone.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                logical_unit_number is not None and logical_unit_number > 16383):  # noqa: E501
            raise ValueError("Invalid value for `logical_unit_number`, must be a value less than or equal to `16383`")  # noqa: E501
        if (self._configuration.client_side_validation and
                logical_unit_number is not None and logical_unit_number < 0):  # noqa: E501
            raise ValueError("Invalid value for `logical_unit_number`, must be a value greater than or equal to `0`")  # noqa: E501

        self._logical_unit_number = logical_unit_number

    @property
    def performance_policy_id(self):
        """Gets the performance_policy_id of this VolumeClone.  # noqa: E501

        Unique identifier of the  performance policy.  # noqa: E501

        :return: The performance_policy_id of this VolumeClone.  # noqa: E501
        :rtype: str
        """
        return self._performance_policy_id

    @performance_policy_id.setter
    def performance_policy_id(self, performance_policy_id):
        """Sets the performance_policy_id of this VolumeClone.

        Unique identifier of the  performance policy.  # noqa: E501

        :param performance_policy_id: The performance_policy_id of this VolumeClone.  # noqa: E501
        :type: str
        """

        self._performance_policy_id = performance_policy_id

    @property
    def protection_policy_id(self):
        """Gets the protection_policy_id of this VolumeClone.  # noqa: E501

        Unique identifier of the protection policy.  # noqa: E501

        :return: The protection_policy_id of this VolumeClone.  # noqa: E501
        :rtype: str
        """
        return self._protection_policy_id

    @protection_policy_id.setter
    def protection_policy_id(self, protection_policy_id):
        """Sets the protection_policy_id of this VolumeClone.

        Unique identifier of the protection policy.  # noqa: E501

        :param protection_policy_id: The protection_policy_id of this VolumeClone.  # noqa: E501
        :type: str
        """

        self._protection_policy_id = protection_policy_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VolumeClone, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VolumeClone):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VolumeClone):
            return True

        return self.to_dict() != other.to_dict()
