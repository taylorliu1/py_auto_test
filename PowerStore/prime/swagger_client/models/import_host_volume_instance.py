# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class ImportHostVolumeInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'host_system_id': 'str',
        'name': 'str',
        'array_type': 'ArrayTypeEnum',
        'array_identifier': 'str',
        'size': 'int',
        'status': 'VolumeStatusEnum',
        'is_migrating': 'bool',
        'active_path': 'ActivePathEnum',
        'protocols': 'list[HostInitiatorProtocolTypeEnum]',
        'mount_paths': 'list[str]',
        'import_state': 'ImportOperationStatusEnum',
        'naa_id': 'str',
        'last_update_time': 'datetime',
        'array_type_l10n': 'str',
        'status_l10n': 'str',
        'active_path_l10n': 'str',
        'protocols_l10n': 'list[str]',
        'import_state_l10n': 'str'
    }

    attribute_map = {
        'id': 'id',
        'host_system_id': 'host_system_id',
        'name': 'name',
        'array_type': 'array_type',
        'array_identifier': 'array_identifier',
        'size': 'size',
        'status': 'status',
        'is_migrating': 'is_migrating',
        'active_path': 'active_path',
        'protocols': 'protocols',
        'mount_paths': 'mount_paths',
        'import_state': 'import_state',
        'naa_id': 'naa_id',
        'last_update_time': 'last_update_time',
        'array_type_l10n': 'array_type_l10n',
        'status_l10n': 'status_l10n',
        'active_path_l10n': 'active_path_l10n',
        'protocols_l10n': 'protocols_l10n',
        'import_state_l10n': 'import_state_l10n'
    }

    def __init__(self, id=None, host_system_id=None, name=None, array_type=None, array_identifier=None, size=None, status=None, is_migrating=None, active_path=None, protocols=None, mount_paths=None, import_state=None, naa_id=None, last_update_time=None, array_type_l10n=None, status_l10n=None, active_path_l10n=None, protocols_l10n=None, import_state_l10n=None, _configuration=None):  # noqa: E501
        """ImportHostVolumeInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._host_system_id = None
        self._name = None
        self._array_type = None
        self._array_identifier = None
        self._size = None
        self._status = None
        self._is_migrating = None
        self._active_path = None
        self._protocols = None
        self._mount_paths = None
        self._import_state = None
        self._naa_id = None
        self._last_update_time = None
        self._array_type_l10n = None
        self._status_l10n = None
        self._active_path_l10n = None
        self._protocols_l10n = None
        self._import_state_l10n = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if host_system_id is not None:
            self.host_system_id = host_system_id
        if name is not None:
            self.name = name
        if array_type is not None:
            self.array_type = array_type
        if array_identifier is not None:
            self.array_identifier = array_identifier
        if size is not None:
            self.size = size
        if status is not None:
            self.status = status
        if is_migrating is not None:
            self.is_migrating = is_migrating
        if active_path is not None:
            self.active_path = active_path
        if protocols is not None:
            self.protocols = protocols
        if mount_paths is not None:
            self.mount_paths = mount_paths
        if import_state is not None:
            self.import_state = import_state
        if naa_id is not None:
            self.naa_id = naa_id
        if last_update_time is not None:
            self.last_update_time = last_update_time
        if array_type_l10n is not None:
            self.array_type_l10n = array_type_l10n
        if status_l10n is not None:
            self.status_l10n = status_l10n
        if active_path_l10n is not None:
            self.active_path_l10n = active_path_l10n
        if protocols_l10n is not None:
            self.protocols_l10n = protocols_l10n
        if import_state_l10n is not None:
            self.import_state_l10n = import_state_l10n

    @property
    def id(self):
        """Gets the id of this ImportHostVolumeInstance.  # noqa: E501

        Unique identifier of the import host volume.  # noqa: E501

        :return: The id of this ImportHostVolumeInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ImportHostVolumeInstance.

        Unique identifier of the import host volume.  # noqa: E501

        :param id: The id of this ImportHostVolumeInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def host_system_id(self):
        """Gets the host_system_id of this ImportHostVolumeInstance.  # noqa: E501

        Unique identifier of the import host system.  # noqa: E501

        :return: The host_system_id of this ImportHostVolumeInstance.  # noqa: E501
        :rtype: str
        """
        return self._host_system_id

    @host_system_id.setter
    def host_system_id(self, host_system_id):
        """Sets the host_system_id of this ImportHostVolumeInstance.

        Unique identifier of the import host system.  # noqa: E501

        :param host_system_id: The host_system_id of this ImportHostVolumeInstance.  # noqa: E501
        :type: str
        """

        self._host_system_id = host_system_id

    @property
    def name(self):
        """Gets the name of this ImportHostVolumeInstance.  # noqa: E501

        Name of the import host volume.  This property supports case-insensitive filtering.  # noqa: E501

        :return: The name of this ImportHostVolumeInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ImportHostVolumeInstance.

        Name of the import host volume.  This property supports case-insensitive filtering.  # noqa: E501

        :param name: The name of this ImportHostVolumeInstance.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def array_type(self):
        """Gets the array_type of this ImportHostVolumeInstance.  # noqa: E501

        Product type of the storage system.  # noqa: E501

        :return: The array_type of this ImportHostVolumeInstance.  # noqa: E501
        :rtype: ArrayTypeEnum
        """
        return self._array_type

    @array_type.setter
    def array_type(self, array_type):
        """Sets the array_type of this ImportHostVolumeInstance.

        Product type of the storage system.  # noqa: E501

        :param array_type: The array_type of this ImportHostVolumeInstance.  # noqa: E501
        :type: ArrayTypeEnum
        """

        self._array_type = array_type

    @property
    def array_identifier(self):
        """Gets the array_identifier of this ImportHostVolumeInstance.  # noqa: E501

        Unique identifier of the storage system.  # noqa: E501

        :return: The array_identifier of this ImportHostVolumeInstance.  # noqa: E501
        :rtype: str
        """
        return self._array_identifier

    @array_identifier.setter
    def array_identifier(self, array_identifier):
        """Sets the array_identifier of this ImportHostVolumeInstance.

        Unique identifier of the storage system.  # noqa: E501

        :param array_identifier: The array_identifier of this ImportHostVolumeInstance.  # noqa: E501
        :type: str
        """

        self._array_identifier = array_identifier

    @property
    def size(self):
        """Gets the size of this ImportHostVolumeInstance.  # noqa: E501

        Size of the import host volume, in bytes.  # noqa: E501

        :return: The size of this ImportHostVolumeInstance.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ImportHostVolumeInstance.

        Size of the import host volume, in bytes.  # noqa: E501

        :param size: The size of this ImportHostVolumeInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                size is not None and size > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `size`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                size is not None and size < 0):  # noqa: E501
            raise ValueError("Invalid value for `size`, must be a value greater than or equal to `0`")  # noqa: E501

        self._size = size

    @property
    def status(self):
        """Gets the status of this ImportHostVolumeInstance.  # noqa: E501

        Status of the import host volume.  # noqa: E501

        :return: The status of this ImportHostVolumeInstance.  # noqa: E501
        :rtype: VolumeStatusEnum
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ImportHostVolumeInstance.

        Status of the import host volume.  # noqa: E501

        :param status: The status of this ImportHostVolumeInstance.  # noqa: E501
        :type: VolumeStatusEnum
        """

        self._status = status

    @property
    def is_migrating(self):
        """Gets the is_migrating of this ImportHostVolumeInstance.  # noqa: E501

        Indicates whether the import host volume is migrating.  # noqa: E501

        :return: The is_migrating of this ImportHostVolumeInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_migrating

    @is_migrating.setter
    def is_migrating(self, is_migrating):
        """Sets the is_migrating of this ImportHostVolumeInstance.

        Indicates whether the import host volume is migrating.  # noqa: E501

        :param is_migrating: The is_migrating of this ImportHostVolumeInstance.  # noqa: E501
        :type: bool
        """

        self._is_migrating = is_migrating

    @property
    def active_path(self):
        """Gets the active_path of this ImportHostVolumeInstance.  # noqa: E501

        Active path of the host volume.  # noqa: E501

        :return: The active_path of this ImportHostVolumeInstance.  # noqa: E501
        :rtype: ActivePathEnum
        """
        return self._active_path

    @active_path.setter
    def active_path(self, active_path):
        """Sets the active_path of this ImportHostVolumeInstance.

        Active path of the host volume.  # noqa: E501

        :param active_path: The active_path of this ImportHostVolumeInstance.  # noqa: E501
        :type: ActivePathEnum
        """

        self._active_path = active_path

    @property
    def protocols(self):
        """Gets the protocols of this ImportHostVolumeInstance.  # noqa: E501

        Supported protocols for the import host volume.  # noqa: E501

        :return: The protocols of this ImportHostVolumeInstance.  # noqa: E501
        :rtype: list[HostInitiatorProtocolTypeEnum]
        """
        return self._protocols

    @protocols.setter
    def protocols(self, protocols):
        """Sets the protocols of this ImportHostVolumeInstance.

        Supported protocols for the import host volume.  # noqa: E501

        :param protocols: The protocols of this ImportHostVolumeInstance.  # noqa: E501
        :type: list[HostInitiatorProtocolTypeEnum]
        """

        self._protocols = protocols

    @property
    def mount_paths(self):
        """Gets the mount_paths of this ImportHostVolumeInstance.  # noqa: E501

        Mount paths on the import host system.  # noqa: E501

        :return: The mount_paths of this ImportHostVolumeInstance.  # noqa: E501
        :rtype: list[str]
        """
        return self._mount_paths

    @mount_paths.setter
    def mount_paths(self, mount_paths):
        """Sets the mount_paths of this ImportHostVolumeInstance.

        Mount paths on the import host system.  # noqa: E501

        :param mount_paths: The mount_paths of this ImportHostVolumeInstance.  # noqa: E501
        :type: list[str]
        """

        self._mount_paths = mount_paths

    @property
    def import_state(self):
        """Gets the import_state of this ImportHostVolumeInstance.  # noqa: E501


        :return: The import_state of this ImportHostVolumeInstance.  # noqa: E501
        :rtype: ImportOperationStatusEnum
        """
        return self._import_state

    @import_state.setter
    def import_state(self, import_state):
        """Sets the import_state of this ImportHostVolumeInstance.


        :param import_state: The import_state of this ImportHostVolumeInstance.  # noqa: E501
        :type: ImportOperationStatusEnum
        """

        self._import_state = import_state

    @property
    def naa_id(self):
        """Gets the naa_id of this ImportHostVolumeInstance.  # noqa: E501

        Unique identifier of a volume that is presented to the import host.  # noqa: E501

        :return: The naa_id of this ImportHostVolumeInstance.  # noqa: E501
        :rtype: str
        """
        return self._naa_id

    @naa_id.setter
    def naa_id(self, naa_id):
        """Sets the naa_id of this ImportHostVolumeInstance.

        Unique identifier of a volume that is presented to the import host.  # noqa: E501

        :param naa_id: The naa_id of this ImportHostVolumeInstance.  # noqa: E501
        :type: str
        """

        self._naa_id = naa_id

    @property
    def last_update_time(self):
        """Gets the last_update_time of this ImportHostVolumeInstance.  # noqa: E501

        Time when the import host volume was last updated.  # noqa: E501

        :return: The last_update_time of this ImportHostVolumeInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update_time

    @last_update_time.setter
    def last_update_time(self, last_update_time):
        """Sets the last_update_time of this ImportHostVolumeInstance.

        Time when the import host volume was last updated.  # noqa: E501

        :param last_update_time: The last_update_time of this ImportHostVolumeInstance.  # noqa: E501
        :type: datetime
        """

        self._last_update_time = last_update_time

    @property
    def array_type_l10n(self):
        """Gets the array_type_l10n of this ImportHostVolumeInstance.  # noqa: E501

        Localized message string corresponding to array_type  # noqa: E501

        :return: The array_type_l10n of this ImportHostVolumeInstance.  # noqa: E501
        :rtype: str
        """
        return self._array_type_l10n

    @array_type_l10n.setter
    def array_type_l10n(self, array_type_l10n):
        """Sets the array_type_l10n of this ImportHostVolumeInstance.

        Localized message string corresponding to array_type  # noqa: E501

        :param array_type_l10n: The array_type_l10n of this ImportHostVolumeInstance.  # noqa: E501
        :type: str
        """

        self._array_type_l10n = array_type_l10n

    @property
    def status_l10n(self):
        """Gets the status_l10n of this ImportHostVolumeInstance.  # noqa: E501

        Localized message string corresponding to status  # noqa: E501

        :return: The status_l10n of this ImportHostVolumeInstance.  # noqa: E501
        :rtype: str
        """
        return self._status_l10n

    @status_l10n.setter
    def status_l10n(self, status_l10n):
        """Sets the status_l10n of this ImportHostVolumeInstance.

        Localized message string corresponding to status  # noqa: E501

        :param status_l10n: The status_l10n of this ImportHostVolumeInstance.  # noqa: E501
        :type: str
        """

        self._status_l10n = status_l10n

    @property
    def active_path_l10n(self):
        """Gets the active_path_l10n of this ImportHostVolumeInstance.  # noqa: E501

        Localized message string corresponding to active_path  # noqa: E501

        :return: The active_path_l10n of this ImportHostVolumeInstance.  # noqa: E501
        :rtype: str
        """
        return self._active_path_l10n

    @active_path_l10n.setter
    def active_path_l10n(self, active_path_l10n):
        """Sets the active_path_l10n of this ImportHostVolumeInstance.

        Localized message string corresponding to active_path  # noqa: E501

        :param active_path_l10n: The active_path_l10n of this ImportHostVolumeInstance.  # noqa: E501
        :type: str
        """

        self._active_path_l10n = active_path_l10n

    @property
    def protocols_l10n(self):
        """Gets the protocols_l10n of this ImportHostVolumeInstance.  # noqa: E501

        Localized message array corresponding to protocols  # noqa: E501

        :return: The protocols_l10n of this ImportHostVolumeInstance.  # noqa: E501
        :rtype: list[str]
        """
        return self._protocols_l10n

    @protocols_l10n.setter
    def protocols_l10n(self, protocols_l10n):
        """Sets the protocols_l10n of this ImportHostVolumeInstance.

        Localized message array corresponding to protocols  # noqa: E501

        :param protocols_l10n: The protocols_l10n of this ImportHostVolumeInstance.  # noqa: E501
        :type: list[str]
        """

        self._protocols_l10n = protocols_l10n

    @property
    def import_state_l10n(self):
        """Gets the import_state_l10n of this ImportHostVolumeInstance.  # noqa: E501

        Localized message string corresponding to import_state  # noqa: E501

        :return: The import_state_l10n of this ImportHostVolumeInstance.  # noqa: E501
        :rtype: str
        """
        return self._import_state_l10n

    @import_state_l10n.setter
    def import_state_l10n(self, import_state_l10n):
        """Sets the import_state_l10n of this ImportHostVolumeInstance.

        Localized message string corresponding to import_state  # noqa: E501

        :param import_state_l10n: The import_state_l10n of this ImportHostVolumeInstance.  # noqa: E501
        :type: str
        """

        self._import_state_l10n = import_state_l10n

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImportHostVolumeInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportHostVolumeInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImportHostVolumeInstance):
            return True

        return self.to_dict() != other.to_dict()
