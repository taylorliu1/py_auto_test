# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class ImportPsgroupInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'serial_number': 'str',
        'management_address': 'str',
        'description': 'str',
        'user_name': 'str',
        'group_address': 'str',
        'last_update_time': 'datetime',
        'supported_import_type': 'SupportedImportTypeEnum',
        'supported_import_type_l10n': 'str',
        'import_psgroup_volumes': 'list[ImportPsgroupVolumeInstance]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'serial_number': 'serial_number',
        'management_address': 'management_address',
        'description': 'description',
        'user_name': 'user_name',
        'group_address': 'group_address',
        'last_update_time': 'last_update_time',
        'supported_import_type': 'supported_import_type',
        'supported_import_type_l10n': 'supported_import_type_l10n',
        'import_psgroup_volumes': 'import_psgroup_volumes'
    }

    def __init__(self, id=None, name=None, serial_number=None, management_address=None, description=None, user_name=None, group_address=None, last_update_time=None, supported_import_type=None, supported_import_type_l10n=None, import_psgroup_volumes=None, _configuration=None):  # noqa: E501
        """ImportPsgroupInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._serial_number = None
        self._management_address = None
        self._description = None
        self._user_name = None
        self._group_address = None
        self._last_update_time = None
        self._supported_import_type = None
        self._supported_import_type_l10n = None
        self._import_psgroup_volumes = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if serial_number is not None:
            self.serial_number = serial_number
        if management_address is not None:
            self.management_address = management_address
        if description is not None:
            self.description = description
        if user_name is not None:
            self.user_name = user_name
        if group_address is not None:
            self.group_address = group_address
        if last_update_time is not None:
            self.last_update_time = last_update_time
        if supported_import_type is not None:
            self.supported_import_type = supported_import_type
        if supported_import_type_l10n is not None:
            self.supported_import_type_l10n = supported_import_type_l10n
        if import_psgroup_volumes is not None:
            self.import_psgroup_volumes = import_psgroup_volumes

    @property
    def id(self):
        """Gets the id of this ImportPsgroupInstance.  # noqa: E501

        Unique identifier of the PS Group.  # noqa: E501

        :return: The id of this ImportPsgroupInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ImportPsgroupInstance.

        Unique identifier of the PS Group.  # noqa: E501

        :param id: The id of this ImportPsgroupInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ImportPsgroupInstance.  # noqa: E501

        Name of the PS Group.  This property supports case-insensitive filtering.  # noqa: E501

        :return: The name of this ImportPsgroupInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ImportPsgroupInstance.

        Name of the PS Group.  This property supports case-insensitive filtering.  # noqa: E501

        :param name: The name of this ImportPsgroupInstance.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def serial_number(self):
        """Gets the serial_number of this ImportPsgroupInstance.  # noqa: E501

        Serial number of the PS Group.  # noqa: E501

        :return: The serial_number of this ImportPsgroupInstance.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this ImportPsgroupInstance.

        Serial number of the PS Group.  # noqa: E501

        :param serial_number: The serial_number of this ImportPsgroupInstance.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def management_address(self):
        """Gets the management_address of this ImportPsgroupInstance.  # noqa: E501

        Management address of the PS Group. This can be an IPv4 address or FQDN (Fully Qualified Domain Name).  # noqa: E501

        :return: The management_address of this ImportPsgroupInstance.  # noqa: E501
        :rtype: str
        """
        return self._management_address

    @management_address.setter
    def management_address(self, management_address):
        """Sets the management_address of this ImportPsgroupInstance.

        Management address of the PS Group. This can be an IPv4 address or FQDN (Fully Qualified Domain Name).  # noqa: E501

        :param management_address: The management_address of this ImportPsgroupInstance.  # noqa: E501
        :type: str
        """

        self._management_address = management_address

    @property
    def description(self):
        """Gets the description of this ImportPsgroupInstance.  # noqa: E501

        Description of the PS Group.  # noqa: E501

        :return: The description of this ImportPsgroupInstance.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ImportPsgroupInstance.

        Description of the PS Group.  # noqa: E501

        :param description: The description of this ImportPsgroupInstance.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def user_name(self):
        """Gets the user_name of this ImportPsgroupInstance.  # noqa: E501

        Name used to log in to the PS Group.  # noqa: E501

        :return: The user_name of this ImportPsgroupInstance.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this ImportPsgroupInstance.

        Name used to log in to the PS Group.  # noqa: E501

        :param user_name: The user_name of this ImportPsgroupInstance.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def group_address(self):
        """Gets the group_address of this ImportPsgroupInstance.  # noqa: E501

        IP address of the PS Group, which is used for data path communication. If a management address is not configured, this address is also used for management operations.  # noqa: E501

        :return: The group_address of this ImportPsgroupInstance.  # noqa: E501
        :rtype: str
        """
        return self._group_address

    @group_address.setter
    def group_address(self, group_address):
        """Sets the group_address of this ImportPsgroupInstance.

        IP address of the PS Group, which is used for data path communication. If a management address is not configured, this address is also used for management operations.  # noqa: E501

        :param group_address: The group_address of this ImportPsgroupInstance.  # noqa: E501
        :type: str
        """

        self._group_address = group_address

    @property
    def last_update_time(self):
        """Gets the last_update_time of this ImportPsgroupInstance.  # noqa: E501

        Time when the PS Group was last updated.  # noqa: E501

        :return: The last_update_time of this ImportPsgroupInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update_time

    @last_update_time.setter
    def last_update_time(self, last_update_time):
        """Sets the last_update_time of this ImportPsgroupInstance.

        Time when the PS Group was last updated.  # noqa: E501

        :param last_update_time: The last_update_time of this ImportPsgroupInstance.  # noqa: E501
        :type: datetime
        """

        self._last_update_time = last_update_time

    @property
    def supported_import_type(self):
        """Gets the supported_import_type of this ImportPsgroupInstance.  # noqa: E501

         Was added in version 1.0.2.  # noqa: E501

        :return: The supported_import_type of this ImportPsgroupInstance.  # noqa: E501
        :rtype: SupportedImportTypeEnum
        """
        return self._supported_import_type

    @supported_import_type.setter
    def supported_import_type(self, supported_import_type):
        """Sets the supported_import_type of this ImportPsgroupInstance.

         Was added in version 1.0.2.  # noqa: E501

        :param supported_import_type: The supported_import_type of this ImportPsgroupInstance.  # noqa: E501
        :type: SupportedImportTypeEnum
        """

        self._supported_import_type = supported_import_type

    @property
    def supported_import_type_l10n(self):
        """Gets the supported_import_type_l10n of this ImportPsgroupInstance.  # noqa: E501

        Localized message string corresponding to supported_import_type Was added in version 1.0.2.  # noqa: E501

        :return: The supported_import_type_l10n of this ImportPsgroupInstance.  # noqa: E501
        :rtype: str
        """
        return self._supported_import_type_l10n

    @supported_import_type_l10n.setter
    def supported_import_type_l10n(self, supported_import_type_l10n):
        """Sets the supported_import_type_l10n of this ImportPsgroupInstance.

        Localized message string corresponding to supported_import_type Was added in version 1.0.2.  # noqa: E501

        :param supported_import_type_l10n: The supported_import_type_l10n of this ImportPsgroupInstance.  # noqa: E501
        :type: str
        """

        self._supported_import_type_l10n = supported_import_type_l10n

    @property
    def import_psgroup_volumes(self):
        """Gets the import_psgroup_volumes of this ImportPsgroupInstance.  # noqa: E501

        This is the inverse of the resource type import_psgroup_volume association.  # noqa: E501

        :return: The import_psgroup_volumes of this ImportPsgroupInstance.  # noqa: E501
        :rtype: list[ImportPsgroupVolumeInstance]
        """
        return self._import_psgroup_volumes

    @import_psgroup_volumes.setter
    def import_psgroup_volumes(self, import_psgroup_volumes):
        """Sets the import_psgroup_volumes of this ImportPsgroupInstance.

        This is the inverse of the resource type import_psgroup_volume association.  # noqa: E501

        :param import_psgroup_volumes: The import_psgroup_volumes of this ImportPsgroupInstance.  # noqa: E501
        :type: list[ImportPsgroupVolumeInstance]
        """

        self._import_psgroup_volumes = import_psgroup_volumes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImportPsgroupInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportPsgroupInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImportPsgroupInstance):
            return True

        return self.to_dict() != other.to_dict()
