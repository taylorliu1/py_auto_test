# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class FileTreeQuotaInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'file_system_id': 'str',
        'path': 'str',
        'description': 'str',
        'is_user_quotas_enforced': 'bool',
        'state': 'FileQuotaStateEnum',
        'hard_limit': 'int',
        'soft_limit': 'int',
        'remaining_grace_period': 'int',
        'size_used': 'int',
        'grace_period': 'int',
        'state_l10n': 'str',
        'file_system': 'FileSystemInstance',
        'file_user_tree_quotas': 'list[FileUserQuotaInstance]'
    }

    attribute_map = {
        'id': 'id',
        'file_system_id': 'file_system_id',
        'path': 'path',
        'description': 'description',
        'is_user_quotas_enforced': 'is_user_quotas_enforced',
        'state': 'state',
        'hard_limit': 'hard_limit',
        'soft_limit': 'soft_limit',
        'remaining_grace_period': 'remaining_grace_period',
        'size_used': 'size_used',
        'grace_period': 'grace_period',
        'state_l10n': 'state_l10n',
        'file_system': 'file_system',
        'file_user_tree_quotas': 'file_user_tree_quotas'
    }

    def __init__(self, id=None, file_system_id=None, path=None, description=None, is_user_quotas_enforced=None, state=None, hard_limit=None, soft_limit=None, remaining_grace_period=None, size_used=None, grace_period=0, state_l10n=None, file_system=None, file_user_tree_quotas=None, _configuration=None):  # noqa: E501
        """FileTreeQuotaInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._file_system_id = None
        self._path = None
        self._description = None
        self._is_user_quotas_enforced = None
        self._state = None
        self._hard_limit = None
        self._soft_limit = None
        self._remaining_grace_period = None
        self._size_used = None
        self._grace_period = None
        self._state_l10n = None
        self._file_system = None
        self._file_user_tree_quotas = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if file_system_id is not None:
            self.file_system_id = file_system_id
        if path is not None:
            self.path = path
        if description is not None:
            self.description = description
        if is_user_quotas_enforced is not None:
            self.is_user_quotas_enforced = is_user_quotas_enforced
        if state is not None:
            self.state = state
        if hard_limit is not None:
            self.hard_limit = hard_limit
        if soft_limit is not None:
            self.soft_limit = soft_limit
        if remaining_grace_period is not None:
            self.remaining_grace_period = remaining_grace_period
        if size_used is not None:
            self.size_used = size_used
        if grace_period is not None:
            self.grace_period = grace_period
        if state_l10n is not None:
            self.state_l10n = state_l10n
        if file_system is not None:
            self.file_system = file_system
        if file_user_tree_quotas is not None:
            self.file_user_tree_quotas = file_user_tree_quotas

    @property
    def id(self):
        """Gets the id of this FileTreeQuotaInstance.  # noqa: E501

        Unique identifier of the tree quota.  # noqa: E501

        :return: The id of this FileTreeQuotaInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FileTreeQuotaInstance.

        Unique identifier of the tree quota.  # noqa: E501

        :param id: The id of this FileTreeQuotaInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def file_system_id(self):
        """Gets the file_system_id of this FileTreeQuotaInstance.  # noqa: E501

        Unique identifier of the associated file system.  # noqa: E501

        :return: The file_system_id of this FileTreeQuotaInstance.  # noqa: E501
        :rtype: str
        """
        return self._file_system_id

    @file_system_id.setter
    def file_system_id(self, file_system_id):
        """Sets the file_system_id of this FileTreeQuotaInstance.

        Unique identifier of the associated file system.  # noqa: E501

        :param file_system_id: The file_system_id of this FileTreeQuotaInstance.  # noqa: E501
        :type: str
        """

        self._file_system_id = file_system_id

    @property
    def path(self):
        """Gets the path of this FileTreeQuotaInstance.  # noqa: E501

        Path relative to the root of the associated filesystem.  # noqa: E501

        :return: The path of this FileTreeQuotaInstance.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this FileTreeQuotaInstance.

        Path relative to the root of the associated filesystem.  # noqa: E501

        :param path: The path of this FileTreeQuotaInstance.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                path is not None and len(path) > 1024):
            raise ValueError("Invalid value for `path`, length must be less than or equal to `1024`")  # noqa: E501
        if (self._configuration.client_side_validation and
                path is not None and len(path) < 1):
            raise ValueError("Invalid value for `path`, length must be greater than or equal to `1`")  # noqa: E501

        self._path = path

    @property
    def description(self):
        """Gets the description of this FileTreeQuotaInstance.  # noqa: E501

        Description of the tree quota.  # noqa: E501

        :return: The description of this FileTreeQuotaInstance.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FileTreeQuotaInstance.

        Description of the tree quota.  # noqa: E501

        :param description: The description of this FileTreeQuotaInstance.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                description is not None and len(description) > 256):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `256`")  # noqa: E501
        if (self._configuration.client_side_validation and
                description is not None and len(description) < 0):
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")  # noqa: E501

        self._description = description

    @property
    def is_user_quotas_enforced(self):
        """Gets the is_user_quotas_enforced of this FileTreeQuotaInstance.  # noqa: E501

        Whether user quota are enabled on this tree quota. The tree quota itself is enforced regardless of this parameter.   # noqa: E501

        :return: The is_user_quotas_enforced of this FileTreeQuotaInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_user_quotas_enforced

    @is_user_quotas_enforced.setter
    def is_user_quotas_enforced(self, is_user_quotas_enforced):
        """Sets the is_user_quotas_enforced of this FileTreeQuotaInstance.

        Whether user quota are enabled on this tree quota. The tree quota itself is enforced regardless of this parameter.   # noqa: E501

        :param is_user_quotas_enforced: The is_user_quotas_enforced of this FileTreeQuotaInstance.  # noqa: E501
        :type: bool
        """

        self._is_user_quotas_enforced = is_user_quotas_enforced

    @property
    def state(self):
        """Gets the state of this FileTreeQuotaInstance.  # noqa: E501


        :return: The state of this FileTreeQuotaInstance.  # noqa: E501
        :rtype: FileQuotaStateEnum
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this FileTreeQuotaInstance.


        :param state: The state of this FileTreeQuotaInstance.  # noqa: E501
        :type: FileQuotaStateEnum
        """

        self._state = state

    @property
    def hard_limit(self):
        """Gets the hard_limit of this FileTreeQuotaInstance.  # noqa: E501

        Hard limit of the tree quota, in bytes. No hard limit when set to 0. This value can be used to compute amount of space that is consumed without limiting the space.  # noqa: E501

        :return: The hard_limit of this FileTreeQuotaInstance.  # noqa: E501
        :rtype: int
        """
        return self._hard_limit

    @hard_limit.setter
    def hard_limit(self, hard_limit):
        """Sets the hard_limit of this FileTreeQuotaInstance.

        Hard limit of the tree quota, in bytes. No hard limit when set to 0. This value can be used to compute amount of space that is consumed without limiting the space.  # noqa: E501

        :param hard_limit: The hard_limit of this FileTreeQuotaInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                hard_limit is not None and hard_limit > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `hard_limit`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                hard_limit is not None and hard_limit < 0):  # noqa: E501
            raise ValueError("Invalid value for `hard_limit`, must be a value greater than or equal to `0`")  # noqa: E501

        self._hard_limit = hard_limit

    @property
    def soft_limit(self):
        """Gets the soft_limit of this FileTreeQuotaInstance.  # noqa: E501

        Soft limit of the tree quota, in bytes. No hard limit when set to 0.  # noqa: E501

        :return: The soft_limit of this FileTreeQuotaInstance.  # noqa: E501
        :rtype: int
        """
        return self._soft_limit

    @soft_limit.setter
    def soft_limit(self, soft_limit):
        """Sets the soft_limit of this FileTreeQuotaInstance.

        Soft limit of the tree quota, in bytes. No hard limit when set to 0.  # noqa: E501

        :param soft_limit: The soft_limit of this FileTreeQuotaInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                soft_limit is not None and soft_limit > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `soft_limit`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                soft_limit is not None and soft_limit < 0):  # noqa: E501
            raise ValueError("Invalid value for `soft_limit`, must be a value greater than or equal to `0`")  # noqa: E501

        self._soft_limit = soft_limit

    @property
    def remaining_grace_period(self):
        """Gets the remaining_grace_period of this FileTreeQuotaInstance.  # noqa: E501

        Remaining grace period, in seconds, after the soft limit is exceeded: * 0 - Grace period has already expired * -1 - No grace period in-progress, or infinite grace period set The grace period of user quotas is set in the file system quota config.   # noqa: E501

        :return: The remaining_grace_period of this FileTreeQuotaInstance.  # noqa: E501
        :rtype: int
        """
        return self._remaining_grace_period

    @remaining_grace_period.setter
    def remaining_grace_period(self, remaining_grace_period):
        """Sets the remaining_grace_period of this FileTreeQuotaInstance.

        Remaining grace period, in seconds, after the soft limit is exceeded: * 0 - Grace period has already expired * -1 - No grace period in-progress, or infinite grace period set The grace period of user quotas is set in the file system quota config.   # noqa: E501

        :param remaining_grace_period: The remaining_grace_period of this FileTreeQuotaInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                remaining_grace_period is not None and remaining_grace_period > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `remaining_grace_period`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                remaining_grace_period is not None and remaining_grace_period < 0):  # noqa: E501
            raise ValueError("Invalid value for `remaining_grace_period`, must be a value greater than or equal to `0`")  # noqa: E501

        self._remaining_grace_period = remaining_grace_period

    @property
    def size_used(self):
        """Gets the size_used of this FileTreeQuotaInstance.  # noqa: E501

        Size already used on the tree quota, in bytes.  # noqa: E501

        :return: The size_used of this FileTreeQuotaInstance.  # noqa: E501
        :rtype: int
        """
        return self._size_used

    @size_used.setter
    def size_used(self, size_used):
        """Sets the size_used of this FileTreeQuotaInstance.

        Size already used on the tree quota, in bytes.  # noqa: E501

        :param size_used: The size_used of this FileTreeQuotaInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                size_used is not None and size_used > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `size_used`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                size_used is not None and size_used < 0):  # noqa: E501
            raise ValueError("Invalid value for `size_used`, must be a value greater than or equal to `0`")  # noqa: E501

        self._size_used = size_used

    @property
    def grace_period(self):
        """Gets the grace_period of this FileTreeQuotaInstance.  # noqa: E501

        Grace period of soft limit (seconds). This will override the default grace period set at filesystem level.  * -1: Infinite grace period (Windows policy).  *  0: Use default grace period of 1 week (default).  * Positive: Grace period after which the soft limit is treated as a hard limit (seconds).  Was added in version 2.0.0.0.  # noqa: E501

        :return: The grace_period of this FileTreeQuotaInstance.  # noqa: E501
        :rtype: int
        """
        return self._grace_period

    @grace_period.setter
    def grace_period(self, grace_period):
        """Sets the grace_period of this FileTreeQuotaInstance.

        Grace period of soft limit (seconds). This will override the default grace period set at filesystem level.  * -1: Infinite grace period (Windows policy).  *  0: Use default grace period of 1 week (default).  * Positive: Grace period after which the soft limit is treated as a hard limit (seconds).  Was added in version 2.0.0.0.  # noqa: E501

        :param grace_period: The grace_period of this FileTreeQuotaInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                grace_period is not None and grace_period > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `grace_period`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                grace_period is not None and grace_period < -1):  # noqa: E501
            raise ValueError("Invalid value for `grace_period`, must be a value greater than or equal to `-1`")  # noqa: E501

        self._grace_period = grace_period

    @property
    def state_l10n(self):
        """Gets the state_l10n of this FileTreeQuotaInstance.  # noqa: E501

        Localized message string corresponding to state  # noqa: E501

        :return: The state_l10n of this FileTreeQuotaInstance.  # noqa: E501
        :rtype: str
        """
        return self._state_l10n

    @state_l10n.setter
    def state_l10n(self, state_l10n):
        """Sets the state_l10n of this FileTreeQuotaInstance.

        Localized message string corresponding to state  # noqa: E501

        :param state_l10n: The state_l10n of this FileTreeQuotaInstance.  # noqa: E501
        :type: str
        """

        self._state_l10n = state_l10n

    @property
    def file_system(self):
        """Gets the file_system of this FileTreeQuotaInstance.  # noqa: E501

        This is the embeddable reference form of file_system_id attribute.  # noqa: E501

        :return: The file_system of this FileTreeQuotaInstance.  # noqa: E501
        :rtype: FileSystemInstance
        """
        return self._file_system

    @file_system.setter
    def file_system(self, file_system):
        """Sets the file_system of this FileTreeQuotaInstance.

        This is the embeddable reference form of file_system_id attribute.  # noqa: E501

        :param file_system: The file_system of this FileTreeQuotaInstance.  # noqa: E501
        :type: FileSystemInstance
        """

        self._file_system = file_system

    @property
    def file_user_tree_quotas(self):
        """Gets the file_user_tree_quotas of this FileTreeQuotaInstance.  # noqa: E501

        This is the inverse of the resource type file_user_quota association.  # noqa: E501

        :return: The file_user_tree_quotas of this FileTreeQuotaInstance.  # noqa: E501
        :rtype: list[FileUserQuotaInstance]
        """
        return self._file_user_tree_quotas

    @file_user_tree_quotas.setter
    def file_user_tree_quotas(self, file_user_tree_quotas):
        """Sets the file_user_tree_quotas of this FileTreeQuotaInstance.

        This is the inverse of the resource type file_user_quota association.  # noqa: E501

        :param file_user_tree_quotas: The file_user_tree_quotas of this FileTreeQuotaInstance.  # noqa: E501
        :type: list[FileUserQuotaInstance]
        """

        self._file_user_tree_quotas = file_user_tree_quotas

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileTreeQuotaInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileTreeQuotaInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FileTreeQuotaInstance):
            return True

        return self.to_dict() != other.to_dict()
