# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class CopyMetricsByAppliance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'timestamp': 'datetime',
        'repeat_count': 'int',
        'session_type': 'CopySessionTypeEnum',
        'appliance_id': 'str',
        'data_transferred': 'int',
        'data_remaining': 'int',
        'transfer_time': 'int',
        'transfer_rate': 'float',
        'read_time': 'int',
        'write_time': 'int',
        'session_type_l10n': 'str'
    }

    attribute_map = {
        'timestamp': 'timestamp',
        'repeat_count': 'repeat_count',
        'session_type': 'session_type',
        'appliance_id': 'appliance_id',
        'data_transferred': 'data_transferred',
        'data_remaining': 'data_remaining',
        'transfer_time': 'transfer_time',
        'transfer_rate': 'transfer_rate',
        'read_time': 'read_time',
        'write_time': 'write_time',
        'session_type_l10n': 'session_type_l10n'
    }

    def __init__(self, timestamp=None, repeat_count=None, session_type=None, appliance_id=None, data_transferred=None, data_remaining=None, transfer_time=None, transfer_rate=None, read_time=None, write_time=None, session_type_l10n=None, _configuration=None):  # noqa: E501
        """CopyMetricsByAppliance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._timestamp = None
        self._repeat_count = None
        self._session_type = None
        self._appliance_id = None
        self._data_transferred = None
        self._data_remaining = None
        self._transfer_time = None
        self._transfer_rate = None
        self._read_time = None
        self._write_time = None
        self._session_type_l10n = None
        self.discriminator = None

        if timestamp is not None:
            self.timestamp = timestamp
        if repeat_count is not None:
            self.repeat_count = repeat_count
        if session_type is not None:
            self.session_type = session_type
        if appliance_id is not None:
            self.appliance_id = appliance_id
        if data_transferred is not None:
            self.data_transferred = data_transferred
        if data_remaining is not None:
            self.data_remaining = data_remaining
        if transfer_time is not None:
            self.transfer_time = transfer_time
        if transfer_rate is not None:
            self.transfer_rate = transfer_rate
        if read_time is not None:
            self.read_time = read_time
        if write_time is not None:
            self.write_time = write_time
        if session_type_l10n is not None:
            self.session_type_l10n = session_type_l10n

    @property
    def timestamp(self):
        """Gets the timestamp of this CopyMetricsByAppliance.  # noqa: E501

        End of sampling period.  # noqa: E501

        :return: The timestamp of this CopyMetricsByAppliance.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this CopyMetricsByAppliance.

        End of sampling period.  # noqa: E501

        :param timestamp: The timestamp of this CopyMetricsByAppliance.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def repeat_count(self):
        """Gets the repeat_count of this CopyMetricsByAppliance.  # noqa: E501

        Number of consecutive sampling periods during which there were no changes in the metrics values. If the value is omitted from the response, it is 1 (no additional repeats).   # noqa: E501

        :return: The repeat_count of this CopyMetricsByAppliance.  # noqa: E501
        :rtype: int
        """
        return self._repeat_count

    @repeat_count.setter
    def repeat_count(self, repeat_count):
        """Sets the repeat_count of this CopyMetricsByAppliance.

        Number of consecutive sampling periods during which there were no changes in the metrics values. If the value is omitted from the response, it is 1 (no additional repeats).   # noqa: E501

        :param repeat_count: The repeat_count of this CopyMetricsByAppliance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                repeat_count is not None and repeat_count > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `repeat_count`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                repeat_count is not None and repeat_count < 0):  # noqa: E501
            raise ValueError("Invalid value for `repeat_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._repeat_count = repeat_count

    @property
    def session_type(self):
        """Gets the session_type of this CopyMetricsByAppliance.  # noqa: E501


        :return: The session_type of this CopyMetricsByAppliance.  # noqa: E501
        :rtype: CopySessionTypeEnum
        """
        return self._session_type

    @session_type.setter
    def session_type(self, session_type):
        """Sets the session_type of this CopyMetricsByAppliance.


        :param session_type: The session_type of this CopyMetricsByAppliance.  # noqa: E501
        :type: CopySessionTypeEnum
        """

        self._session_type = session_type

    @property
    def appliance_id(self):
        """Gets the appliance_id of this CopyMetricsByAppliance.  # noqa: E501

        Unique identifier of the appliance.  # noqa: E501

        :return: The appliance_id of this CopyMetricsByAppliance.  # noqa: E501
        :rtype: str
        """
        return self._appliance_id

    @appliance_id.setter
    def appliance_id(self, appliance_id):
        """Sets the appliance_id of this CopyMetricsByAppliance.

        Unique identifier of the appliance.  # noqa: E501

        :param appliance_id: The appliance_id of this CopyMetricsByAppliance.  # noqa: E501
        :type: str
        """

        self._appliance_id = appliance_id

    @property
    def data_transferred(self):
        """Gets the data_transferred of this CopyMetricsByAppliance.  # noqa: E501

        Number of bytes transferred during this sampling period.  # noqa: E501

        :return: The data_transferred of this CopyMetricsByAppliance.  # noqa: E501
        :rtype: int
        """
        return self._data_transferred

    @data_transferred.setter
    def data_transferred(self, data_transferred):
        """Sets the data_transferred of this CopyMetricsByAppliance.

        Number of bytes transferred during this sampling period.  # noqa: E501

        :param data_transferred: The data_transferred of this CopyMetricsByAppliance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                data_transferred is not None and data_transferred > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `data_transferred`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                data_transferred is not None and data_transferred < 0):  # noqa: E501
            raise ValueError("Invalid value for `data_transferred`, must be a value greater than or equal to `0`")  # noqa: E501

        self._data_transferred = data_transferred

    @property
    def data_remaining(self):
        """Gets the data_remaining of this CopyMetricsByAppliance.  # noqa: E501

        Number of bytes remaining to be copied at the end of this sampling period.  # noqa: E501

        :return: The data_remaining of this CopyMetricsByAppliance.  # noqa: E501
        :rtype: int
        """
        return self._data_remaining

    @data_remaining.setter
    def data_remaining(self, data_remaining):
        """Sets the data_remaining of this CopyMetricsByAppliance.

        Number of bytes remaining to be copied at the end of this sampling period.  # noqa: E501

        :param data_remaining: The data_remaining of this CopyMetricsByAppliance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                data_remaining is not None and data_remaining > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `data_remaining`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                data_remaining is not None and data_remaining < 0):  # noqa: E501
            raise ValueError("Invalid value for `data_remaining`, must be a value greater than or equal to `0`")  # noqa: E501

        self._data_remaining = data_remaining

    @property
    def transfer_time(self):
        """Gets the transfer_time of this CopyMetricsByAppliance.  # noqa: E501

        The time (in milliseconds) spent in copy activity during this sampling period.   # noqa: E501

        :return: The transfer_time of this CopyMetricsByAppliance.  # noqa: E501
        :rtype: int
        """
        return self._transfer_time

    @transfer_time.setter
    def transfer_time(self, transfer_time):
        """Sets the transfer_time of this CopyMetricsByAppliance.

        The time (in milliseconds) spent in copy activity during this sampling period.   # noqa: E501

        :param transfer_time: The transfer_time of this CopyMetricsByAppliance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                transfer_time is not None and transfer_time > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `transfer_time`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                transfer_time is not None and transfer_time < 0):  # noqa: E501
            raise ValueError("Invalid value for `transfer_time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._transfer_time = transfer_time

    @property
    def transfer_rate(self):
        """Gets the transfer_rate of this CopyMetricsByAppliance.  # noqa: E501

        Data transfer rate (in bytes/second) computed using data_transferred and transfer_time.   # noqa: E501

        :return: The transfer_rate of this CopyMetricsByAppliance.  # noqa: E501
        :rtype: float
        """
        return self._transfer_rate

    @transfer_rate.setter
    def transfer_rate(self, transfer_rate):
        """Sets the transfer_rate of this CopyMetricsByAppliance.

        Data transfer rate (in bytes/second) computed using data_transferred and transfer_time.   # noqa: E501

        :param transfer_rate: The transfer_rate of this CopyMetricsByAppliance.  # noqa: E501
        :type: float
        """

        self._transfer_rate = transfer_rate

    @property
    def read_time(self):
        """Gets the read_time of this CopyMetricsByAppliance.  # noqa: E501

        Time (in milliseconds) spent doing reads during this sampling period.   # noqa: E501

        :return: The read_time of this CopyMetricsByAppliance.  # noqa: E501
        :rtype: int
        """
        return self._read_time

    @read_time.setter
    def read_time(self, read_time):
        """Sets the read_time of this CopyMetricsByAppliance.

        Time (in milliseconds) spent doing reads during this sampling period.   # noqa: E501

        :param read_time: The read_time of this CopyMetricsByAppliance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                read_time is not None and read_time > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `read_time`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                read_time is not None and read_time < 0):  # noqa: E501
            raise ValueError("Invalid value for `read_time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._read_time = read_time

    @property
    def write_time(self):
        """Gets the write_time of this CopyMetricsByAppliance.  # noqa: E501

        Time (in milliseconds) spent doing writes during this sampling period.   # noqa: E501

        :return: The write_time of this CopyMetricsByAppliance.  # noqa: E501
        :rtype: int
        """
        return self._write_time

    @write_time.setter
    def write_time(self, write_time):
        """Sets the write_time of this CopyMetricsByAppliance.

        Time (in milliseconds) spent doing writes during this sampling period.   # noqa: E501

        :param write_time: The write_time of this CopyMetricsByAppliance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                write_time is not None and write_time > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `write_time`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                write_time is not None and write_time < 0):  # noqa: E501
            raise ValueError("Invalid value for `write_time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._write_time = write_time

    @property
    def session_type_l10n(self):
        """Gets the session_type_l10n of this CopyMetricsByAppliance.  # noqa: E501

        Localized message string corresponding to session_type  # noqa: E501

        :return: The session_type_l10n of this CopyMetricsByAppliance.  # noqa: E501
        :rtype: str
        """
        return self._session_type_l10n

    @session_type_l10n.setter
    def session_type_l10n(self, session_type_l10n):
        """Sets the session_type_l10n of this CopyMetricsByAppliance.

        Localized message string corresponding to session_type  # noqa: E501

        :param session_type_l10n: The session_type_l10n of this CopyMetricsByAppliance.  # noqa: E501
        :type: str
        """

        self._session_type_l10n = session_type_l10n

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CopyMetricsByAppliance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CopyMetricsByAppliance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CopyMetricsByAppliance):
            return True

        return self.to_dict() != other.to_dict()
