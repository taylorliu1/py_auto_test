# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class MemberCertificateInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subject': 'str',
        'serial_number': 'str',
        'signature_algorithm': 'str',
        'issuer': 'str',
        'valid_from': 'datetime',
        'valid_to': 'datetime',
        'subject_alternative_names': 'list[str]',
        'public_key_algorithm': 'str',
        'key_length': 'int',
        'thumbprint_algorithm': 'ThumbprintAlgorithmEnum',
        'thumbprint': 'str',
        'certificate': 'str',
        'depth': 'int',
        'thumbprint_algorithm_l10n': 'str'
    }

    attribute_map = {
        'subject': 'subject',
        'serial_number': 'serial_number',
        'signature_algorithm': 'signature_algorithm',
        'issuer': 'issuer',
        'valid_from': 'valid_from',
        'valid_to': 'valid_to',
        'subject_alternative_names': 'subject_alternative_names',
        'public_key_algorithm': 'public_key_algorithm',
        'key_length': 'key_length',
        'thumbprint_algorithm': 'thumbprint_algorithm',
        'thumbprint': 'thumbprint',
        'certificate': 'certificate',
        'depth': 'depth',
        'thumbprint_algorithm_l10n': 'thumbprint_algorithm_l10n'
    }

    def __init__(self, subject=None, serial_number=None, signature_algorithm=None, issuer=None, valid_from=None, valid_to=None, subject_alternative_names=None, public_key_algorithm=None, key_length=None, thumbprint_algorithm=None, thumbprint=None, certificate=None, depth=None, thumbprint_algorithm_l10n=None, _configuration=None):  # noqa: E501
        """MemberCertificateInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._subject = None
        self._serial_number = None
        self._signature_algorithm = None
        self._issuer = None
        self._valid_from = None
        self._valid_to = None
        self._subject_alternative_names = None
        self._public_key_algorithm = None
        self._key_length = None
        self._thumbprint_algorithm = None
        self._thumbprint = None
        self._certificate = None
        self._depth = None
        self._thumbprint_algorithm_l10n = None
        self.discriminator = None

        if subject is not None:
            self.subject = subject
        if serial_number is not None:
            self.serial_number = serial_number
        if signature_algorithm is not None:
            self.signature_algorithm = signature_algorithm
        if issuer is not None:
            self.issuer = issuer
        if valid_from is not None:
            self.valid_from = valid_from
        if valid_to is not None:
            self.valid_to = valid_to
        if subject_alternative_names is not None:
            self.subject_alternative_names = subject_alternative_names
        if public_key_algorithm is not None:
            self.public_key_algorithm = public_key_algorithm
        if key_length is not None:
            self.key_length = key_length
        if thumbprint_algorithm is not None:
            self.thumbprint_algorithm = thumbprint_algorithm
        if thumbprint is not None:
            self.thumbprint = thumbprint
        if certificate is not None:
            self.certificate = certificate
        if depth is not None:
            self.depth = depth
        if thumbprint_algorithm_l10n is not None:
            self.thumbprint_algorithm_l10n = thumbprint_algorithm_l10n

    @property
    def subject(self):
        """Gets the subject of this MemberCertificateInstance.  # noqa: E501

        Certificate subject or so called distinguished name.  # noqa: E501

        :return: The subject of this MemberCertificateInstance.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this MemberCertificateInstance.

        Certificate subject or so called distinguished name.  # noqa: E501

        :param subject: The subject of this MemberCertificateInstance.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def serial_number(self):
        """Gets the serial_number of this MemberCertificateInstance.  # noqa: E501

        Certificate serial number.  # noqa: E501

        :return: The serial_number of this MemberCertificateInstance.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this MemberCertificateInstance.

        Certificate serial number.  # noqa: E501

        :param serial_number: The serial_number of this MemberCertificateInstance.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def signature_algorithm(self):
        """Gets the signature_algorithm of this MemberCertificateInstance.  # noqa: E501

        Certificate signature algorithm.  # noqa: E501

        :return: The signature_algorithm of this MemberCertificateInstance.  # noqa: E501
        :rtype: str
        """
        return self._signature_algorithm

    @signature_algorithm.setter
    def signature_algorithm(self, signature_algorithm):
        """Sets the signature_algorithm of this MemberCertificateInstance.

        Certificate signature algorithm.  # noqa: E501

        :param signature_algorithm: The signature_algorithm of this MemberCertificateInstance.  # noqa: E501
        :type: str
        """

        self._signature_algorithm = signature_algorithm

    @property
    def issuer(self):
        """Gets the issuer of this MemberCertificateInstance.  # noqa: E501

        Distinguished name of the certificate issuer.  # noqa: E501

        :return: The issuer of this MemberCertificateInstance.  # noqa: E501
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this MemberCertificateInstance.

        Distinguished name of the certificate issuer.  # noqa: E501

        :param issuer: The issuer of this MemberCertificateInstance.  # noqa: E501
        :type: str
        """

        self._issuer = issuer

    @property
    def valid_from(self):
        """Gets the valid_from of this MemberCertificateInstance.  # noqa: E501

        Date and time when the certificate becomes valid.  # noqa: E501

        :return: The valid_from of this MemberCertificateInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this MemberCertificateInstance.

        Date and time when the certificate becomes valid.  # noqa: E501

        :param valid_from: The valid_from of this MemberCertificateInstance.  # noqa: E501
        :type: datetime
        """

        self._valid_from = valid_from

    @property
    def valid_to(self):
        """Gets the valid_to of this MemberCertificateInstance.  # noqa: E501

        Date and time when the certificate will expire.  # noqa: E501

        :return: The valid_to of this MemberCertificateInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_to

    @valid_to.setter
    def valid_to(self, valid_to):
        """Sets the valid_to of this MemberCertificateInstance.

        Date and time when the certificate will expire.  # noqa: E501

        :param valid_to: The valid_to of this MemberCertificateInstance.  # noqa: E501
        :type: datetime
        """

        self._valid_to = valid_to

    @property
    def subject_alternative_names(self):
        """Gets the subject_alternative_names of this MemberCertificateInstance.  # noqa: E501

        Additional DNS names or IP addresses in the x509_certificate.  # noqa: E501

        :return: The subject_alternative_names of this MemberCertificateInstance.  # noqa: E501
        :rtype: list[str]
        """
        return self._subject_alternative_names

    @subject_alternative_names.setter
    def subject_alternative_names(self, subject_alternative_names):
        """Sets the subject_alternative_names of this MemberCertificateInstance.

        Additional DNS names or IP addresses in the x509_certificate.  # noqa: E501

        :param subject_alternative_names: The subject_alternative_names of this MemberCertificateInstance.  # noqa: E501
        :type: list[str]
        """

        self._subject_alternative_names = subject_alternative_names

    @property
    def public_key_algorithm(self):
        """Gets the public_key_algorithm of this MemberCertificateInstance.  # noqa: E501

        Public key algorithm used to generate the key pair.  # noqa: E501

        :return: The public_key_algorithm of this MemberCertificateInstance.  # noqa: E501
        :rtype: str
        """
        return self._public_key_algorithm

    @public_key_algorithm.setter
    def public_key_algorithm(self, public_key_algorithm):
        """Sets the public_key_algorithm of this MemberCertificateInstance.

        Public key algorithm used to generate the key pair.  # noqa: E501

        :param public_key_algorithm: The public_key_algorithm of this MemberCertificateInstance.  # noqa: E501
        :type: str
        """

        self._public_key_algorithm = public_key_algorithm

    @property
    def key_length(self):
        """Gets the key_length of this MemberCertificateInstance.  # noqa: E501

        Private key length.  # noqa: E501

        :return: The key_length of this MemberCertificateInstance.  # noqa: E501
        :rtype: int
        """
        return self._key_length

    @key_length.setter
    def key_length(self, key_length):
        """Sets the key_length of this MemberCertificateInstance.

        Private key length.  # noqa: E501

        :param key_length: The key_length of this MemberCertificateInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                key_length is not None and key_length > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `key_length`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                key_length is not None and key_length < 0):  # noqa: E501
            raise ValueError("Invalid value for `key_length`, must be a value greater than or equal to `0`")  # noqa: E501

        self._key_length = key_length

    @property
    def thumbprint_algorithm(self):
        """Gets the thumbprint_algorithm of this MemberCertificateInstance.  # noqa: E501


        :return: The thumbprint_algorithm of this MemberCertificateInstance.  # noqa: E501
        :rtype: ThumbprintAlgorithmEnum
        """
        return self._thumbprint_algorithm

    @thumbprint_algorithm.setter
    def thumbprint_algorithm(self, thumbprint_algorithm):
        """Sets the thumbprint_algorithm of this MemberCertificateInstance.


        :param thumbprint_algorithm: The thumbprint_algorithm of this MemberCertificateInstance.  # noqa: E501
        :type: ThumbprintAlgorithmEnum
        """

        self._thumbprint_algorithm = thumbprint_algorithm

    @property
    def thumbprint(self):
        """Gets the thumbprint of this MemberCertificateInstance.  # noqa: E501

        Hash value of the certificate.  # noqa: E501

        :return: The thumbprint of this MemberCertificateInstance.  # noqa: E501
        :rtype: str
        """
        return self._thumbprint

    @thumbprint.setter
    def thumbprint(self, thumbprint):
        """Sets the thumbprint of this MemberCertificateInstance.

        Hash value of the certificate.  # noqa: E501

        :param thumbprint: The thumbprint of this MemberCertificateInstance.  # noqa: E501
        :type: str
        """

        self._thumbprint = thumbprint

    @property
    def certificate(self):
        """Gets the certificate of this MemberCertificateInstance.  # noqa: E501

        Base64 encoded certificate without any line breaks.  # noqa: E501

        :return: The certificate of this MemberCertificateInstance.  # noqa: E501
        :rtype: str
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this MemberCertificateInstance.

        Base64 encoded certificate without any line breaks.  # noqa: E501

        :param certificate: The certificate of this MemberCertificateInstance.  # noqa: E501
        :type: str
        """

        self._certificate = certificate

    @property
    def depth(self):
        """Gets the depth of this MemberCertificateInstance.  # noqa: E501

        Depth indicates the position of this member certificate in the X509 Certificate chain. End-entity certificate will always have a depth of 1, which is the minimum value for depth. The depth of direct issuer certificate will be incremented by 1 until reaching the root certificate. Root certificate should have the largest depth for the certificate chain.  # noqa: E501

        :return: The depth of this MemberCertificateInstance.  # noqa: E501
        :rtype: int
        """
        return self._depth

    @depth.setter
    def depth(self, depth):
        """Sets the depth of this MemberCertificateInstance.

        Depth indicates the position of this member certificate in the X509 Certificate chain. End-entity certificate will always have a depth of 1, which is the minimum value for depth. The depth of direct issuer certificate will be incremented by 1 until reaching the root certificate. Root certificate should have the largest depth for the certificate chain.  # noqa: E501

        :param depth: The depth of this MemberCertificateInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                depth is not None and depth > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `depth`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                depth is not None and depth < 0):  # noqa: E501
            raise ValueError("Invalid value for `depth`, must be a value greater than or equal to `0`")  # noqa: E501

        self._depth = depth

    @property
    def thumbprint_algorithm_l10n(self):
        """Gets the thumbprint_algorithm_l10n of this MemberCertificateInstance.  # noqa: E501

        Localized message string corresponding to thumbprint_algorithm  # noqa: E501

        :return: The thumbprint_algorithm_l10n of this MemberCertificateInstance.  # noqa: E501
        :rtype: str
        """
        return self._thumbprint_algorithm_l10n

    @thumbprint_algorithm_l10n.setter
    def thumbprint_algorithm_l10n(self, thumbprint_algorithm_l10n):
        """Sets the thumbprint_algorithm_l10n of this MemberCertificateInstance.

        Localized message string corresponding to thumbprint_algorithm  # noqa: E501

        :param thumbprint_algorithm_l10n: The thumbprint_algorithm_l10n of this MemberCertificateInstance.  # noqa: E501
        :type: str
        """

        self._thumbprint_algorithm_l10n = thumbprint_algorithm_l10n

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MemberCertificateInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MemberCertificateInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MemberCertificateInstance):
            return True

        return self.to_dict() != other.to_dict()
