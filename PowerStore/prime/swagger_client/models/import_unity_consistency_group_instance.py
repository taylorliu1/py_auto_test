# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class ImportUnityConsistencyGroupInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'import_unity_id': 'str',
        'importable_criteria': 'CGImportableCriteriaEnum',
        'importable_criteria_l10n': 'str',
        'import_unity_volumes': 'list[ImportUnityVolumeInstance]',
        'import_unity': 'ImportUnityInstance'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'import_unity_id': 'import_unity_id',
        'importable_criteria': 'importable_criteria',
        'importable_criteria_l10n': 'importable_criteria_l10n',
        'import_unity_volumes': 'import_unity_volumes',
        'import_unity': 'import_unity'
    }

    def __init__(self, id=None, name=None, import_unity_id=None, importable_criteria=None, importable_criteria_l10n=None, import_unity_volumes=None, import_unity=None, _configuration=None):  # noqa: E501
        """ImportUnityConsistencyGroupInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._import_unity_id = None
        self._importable_criteria = None
        self._importable_criteria_l10n = None
        self._import_unity_volumes = None
        self._import_unity = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if import_unity_id is not None:
            self.import_unity_id = import_unity_id
        if importable_criteria is not None:
            self.importable_criteria = importable_criteria
        if importable_criteria_l10n is not None:
            self.importable_criteria_l10n = importable_criteria_l10n
        if import_unity_volumes is not None:
            self.import_unity_volumes = import_unity_volumes
        if import_unity is not None:
            self.import_unity = import_unity

    @property
    def id(self):
        """Gets the id of this ImportUnityConsistencyGroupInstance.  # noqa: E501

        Unique identifier of the Unity consistency group.  # noqa: E501

        :return: The id of this ImportUnityConsistencyGroupInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ImportUnityConsistencyGroupInstance.

        Unique identifier of the Unity consistency group.  # noqa: E501

        :param id: The id of this ImportUnityConsistencyGroupInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ImportUnityConsistencyGroupInstance.  # noqa: E501

        Name of the consistency group.  This property supports case-insensitive filtering.  # noqa: E501

        :return: The name of this ImportUnityConsistencyGroupInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ImportUnityConsistencyGroupInstance.

        Name of the consistency group.  This property supports case-insensitive filtering.  # noqa: E501

        :param name: The name of this ImportUnityConsistencyGroupInstance.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def import_unity_id(self):
        """Gets the import_unity_id of this ImportUnityConsistencyGroupInstance.  # noqa: E501

        Unique identifier of the Unity storage system where the consistency group resides.  # noqa: E501

        :return: The import_unity_id of this ImportUnityConsistencyGroupInstance.  # noqa: E501
        :rtype: str
        """
        return self._import_unity_id

    @import_unity_id.setter
    def import_unity_id(self, import_unity_id):
        """Sets the import_unity_id of this ImportUnityConsistencyGroupInstance.

        Unique identifier of the Unity storage system where the consistency group resides.  # noqa: E501

        :param import_unity_id: The import_unity_id of this ImportUnityConsistencyGroupInstance.  # noqa: E501
        :type: str
        """

        self._import_unity_id = import_unity_id

    @property
    def importable_criteria(self):
        """Gets the importable_criteria of this ImportUnityConsistencyGroupInstance.  # noqa: E501

        Consistency group import criteria.  # noqa: E501

        :return: The importable_criteria of this ImportUnityConsistencyGroupInstance.  # noqa: E501
        :rtype: CGImportableCriteriaEnum
        """
        return self._importable_criteria

    @importable_criteria.setter
    def importable_criteria(self, importable_criteria):
        """Sets the importable_criteria of this ImportUnityConsistencyGroupInstance.

        Consistency group import criteria.  # noqa: E501

        :param importable_criteria: The importable_criteria of this ImportUnityConsistencyGroupInstance.  # noqa: E501
        :type: CGImportableCriteriaEnum
        """

        self._importable_criteria = importable_criteria

    @property
    def importable_criteria_l10n(self):
        """Gets the importable_criteria_l10n of this ImportUnityConsistencyGroupInstance.  # noqa: E501

        Localized message string corresponding to importable_criteria  # noqa: E501

        :return: The importable_criteria_l10n of this ImportUnityConsistencyGroupInstance.  # noqa: E501
        :rtype: str
        """
        return self._importable_criteria_l10n

    @importable_criteria_l10n.setter
    def importable_criteria_l10n(self, importable_criteria_l10n):
        """Sets the importable_criteria_l10n of this ImportUnityConsistencyGroupInstance.

        Localized message string corresponding to importable_criteria  # noqa: E501

        :param importable_criteria_l10n: The importable_criteria_l10n of this ImportUnityConsistencyGroupInstance.  # noqa: E501
        :type: str
        """

        self._importable_criteria_l10n = importable_criteria_l10n

    @property
    def import_unity_volumes(self):
        """Gets the import_unity_volumes of this ImportUnityConsistencyGroupInstance.  # noqa: E501

        This is the inverse of the resource type import_unity_volume association.  # noqa: E501

        :return: The import_unity_volumes of this ImportUnityConsistencyGroupInstance.  # noqa: E501
        :rtype: list[ImportUnityVolumeInstance]
        """
        return self._import_unity_volumes

    @import_unity_volumes.setter
    def import_unity_volumes(self, import_unity_volumes):
        """Sets the import_unity_volumes of this ImportUnityConsistencyGroupInstance.

        This is the inverse of the resource type import_unity_volume association.  # noqa: E501

        :param import_unity_volumes: The import_unity_volumes of this ImportUnityConsistencyGroupInstance.  # noqa: E501
        :type: list[ImportUnityVolumeInstance]
        """

        self._import_unity_volumes = import_unity_volumes

    @property
    def import_unity(self):
        """Gets the import_unity of this ImportUnityConsistencyGroupInstance.  # noqa: E501

        This is the embeddable reference form of import_unity_id attribute.  # noqa: E501

        :return: The import_unity of this ImportUnityConsistencyGroupInstance.  # noqa: E501
        :rtype: ImportUnityInstance
        """
        return self._import_unity

    @import_unity.setter
    def import_unity(self, import_unity):
        """Sets the import_unity of this ImportUnityConsistencyGroupInstance.

        This is the embeddable reference form of import_unity_id attribute.  # noqa: E501

        :param import_unity: The import_unity of this ImportUnityConsistencyGroupInstance.  # noqa: E501
        :type: ImportUnityInstance
        """

        self._import_unity = import_unity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImportUnityConsistencyGroupInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportUnityConsistencyGroupInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImportUnityConsistencyGroupInstance):
            return True

        return self.to_dict() != other.to_dict()
