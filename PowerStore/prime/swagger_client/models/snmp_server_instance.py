# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class SnmpServerInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'ip_address': 'str',
        'port': 'int',
        'version': 'SNMPVersionEnum',
        'alert_severity': 'SNMPSeverityEnum',
        'trap_community': 'str',
        'user_name': 'str',
        'auth_protocol': 'SNMPAuthProtocolEnum',
        'privacy_protocol': 'SNMPPrivacyProtocolEnum',
        'version_l10n': 'str',
        'alert_severity_l10n': 'str',
        'auth_protocol_l10n': 'str',
        'privacy_protocol_l10n': 'str'
    }

    attribute_map = {
        'id': 'id',
        'ip_address': 'ip_address',
        'port': 'port',
        'version': 'version',
        'alert_severity': 'alert_severity',
        'trap_community': 'trap_community',
        'user_name': 'user_name',
        'auth_protocol': 'auth_protocol',
        'privacy_protocol': 'privacy_protocol',
        'version_l10n': 'version_l10n',
        'alert_severity_l10n': 'alert_severity_l10n',
        'auth_protocol_l10n': 'auth_protocol_l10n',
        'privacy_protocol_l10n': 'privacy_protocol_l10n'
    }

    def __init__(self, id=None, ip_address=None, port=None, version=None, alert_severity=None, trap_community=None, user_name=None, auth_protocol=None, privacy_protocol=None, version_l10n=None, alert_severity_l10n=None, auth_protocol_l10n=None, privacy_protocol_l10n=None, _configuration=None):  # noqa: E501
        """SnmpServerInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._ip_address = None
        self._port = None
        self._version = None
        self._alert_severity = None
        self._trap_community = None
        self._user_name = None
        self._auth_protocol = None
        self._privacy_protocol = None
        self._version_l10n = None
        self._alert_severity_l10n = None
        self._auth_protocol_l10n = None
        self._privacy_protocol_l10n = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if ip_address is not None:
            self.ip_address = ip_address
        if port is not None:
            self.port = port
        if version is not None:
            self.version = version
        if alert_severity is not None:
            self.alert_severity = alert_severity
        if trap_community is not None:
            self.trap_community = trap_community
        if user_name is not None:
            self.user_name = user_name
        if auth_protocol is not None:
            self.auth_protocol = auth_protocol
        if privacy_protocol is not None:
            self.privacy_protocol = privacy_protocol
        if version_l10n is not None:
            self.version_l10n = version_l10n
        if alert_severity_l10n is not None:
            self.alert_severity_l10n = alert_severity_l10n
        if auth_protocol_l10n is not None:
            self.auth_protocol_l10n = auth_protocol_l10n
        if privacy_protocol_l10n is not None:
            self.privacy_protocol_l10n = privacy_protocol_l10n

    @property
    def id(self):
        """Gets the id of this SnmpServerInstance.  # noqa: E501

        Unique identifier of the SNMP server.  # noqa: E501

        :return: The id of this SnmpServerInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SnmpServerInstance.

        Unique identifier of the SNMP server.  # noqa: E501

        :param id: The id of this SnmpServerInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def ip_address(self):
        """Gets the ip_address of this SnmpServerInstance.  # noqa: E501

        IPv4 address, IPv6 address, or FQDN of the SNMP server.  # noqa: E501

        :return: The ip_address of this SnmpServerInstance.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this SnmpServerInstance.

        IPv4 address, IPv6 address, or FQDN of the SNMP server.  # noqa: E501

        :param ip_address: The ip_address of this SnmpServerInstance.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def port(self):
        """Gets the port of this SnmpServerInstance.  # noqa: E501

        Port number to use with the address of the SNMP server.  # noqa: E501

        :return: The port of this SnmpServerInstance.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this SnmpServerInstance.

        Port number to use with the address of the SNMP server.  # noqa: E501

        :param port: The port of this SnmpServerInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                port is not None and port > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                port is not None and port < 0):  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value greater than or equal to `0`")  # noqa: E501

        self._port = port

    @property
    def version(self):
        """Gets the version of this SnmpServerInstance.  # noqa: E501


        :return: The version of this SnmpServerInstance.  # noqa: E501
        :rtype: SNMPVersionEnum
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SnmpServerInstance.


        :param version: The version of this SnmpServerInstance.  # noqa: E501
        :type: SNMPVersionEnum
        """

        self._version = version

    @property
    def alert_severity(self):
        """Gets the alert_severity of this SnmpServerInstance.  # noqa: E501


        :return: The alert_severity of this SnmpServerInstance.  # noqa: E501
        :rtype: SNMPSeverityEnum
        """
        return self._alert_severity

    @alert_severity.setter
    def alert_severity(self, alert_severity):
        """Sets the alert_severity of this SnmpServerInstance.


        :param alert_severity: The alert_severity of this SnmpServerInstance.  # noqa: E501
        :type: SNMPSeverityEnum
        """

        self._alert_severity = alert_severity

    @property
    def trap_community(self):
        """Gets the trap_community of this SnmpServerInstance.  # noqa: E501

        Trap Community string. Usually describes the security level.  # noqa: E501

        :return: The trap_community of this SnmpServerInstance.  # noqa: E501
        :rtype: str
        """
        return self._trap_community

    @trap_community.setter
    def trap_community(self, trap_community):
        """Sets the trap_community of this SnmpServerInstance.

        Trap Community string. Usually describes the security level.  # noqa: E501

        :param trap_community: The trap_community of this SnmpServerInstance.  # noqa: E501
        :type: str
        """

        self._trap_community = trap_community

    @property
    def user_name(self):
        """Gets the user_name of this SnmpServerInstance.  # noqa: E501

        User name, relevant only for SNMPv3.  # noqa: E501

        :return: The user_name of this SnmpServerInstance.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this SnmpServerInstance.

        User name, relevant only for SNMPv3.  # noqa: E501

        :param user_name: The user_name of this SnmpServerInstance.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def auth_protocol(self):
        """Gets the auth_protocol of this SnmpServerInstance.  # noqa: E501


        :return: The auth_protocol of this SnmpServerInstance.  # noqa: E501
        :rtype: SNMPAuthProtocolEnum
        """
        return self._auth_protocol

    @auth_protocol.setter
    def auth_protocol(self, auth_protocol):
        """Sets the auth_protocol of this SnmpServerInstance.


        :param auth_protocol: The auth_protocol of this SnmpServerInstance.  # noqa: E501
        :type: SNMPAuthProtocolEnum
        """

        self._auth_protocol = auth_protocol

    @property
    def privacy_protocol(self):
        """Gets the privacy_protocol of this SnmpServerInstance.  # noqa: E501


        :return: The privacy_protocol of this SnmpServerInstance.  # noqa: E501
        :rtype: SNMPPrivacyProtocolEnum
        """
        return self._privacy_protocol

    @privacy_protocol.setter
    def privacy_protocol(self, privacy_protocol):
        """Sets the privacy_protocol of this SnmpServerInstance.


        :param privacy_protocol: The privacy_protocol of this SnmpServerInstance.  # noqa: E501
        :type: SNMPPrivacyProtocolEnum
        """

        self._privacy_protocol = privacy_protocol

    @property
    def version_l10n(self):
        """Gets the version_l10n of this SnmpServerInstance.  # noqa: E501

        Localized message string corresponding to version Was added in version 2.0.0.0.  # noqa: E501

        :return: The version_l10n of this SnmpServerInstance.  # noqa: E501
        :rtype: str
        """
        return self._version_l10n

    @version_l10n.setter
    def version_l10n(self, version_l10n):
        """Sets the version_l10n of this SnmpServerInstance.

        Localized message string corresponding to version Was added in version 2.0.0.0.  # noqa: E501

        :param version_l10n: The version_l10n of this SnmpServerInstance.  # noqa: E501
        :type: str
        """

        self._version_l10n = version_l10n

    @property
    def alert_severity_l10n(self):
        """Gets the alert_severity_l10n of this SnmpServerInstance.  # noqa: E501

        Localized message string corresponding to alert_severity Was added in version 2.0.0.0.  # noqa: E501

        :return: The alert_severity_l10n of this SnmpServerInstance.  # noqa: E501
        :rtype: str
        """
        return self._alert_severity_l10n

    @alert_severity_l10n.setter
    def alert_severity_l10n(self, alert_severity_l10n):
        """Sets the alert_severity_l10n of this SnmpServerInstance.

        Localized message string corresponding to alert_severity Was added in version 2.0.0.0.  # noqa: E501

        :param alert_severity_l10n: The alert_severity_l10n of this SnmpServerInstance.  # noqa: E501
        :type: str
        """

        self._alert_severity_l10n = alert_severity_l10n

    @property
    def auth_protocol_l10n(self):
        """Gets the auth_protocol_l10n of this SnmpServerInstance.  # noqa: E501

        Localized message string corresponding to auth_protocol Was added in version 2.0.0.0.  # noqa: E501

        :return: The auth_protocol_l10n of this SnmpServerInstance.  # noqa: E501
        :rtype: str
        """
        return self._auth_protocol_l10n

    @auth_protocol_l10n.setter
    def auth_protocol_l10n(self, auth_protocol_l10n):
        """Sets the auth_protocol_l10n of this SnmpServerInstance.

        Localized message string corresponding to auth_protocol Was added in version 2.0.0.0.  # noqa: E501

        :param auth_protocol_l10n: The auth_protocol_l10n of this SnmpServerInstance.  # noqa: E501
        :type: str
        """

        self._auth_protocol_l10n = auth_protocol_l10n

    @property
    def privacy_protocol_l10n(self):
        """Gets the privacy_protocol_l10n of this SnmpServerInstance.  # noqa: E501

        Localized message string corresponding to privacy_protocol Was added in version 2.0.0.0.  # noqa: E501

        :return: The privacy_protocol_l10n of this SnmpServerInstance.  # noqa: E501
        :rtype: str
        """
        return self._privacy_protocol_l10n

    @privacy_protocol_l10n.setter
    def privacy_protocol_l10n(self, privacy_protocol_l10n):
        """Sets the privacy_protocol_l10n of this SnmpServerInstance.

        Localized message string corresponding to privacy_protocol Was added in version 2.0.0.0.  # noqa: E501

        :param privacy_protocol_l10n: The privacy_protocol_l10n of this SnmpServerInstance.  # noqa: E501
        :type: str
        """

        self._privacy_protocol_l10n = privacy_protocol_l10n

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SnmpServerInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SnmpServerInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SnmpServerInstance):
            return True

        return self.to_dict() != other.to_dict()
