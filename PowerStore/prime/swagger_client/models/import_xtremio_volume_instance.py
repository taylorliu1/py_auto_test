# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class ImportXtremioVolumeInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'wwn': 'str',
        'name': 'str',
        'size': 'int',
        'severity': 'XtremIOObjectSeverityEnum',
        'certainty': 'XtremIOCertaintyEnum',
        'is_read_only': 'bool',
        'is_replication_destination': 'bool',
        'importable_criteria': 'VolumeImportableCriteriaEnum',
        'import_xtremio_id': 'str',
        'import_xtremio_consistency_group_id': 'str',
        'import_xtremio_consistency_group_names': 'list[str]',
        'severity_l10n': 'str',
        'certainty_l10n': 'str',
        'importable_criteria_l10n': 'str',
        'import_xtremio': 'ImportXtremioInstance',
        'import_xtremio_consistency_group': 'ImportXtremioConsistencyGroupInstance'
    }

    attribute_map = {
        'id': 'id',
        'wwn': 'wwn',
        'name': 'name',
        'size': 'size',
        'severity': 'severity',
        'certainty': 'certainty',
        'is_read_only': 'is_read_only',
        'is_replication_destination': 'is_replication_destination',
        'importable_criteria': 'importable_criteria',
        'import_xtremio_id': 'import_xtremio_id',
        'import_xtremio_consistency_group_id': 'import_xtremio_consistency_group_id',
        'import_xtremio_consistency_group_names': 'import_xtremio_consistency_group_names',
        'severity_l10n': 'severity_l10n',
        'certainty_l10n': 'certainty_l10n',
        'importable_criteria_l10n': 'importable_criteria_l10n',
        'import_xtremio': 'import_xtremio',
        'import_xtremio_consistency_group': 'import_xtremio_consistency_group'
    }

    def __init__(self, id=None, wwn=None, name=None, size=None, severity=None, certainty=None, is_read_only=None, is_replication_destination=None, importable_criteria=None, import_xtremio_id=None, import_xtremio_consistency_group_id=None, import_xtremio_consistency_group_names=None, severity_l10n=None, certainty_l10n=None, importable_criteria_l10n=None, import_xtremio=None, import_xtremio_consistency_group=None, _configuration=None):  # noqa: E501
        """ImportXtremioVolumeInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._wwn = None
        self._name = None
        self._size = None
        self._severity = None
        self._certainty = None
        self._is_read_only = None
        self._is_replication_destination = None
        self._importable_criteria = None
        self._import_xtremio_id = None
        self._import_xtremio_consistency_group_id = None
        self._import_xtremio_consistency_group_names = None
        self._severity_l10n = None
        self._certainty_l10n = None
        self._importable_criteria_l10n = None
        self._import_xtremio = None
        self._import_xtremio_consistency_group = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if wwn is not None:
            self.wwn = wwn
        if name is not None:
            self.name = name
        if size is not None:
            self.size = size
        if severity is not None:
            self.severity = severity
        if certainty is not None:
            self.certainty = certainty
        if is_read_only is not None:
            self.is_read_only = is_read_only
        if is_replication_destination is not None:
            self.is_replication_destination = is_replication_destination
        if importable_criteria is not None:
            self.importable_criteria = importable_criteria
        if import_xtremio_id is not None:
            self.import_xtremio_id = import_xtremio_id
        if import_xtremio_consistency_group_id is not None:
            self.import_xtremio_consistency_group_id = import_xtremio_consistency_group_id
        if import_xtremio_consistency_group_names is not None:
            self.import_xtremio_consistency_group_names = import_xtremio_consistency_group_names
        if severity_l10n is not None:
            self.severity_l10n = severity_l10n
        if certainty_l10n is not None:
            self.certainty_l10n = certainty_l10n
        if importable_criteria_l10n is not None:
            self.importable_criteria_l10n = importable_criteria_l10n
        if import_xtremio is not None:
            self.import_xtremio = import_xtremio
        if import_xtremio_consistency_group is not None:
            self.import_xtremio_consistency_group = import_xtremio_consistency_group

    @property
    def id(self):
        """Gets the id of this ImportXtremioVolumeInstance.  # noqa: E501

        Unique identifier of the XtremIO volume.  # noqa: E501

        :return: The id of this ImportXtremioVolumeInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ImportXtremioVolumeInstance.

        Unique identifier of the XtremIO volume.  # noqa: E501

        :param id: The id of this ImportXtremioVolumeInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def wwn(self):
        """Gets the wwn of this ImportXtremioVolumeInstance.  # noqa: E501

        World Wide Name (WWN) of the XtremIO volume.  # noqa: E501

        :return: The wwn of this ImportXtremioVolumeInstance.  # noqa: E501
        :rtype: str
        """
        return self._wwn

    @wwn.setter
    def wwn(self, wwn):
        """Sets the wwn of this ImportXtremioVolumeInstance.

        World Wide Name (WWN) of the XtremIO volume.  # noqa: E501

        :param wwn: The wwn of this ImportXtremioVolumeInstance.  # noqa: E501
        :type: str
        """

        self._wwn = wwn

    @property
    def name(self):
        """Gets the name of this ImportXtremioVolumeInstance.  # noqa: E501

        Name of the XtremIO volume.  This property supports case-insensitive filtering.  # noqa: E501

        :return: The name of this ImportXtremioVolumeInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ImportXtremioVolumeInstance.

        Name of the XtremIO volume.  This property supports case-insensitive filtering.  # noqa: E501

        :param name: The name of this ImportXtremioVolumeInstance.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def size(self):
        """Gets the size of this ImportXtremioVolumeInstance.  # noqa: E501

        Size of the XtremIO volume, in bytes.  # noqa: E501

        :return: The size of this ImportXtremioVolumeInstance.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ImportXtremioVolumeInstance.

        Size of the XtremIO volume, in bytes.  # noqa: E501

        :param size: The size of this ImportXtremioVolumeInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                size is not None and size > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `size`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                size is not None and size < 0):  # noqa: E501
            raise ValueError("Invalid value for `size`, must be a value greater than or equal to `0`")  # noqa: E501

        self._size = size

    @property
    def severity(self):
        """Gets the severity of this ImportXtremioVolumeInstance.  # noqa: E501


        :return: The severity of this ImportXtremioVolumeInstance.  # noqa: E501
        :rtype: XtremIOObjectSeverityEnum
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this ImportXtremioVolumeInstance.


        :param severity: The severity of this ImportXtremioVolumeInstance.  # noqa: E501
        :type: XtremIOObjectSeverityEnum
        """

        self._severity = severity

    @property
    def certainty(self):
        """Gets the certainty of this ImportXtremioVolumeInstance.  # noqa: E501


        :return: The certainty of this ImportXtremioVolumeInstance.  # noqa: E501
        :rtype: XtremIOCertaintyEnum
        """
        return self._certainty

    @certainty.setter
    def certainty(self, certainty):
        """Sets the certainty of this ImportXtremioVolumeInstance.


        :param certainty: The certainty of this ImportXtremioVolumeInstance.  # noqa: E501
        :type: XtremIOCertaintyEnum
        """

        self._certainty = certainty

    @property
    def is_read_only(self):
        """Gets the is_read_only of this ImportXtremioVolumeInstance.  # noqa: E501

        Indicates whether the XtremIO volume is a read only volume.  # noqa: E501

        :return: The is_read_only of this ImportXtremioVolumeInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_read_only

    @is_read_only.setter
    def is_read_only(self, is_read_only):
        """Sets the is_read_only of this ImportXtremioVolumeInstance.

        Indicates whether the XtremIO volume is a read only volume.  # noqa: E501

        :param is_read_only: The is_read_only of this ImportXtremioVolumeInstance.  # noqa: E501
        :type: bool
        """

        self._is_read_only = is_read_only

    @property
    def is_replication_destination(self):
        """Gets the is_replication_destination of this ImportXtremioVolumeInstance.  # noqa: E501

        Indicates whether the XtremIO volume is a replication destination.  # noqa: E501

        :return: The is_replication_destination of this ImportXtremioVolumeInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_replication_destination

    @is_replication_destination.setter
    def is_replication_destination(self, is_replication_destination):
        """Sets the is_replication_destination of this ImportXtremioVolumeInstance.

        Indicates whether the XtremIO volume is a replication destination.  # noqa: E501

        :param is_replication_destination: The is_replication_destination of this ImportXtremioVolumeInstance.  # noqa: E501
        :type: bool
        """

        self._is_replication_destination = is_replication_destination

    @property
    def importable_criteria(self):
        """Gets the importable_criteria of this ImportXtremioVolumeInstance.  # noqa: E501

        Indicates the reason when the volume is not importable. If the value is not Ready, the volume is not importable.  # noqa: E501

        :return: The importable_criteria of this ImportXtremioVolumeInstance.  # noqa: E501
        :rtype: VolumeImportableCriteriaEnum
        """
        return self._importable_criteria

    @importable_criteria.setter
    def importable_criteria(self, importable_criteria):
        """Sets the importable_criteria of this ImportXtremioVolumeInstance.

        Indicates the reason when the volume is not importable. If the value is not Ready, the volume is not importable.  # noqa: E501

        :param importable_criteria: The importable_criteria of this ImportXtremioVolumeInstance.  # noqa: E501
        :type: VolumeImportableCriteriaEnum
        """

        self._importable_criteria = importable_criteria

    @property
    def import_xtremio_id(self):
        """Gets the import_xtremio_id of this ImportXtremioVolumeInstance.  # noqa: E501

        Unique identifier of the XtremIO storage system to which the XtremIO volume belongs.  # noqa: E501

        :return: The import_xtremio_id of this ImportXtremioVolumeInstance.  # noqa: E501
        :rtype: str
        """
        return self._import_xtremio_id

    @import_xtremio_id.setter
    def import_xtremio_id(self, import_xtremio_id):
        """Sets the import_xtremio_id of this ImportXtremioVolumeInstance.

        Unique identifier of the XtremIO storage system to which the XtremIO volume belongs.  # noqa: E501

        :param import_xtremio_id: The import_xtremio_id of this ImportXtremioVolumeInstance.  # noqa: E501
        :type: str
        """

        self._import_xtremio_id = import_xtremio_id

    @property
    def import_xtremio_consistency_group_id(self):
        """Gets the import_xtremio_consistency_group_id of this ImportXtremioVolumeInstance.  # noqa: E501

        Unique identifier of the consistency group to which the XtremIO volume belongs. This value is null if the volume does not belong to a consistency group or a volume belongs to multiple consistency groups. The volume that belongs to multiple consistency groups will be imported as an individual volume and the attribute import_xtremio_consistency_group_names contains the names of the consistency groups of which the volume is a member.  # noqa: E501

        :return: The import_xtremio_consistency_group_id of this ImportXtremioVolumeInstance.  # noqa: E501
        :rtype: str
        """
        return self._import_xtremio_consistency_group_id

    @import_xtremio_consistency_group_id.setter
    def import_xtremio_consistency_group_id(self, import_xtremio_consistency_group_id):
        """Sets the import_xtremio_consistency_group_id of this ImportXtremioVolumeInstance.

        Unique identifier of the consistency group to which the XtremIO volume belongs. This value is null if the volume does not belong to a consistency group or a volume belongs to multiple consistency groups. The volume that belongs to multiple consistency groups will be imported as an individual volume and the attribute import_xtremio_consistency_group_names contains the names of the consistency groups of which the volume is a member.  # noqa: E501

        :param import_xtremio_consistency_group_id: The import_xtremio_consistency_group_id of this ImportXtremioVolumeInstance.  # noqa: E501
        :type: str
        """

        self._import_xtremio_consistency_group_id = import_xtremio_consistency_group_id

    @property
    def import_xtremio_consistency_group_names(self):
        """Gets the import_xtremio_consistency_group_names of this ImportXtremioVolumeInstance.  # noqa: E501

        Names of the consistency groups of which the volume is a member, if the volume belong to multiple consistency groups. The attribute will be empty for a volume that is part of a single consistency group.  # noqa: E501

        :return: The import_xtremio_consistency_group_names of this ImportXtremioVolumeInstance.  # noqa: E501
        :rtype: list[str]
        """
        return self._import_xtremio_consistency_group_names

    @import_xtremio_consistency_group_names.setter
    def import_xtremio_consistency_group_names(self, import_xtremio_consistency_group_names):
        """Sets the import_xtremio_consistency_group_names of this ImportXtremioVolumeInstance.

        Names of the consistency groups of which the volume is a member, if the volume belong to multiple consistency groups. The attribute will be empty for a volume that is part of a single consistency group.  # noqa: E501

        :param import_xtremio_consistency_group_names: The import_xtremio_consistency_group_names of this ImportXtremioVolumeInstance.  # noqa: E501
        :type: list[str]
        """

        self._import_xtremio_consistency_group_names = import_xtremio_consistency_group_names

    @property
    def severity_l10n(self):
        """Gets the severity_l10n of this ImportXtremioVolumeInstance.  # noqa: E501

        Localized message string corresponding to severity Was added in version 1.0.2.  # noqa: E501

        :return: The severity_l10n of this ImportXtremioVolumeInstance.  # noqa: E501
        :rtype: str
        """
        return self._severity_l10n

    @severity_l10n.setter
    def severity_l10n(self, severity_l10n):
        """Sets the severity_l10n of this ImportXtremioVolumeInstance.

        Localized message string corresponding to severity Was added in version 1.0.2.  # noqa: E501

        :param severity_l10n: The severity_l10n of this ImportXtremioVolumeInstance.  # noqa: E501
        :type: str
        """

        self._severity_l10n = severity_l10n

    @property
    def certainty_l10n(self):
        """Gets the certainty_l10n of this ImportXtremioVolumeInstance.  # noqa: E501

        Localized message string corresponding to certainty Was added in version 1.0.2.  # noqa: E501

        :return: The certainty_l10n of this ImportXtremioVolumeInstance.  # noqa: E501
        :rtype: str
        """
        return self._certainty_l10n

    @certainty_l10n.setter
    def certainty_l10n(self, certainty_l10n):
        """Sets the certainty_l10n of this ImportXtremioVolumeInstance.

        Localized message string corresponding to certainty Was added in version 1.0.2.  # noqa: E501

        :param certainty_l10n: The certainty_l10n of this ImportXtremioVolumeInstance.  # noqa: E501
        :type: str
        """

        self._certainty_l10n = certainty_l10n

    @property
    def importable_criteria_l10n(self):
        """Gets the importable_criteria_l10n of this ImportXtremioVolumeInstance.  # noqa: E501

        Localized message string corresponding to importable_criteria Was added in version 1.0.2.  # noqa: E501

        :return: The importable_criteria_l10n of this ImportXtremioVolumeInstance.  # noqa: E501
        :rtype: str
        """
        return self._importable_criteria_l10n

    @importable_criteria_l10n.setter
    def importable_criteria_l10n(self, importable_criteria_l10n):
        """Sets the importable_criteria_l10n of this ImportXtremioVolumeInstance.

        Localized message string corresponding to importable_criteria Was added in version 1.0.2.  # noqa: E501

        :param importable_criteria_l10n: The importable_criteria_l10n of this ImportXtremioVolumeInstance.  # noqa: E501
        :type: str
        """

        self._importable_criteria_l10n = importable_criteria_l10n

    @property
    def import_xtremio(self):
        """Gets the import_xtremio of this ImportXtremioVolumeInstance.  # noqa: E501

        This is the embeddable reference form of import_xtremio_id attribute.  # noqa: E501

        :return: The import_xtremio of this ImportXtremioVolumeInstance.  # noqa: E501
        :rtype: ImportXtremioInstance
        """
        return self._import_xtremio

    @import_xtremio.setter
    def import_xtremio(self, import_xtremio):
        """Sets the import_xtremio of this ImportXtremioVolumeInstance.

        This is the embeddable reference form of import_xtremio_id attribute.  # noqa: E501

        :param import_xtremio: The import_xtremio of this ImportXtremioVolumeInstance.  # noqa: E501
        :type: ImportXtremioInstance
        """

        self._import_xtremio = import_xtremio

    @property
    def import_xtremio_consistency_group(self):
        """Gets the import_xtremio_consistency_group of this ImportXtremioVolumeInstance.  # noqa: E501

        This is the embeddable reference form of import_xtremio_consistency_group_id attribute.  # noqa: E501

        :return: The import_xtremio_consistency_group of this ImportXtremioVolumeInstance.  # noqa: E501
        :rtype: ImportXtremioConsistencyGroupInstance
        """
        return self._import_xtremio_consistency_group

    @import_xtremio_consistency_group.setter
    def import_xtremio_consistency_group(self, import_xtremio_consistency_group):
        """Sets the import_xtremio_consistency_group of this ImportXtremioVolumeInstance.

        This is the embeddable reference form of import_xtremio_consistency_group_id attribute.  # noqa: E501

        :param import_xtremio_consistency_group: The import_xtremio_consistency_group of this ImportXtremioVolumeInstance.  # noqa: E501
        :type: ImportXtremioConsistencyGroupInstance
        """

        self._import_xtremio_consistency_group = import_xtremio_consistency_group

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImportXtremioVolumeInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportXtremioVolumeInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImportXtremioVolumeInstance):
            return True

        return self.to_dict() != other.to_dict()
