# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class FlrCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mode': 'FileSystemFLRModeEnum',
        'minimum_retention': 'str',
        'default_retention': 'str',
        'maximum_retention': 'str'
    }

    attribute_map = {
        'mode': 'mode',
        'minimum_retention': 'minimum_retention',
        'default_retention': 'default_retention',
        'maximum_retention': 'maximum_retention'
    }

    def __init__(self, mode=None, minimum_retention='1D', default_retention=None, maximum_retention='infinite', _configuration=None):  # noqa: E501
        """FlrCreate - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._mode = None
        self._minimum_retention = None
        self._default_retention = None
        self._maximum_retention = None
        self.discriminator = None

        if mode is not None:
            self.mode = mode
        if minimum_retention is not None:
            self.minimum_retention = minimum_retention
        if default_retention is not None:
            self.default_retention = default_retention
        if maximum_retention is not None:
            self.maximum_retention = maximum_retention

    @property
    def mode(self):
        """Gets the mode of this FlrCreate.  # noqa: E501


        :return: The mode of this FlrCreate.  # noqa: E501
        :rtype: FileSystemFLRModeEnum
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this FlrCreate.


        :param mode: The mode of this FlrCreate.  # noqa: E501
        :type: FileSystemFLRModeEnum
        """

        self._mode = mode

    @property
    def minimum_retention(self):
        """Gets the minimum_retention of this FlrCreate.  # noqa: E501

        The shortest retention period for which files on an FLR-enabled file system can be locked and protected from deletion. This value must be less than or equal to the maximum retention period. Any attempt to lock a file for less than the minimum retention period results in the file being locked until the current system time plus the minimum retention period is reached. Format [default_int][Y|M|D] (example 5Y for 5 years). Specify Y for years, M for months, D for days, or the keyword infinite. Setting infinite means that the files can never be deleted. This attribute should be set only for FLR enabled filesystems.   # noqa: E501

        :return: The minimum_retention of this FlrCreate.  # noqa: E501
        :rtype: str
        """
        return self._minimum_retention

    @minimum_retention.setter
    def minimum_retention(self, minimum_retention):
        """Sets the minimum_retention of this FlrCreate.

        The shortest retention period for which files on an FLR-enabled file system can be locked and protected from deletion. This value must be less than or equal to the maximum retention period. Any attempt to lock a file for less than the minimum retention period results in the file being locked until the current system time plus the minimum retention period is reached. Format [default_int][Y|M|D] (example 5Y for 5 years). Specify Y for years, M for months, D for days, or the keyword infinite. Setting infinite means that the files can never be deleted. This attribute should be set only for FLR enabled filesystems.   # noqa: E501

        :param minimum_retention: The minimum_retention of this FlrCreate.  # noqa: E501
        :type: str
        """

        self._minimum_retention = minimum_retention

    @property
    def default_retention(self):
        """Gets the default_retention of this FlrCreate.  # noqa: E501

        The default retention period that is used in an FLR-enabled file system when a file is locked and a retention period is not specified. This value must be greater than or equal to the minimum retention period, and less than or equal to the maximum retention period. Format [default_int][Y|M|D] (example 5Y for 5 years). Specify Y for years, M for months, D for days, or infinite. The default value for the default retention period is infinite for Enterprise FLR mode, and 1 year for Compliance FLR mode. This attribute should be set only for FLR enabled filesystems.   # noqa: E501

        :return: The default_retention of this FlrCreate.  # noqa: E501
        :rtype: str
        """
        return self._default_retention

    @default_retention.setter
    def default_retention(self, default_retention):
        """Sets the default_retention of this FlrCreate.

        The default retention period that is used in an FLR-enabled file system when a file is locked and a retention period is not specified. This value must be greater than or equal to the minimum retention period, and less than or equal to the maximum retention period. Format [default_int][Y|M|D] (example 5Y for 5 years). Specify Y for years, M for months, D for days, or infinite. The default value for the default retention period is infinite for Enterprise FLR mode, and 1 year for Compliance FLR mode. This attribute should be set only for FLR enabled filesystems.   # noqa: E501

        :param default_retention: The default_retention of this FlrCreate.  # noqa: E501
        :type: str
        """

        self._default_retention = default_retention

    @property
    def maximum_retention(self):
        """Gets the maximum_retention of this FlrCreate.  # noqa: E501

        The longest retention period for which files on an FLR-enabled file system can be locked and protected from deletion. Any attempt to lock a file for more than this maximum retention period results in the file being locked until the current system time plus the maximum retention period is reached. Format [default_int][Y|M|D] (example 5Y for 5 years). Specify Y for years, M for months, D for days, or infinite. Setting infinite means that the files can never be deleted. This attribute should be set only for FLR enabled filesystems.   # noqa: E501

        :return: The maximum_retention of this FlrCreate.  # noqa: E501
        :rtype: str
        """
        return self._maximum_retention

    @maximum_retention.setter
    def maximum_retention(self, maximum_retention):
        """Sets the maximum_retention of this FlrCreate.

        The longest retention period for which files on an FLR-enabled file system can be locked and protected from deletion. Any attempt to lock a file for more than this maximum retention period results in the file being locked until the current system time plus the maximum retention period is reached. Format [default_int][Y|M|D] (example 5Y for 5 years). Specify Y for years, M for months, D for days, or infinite. Setting infinite means that the files can never be deleted. This attribute should be set only for FLR enabled filesystems.   # noqa: E501

        :param maximum_retention: The maximum_retention of this FlrCreate.  # noqa: E501
        :type: str
        """

        self._maximum_retention = maximum_retention

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FlrCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FlrCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FlrCreate):
            return True

        return self.to_dict() != other.to_dict()
