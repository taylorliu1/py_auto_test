# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class ReplicationGroupInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'storage_container_id': 'str',
        'name': 'str',
        'description': 'str',
        'creator_type': 'StorageCreatorTypeEnum',
        'creation_timestamp': 'datetime',
        'is_replication_destination': 'bool',
        'creator_type_l10n': 'str',
        'virtual_volumes': 'list[VirtualVolumeInstance]',
        'storage_container': 'StorageContainerInstance',
        'parent': 'ReplicationGroupInstance',
        'child_replication_groups': 'list[ReplicationGroupInstance]',
        'source': 'ReplicationGroupInstance',
        'target_replication_groups': 'list[ReplicationGroupInstance]',
        'virtual_machines': 'list[VirtualMachineInstance]'
    }

    attribute_map = {
        'id': 'id',
        'storage_container_id': 'storage_container_id',
        'name': 'name',
        'description': 'description',
        'creator_type': 'creator_type',
        'creation_timestamp': 'creation_timestamp',
        'is_replication_destination': 'is_replication_destination',
        'creator_type_l10n': 'creator_type_l10n',
        'virtual_volumes': 'virtual_volumes',
        'storage_container': 'storage_container',
        'parent': 'parent',
        'child_replication_groups': 'child_replication_groups',
        'source': 'source',
        'target_replication_groups': 'target_replication_groups',
        'virtual_machines': 'virtual_machines'
    }

    def __init__(self, id=None, storage_container_id=None, name=None, description=None, creator_type=None, creation_timestamp=None, is_replication_destination=False, creator_type_l10n=None, virtual_volumes=None, storage_container=None, parent=None, child_replication_groups=None, source=None, target_replication_groups=None, virtual_machines=None, _configuration=None):  # noqa: E501
        """ReplicationGroupInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._storage_container_id = None
        self._name = None
        self._description = None
        self._creator_type = None
        self._creation_timestamp = None
        self._is_replication_destination = None
        self._creator_type_l10n = None
        self._virtual_volumes = None
        self._storage_container = None
        self._parent = None
        self._child_replication_groups = None
        self._source = None
        self._target_replication_groups = None
        self._virtual_machines = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if storage_container_id is not None:
            self.storage_container_id = storage_container_id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if creator_type is not None:
            self.creator_type = creator_type
        if creation_timestamp is not None:
            self.creation_timestamp = creation_timestamp
        if is_replication_destination is not None:
            self.is_replication_destination = is_replication_destination
        if creator_type_l10n is not None:
            self.creator_type_l10n = creator_type_l10n
        if virtual_volumes is not None:
            self.virtual_volumes = virtual_volumes
        if storage_container is not None:
            self.storage_container = storage_container
        if parent is not None:
            self.parent = parent
        if child_replication_groups is not None:
            self.child_replication_groups = child_replication_groups
        if source is not None:
            self.source = source
        if target_replication_groups is not None:
            self.target_replication_groups = target_replication_groups
        if virtual_machines is not None:
            self.virtual_machines = virtual_machines

    @property
    def id(self):
        """Gets the id of this ReplicationGroupInstance.  # noqa: E501

        Unique identifier of the Replication Group instance.  # noqa: E501

        :return: The id of this ReplicationGroupInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReplicationGroupInstance.

        Unique identifier of the Replication Group instance.  # noqa: E501

        :param id: The id of this ReplicationGroupInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def storage_container_id(self):
        """Gets the storage_container_id of this ReplicationGroupInstance.  # noqa: E501

        The storage container where the replication group resides.  # noqa: E501

        :return: The storage_container_id of this ReplicationGroupInstance.  # noqa: E501
        :rtype: str
        """
        return self._storage_container_id

    @storage_container_id.setter
    def storage_container_id(self, storage_container_id):
        """Sets the storage_container_id of this ReplicationGroupInstance.

        The storage container where the replication group resides.  # noqa: E501

        :param storage_container_id: The storage_container_id of this ReplicationGroupInstance.  # noqa: E501
        :type: str
        """

        self._storage_container_id = storage_container_id

    @property
    def name(self):
        """Gets the name of this ReplicationGroupInstance.  # noqa: E501

        Name of the Replication Group.  This property supports case-insensitive filtering.  # noqa: E501

        :return: The name of this ReplicationGroupInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReplicationGroupInstance.

        Name of the Replication Group.  This property supports case-insensitive filtering.  # noqa: E501

        :param name: The name of this ReplicationGroupInstance.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this ReplicationGroupInstance.  # noqa: E501

        Description of the Replication Group.  # noqa: E501

        :return: The description of this ReplicationGroupInstance.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ReplicationGroupInstance.

        Description of the Replication Group.  # noqa: E501

        :param description: The description of this ReplicationGroupInstance.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def creator_type(self):
        """Gets the creator_type of this ReplicationGroupInstance.  # noqa: E501


        :return: The creator_type of this ReplicationGroupInstance.  # noqa: E501
        :rtype: StorageCreatorTypeEnum
        """
        return self._creator_type

    @creator_type.setter
    def creator_type(self, creator_type):
        """Sets the creator_type of this ReplicationGroupInstance.


        :param creator_type: The creator_type of this ReplicationGroupInstance.  # noqa: E501
        :type: StorageCreatorTypeEnum
        """

        self._creator_type = creator_type

    @property
    def creation_timestamp(self):
        """Gets the creation_timestamp of this ReplicationGroupInstance.  # noqa: E501

        Timestamp when given replication group was created.  # noqa: E501

        :return: The creation_timestamp of this ReplicationGroupInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_timestamp

    @creation_timestamp.setter
    def creation_timestamp(self, creation_timestamp):
        """Sets the creation_timestamp of this ReplicationGroupInstance.

        Timestamp when given replication group was created.  # noqa: E501

        :param creation_timestamp: The creation_timestamp of this ReplicationGroupInstance.  # noqa: E501
        :type: datetime
        """

        self._creation_timestamp = creation_timestamp

    @property
    def is_replication_destination(self):
        """Gets the is_replication_destination of this ReplicationGroupInstance.  # noqa: E501

        Indicates whether replication group is replication destination or not.  # noqa: E501

        :return: The is_replication_destination of this ReplicationGroupInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_replication_destination

    @is_replication_destination.setter
    def is_replication_destination(self, is_replication_destination):
        """Sets the is_replication_destination of this ReplicationGroupInstance.

        Indicates whether replication group is replication destination or not.  # noqa: E501

        :param is_replication_destination: The is_replication_destination of this ReplicationGroupInstance.  # noqa: E501
        :type: bool
        """

        self._is_replication_destination = is_replication_destination

    @property
    def creator_type_l10n(self):
        """Gets the creator_type_l10n of this ReplicationGroupInstance.  # noqa: E501

        Localized message string corresponding to creator_type Was added in version 3.0.0.0.  # noqa: E501

        :return: The creator_type_l10n of this ReplicationGroupInstance.  # noqa: E501
        :rtype: str
        """
        return self._creator_type_l10n

    @creator_type_l10n.setter
    def creator_type_l10n(self, creator_type_l10n):
        """Sets the creator_type_l10n of this ReplicationGroupInstance.

        Localized message string corresponding to creator_type Was added in version 3.0.0.0.  # noqa: E501

        :param creator_type_l10n: The creator_type_l10n of this ReplicationGroupInstance.  # noqa: E501
        :type: str
        """

        self._creator_type_l10n = creator_type_l10n

    @property
    def virtual_volumes(self):
        """Gets the virtual_volumes of this ReplicationGroupInstance.  # noqa: E501

        This is the inverse of the resource type virtual_volume association.  # noqa: E501

        :return: The virtual_volumes of this ReplicationGroupInstance.  # noqa: E501
        :rtype: list[VirtualVolumeInstance]
        """
        return self._virtual_volumes

    @virtual_volumes.setter
    def virtual_volumes(self, virtual_volumes):
        """Sets the virtual_volumes of this ReplicationGroupInstance.

        This is the inverse of the resource type virtual_volume association.  # noqa: E501

        :param virtual_volumes: The virtual_volumes of this ReplicationGroupInstance.  # noqa: E501
        :type: list[VirtualVolumeInstance]
        """

        self._virtual_volumes = virtual_volumes

    @property
    def storage_container(self):
        """Gets the storage_container of this ReplicationGroupInstance.  # noqa: E501

        This is the embeddable reference form of storage_container_id attribute.  # noqa: E501

        :return: The storage_container of this ReplicationGroupInstance.  # noqa: E501
        :rtype: StorageContainerInstance
        """
        return self._storage_container

    @storage_container.setter
    def storage_container(self, storage_container):
        """Sets the storage_container of this ReplicationGroupInstance.

        This is the embeddable reference form of storage_container_id attribute.  # noqa: E501

        :param storage_container: The storage_container of this ReplicationGroupInstance.  # noqa: E501
        :type: StorageContainerInstance
        """

        self._storage_container = storage_container

    @property
    def parent(self):
        """Gets the parent of this ReplicationGroupInstance.  # noqa: E501

        This is the embeddable reference form of parent_id attribute.  # noqa: E501

        :return: The parent of this ReplicationGroupInstance.  # noqa: E501
        :rtype: ReplicationGroupInstance
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this ReplicationGroupInstance.

        This is the embeddable reference form of parent_id attribute.  # noqa: E501

        :param parent: The parent of this ReplicationGroupInstance.  # noqa: E501
        :type: ReplicationGroupInstance
        """

        self._parent = parent

    @property
    def child_replication_groups(self):
        """Gets the child_replication_groups of this ReplicationGroupInstance.  # noqa: E501

        This is the inverse of the resource type replication_group association.  # noqa: E501

        :return: The child_replication_groups of this ReplicationGroupInstance.  # noqa: E501
        :rtype: list[ReplicationGroupInstance]
        """
        return self._child_replication_groups

    @child_replication_groups.setter
    def child_replication_groups(self, child_replication_groups):
        """Sets the child_replication_groups of this ReplicationGroupInstance.

        This is the inverse of the resource type replication_group association.  # noqa: E501

        :param child_replication_groups: The child_replication_groups of this ReplicationGroupInstance.  # noqa: E501
        :type: list[ReplicationGroupInstance]
        """

        self._child_replication_groups = child_replication_groups

    @property
    def source(self):
        """Gets the source of this ReplicationGroupInstance.  # noqa: E501

        This is the embeddable reference form of source_id attribute.  # noqa: E501

        :return: The source of this ReplicationGroupInstance.  # noqa: E501
        :rtype: ReplicationGroupInstance
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ReplicationGroupInstance.

        This is the embeddable reference form of source_id attribute.  # noqa: E501

        :param source: The source of this ReplicationGroupInstance.  # noqa: E501
        :type: ReplicationGroupInstance
        """

        self._source = source

    @property
    def target_replication_groups(self):
        """Gets the target_replication_groups of this ReplicationGroupInstance.  # noqa: E501

        This is the inverse of the resource type replication_group association.  # noqa: E501

        :return: The target_replication_groups of this ReplicationGroupInstance.  # noqa: E501
        :rtype: list[ReplicationGroupInstance]
        """
        return self._target_replication_groups

    @target_replication_groups.setter
    def target_replication_groups(self, target_replication_groups):
        """Sets the target_replication_groups of this ReplicationGroupInstance.

        This is the inverse of the resource type replication_group association.  # noqa: E501

        :param target_replication_groups: The target_replication_groups of this ReplicationGroupInstance.  # noqa: E501
        :type: list[ReplicationGroupInstance]
        """

        self._target_replication_groups = target_replication_groups

    @property
    def virtual_machines(self):
        """Gets the virtual_machines of this ReplicationGroupInstance.  # noqa: E501

        This is the inverse of the resource type virtual_machine association.  # noqa: E501

        :return: The virtual_machines of this ReplicationGroupInstance.  # noqa: E501
        :rtype: list[VirtualMachineInstance]
        """
        return self._virtual_machines

    @virtual_machines.setter
    def virtual_machines(self, virtual_machines):
        """Sets the virtual_machines of this ReplicationGroupInstance.

        This is the inverse of the resource type virtual_machine association.  # noqa: E501

        :param virtual_machines: The virtual_machines of this ReplicationGroupInstance.  # noqa: E501
        :type: list[VirtualMachineInstance]
        """

        self._virtual_machines = virtual_machines

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReplicationGroupInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReplicationGroupInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReplicationGroupInstance):
            return True

        return self.to_dict() != other.to_dict()
