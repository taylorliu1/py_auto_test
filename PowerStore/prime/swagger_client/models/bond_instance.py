# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class BondInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'partner_id': 'str',
        'is_link_up': 'bool',
        'status': 'BondStatusEnum',
        'mtu': 'int',
        'mode': 'BondingModeEnum',
        'type': 'BondingTypeEnum',
        'description': 'str',
        'status_l10n': 'str',
        'mode_l10n': 'str',
        'type_l10n': 'str',
        'ip_ports': 'list[IpPortInstance]',
        'partner': 'BondInstance',
        'eth_ports': 'list[EthPortInstance]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'partner_id': 'partner_id',
        'is_link_up': 'is_link_up',
        'status': 'status',
        'mtu': 'mtu',
        'mode': 'mode',
        'type': 'type',
        'description': 'description',
        'status_l10n': 'status_l10n',
        'mode_l10n': 'mode_l10n',
        'type_l10n': 'type_l10n',
        'ip_ports': 'ip_ports',
        'partner': 'partner',
        'eth_ports': 'eth_ports'
    }

    def __init__(self, id=None, name=None, partner_id=None, is_link_up=None, status=None, mtu=None, mode=None, type=None, description=None, status_l10n=None, mode_l10n=None, type_l10n=None, ip_ports=None, partner=None, eth_ports=None, _configuration=None):  # noqa: E501
        """BondInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._partner_id = None
        self._is_link_up = None
        self._status = None
        self._mtu = None
        self._mode = None
        self._type = None
        self._description = None
        self._status_l10n = None
        self._mode_l10n = None
        self._type_l10n = None
        self._ip_ports = None
        self._partner = None
        self._eth_ports = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if partner_id is not None:
            self.partner_id = partner_id
        if is_link_up is not None:
            self.is_link_up = is_link_up
        if status is not None:
            self.status = status
        if mtu is not None:
            self.mtu = mtu
        if mode is not None:
            self.mode = mode
        if type is not None:
            self.type = type
        if description is not None:
            self.description = description
        if status_l10n is not None:
            self.status_l10n = status_l10n
        if mode_l10n is not None:
            self.mode_l10n = mode_l10n
        if type_l10n is not None:
            self.type_l10n = type_l10n
        if ip_ports is not None:
            self.ip_ports = ip_ports
        if partner is not None:
            self.partner = partner
        if eth_ports is not None:
            self.eth_ports = eth_ports

    @property
    def id(self):
        """Gets the id of this BondInstance.  # noqa: E501

        Unique identifier of the bond.  # noqa: E501

        :return: The id of this BondInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BondInstance.

        Unique identifier of the bond.  # noqa: E501

        :param id: The id of this BondInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this BondInstance.  # noqa: E501

        Bond name.  This property supports case-insensitive filtering.  # noqa: E501

        :return: The name of this BondInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BondInstance.

        Bond name.  This property supports case-insensitive filtering.  # noqa: E501

        :param name: The name of this BondInstance.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 15):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `15`")  # noqa: E501

        self._name = name

    @property
    def partner_id(self):
        """Gets the partner_id of this BondInstance.  # noqa: E501

        Identifier of the bond with the same physical location on the other node of the appliance. Partner ports are configured symmetrically for HA and load balancing purposes within the appliance.  Was added in version 2.0.0.0.  # noqa: E501

        :return: The partner_id of this BondInstance.  # noqa: E501
        :rtype: str
        """
        return self._partner_id

    @partner_id.setter
    def partner_id(self, partner_id):
        """Sets the partner_id of this BondInstance.

        Identifier of the bond with the same physical location on the other node of the appliance. Partner ports are configured symmetrically for HA and load balancing purposes within the appliance.  Was added in version 2.0.0.0.  # noqa: E501

        :param partner_id: The partner_id of this BondInstance.  # noqa: E501
        :type: str
        """

        self._partner_id = partner_id

    @property
    def is_link_up(self):
        """Gets the is_link_up of this BondInstance.  # noqa: E501

        Indicates whether the bond's link is up. Values are: * true - Link is up. * false - Link is down.   # noqa: E501

        :return: The is_link_up of this BondInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_link_up

    @is_link_up.setter
    def is_link_up(self, is_link_up):
        """Sets the is_link_up of this BondInstance.

        Indicates whether the bond's link is up. Values are: * true - Link is up. * false - Link is down.   # noqa: E501

        :param is_link_up: The is_link_up of this BondInstance.  # noqa: E501
        :type: bool
        """

        self._is_link_up = is_link_up

    @property
    def status(self):
        """Gets the status of this BondInstance.  # noqa: E501

         Was added in version 3.0.0.0.  # noqa: E501

        :return: The status of this BondInstance.  # noqa: E501
        :rtype: BondStatusEnum
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BondInstance.

         Was added in version 3.0.0.0.  # noqa: E501

        :param status: The status of this BondInstance.  # noqa: E501
        :type: BondStatusEnum
        """

        self._status = status

    @property
    def mtu(self):
        """Gets the mtu of this BondInstance.  # noqa: E501

        Maximum Transmission Unit (MTU) packet size of the bond, in bytes.  # noqa: E501

        :return: The mtu of this BondInstance.  # noqa: E501
        :rtype: int
        """
        return self._mtu

    @mtu.setter
    def mtu(self, mtu):
        """Sets the mtu of this BondInstance.

        Maximum Transmission Unit (MTU) packet size of the bond, in bytes.  # noqa: E501

        :param mtu: The mtu of this BondInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                mtu is not None and mtu > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `mtu`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                mtu is not None and mtu < 0):  # noqa: E501
            raise ValueError("Invalid value for `mtu`, must be a value greater than or equal to `0`")  # noqa: E501

        self._mtu = mtu

    @property
    def mode(self):
        """Gets the mode of this BondInstance.  # noqa: E501


        :return: The mode of this BondInstance.  # noqa: E501
        :rtype: BondingModeEnum
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this BondInstance.


        :param mode: The mode of this BondInstance.  # noqa: E501
        :type: BondingModeEnum
        """

        self._mode = mode

    @property
    def type(self):
        """Gets the type of this BondInstance.  # noqa: E501

         Was added in version 2.0.0.0.  # noqa: E501

        :return: The type of this BondInstance.  # noqa: E501
        :rtype: BondingTypeEnum
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BondInstance.

         Was added in version 2.0.0.0.  # noqa: E501

        :param type: The type of this BondInstance.  # noqa: E501
        :type: BondingTypeEnum
        """

        self._type = type

    @property
    def description(self):
        """Gets the description of this BondInstance.  # noqa: E501

        User supplied description of the bond.  # noqa: E501

        :return: The description of this BondInstance.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BondInstance.

        User supplied description of the bond.  # noqa: E501

        :param description: The description of this BondInstance.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def status_l10n(self):
        """Gets the status_l10n of this BondInstance.  # noqa: E501

        Localized message string corresponding to status Was added in version 3.0.0.0.  # noqa: E501

        :return: The status_l10n of this BondInstance.  # noqa: E501
        :rtype: str
        """
        return self._status_l10n

    @status_l10n.setter
    def status_l10n(self, status_l10n):
        """Sets the status_l10n of this BondInstance.

        Localized message string corresponding to status Was added in version 3.0.0.0.  # noqa: E501

        :param status_l10n: The status_l10n of this BondInstance.  # noqa: E501
        :type: str
        """

        self._status_l10n = status_l10n

    @property
    def mode_l10n(self):
        """Gets the mode_l10n of this BondInstance.  # noqa: E501

        Localized message string corresponding to mode  # noqa: E501

        :return: The mode_l10n of this BondInstance.  # noqa: E501
        :rtype: str
        """
        return self._mode_l10n

    @mode_l10n.setter
    def mode_l10n(self, mode_l10n):
        """Sets the mode_l10n of this BondInstance.

        Localized message string corresponding to mode  # noqa: E501

        :param mode_l10n: The mode_l10n of this BondInstance.  # noqa: E501
        :type: str
        """

        self._mode_l10n = mode_l10n

    @property
    def type_l10n(self):
        """Gets the type_l10n of this BondInstance.  # noqa: E501

        Localized message string corresponding to type Was added in version 2.0.0.0.  # noqa: E501

        :return: The type_l10n of this BondInstance.  # noqa: E501
        :rtype: str
        """
        return self._type_l10n

    @type_l10n.setter
    def type_l10n(self, type_l10n):
        """Sets the type_l10n of this BondInstance.

        Localized message string corresponding to type Was added in version 2.0.0.0.  # noqa: E501

        :param type_l10n: The type_l10n of this BondInstance.  # noqa: E501
        :type: str
        """

        self._type_l10n = type_l10n

    @property
    def ip_ports(self):
        """Gets the ip_ports of this BondInstance.  # noqa: E501

        This is the inverse of the resource type ip_port association.  # noqa: E501

        :return: The ip_ports of this BondInstance.  # noqa: E501
        :rtype: list[IpPortInstance]
        """
        return self._ip_ports

    @ip_ports.setter
    def ip_ports(self, ip_ports):
        """Sets the ip_ports of this BondInstance.

        This is the inverse of the resource type ip_port association.  # noqa: E501

        :param ip_ports: The ip_ports of this BondInstance.  # noqa: E501
        :type: list[IpPortInstance]
        """

        self._ip_ports = ip_ports

    @property
    def partner(self):
        """Gets the partner of this BondInstance.  # noqa: E501

        This is the embeddable reference form of partner_id attribute.  # noqa: E501

        :return: The partner of this BondInstance.  # noqa: E501
        :rtype: BondInstance
        """
        return self._partner

    @partner.setter
    def partner(self, partner):
        """Sets the partner of this BondInstance.

        This is the embeddable reference form of partner_id attribute.  # noqa: E501

        :param partner: The partner of this BondInstance.  # noqa: E501
        :type: BondInstance
        """

        self._partner = partner

    @property
    def eth_ports(self):
        """Gets the eth_ports of this BondInstance.  # noqa: E501

        This is the inverse of the resource type eth_port association.  # noqa: E501

        :return: The eth_ports of this BondInstance.  # noqa: E501
        :rtype: list[EthPortInstance]
        """
        return self._eth_ports

    @eth_ports.setter
    def eth_ports(self, eth_ports):
        """Sets the eth_ports of this BondInstance.

        This is the inverse of the resource type eth_port association.  # noqa: E501

        :param eth_ports: The eth_ports of this BondInstance.  # noqa: E501
        :type: list[EthPortInstance]
        """

        self._eth_ports = eth_ports

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BondInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BondInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BondInstance):
            return True

        return self.to_dict() != other.to_dict()
