# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class NfsServerCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nas_server_id': 'str',
        'host_name': 'str',
        'is_nfsv3_enabled': 'bool',
        'is_nfsv4_enabled': 'bool',
        'is_secure_enabled': 'bool',
        'is_extended_credentials_enabled': 'bool',
        'credentials_cache_ttl': 'int'
    }

    attribute_map = {
        'nas_server_id': 'nas_server_id',
        'host_name': 'host_name',
        'is_nfsv3_enabled': 'is_nfsv3_enabled',
        'is_nfsv4_enabled': 'is_nfsv4_enabled',
        'is_secure_enabled': 'is_secure_enabled',
        'is_extended_credentials_enabled': 'is_extended_credentials_enabled',
        'credentials_cache_ttl': 'credentials_cache_TTL'
    }

    def __init__(self, nas_server_id=None, host_name=None, is_nfsv3_enabled=True, is_nfsv4_enabled=False, is_secure_enabled=False, is_extended_credentials_enabled=False, credentials_cache_ttl=15, _configuration=None):  # noqa: E501
        """NfsServerCreate - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._nas_server_id = None
        self._host_name = None
        self._is_nfsv3_enabled = None
        self._is_nfsv4_enabled = None
        self._is_secure_enabled = None
        self._is_extended_credentials_enabled = None
        self._credentials_cache_ttl = None
        self.discriminator = None

        self.nas_server_id = nas_server_id
        if host_name is not None:
            self.host_name = host_name
        if is_nfsv3_enabled is not None:
            self.is_nfsv3_enabled = is_nfsv3_enabled
        if is_nfsv4_enabled is not None:
            self.is_nfsv4_enabled = is_nfsv4_enabled
        if is_secure_enabled is not None:
            self.is_secure_enabled = is_secure_enabled
        if is_extended_credentials_enabled is not None:
            self.is_extended_credentials_enabled = is_extended_credentials_enabled
        if credentials_cache_ttl is not None:
            self.credentials_cache_ttl = credentials_cache_ttl

    @property
    def nas_server_id(self):
        """Gets the nas_server_id of this NfsServerCreate.  # noqa: E501

        Unique identifier of the NAS server. name:{name} can be used instead of {id}. For example:'nas_server_id':'name:nas_server_name'  # noqa: E501

        :return: The nas_server_id of this NfsServerCreate.  # noqa: E501
        :rtype: str
        """
        return self._nas_server_id

    @nas_server_id.setter
    def nas_server_id(self, nas_server_id):
        """Sets the nas_server_id of this NfsServerCreate.

        Unique identifier of the NAS server. name:{name} can be used instead of {id}. For example:'nas_server_id':'name:nas_server_name'  # noqa: E501

        :param nas_server_id: The nas_server_id of this NfsServerCreate.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and nas_server_id is None:
            raise ValueError("Invalid value for `nas_server_id`, must not be `None`")  # noqa: E501

        self._nas_server_id = nas_server_id

    @property
    def host_name(self):
        """Gets the host_name of this NfsServerCreate.  # noqa: E501

        The name that will be used by NFS clients to connect to this NFS server. This name is required when using secure NFS, except when is_use_smb_config_enabled is true. In this case host_name is forced to the SMB server computer name, and must not be specified.   # noqa: E501

        :return: The host_name of this NfsServerCreate.  # noqa: E501
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this NfsServerCreate.

        The name that will be used by NFS clients to connect to this NFS server. This name is required when using secure NFS, except when is_use_smb_config_enabled is true. In this case host_name is forced to the SMB server computer name, and must not be specified.   # noqa: E501

        :param host_name: The host_name of this NfsServerCreate.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                host_name is not None and len(host_name) > 255):
            raise ValueError("Invalid value for `host_name`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                host_name is not None and len(host_name) < 1):
            raise ValueError("Invalid value for `host_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._host_name = host_name

    @property
    def is_nfsv3_enabled(self):
        """Gets the is_nfsv3_enabled of this NfsServerCreate.  # noqa: E501

        Indicates whether NFSv3 is enabled on the NAS server. When enabled, NFS shares can be accessed with NFSv3. When disabled, NFS shares can not be accessed with NFSv3 protocol. - true - NFSv3 is enabled on the specified NAS server. - false - NFSv3 is disabled on the specified NAS server.   # noqa: E501

        :return: The is_nfsv3_enabled of this NfsServerCreate.  # noqa: E501
        :rtype: bool
        """
        return self._is_nfsv3_enabled

    @is_nfsv3_enabled.setter
    def is_nfsv3_enabled(self, is_nfsv3_enabled):
        """Sets the is_nfsv3_enabled of this NfsServerCreate.

        Indicates whether NFSv3 is enabled on the NAS server. When enabled, NFS shares can be accessed with NFSv3. When disabled, NFS shares can not be accessed with NFSv3 protocol. - true - NFSv3 is enabled on the specified NAS server. - false - NFSv3 is disabled on the specified NAS server.   # noqa: E501

        :param is_nfsv3_enabled: The is_nfsv3_enabled of this NfsServerCreate.  # noqa: E501
        :type: bool
        """

        self._is_nfsv3_enabled = is_nfsv3_enabled

    @property
    def is_nfsv4_enabled(self):
        """Gets the is_nfsv4_enabled of this NfsServerCreate.  # noqa: E501

        Indicates whether NFSv4 is enabled on the NAS server. When enabled, NFS shares can be accessed with NFSv4. When disabled, NFS shares can not be accessed with NFSv4 protocol. - true - NFSv4 is enabled on the specified NAS server. - false - NFSv4 is disabled on the specified NAS server.   # noqa: E501

        :return: The is_nfsv4_enabled of this NfsServerCreate.  # noqa: E501
        :rtype: bool
        """
        return self._is_nfsv4_enabled

    @is_nfsv4_enabled.setter
    def is_nfsv4_enabled(self, is_nfsv4_enabled):
        """Sets the is_nfsv4_enabled of this NfsServerCreate.

        Indicates whether NFSv4 is enabled on the NAS server. When enabled, NFS shares can be accessed with NFSv4. When disabled, NFS shares can not be accessed with NFSv4 protocol. - true - NFSv4 is enabled on the specified NAS server. - false - NFSv4 is disabled on the specified NAS server.   # noqa: E501

        :param is_nfsv4_enabled: The is_nfsv4_enabled of this NfsServerCreate.  # noqa: E501
        :type: bool
        """

        self._is_nfsv4_enabled = is_nfsv4_enabled

    @property
    def is_secure_enabled(self):
        """Gets the is_secure_enabled of this NfsServerCreate.  # noqa: E501

        Indicates whether secure NFS is enabled on the NFS server. - true - Secure NFS is enabled. - false - Secure NFS is disabled.   # noqa: E501

        :return: The is_secure_enabled of this NfsServerCreate.  # noqa: E501
        :rtype: bool
        """
        return self._is_secure_enabled

    @is_secure_enabled.setter
    def is_secure_enabled(self, is_secure_enabled):
        """Sets the is_secure_enabled of this NfsServerCreate.

        Indicates whether secure NFS is enabled on the NFS server. - true - Secure NFS is enabled. - false - Secure NFS is disabled.   # noqa: E501

        :param is_secure_enabled: The is_secure_enabled of this NfsServerCreate.  # noqa: E501
        :type: bool
        """

        self._is_secure_enabled = is_secure_enabled

    @property
    def is_extended_credentials_enabled(self):
        """Gets the is_extended_credentials_enabled of this NfsServerCreate.  # noqa: E501

        Indicates whether the NFS server supports more than 16 Unix groups in a Unix credential. Valid values are: - true - NFS server supports more than 16 Unix groups in a Unix credential. The NFS server will send additional request to Unix Directory service to identify Unix groups. - false - NFS server supports more than 16 Unix groups in a Unix credential. The NFS server will send additional request to Unix Directory service to identify Unix groups. Note - The NFS server builds its own Unix credential when it supports more than 16 groups. This process can slow the performance.   # noqa: E501

        :return: The is_extended_credentials_enabled of this NfsServerCreate.  # noqa: E501
        :rtype: bool
        """
        return self._is_extended_credentials_enabled

    @is_extended_credentials_enabled.setter
    def is_extended_credentials_enabled(self, is_extended_credentials_enabled):
        """Sets the is_extended_credentials_enabled of this NfsServerCreate.

        Indicates whether the NFS server supports more than 16 Unix groups in a Unix credential. Valid values are: - true - NFS server supports more than 16 Unix groups in a Unix credential. The NFS server will send additional request to Unix Directory service to identify Unix groups. - false - NFS server supports more than 16 Unix groups in a Unix credential. The NFS server will send additional request to Unix Directory service to identify Unix groups. Note - The NFS server builds its own Unix credential when it supports more than 16 groups. This process can slow the performance.   # noqa: E501

        :param is_extended_credentials_enabled: The is_extended_credentials_enabled of this NfsServerCreate.  # noqa: E501
        :type: bool
        """

        self._is_extended_credentials_enabled = is_extended_credentials_enabled

    @property
    def credentials_cache_ttl(self):
        """Gets the credentials_cache_ttl of this NfsServerCreate.  # noqa: E501

        Sets the Time-To-Live (in minutes) expiration time in minutes for a Windows entry in the credentials cache. When failed mapping entries expire, the system retries mapping the UID to the SID.  # noqa: E501

        :return: The credentials_cache_ttl of this NfsServerCreate.  # noqa: E501
        :rtype: int
        """
        return self._credentials_cache_ttl

    @credentials_cache_ttl.setter
    def credentials_cache_ttl(self, credentials_cache_ttl):
        """Sets the credentials_cache_ttl of this NfsServerCreate.

        Sets the Time-To-Live (in minutes) expiration time in minutes for a Windows entry in the credentials cache. When failed mapping entries expire, the system retries mapping the UID to the SID.  # noqa: E501

        :param credentials_cache_ttl: The credentials_cache_ttl of this NfsServerCreate.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                credentials_cache_ttl is not None and credentials_cache_ttl > 35791394):  # noqa: E501
            raise ValueError("Invalid value for `credentials_cache_ttl`, must be a value less than or equal to `35791394`")  # noqa: E501
        if (self._configuration.client_side_validation and
                credentials_cache_ttl is not None and credentials_cache_ttl < 1):  # noqa: E501
            raise ValueError("Invalid value for `credentials_cache_ttl`, must be a value greater than or equal to `1`")  # noqa: E501

        self._credentials_cache_ttl = credentials_cache_ttl

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NfsServerCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NfsServerCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NfsServerCreate):
            return True

        return self.to_dict() != other.to_dict()
