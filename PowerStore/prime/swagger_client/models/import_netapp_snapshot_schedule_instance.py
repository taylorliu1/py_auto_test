# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class ImportNetappSnapshotScheduleInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'type': 'NetAppScheduleTypeEnum',
        'cron': 'ImportNetappCronScheduleInstance',
        'interval': 'str',
        'type_l10n': 'str'
    }

    attribute_map = {
        'name': 'name',
        'type': 'type',
        'cron': 'cron',
        'interval': 'interval',
        'type_l10n': 'type_l10n'
    }

    def __init__(self, name=None, type=None, cron=None, interval=None, type_l10n=None, _configuration=None):  # noqa: E501
        """ImportNetappSnapshotScheduleInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._type = None
        self._cron = None
        self._interval = None
        self._type_l10n = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if cron is not None:
            self.cron = cron
        if interval is not None:
            self.interval = interval
        if type_l10n is not None:
            self.type_l10n = type_l10n

    @property
    def name(self):
        """Gets the name of this ImportNetappSnapshotScheduleInstance.  # noqa: E501

        Name of the NetApp snapshot schedule.  # noqa: E501

        :return: The name of this ImportNetappSnapshotScheduleInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ImportNetappSnapshotScheduleInstance.

        Name of the NetApp snapshot schedule.  # noqa: E501

        :param name: The name of this ImportNetappSnapshotScheduleInstance.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this ImportNetappSnapshotScheduleInstance.  # noqa: E501


        :return: The type of this ImportNetappSnapshotScheduleInstance.  # noqa: E501
        :rtype: NetAppScheduleTypeEnum
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ImportNetappSnapshotScheduleInstance.


        :param type: The type of this ImportNetappSnapshotScheduleInstance.  # noqa: E501
        :type: NetAppScheduleTypeEnum
        """

        self._type = type

    @property
    def cron(self):
        """Gets the cron of this ImportNetappSnapshotScheduleInstance.  # noqa: E501


        :return: The cron of this ImportNetappSnapshotScheduleInstance.  # noqa: E501
        :rtype: ImportNetappCronScheduleInstance
        """
        return self._cron

    @cron.setter
    def cron(self, cron):
        """Sets the cron of this ImportNetappSnapshotScheduleInstance.


        :param cron: The cron of this ImportNetappSnapshotScheduleInstance.  # noqa: E501
        :type: ImportNetappCronScheduleInstance
        """

        self._cron = cron

    @property
    def interval(self):
        """Gets the interval of this ImportNetappSnapshotScheduleInstance.  # noqa: E501

        An ISO-8601 duration formatted string.  # noqa: E501

        :return: The interval of this ImportNetappSnapshotScheduleInstance.  # noqa: E501
        :rtype: str
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this ImportNetappSnapshotScheduleInstance.

        An ISO-8601 duration formatted string.  # noqa: E501

        :param interval: The interval of this ImportNetappSnapshotScheduleInstance.  # noqa: E501
        :type: str
        """

        self._interval = interval

    @property
    def type_l10n(self):
        """Gets the type_l10n of this ImportNetappSnapshotScheduleInstance.  # noqa: E501

        Localized message string corresponding to type Was added in version 3.0.0.0.  # noqa: E501

        :return: The type_l10n of this ImportNetappSnapshotScheduleInstance.  # noqa: E501
        :rtype: str
        """
        return self._type_l10n

    @type_l10n.setter
    def type_l10n(self, type_l10n):
        """Sets the type_l10n of this ImportNetappSnapshotScheduleInstance.

        Localized message string corresponding to type Was added in version 3.0.0.0.  # noqa: E501

        :param type_l10n: The type_l10n of this ImportNetappSnapshotScheduleInstance.  # noqa: E501
        :type: str
        """

        self._type_l10n = type_l10n

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImportNetappSnapshotScheduleInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportNetappSnapshotScheduleInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImportNetappSnapshotScheduleInstance):
            return True

        return self.to_dict() != other.to_dict()
