# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class IpPortInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'partner_id': 'str',
        'target_iqn': 'str',
        'available_usages': 'list[IpPortUsageEnum]',
        'current_usages': 'list[IpPortUsageEnum]',
        'bond_id': 'str',
        'eth_port_id': 'str',
        'veth_port_id': 'str',
        'available_usages_l10n': 'list[str]',
        'current_usages_l10n': 'list[str]',
        'ip_pool_addresses': 'list[IpPoolAddressInstance]',
        'partner': 'IpPortInstance',
        'bond': 'BondInstance',
        'eth_port': 'EthPortInstance',
        'veth_port': 'VethPortInstance',
        'file_interfaces': 'list[FileInterfaceInstance]'
    }

    attribute_map = {
        'id': 'id',
        'partner_id': 'partner_id',
        'target_iqn': 'target_iqn',
        'available_usages': 'available_usages',
        'current_usages': 'current_usages',
        'bond_id': 'bond_id',
        'eth_port_id': 'eth_port_id',
        'veth_port_id': 'veth_port_id',
        'available_usages_l10n': 'available_usages_l10n',
        'current_usages_l10n': 'current_usages_l10n',
        'ip_pool_addresses': 'ip_pool_addresses',
        'partner': 'partner',
        'bond': 'bond',
        'eth_port': 'eth_port',
        'veth_port': 'veth_port',
        'file_interfaces': 'file_interfaces'
    }

    def __init__(self, id=None, partner_id=None, target_iqn=None, available_usages=None, current_usages=None, bond_id=None, eth_port_id=None, veth_port_id=None, available_usages_l10n=None, current_usages_l10n=None, ip_pool_addresses=None, partner=None, bond=None, eth_port=None, veth_port=None, file_interfaces=None, _configuration=None):  # noqa: E501
        """IpPortInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._partner_id = None
        self._target_iqn = None
        self._available_usages = None
        self._current_usages = None
        self._bond_id = None
        self._eth_port_id = None
        self._veth_port_id = None
        self._available_usages_l10n = None
        self._current_usages_l10n = None
        self._ip_pool_addresses = None
        self._partner = None
        self._bond = None
        self._eth_port = None
        self._veth_port = None
        self._file_interfaces = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if partner_id is not None:
            self.partner_id = partner_id
        if target_iqn is not None:
            self.target_iqn = target_iqn
        if available_usages is not None:
            self.available_usages = available_usages
        if current_usages is not None:
            self.current_usages = current_usages
        if bond_id is not None:
            self.bond_id = bond_id
        if eth_port_id is not None:
            self.eth_port_id = eth_port_id
        if veth_port_id is not None:
            self.veth_port_id = veth_port_id
        if available_usages_l10n is not None:
            self.available_usages_l10n = available_usages_l10n
        if current_usages_l10n is not None:
            self.current_usages_l10n = current_usages_l10n
        if ip_pool_addresses is not None:
            self.ip_pool_addresses = ip_pool_addresses
        if partner is not None:
            self.partner = partner
        if bond is not None:
            self.bond = bond
        if eth_port is not None:
            self.eth_port = eth_port
        if veth_port is not None:
            self.veth_port = veth_port
        if file_interfaces is not None:
            self.file_interfaces = file_interfaces

    @property
    def id(self):
        """Gets the id of this IpPortInstance.  # noqa: E501

        Unique identifier of the IP port.  # noqa: E501

        :return: The id of this IpPortInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IpPortInstance.

        Unique identifier of the IP port.  # noqa: E501

        :param id: The id of this IpPortInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def partner_id(self):
        """Gets the partner_id of this IpPortInstance.  # noqa: E501

        Identifier of the IP port that is configured on top of physical Ethernet port or virtual Ethernet port or bond with the same physical location on the other node of the appliance. Partner ports are configured symmetrically for HA and load balancing purposes within the appliance.  # noqa: E501

        :return: The partner_id of this IpPortInstance.  # noqa: E501
        :rtype: str
        """
        return self._partner_id

    @partner_id.setter
    def partner_id(self, partner_id):
        """Sets the partner_id of this IpPortInstance.

        Identifier of the IP port that is configured on top of physical Ethernet port or virtual Ethernet port or bond with the same physical location on the other node of the appliance. Partner ports are configured symmetrically for HA and load balancing purposes within the appliance.  # noqa: E501

        :param partner_id: The partner_id of this IpPortInstance.  # noqa: E501
        :type: str
        """

        self._partner_id = partner_id

    @property
    def target_iqn(self):
        """Gets the target_iqn of this IpPortInstance.  # noqa: E501

        iSCSI qualified name used by the target configured on top of the IP port initially or as a result of network scaling. If the IP port is not used by an iSCSI connection, this attribute should be empty.  # noqa: E501

        :return: The target_iqn of this IpPortInstance.  # noqa: E501
        :rtype: str
        """
        return self._target_iqn

    @target_iqn.setter
    def target_iqn(self, target_iqn):
        """Sets the target_iqn of this IpPortInstance.

        iSCSI qualified name used by the target configured on top of the IP port initially or as a result of network scaling. If the IP port is not used by an iSCSI connection, this attribute should be empty.  # noqa: E501

        :param target_iqn: The target_iqn of this IpPortInstance.  # noqa: E501
        :type: str
        """

        self._target_iqn = target_iqn

    @property
    def available_usages(self):
        """Gets the available_usages of this IpPortInstance.  # noqa: E501

        Available IP port usages.  # noqa: E501

        :return: The available_usages of this IpPortInstance.  # noqa: E501
        :rtype: list[IpPortUsageEnum]
        """
        return self._available_usages

    @available_usages.setter
    def available_usages(self, available_usages):
        """Sets the available_usages of this IpPortInstance.

        Available IP port usages.  # noqa: E501

        :param available_usages: The available_usages of this IpPortInstance.  # noqa: E501
        :type: list[IpPortUsageEnum]
        """

        self._available_usages = available_usages

    @property
    def current_usages(self):
        """Gets the current_usages of this IpPortInstance.  # noqa: E501

        Current IP port usages.  # noqa: E501

        :return: The current_usages of this IpPortInstance.  # noqa: E501
        :rtype: list[IpPortUsageEnum]
        """
        return self._current_usages

    @current_usages.setter
    def current_usages(self, current_usages):
        """Sets the current_usages of this IpPortInstance.

        Current IP port usages.  # noqa: E501

        :param current_usages: The current_usages of this IpPortInstance.  # noqa: E501
        :type: list[IpPortUsageEnum]
        """

        self._current_usages = current_usages

    @property
    def bond_id(self):
        """Gets the bond_id of this IpPortInstance.  # noqa: E501

        Unique identifier of the bond on top of which the IP port is configured. If the IP port is configured on top of an Ethernet front-end port, this attribute should be empty.   # noqa: E501

        :return: The bond_id of this IpPortInstance.  # noqa: E501
        :rtype: str
        """
        return self._bond_id

    @bond_id.setter
    def bond_id(self, bond_id):
        """Sets the bond_id of this IpPortInstance.

        Unique identifier of the bond on top of which the IP port is configured. If the IP port is configured on top of an Ethernet front-end port, this attribute should be empty.   # noqa: E501

        :param bond_id: The bond_id of this IpPortInstance.  # noqa: E501
        :type: str
        """

        self._bond_id = bond_id

    @property
    def eth_port_id(self):
        """Gets the eth_port_id of this IpPortInstance.  # noqa: E501

        Unique identifier of the physical Ethernet front-end port on top of which the IP port is configured. This attribute can be set when the IP port is used by a Unified appliance. It should be empty if the IP port is used by a Unified+ appliance or if the IP port is configured on top of a bond on a Unified appliance.   # noqa: E501

        :return: The eth_port_id of this IpPortInstance.  # noqa: E501
        :rtype: str
        """
        return self._eth_port_id

    @eth_port_id.setter
    def eth_port_id(self, eth_port_id):
        """Sets the eth_port_id of this IpPortInstance.

        Unique identifier of the physical Ethernet front-end port on top of which the IP port is configured. This attribute can be set when the IP port is used by a Unified appliance. It should be empty if the IP port is used by a Unified+ appliance or if the IP port is configured on top of a bond on a Unified appliance.   # noqa: E501

        :param eth_port_id: The eth_port_id of this IpPortInstance.  # noqa: E501
        :type: str
        """

        self._eth_port_id = eth_port_id

    @property
    def veth_port_id(self):
        """Gets the veth_port_id of this IpPortInstance.  # noqa: E501

        Unique identifier of the virtual Ethernet front-end port on top of which the IP port is configured. This attribute can be set when the IP port is used by a Unified+ appliance. For a Unified appliance, the value of veth_port_id should be empty.   # noqa: E501

        :return: The veth_port_id of this IpPortInstance.  # noqa: E501
        :rtype: str
        """
        return self._veth_port_id

    @veth_port_id.setter
    def veth_port_id(self, veth_port_id):
        """Sets the veth_port_id of this IpPortInstance.

        Unique identifier of the virtual Ethernet front-end port on top of which the IP port is configured. This attribute can be set when the IP port is used by a Unified+ appliance. For a Unified appliance, the value of veth_port_id should be empty.   # noqa: E501

        :param veth_port_id: The veth_port_id of this IpPortInstance.  # noqa: E501
        :type: str
        """

        self._veth_port_id = veth_port_id

    @property
    def available_usages_l10n(self):
        """Gets the available_usages_l10n of this IpPortInstance.  # noqa: E501

        Localized message array corresponding to available_usages  # noqa: E501

        :return: The available_usages_l10n of this IpPortInstance.  # noqa: E501
        :rtype: list[str]
        """
        return self._available_usages_l10n

    @available_usages_l10n.setter
    def available_usages_l10n(self, available_usages_l10n):
        """Sets the available_usages_l10n of this IpPortInstance.

        Localized message array corresponding to available_usages  # noqa: E501

        :param available_usages_l10n: The available_usages_l10n of this IpPortInstance.  # noqa: E501
        :type: list[str]
        """

        self._available_usages_l10n = available_usages_l10n

    @property
    def current_usages_l10n(self):
        """Gets the current_usages_l10n of this IpPortInstance.  # noqa: E501

        Localized message array corresponding to current_usages  # noqa: E501

        :return: The current_usages_l10n of this IpPortInstance.  # noqa: E501
        :rtype: list[str]
        """
        return self._current_usages_l10n

    @current_usages_l10n.setter
    def current_usages_l10n(self, current_usages_l10n):
        """Sets the current_usages_l10n of this IpPortInstance.

        Localized message array corresponding to current_usages  # noqa: E501

        :param current_usages_l10n: The current_usages_l10n of this IpPortInstance.  # noqa: E501
        :type: list[str]
        """

        self._current_usages_l10n = current_usages_l10n

    @property
    def ip_pool_addresses(self):
        """Gets the ip_pool_addresses of this IpPortInstance.  # noqa: E501

        This is the inverse of the resource type ip_pool_address association.  # noqa: E501

        :return: The ip_pool_addresses of this IpPortInstance.  # noqa: E501
        :rtype: list[IpPoolAddressInstance]
        """
        return self._ip_pool_addresses

    @ip_pool_addresses.setter
    def ip_pool_addresses(self, ip_pool_addresses):
        """Sets the ip_pool_addresses of this IpPortInstance.

        This is the inverse of the resource type ip_pool_address association.  # noqa: E501

        :param ip_pool_addresses: The ip_pool_addresses of this IpPortInstance.  # noqa: E501
        :type: list[IpPoolAddressInstance]
        """

        self._ip_pool_addresses = ip_pool_addresses

    @property
    def partner(self):
        """Gets the partner of this IpPortInstance.  # noqa: E501

        This is the embeddable reference form of partner_id attribute.  # noqa: E501

        :return: The partner of this IpPortInstance.  # noqa: E501
        :rtype: IpPortInstance
        """
        return self._partner

    @partner.setter
    def partner(self, partner):
        """Sets the partner of this IpPortInstance.

        This is the embeddable reference form of partner_id attribute.  # noqa: E501

        :param partner: The partner of this IpPortInstance.  # noqa: E501
        :type: IpPortInstance
        """

        self._partner = partner

    @property
    def bond(self):
        """Gets the bond of this IpPortInstance.  # noqa: E501

        This is the embeddable reference form of bond_id attribute.  # noqa: E501

        :return: The bond of this IpPortInstance.  # noqa: E501
        :rtype: BondInstance
        """
        return self._bond

    @bond.setter
    def bond(self, bond):
        """Sets the bond of this IpPortInstance.

        This is the embeddable reference form of bond_id attribute.  # noqa: E501

        :param bond: The bond of this IpPortInstance.  # noqa: E501
        :type: BondInstance
        """

        self._bond = bond

    @property
    def eth_port(self):
        """Gets the eth_port of this IpPortInstance.  # noqa: E501

        This is the embeddable reference form of eth_port_id attribute.  # noqa: E501

        :return: The eth_port of this IpPortInstance.  # noqa: E501
        :rtype: EthPortInstance
        """
        return self._eth_port

    @eth_port.setter
    def eth_port(self, eth_port):
        """Sets the eth_port of this IpPortInstance.

        This is the embeddable reference form of eth_port_id attribute.  # noqa: E501

        :param eth_port: The eth_port of this IpPortInstance.  # noqa: E501
        :type: EthPortInstance
        """

        self._eth_port = eth_port

    @property
    def veth_port(self):
        """Gets the veth_port of this IpPortInstance.  # noqa: E501

        This is the embeddable reference form of veth_port_id attribute.  # noqa: E501

        :return: The veth_port of this IpPortInstance.  # noqa: E501
        :rtype: VethPortInstance
        """
        return self._veth_port

    @veth_port.setter
    def veth_port(self, veth_port):
        """Sets the veth_port of this IpPortInstance.

        This is the embeddable reference form of veth_port_id attribute.  # noqa: E501

        :param veth_port: The veth_port of this IpPortInstance.  # noqa: E501
        :type: VethPortInstance
        """

        self._veth_port = veth_port

    @property
    def file_interfaces(self):
        """Gets the file_interfaces of this IpPortInstance.  # noqa: E501

        This is the inverse of the resource type file_interface association.  # noqa: E501

        :return: The file_interfaces of this IpPortInstance.  # noqa: E501
        :rtype: list[FileInterfaceInstance]
        """
        return self._file_interfaces

    @file_interfaces.setter
    def file_interfaces(self, file_interfaces):
        """Sets the file_interfaces of this IpPortInstance.

        This is the inverse of the resource type file_interface association.  # noqa: E501

        :param file_interfaces: The file_interfaces of this IpPortInstance.  # noqa: E501
        :type: list[FileInterfaceInstance]
        """

        self._file_interfaces = file_interfaces

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IpPortInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IpPortInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IpPortInstance):
            return True

        return self.to_dict() != other.to_dict()
