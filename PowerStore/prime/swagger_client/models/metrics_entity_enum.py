# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class MetricsEntityEnum(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    PERFORMANCE_METRICS_BY_APPLIANCE = "performance_metrics_by_appliance"
    PERFORMANCE_METRICS_BY_NODE = "performance_metrics_by_node"
    PERFORMANCE_METRICS_BY_VOLUME = "performance_metrics_by_volume"
    PERFORMANCE_METRICS_BY_CLUSTER = "performance_metrics_by_cluster"
    PERFORMANCE_METRICS_BY_VM = "performance_metrics_by_vm"
    PERFORMANCE_METRICS_BY_VG = "performance_metrics_by_vg"
    PERFORMANCE_METRICS_BY_FE_FC_PORT = "performance_metrics_by_fe_fc_port"
    PERFORMANCE_METRICS_BY_FE_ETH_PORT = "performance_metrics_by_fe_eth_port"
    PERFORMANCE_METRICS_BY_FE_ETH_NODE = "performance_metrics_by_fe_eth_node"
    PERFORMANCE_METRICS_BY_FE_FC_NODE = "performance_metrics_by_fe_fc_node"
    WEAR_METRICS_BY_DRIVE = "wear_metrics_by_drive"
    WEAR_METRICS_BY_DRIVE_DAILY = "wear_metrics_by_drive_daily"
    SPACE_METRICS_BY_CLUSTER = "space_metrics_by_cluster"
    SPACE_METRICS_BY_APPLIANCE = "space_metrics_by_appliance"
    SPACE_METRICS_BY_VOLUME = "space_metrics_by_volume"
    SPACE_METRICS_BY_VOLUME_FAMILY = "space_metrics_by_volume_family"
    SPACE_METRICS_BY_VM = "space_metrics_by_vm"
    SPACE_METRICS_BY_STORAGE_CONTAINER = "space_metrics_by_storage_container"
    SPACE_METRICS_BY_VG = "space_metrics_by_vg"
    SPACE_METRICS_BY_VG_FAMILY = "space_metrics_by_vg_family"
    LATEST_SPACE_METRICS_BY_VG_FAMILY = "latest_space_metrics_by_vg_family"
    COPY_METRICS_BY_APPLIANCE = "copy_metrics_by_appliance"
    COPY_METRICS_BY_CLUSTER = "copy_metrics_by_cluster"
    COPY_METRICS_BY_VG = "copy_metrics_by_vg"
    COPY_METRICS_BY_RG = "copy_metrics_by_rg"
    COPY_METRICS_BY_REMOTE_SYSTEM = "copy_metrics_by_remote_system"
    COPY_METRICS_BY_VOLUME = "copy_metrics_by_volume"
    PERFORMANCE_METRICS_BY_FILE_SYSTEM = "performance_metrics_by_file_system"
    PERFORMANCE_METRICS_SMB_BY_NODE = "performance_metrics_smb_by_node"
    PERFORMANCE_METRICS_SMB_BUILTINCLIENT_BY_NODE = "performance_metrics_smb_builtinclient_by_node"
    PERFORMANCE_METRICS_SMB_BRANCH_CACHE_BY_NODE = "performance_metrics_smb_branch_cache_by_node"
    PERFORMANCE_METRICS_SMB1_BY_NODE = "performance_metrics_smb1_by_node"
    PERFORMANCE_METRICS_SMB1_BUILTINCLIENT_BY_NODE = "performance_metrics_smb1_builtinclient_by_node"
    PERFORMANCE_METRICS_SMB2_BY_NODE = "performance_metrics_smb2_by_node"
    PERFORMANCE_METRICS_SMB2_BUILTINCLIENT_BY_NODE = "performance_metrics_smb2_builtinclient_by_node"
    PERFORMANCE_METRICS_NFS_BY_NODE = "performance_metrics_nfs_by_node"
    PERFORMANCE_METRICS_NFSV3_BY_NODE = "performance_metrics_nfsv3_by_node"
    PERFORMANCE_METRICS_NFSV4_BY_NODE = "performance_metrics_nfsv4_by_node"
    PERFORMANCE_METRICS_FILE_BY_NODE = "performance_metrics_file_by_node"
    PERFORMANCE_METRICS_FILE_BY_APPLIANCE = "performance_metrics_file_by_appliance"
    PERFORMANCE_METRICS_FILE_BY_CLUSTER = "performance_metrics_file_by_cluster"
    PERFORMANCE_METRICS_BY_IP_PORT = "performance_metrics_by_ip_port"
    PERFORMANCE_METRICS_BY_IP_PORT_ISCSI = "performance_metrics_by_ip_port_iscsi"
    PERFORMANCE_METRICS_BY_NAS_SERVER = "performance_metrics_by_nas_server"
    SPACE_METRICS_BY_FILE_SYSTEM = "space_metrics_by_file_system"
    PERFORMANCE_METRICS_BY_INITIATOR = "performance_metrics_by_initiator"
    PERFORMANCE_METRICS_BY_HOST = "performance_metrics_by_host"
    PERFORMANCE_METRICS_BY_HG = "performance_metrics_by_hg"
    VSPHERE_METRICS_BY_VM = "vsphere_metrics_by_vm"
    VSPHERE_APPSON_METRICS_BY_NODE = "vsphere_appson_metrics_by_node"
    VSPHERE_APPSON_METRICS_BY_APPLIANCE = "vsphere_appson_metrics_by_appliance"

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self, _configuration=None):  # noqa: E501
        """MetricsEntityEnum - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetricsEntityEnum, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetricsEntityEnum):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MetricsEntityEnum):
            return True

        return self.to_dict() != other.to_dict()
