# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class BaseSpaceMetricsByApplianceRollup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'appliance_id': 'str',
        'timestamp': 'datetime',
        'last_logical_provisioned': 'int',
        'last_logical_used': 'int',
        'last_logical_used_volume': 'int',
        'last_logical_used_file_system': 'int',
        'last_logical_used_vvol': 'int',
        'last_shared_logical_used_volume': 'int',
        'last_shared_logical_used_file_system': 'int',
        'last_shared_logical_used_vvol': 'int',
        'last_physical_total': 'int',
        'last_physical_used': 'int',
        'last_data_physical_used': 'int',
        'max_logical_provisioned': 'int',
        'max_logical_used': 'int',
        'max_logical_used_volume': 'int',
        'max_logical_used_file_system': 'int',
        'max_logical_used_vvol': 'int',
        'max_shared_logical_used_volume': 'int',
        'max_shared_logical_used_file_system': 'int',
        'max_shared_logical_used_vvol': 'int',
        'max_physical_total': 'int',
        'max_physical_used': 'int',
        'max_data_physical_used': 'int',
        'last_efficiency_ratio': 'float',
        'last_data_reduction': 'float',
        'last_snapshot_savings': 'float',
        'last_thin_savings': 'float',
        'last_shared_logical_used': 'int',
        'last_system_free_space': 'int',
        'max_efficiency_ratio': 'float',
        'max_data_reduction': 'float',
        'max_snapshot_savings': 'float',
        'max_thin_savings': 'float',
        'max_shared_logical_used': 'int',
        'max_system_free_space': 'int',
        'repeat_count': 'int'
    }

    attribute_map = {
        'appliance_id': 'appliance_id',
        'timestamp': 'timestamp',
        'last_logical_provisioned': 'last_logical_provisioned',
        'last_logical_used': 'last_logical_used',
        'last_logical_used_volume': 'last_logical_used_volume',
        'last_logical_used_file_system': 'last_logical_used_file_system',
        'last_logical_used_vvol': 'last_logical_used_vvol',
        'last_shared_logical_used_volume': 'last_shared_logical_used_volume',
        'last_shared_logical_used_file_system': 'last_shared_logical_used_file_system',
        'last_shared_logical_used_vvol': 'last_shared_logical_used_vvol',
        'last_physical_total': 'last_physical_total',
        'last_physical_used': 'last_physical_used',
        'last_data_physical_used': 'last_data_physical_used',
        'max_logical_provisioned': 'max_logical_provisioned',
        'max_logical_used': 'max_logical_used',
        'max_logical_used_volume': 'max_logical_used_volume',
        'max_logical_used_file_system': 'max_logical_used_file_system',
        'max_logical_used_vvol': 'max_logical_used_vvol',
        'max_shared_logical_used_volume': 'max_shared_logical_used_volume',
        'max_shared_logical_used_file_system': 'max_shared_logical_used_file_system',
        'max_shared_logical_used_vvol': 'max_shared_logical_used_vvol',
        'max_physical_total': 'max_physical_total',
        'max_physical_used': 'max_physical_used',
        'max_data_physical_used': 'max_data_physical_used',
        'last_efficiency_ratio': 'last_efficiency_ratio',
        'last_data_reduction': 'last_data_reduction',
        'last_snapshot_savings': 'last_snapshot_savings',
        'last_thin_savings': 'last_thin_savings',
        'last_shared_logical_used': 'last_shared_logical_used',
        'last_system_free_space': 'last_system_free_space',
        'max_efficiency_ratio': 'max_efficiency_ratio',
        'max_data_reduction': 'max_data_reduction',
        'max_snapshot_savings': 'max_snapshot_savings',
        'max_thin_savings': 'max_thin_savings',
        'max_shared_logical_used': 'max_shared_logical_used',
        'max_system_free_space': 'max_system_free_space',
        'repeat_count': 'repeat_count'
    }

    def __init__(self, appliance_id=None, timestamp=None, last_logical_provisioned=None, last_logical_used=None, last_logical_used_volume=None, last_logical_used_file_system=None, last_logical_used_vvol=None, last_shared_logical_used_volume=None, last_shared_logical_used_file_system=None, last_shared_logical_used_vvol=None, last_physical_total=None, last_physical_used=None, last_data_physical_used=None, max_logical_provisioned=None, max_logical_used=None, max_logical_used_volume=None, max_logical_used_file_system=None, max_logical_used_vvol=None, max_shared_logical_used_volume=None, max_shared_logical_used_file_system=None, max_shared_logical_used_vvol=None, max_physical_total=None, max_physical_used=None, max_data_physical_used=None, last_efficiency_ratio=None, last_data_reduction=None, last_snapshot_savings=None, last_thin_savings=None, last_shared_logical_used=None, last_system_free_space=None, max_efficiency_ratio=None, max_data_reduction=None, max_snapshot_savings=None, max_thin_savings=None, max_shared_logical_used=None, max_system_free_space=None, repeat_count=None, _configuration=None):  # noqa: E501
        """BaseSpaceMetricsByApplianceRollup - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._appliance_id = None
        self._timestamp = None
        self._last_logical_provisioned = None
        self._last_logical_used = None
        self._last_logical_used_volume = None
        self._last_logical_used_file_system = None
        self._last_logical_used_vvol = None
        self._last_shared_logical_used_volume = None
        self._last_shared_logical_used_file_system = None
        self._last_shared_logical_used_vvol = None
        self._last_physical_total = None
        self._last_physical_used = None
        self._last_data_physical_used = None
        self._max_logical_provisioned = None
        self._max_logical_used = None
        self._max_logical_used_volume = None
        self._max_logical_used_file_system = None
        self._max_logical_used_vvol = None
        self._max_shared_logical_used_volume = None
        self._max_shared_logical_used_file_system = None
        self._max_shared_logical_used_vvol = None
        self._max_physical_total = None
        self._max_physical_used = None
        self._max_data_physical_used = None
        self._last_efficiency_ratio = None
        self._last_data_reduction = None
        self._last_snapshot_savings = None
        self._last_thin_savings = None
        self._last_shared_logical_used = None
        self._last_system_free_space = None
        self._max_efficiency_ratio = None
        self._max_data_reduction = None
        self._max_snapshot_savings = None
        self._max_thin_savings = None
        self._max_shared_logical_used = None
        self._max_system_free_space = None
        self._repeat_count = None
        self.discriminator = None

        if appliance_id is not None:
            self.appliance_id = appliance_id
        if timestamp is not None:
            self.timestamp = timestamp
        if last_logical_provisioned is not None:
            self.last_logical_provisioned = last_logical_provisioned
        if last_logical_used is not None:
            self.last_logical_used = last_logical_used
        if last_logical_used_volume is not None:
            self.last_logical_used_volume = last_logical_used_volume
        if last_logical_used_file_system is not None:
            self.last_logical_used_file_system = last_logical_used_file_system
        if last_logical_used_vvol is not None:
            self.last_logical_used_vvol = last_logical_used_vvol
        if last_shared_logical_used_volume is not None:
            self.last_shared_logical_used_volume = last_shared_logical_used_volume
        if last_shared_logical_used_file_system is not None:
            self.last_shared_logical_used_file_system = last_shared_logical_used_file_system
        if last_shared_logical_used_vvol is not None:
            self.last_shared_logical_used_vvol = last_shared_logical_used_vvol
        if last_physical_total is not None:
            self.last_physical_total = last_physical_total
        if last_physical_used is not None:
            self.last_physical_used = last_physical_used
        if last_data_physical_used is not None:
            self.last_data_physical_used = last_data_physical_used
        if max_logical_provisioned is not None:
            self.max_logical_provisioned = max_logical_provisioned
        if max_logical_used is not None:
            self.max_logical_used = max_logical_used
        if max_logical_used_volume is not None:
            self.max_logical_used_volume = max_logical_used_volume
        if max_logical_used_file_system is not None:
            self.max_logical_used_file_system = max_logical_used_file_system
        if max_logical_used_vvol is not None:
            self.max_logical_used_vvol = max_logical_used_vvol
        if max_shared_logical_used_volume is not None:
            self.max_shared_logical_used_volume = max_shared_logical_used_volume
        if max_shared_logical_used_file_system is not None:
            self.max_shared_logical_used_file_system = max_shared_logical_used_file_system
        if max_shared_logical_used_vvol is not None:
            self.max_shared_logical_used_vvol = max_shared_logical_used_vvol
        if max_physical_total is not None:
            self.max_physical_total = max_physical_total
        if max_physical_used is not None:
            self.max_physical_used = max_physical_used
        if max_data_physical_used is not None:
            self.max_data_physical_used = max_data_physical_used
        if last_efficiency_ratio is not None:
            self.last_efficiency_ratio = last_efficiency_ratio
        if last_data_reduction is not None:
            self.last_data_reduction = last_data_reduction
        if last_snapshot_savings is not None:
            self.last_snapshot_savings = last_snapshot_savings
        if last_thin_savings is not None:
            self.last_thin_savings = last_thin_savings
        if last_shared_logical_used is not None:
            self.last_shared_logical_used = last_shared_logical_used
        if last_system_free_space is not None:
            self.last_system_free_space = last_system_free_space
        if max_efficiency_ratio is not None:
            self.max_efficiency_ratio = max_efficiency_ratio
        if max_data_reduction is not None:
            self.max_data_reduction = max_data_reduction
        if max_snapshot_savings is not None:
            self.max_snapshot_savings = max_snapshot_savings
        if max_thin_savings is not None:
            self.max_thin_savings = max_thin_savings
        if max_shared_logical_used is not None:
            self.max_shared_logical_used = max_shared_logical_used
        if max_system_free_space is not None:
            self.max_system_free_space = max_system_free_space
        if repeat_count is not None:
            self.repeat_count = repeat_count

    @property
    def appliance_id(self):
        """Gets the appliance_id of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501

        Reference to the associated appliance on which these metrics were recorded.  # noqa: E501

        :return: The appliance_id of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :rtype: str
        """
        return self._appliance_id

    @appliance_id.setter
    def appliance_id(self, appliance_id):
        """Sets the appliance_id of this BaseSpaceMetricsByApplianceRollup.

        Reference to the associated appliance on which these metrics were recorded.  # noqa: E501

        :param appliance_id: The appliance_id of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :type: str
        """

        self._appliance_id = appliance_id

    @property
    def timestamp(self):
        """Gets the timestamp of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501

        End of sample period.  # noqa: E501

        :return: The timestamp of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this BaseSpaceMetricsByApplianceRollup.

        End of sample period.  # noqa: E501

        :param timestamp: The timestamp of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def last_logical_provisioned(self):
        """Gets the last_logical_provisioned of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501

        Last logical total space during the period.  # noqa: E501

        :return: The last_logical_provisioned of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :rtype: int
        """
        return self._last_logical_provisioned

    @last_logical_provisioned.setter
    def last_logical_provisioned(self, last_logical_provisioned):
        """Sets the last_logical_provisioned of this BaseSpaceMetricsByApplianceRollup.

        Last logical total space during the period.  # noqa: E501

        :param last_logical_provisioned: The last_logical_provisioned of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                last_logical_provisioned is not None and last_logical_provisioned > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `last_logical_provisioned`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                last_logical_provisioned is not None and last_logical_provisioned < 0):  # noqa: E501
            raise ValueError("Invalid value for `last_logical_provisioned`, must be a value greater than or equal to `0`")  # noqa: E501

        self._last_logical_provisioned = last_logical_provisioned

    @property
    def last_logical_used(self):
        """Gets the last_logical_used of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501

        Last logical used space during the period.  # noqa: E501

        :return: The last_logical_used of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :rtype: int
        """
        return self._last_logical_used

    @last_logical_used.setter
    def last_logical_used(self, last_logical_used):
        """Sets the last_logical_used of this BaseSpaceMetricsByApplianceRollup.

        Last logical used space during the period.  # noqa: E501

        :param last_logical_used: The last_logical_used of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                last_logical_used is not None and last_logical_used > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `last_logical_used`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                last_logical_used is not None and last_logical_used < 0):  # noqa: E501
            raise ValueError("Invalid value for `last_logical_used`, must be a value greater than or equal to `0`")  # noqa: E501

        self._last_logical_used = last_logical_used

    @property
    def last_logical_used_volume(self):
        """Gets the last_logical_used_volume of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501

        Last logical used space for block volumes during the period. Was added in version 2.0.0.0.  # noqa: E501

        :return: The last_logical_used_volume of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :rtype: int
        """
        return self._last_logical_used_volume

    @last_logical_used_volume.setter
    def last_logical_used_volume(self, last_logical_used_volume):
        """Sets the last_logical_used_volume of this BaseSpaceMetricsByApplianceRollup.

        Last logical used space for block volumes during the period. Was added in version 2.0.0.0.  # noqa: E501

        :param last_logical_used_volume: The last_logical_used_volume of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                last_logical_used_volume is not None and last_logical_used_volume > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `last_logical_used_volume`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                last_logical_used_volume is not None and last_logical_used_volume < 0):  # noqa: E501
            raise ValueError("Invalid value for `last_logical_used_volume`, must be a value greater than or equal to `0`")  # noqa: E501

        self._last_logical_used_volume = last_logical_used_volume

    @property
    def last_logical_used_file_system(self):
        """Gets the last_logical_used_file_system of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501

        Last logical used space for file systems during the period. Was added in version 2.0.0.0.  # noqa: E501

        :return: The last_logical_used_file_system of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :rtype: int
        """
        return self._last_logical_used_file_system

    @last_logical_used_file_system.setter
    def last_logical_used_file_system(self, last_logical_used_file_system):
        """Sets the last_logical_used_file_system of this BaseSpaceMetricsByApplianceRollup.

        Last logical used space for file systems during the period. Was added in version 2.0.0.0.  # noqa: E501

        :param last_logical_used_file_system: The last_logical_used_file_system of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                last_logical_used_file_system is not None and last_logical_used_file_system > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `last_logical_used_file_system`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                last_logical_used_file_system is not None and last_logical_used_file_system < 0):  # noqa: E501
            raise ValueError("Invalid value for `last_logical_used_file_system`, must be a value greater than or equal to `0`")  # noqa: E501

        self._last_logical_used_file_system = last_logical_used_file_system

    @property
    def last_logical_used_vvol(self):
        """Gets the last_logical_used_vvol of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501

        Last logical used space for virtual volumes during the period. Was added in version 2.0.0.0.  # noqa: E501

        :return: The last_logical_used_vvol of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :rtype: int
        """
        return self._last_logical_used_vvol

    @last_logical_used_vvol.setter
    def last_logical_used_vvol(self, last_logical_used_vvol):
        """Sets the last_logical_used_vvol of this BaseSpaceMetricsByApplianceRollup.

        Last logical used space for virtual volumes during the period. Was added in version 2.0.0.0.  # noqa: E501

        :param last_logical_used_vvol: The last_logical_used_vvol of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                last_logical_used_vvol is not None and last_logical_used_vvol > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `last_logical_used_vvol`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                last_logical_used_vvol is not None and last_logical_used_vvol < 0):  # noqa: E501
            raise ValueError("Invalid value for `last_logical_used_vvol`, must be a value greater than or equal to `0`")  # noqa: E501

        self._last_logical_used_vvol = last_logical_used_vvol

    @property
    def last_shared_logical_used_volume(self):
        """Gets the last_shared_logical_used_volume of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501

        Last shared logical used space for block volumes during the period. Was added in version 2.0.0.0.  # noqa: E501

        :return: The last_shared_logical_used_volume of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :rtype: int
        """
        return self._last_shared_logical_used_volume

    @last_shared_logical_used_volume.setter
    def last_shared_logical_used_volume(self, last_shared_logical_used_volume):
        """Sets the last_shared_logical_used_volume of this BaseSpaceMetricsByApplianceRollup.

        Last shared logical used space for block volumes during the period. Was added in version 2.0.0.0.  # noqa: E501

        :param last_shared_logical_used_volume: The last_shared_logical_used_volume of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                last_shared_logical_used_volume is not None and last_shared_logical_used_volume > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `last_shared_logical_used_volume`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                last_shared_logical_used_volume is not None and last_shared_logical_used_volume < 0):  # noqa: E501
            raise ValueError("Invalid value for `last_shared_logical_used_volume`, must be a value greater than or equal to `0`")  # noqa: E501

        self._last_shared_logical_used_volume = last_shared_logical_used_volume

    @property
    def last_shared_logical_used_file_system(self):
        """Gets the last_shared_logical_used_file_system of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501

        Last shared logical used space for file systems during the period. Was added in version 2.0.0.0.  # noqa: E501

        :return: The last_shared_logical_used_file_system of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :rtype: int
        """
        return self._last_shared_logical_used_file_system

    @last_shared_logical_used_file_system.setter
    def last_shared_logical_used_file_system(self, last_shared_logical_used_file_system):
        """Sets the last_shared_logical_used_file_system of this BaseSpaceMetricsByApplianceRollup.

        Last shared logical used space for file systems during the period. Was added in version 2.0.0.0.  # noqa: E501

        :param last_shared_logical_used_file_system: The last_shared_logical_used_file_system of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                last_shared_logical_used_file_system is not None and last_shared_logical_used_file_system > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `last_shared_logical_used_file_system`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                last_shared_logical_used_file_system is not None and last_shared_logical_used_file_system < 0):  # noqa: E501
            raise ValueError("Invalid value for `last_shared_logical_used_file_system`, must be a value greater than or equal to `0`")  # noqa: E501

        self._last_shared_logical_used_file_system = last_shared_logical_used_file_system

    @property
    def last_shared_logical_used_vvol(self):
        """Gets the last_shared_logical_used_vvol of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501

        Last shared logical used space for virtual volumes during the period. Was added in version 2.0.0.0.  # noqa: E501

        :return: The last_shared_logical_used_vvol of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :rtype: int
        """
        return self._last_shared_logical_used_vvol

    @last_shared_logical_used_vvol.setter
    def last_shared_logical_used_vvol(self, last_shared_logical_used_vvol):
        """Sets the last_shared_logical_used_vvol of this BaseSpaceMetricsByApplianceRollup.

        Last shared logical used space for virtual volumes during the period. Was added in version 2.0.0.0.  # noqa: E501

        :param last_shared_logical_used_vvol: The last_shared_logical_used_vvol of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                last_shared_logical_used_vvol is not None and last_shared_logical_used_vvol > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `last_shared_logical_used_vvol`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                last_shared_logical_used_vvol is not None and last_shared_logical_used_vvol < 0):  # noqa: E501
            raise ValueError("Invalid value for `last_shared_logical_used_vvol`, must be a value greater than or equal to `0`")  # noqa: E501

        self._last_shared_logical_used_vvol = last_shared_logical_used_vvol

    @property
    def last_physical_total(self):
        """Gets the last_physical_total of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501

        Last physical total space during the period.  # noqa: E501

        :return: The last_physical_total of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :rtype: int
        """
        return self._last_physical_total

    @last_physical_total.setter
    def last_physical_total(self, last_physical_total):
        """Sets the last_physical_total of this BaseSpaceMetricsByApplianceRollup.

        Last physical total space during the period.  # noqa: E501

        :param last_physical_total: The last_physical_total of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                last_physical_total is not None and last_physical_total > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `last_physical_total`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                last_physical_total is not None and last_physical_total < 0):  # noqa: E501
            raise ValueError("Invalid value for `last_physical_total`, must be a value greater than or equal to `0`")  # noqa: E501

        self._last_physical_total = last_physical_total

    @property
    def last_physical_used(self):
        """Gets the last_physical_used of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501

        Last physical used space during the period.  # noqa: E501

        :return: The last_physical_used of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :rtype: int
        """
        return self._last_physical_used

    @last_physical_used.setter
    def last_physical_used(self, last_physical_used):
        """Sets the last_physical_used of this BaseSpaceMetricsByApplianceRollup.

        Last physical used space during the period.  # noqa: E501

        :param last_physical_used: The last_physical_used of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                last_physical_used is not None and last_physical_used > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `last_physical_used`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                last_physical_used is not None and last_physical_used < 0):  # noqa: E501
            raise ValueError("Invalid value for `last_physical_used`, must be a value greater than or equal to `0`")  # noqa: E501

        self._last_physical_used = last_physical_used

    @property
    def last_data_physical_used(self):
        """Gets the last_data_physical_used of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501

        Last physical used space for data during the period.  # noqa: E501

        :return: The last_data_physical_used of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :rtype: int
        """
        return self._last_data_physical_used

    @last_data_physical_used.setter
    def last_data_physical_used(self, last_data_physical_used):
        """Sets the last_data_physical_used of this BaseSpaceMetricsByApplianceRollup.

        Last physical used space for data during the period.  # noqa: E501

        :param last_data_physical_used: The last_data_physical_used of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                last_data_physical_used is not None and last_data_physical_used > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `last_data_physical_used`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                last_data_physical_used is not None and last_data_physical_used < 0):  # noqa: E501
            raise ValueError("Invalid value for `last_data_physical_used`, must be a value greater than or equal to `0`")  # noqa: E501

        self._last_data_physical_used = last_data_physical_used

    @property
    def max_logical_provisioned(self):
        """Gets the max_logical_provisioned of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501

        Maxiumum logical total space during the period.  # noqa: E501

        :return: The max_logical_provisioned of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :rtype: int
        """
        return self._max_logical_provisioned

    @max_logical_provisioned.setter
    def max_logical_provisioned(self, max_logical_provisioned):
        """Sets the max_logical_provisioned of this BaseSpaceMetricsByApplianceRollup.

        Maxiumum logical total space during the period.  # noqa: E501

        :param max_logical_provisioned: The max_logical_provisioned of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                max_logical_provisioned is not None and max_logical_provisioned > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `max_logical_provisioned`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                max_logical_provisioned is not None and max_logical_provisioned < 0):  # noqa: E501
            raise ValueError("Invalid value for `max_logical_provisioned`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_logical_provisioned = max_logical_provisioned

    @property
    def max_logical_used(self):
        """Gets the max_logical_used of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501

        Maxiumum logical used space during the period.  # noqa: E501

        :return: The max_logical_used of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :rtype: int
        """
        return self._max_logical_used

    @max_logical_used.setter
    def max_logical_used(self, max_logical_used):
        """Sets the max_logical_used of this BaseSpaceMetricsByApplianceRollup.

        Maxiumum logical used space during the period.  # noqa: E501

        :param max_logical_used: The max_logical_used of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                max_logical_used is not None and max_logical_used > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `max_logical_used`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                max_logical_used is not None and max_logical_used < 0):  # noqa: E501
            raise ValueError("Invalid value for `max_logical_used`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_logical_used = max_logical_used

    @property
    def max_logical_used_volume(self):
        """Gets the max_logical_used_volume of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501

        Maximum logical used space for block volumes during the period. Was added in version 2.0.0.0.  # noqa: E501

        :return: The max_logical_used_volume of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :rtype: int
        """
        return self._max_logical_used_volume

    @max_logical_used_volume.setter
    def max_logical_used_volume(self, max_logical_used_volume):
        """Sets the max_logical_used_volume of this BaseSpaceMetricsByApplianceRollup.

        Maximum logical used space for block volumes during the period. Was added in version 2.0.0.0.  # noqa: E501

        :param max_logical_used_volume: The max_logical_used_volume of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                max_logical_used_volume is not None and max_logical_used_volume > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `max_logical_used_volume`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                max_logical_used_volume is not None and max_logical_used_volume < 0):  # noqa: E501
            raise ValueError("Invalid value for `max_logical_used_volume`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_logical_used_volume = max_logical_used_volume

    @property
    def max_logical_used_file_system(self):
        """Gets the max_logical_used_file_system of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501

        Maximum logical used space for file systems during the period. Was added in version 2.0.0.0.  # noqa: E501

        :return: The max_logical_used_file_system of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :rtype: int
        """
        return self._max_logical_used_file_system

    @max_logical_used_file_system.setter
    def max_logical_used_file_system(self, max_logical_used_file_system):
        """Sets the max_logical_used_file_system of this BaseSpaceMetricsByApplianceRollup.

        Maximum logical used space for file systems during the period. Was added in version 2.0.0.0.  # noqa: E501

        :param max_logical_used_file_system: The max_logical_used_file_system of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                max_logical_used_file_system is not None and max_logical_used_file_system > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `max_logical_used_file_system`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                max_logical_used_file_system is not None and max_logical_used_file_system < 0):  # noqa: E501
            raise ValueError("Invalid value for `max_logical_used_file_system`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_logical_used_file_system = max_logical_used_file_system

    @property
    def max_logical_used_vvol(self):
        """Gets the max_logical_used_vvol of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501

        Maximum logical used space for virtual volumes during the period. Was added in version 2.0.0.0.  # noqa: E501

        :return: The max_logical_used_vvol of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :rtype: int
        """
        return self._max_logical_used_vvol

    @max_logical_used_vvol.setter
    def max_logical_used_vvol(self, max_logical_used_vvol):
        """Sets the max_logical_used_vvol of this BaseSpaceMetricsByApplianceRollup.

        Maximum logical used space for virtual volumes during the period. Was added in version 2.0.0.0.  # noqa: E501

        :param max_logical_used_vvol: The max_logical_used_vvol of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                max_logical_used_vvol is not None and max_logical_used_vvol > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `max_logical_used_vvol`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                max_logical_used_vvol is not None and max_logical_used_vvol < 0):  # noqa: E501
            raise ValueError("Invalid value for `max_logical_used_vvol`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_logical_used_vvol = max_logical_used_vvol

    @property
    def max_shared_logical_used_volume(self):
        """Gets the max_shared_logical_used_volume of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501

        Maximum shared logical used space for block volumes during the period. Was added in version 2.0.0.0.  # noqa: E501

        :return: The max_shared_logical_used_volume of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :rtype: int
        """
        return self._max_shared_logical_used_volume

    @max_shared_logical_used_volume.setter
    def max_shared_logical_used_volume(self, max_shared_logical_used_volume):
        """Sets the max_shared_logical_used_volume of this BaseSpaceMetricsByApplianceRollup.

        Maximum shared logical used space for block volumes during the period. Was added in version 2.0.0.0.  # noqa: E501

        :param max_shared_logical_used_volume: The max_shared_logical_used_volume of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                max_shared_logical_used_volume is not None and max_shared_logical_used_volume > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `max_shared_logical_used_volume`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                max_shared_logical_used_volume is not None and max_shared_logical_used_volume < 0):  # noqa: E501
            raise ValueError("Invalid value for `max_shared_logical_used_volume`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_shared_logical_used_volume = max_shared_logical_used_volume

    @property
    def max_shared_logical_used_file_system(self):
        """Gets the max_shared_logical_used_file_system of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501

        Maximum shared logical used space for file volumes during the period. Was added in version 2.0.0.0.  # noqa: E501

        :return: The max_shared_logical_used_file_system of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :rtype: int
        """
        return self._max_shared_logical_used_file_system

    @max_shared_logical_used_file_system.setter
    def max_shared_logical_used_file_system(self, max_shared_logical_used_file_system):
        """Sets the max_shared_logical_used_file_system of this BaseSpaceMetricsByApplianceRollup.

        Maximum shared logical used space for file volumes during the period. Was added in version 2.0.0.0.  # noqa: E501

        :param max_shared_logical_used_file_system: The max_shared_logical_used_file_system of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                max_shared_logical_used_file_system is not None and max_shared_logical_used_file_system > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `max_shared_logical_used_file_system`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                max_shared_logical_used_file_system is not None and max_shared_logical_used_file_system < 0):  # noqa: E501
            raise ValueError("Invalid value for `max_shared_logical_used_file_system`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_shared_logical_used_file_system = max_shared_logical_used_file_system

    @property
    def max_shared_logical_used_vvol(self):
        """Gets the max_shared_logical_used_vvol of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501

        Maximum shared logical used space for virtual volumes during the period. Was added in version 2.0.0.0.  # noqa: E501

        :return: The max_shared_logical_used_vvol of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :rtype: int
        """
        return self._max_shared_logical_used_vvol

    @max_shared_logical_used_vvol.setter
    def max_shared_logical_used_vvol(self, max_shared_logical_used_vvol):
        """Sets the max_shared_logical_used_vvol of this BaseSpaceMetricsByApplianceRollup.

        Maximum shared logical used space for virtual volumes during the period. Was added in version 2.0.0.0.  # noqa: E501

        :param max_shared_logical_used_vvol: The max_shared_logical_used_vvol of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                max_shared_logical_used_vvol is not None and max_shared_logical_used_vvol > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `max_shared_logical_used_vvol`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                max_shared_logical_used_vvol is not None and max_shared_logical_used_vvol < 0):  # noqa: E501
            raise ValueError("Invalid value for `max_shared_logical_used_vvol`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_shared_logical_used_vvol = max_shared_logical_used_vvol

    @property
    def max_physical_total(self):
        """Gets the max_physical_total of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501

        Maximum physical total space during the period.  # noqa: E501

        :return: The max_physical_total of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :rtype: int
        """
        return self._max_physical_total

    @max_physical_total.setter
    def max_physical_total(self, max_physical_total):
        """Sets the max_physical_total of this BaseSpaceMetricsByApplianceRollup.

        Maximum physical total space during the period.  # noqa: E501

        :param max_physical_total: The max_physical_total of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                max_physical_total is not None and max_physical_total > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `max_physical_total`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                max_physical_total is not None and max_physical_total < 0):  # noqa: E501
            raise ValueError("Invalid value for `max_physical_total`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_physical_total = max_physical_total

    @property
    def max_physical_used(self):
        """Gets the max_physical_used of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501

        Maximum physical used space during the period.  # noqa: E501

        :return: The max_physical_used of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :rtype: int
        """
        return self._max_physical_used

    @max_physical_used.setter
    def max_physical_used(self, max_physical_used):
        """Sets the max_physical_used of this BaseSpaceMetricsByApplianceRollup.

        Maximum physical used space during the period.  # noqa: E501

        :param max_physical_used: The max_physical_used of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                max_physical_used is not None and max_physical_used > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `max_physical_used`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                max_physical_used is not None and max_physical_used < 0):  # noqa: E501
            raise ValueError("Invalid value for `max_physical_used`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_physical_used = max_physical_used

    @property
    def max_data_physical_used(self):
        """Gets the max_data_physical_used of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501

        Maximum physical used space for data during the period.  # noqa: E501

        :return: The max_data_physical_used of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :rtype: int
        """
        return self._max_data_physical_used

    @max_data_physical_used.setter
    def max_data_physical_used(self, max_data_physical_used):
        """Sets the max_data_physical_used of this BaseSpaceMetricsByApplianceRollup.

        Maximum physical used space for data during the period.  # noqa: E501

        :param max_data_physical_used: The max_data_physical_used of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                max_data_physical_used is not None and max_data_physical_used > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `max_data_physical_used`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                max_data_physical_used is not None and max_data_physical_used < 0):  # noqa: E501
            raise ValueError("Invalid value for `max_data_physical_used`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_data_physical_used = max_data_physical_used

    @property
    def last_efficiency_ratio(self):
        """Gets the last_efficiency_ratio of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501

        Last efficiency ratio during the period.  # noqa: E501

        :return: The last_efficiency_ratio of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :rtype: float
        """
        return self._last_efficiency_ratio

    @last_efficiency_ratio.setter
    def last_efficiency_ratio(self, last_efficiency_ratio):
        """Sets the last_efficiency_ratio of this BaseSpaceMetricsByApplianceRollup.

        Last efficiency ratio during the period.  # noqa: E501

        :param last_efficiency_ratio: The last_efficiency_ratio of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :type: float
        """

        self._last_efficiency_ratio = last_efficiency_ratio

    @property
    def last_data_reduction(self):
        """Gets the last_data_reduction of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501

        Last data reduction space during the period.  # noqa: E501

        :return: The last_data_reduction of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :rtype: float
        """
        return self._last_data_reduction

    @last_data_reduction.setter
    def last_data_reduction(self, last_data_reduction):
        """Sets the last_data_reduction of this BaseSpaceMetricsByApplianceRollup.

        Last data reduction space during the period.  # noqa: E501

        :param last_data_reduction: The last_data_reduction of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :type: float
        """

        self._last_data_reduction = last_data_reduction

    @property
    def last_snapshot_savings(self):
        """Gets the last_snapshot_savings of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501

        Last snapshot savings space during the period.  # noqa: E501

        :return: The last_snapshot_savings of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :rtype: float
        """
        return self._last_snapshot_savings

    @last_snapshot_savings.setter
    def last_snapshot_savings(self, last_snapshot_savings):
        """Sets the last_snapshot_savings of this BaseSpaceMetricsByApplianceRollup.

        Last snapshot savings space during the period.  # noqa: E501

        :param last_snapshot_savings: The last_snapshot_savings of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :type: float
        """

        self._last_snapshot_savings = last_snapshot_savings

    @property
    def last_thin_savings(self):
        """Gets the last_thin_savings of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501

        Last thin savings ratio during the period.  # noqa: E501

        :return: The last_thin_savings of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :rtype: float
        """
        return self._last_thin_savings

    @last_thin_savings.setter
    def last_thin_savings(self, last_thin_savings):
        """Sets the last_thin_savings of this BaseSpaceMetricsByApplianceRollup.

        Last thin savings ratio during the period.  # noqa: E501

        :param last_thin_savings: The last_thin_savings of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :type: float
        """

        self._last_thin_savings = last_thin_savings

    @property
    def last_shared_logical_used(self):
        """Gets the last_shared_logical_used of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501

        Last shared logical used during the period.  # noqa: E501

        :return: The last_shared_logical_used of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :rtype: int
        """
        return self._last_shared_logical_used

    @last_shared_logical_used.setter
    def last_shared_logical_used(self, last_shared_logical_used):
        """Sets the last_shared_logical_used of this BaseSpaceMetricsByApplianceRollup.

        Last shared logical used during the period.  # noqa: E501

        :param last_shared_logical_used: The last_shared_logical_used of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                last_shared_logical_used is not None and last_shared_logical_used > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `last_shared_logical_used`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                last_shared_logical_used is not None and last_shared_logical_used < 0):  # noqa: E501
            raise ValueError("Invalid value for `last_shared_logical_used`, must be a value greater than or equal to `0`")  # noqa: E501

        self._last_shared_logical_used = last_shared_logical_used

    @property
    def last_system_free_space(self):
        """Gets the last_system_free_space of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501

        Last system free space during the period. Was added in version 3.0.0.0.  # noqa: E501

        :return: The last_system_free_space of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :rtype: int
        """
        return self._last_system_free_space

    @last_system_free_space.setter
    def last_system_free_space(self, last_system_free_space):
        """Sets the last_system_free_space of this BaseSpaceMetricsByApplianceRollup.

        Last system free space during the period. Was added in version 3.0.0.0.  # noqa: E501

        :param last_system_free_space: The last_system_free_space of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                last_system_free_space is not None and last_system_free_space > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `last_system_free_space`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                last_system_free_space is not None and last_system_free_space < 0):  # noqa: E501
            raise ValueError("Invalid value for `last_system_free_space`, must be a value greater than or equal to `0`")  # noqa: E501

        self._last_system_free_space = last_system_free_space

    @property
    def max_efficiency_ratio(self):
        """Gets the max_efficiency_ratio of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501

        Maximum efficiency ratio during the period.  # noqa: E501

        :return: The max_efficiency_ratio of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :rtype: float
        """
        return self._max_efficiency_ratio

    @max_efficiency_ratio.setter
    def max_efficiency_ratio(self, max_efficiency_ratio):
        """Sets the max_efficiency_ratio of this BaseSpaceMetricsByApplianceRollup.

        Maximum efficiency ratio during the period.  # noqa: E501

        :param max_efficiency_ratio: The max_efficiency_ratio of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :type: float
        """

        self._max_efficiency_ratio = max_efficiency_ratio

    @property
    def max_data_reduction(self):
        """Gets the max_data_reduction of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501

        Maximum data reduction space during the period.  # noqa: E501

        :return: The max_data_reduction of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :rtype: float
        """
        return self._max_data_reduction

    @max_data_reduction.setter
    def max_data_reduction(self, max_data_reduction):
        """Sets the max_data_reduction of this BaseSpaceMetricsByApplianceRollup.

        Maximum data reduction space during the period.  # noqa: E501

        :param max_data_reduction: The max_data_reduction of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :type: float
        """

        self._max_data_reduction = max_data_reduction

    @property
    def max_snapshot_savings(self):
        """Gets the max_snapshot_savings of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501

        Maximum snapshot savings space during the period.  # noqa: E501

        :return: The max_snapshot_savings of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :rtype: float
        """
        return self._max_snapshot_savings

    @max_snapshot_savings.setter
    def max_snapshot_savings(self, max_snapshot_savings):
        """Sets the max_snapshot_savings of this BaseSpaceMetricsByApplianceRollup.

        Maximum snapshot savings space during the period.  # noqa: E501

        :param max_snapshot_savings: The max_snapshot_savings of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :type: float
        """

        self._max_snapshot_savings = max_snapshot_savings

    @property
    def max_thin_savings(self):
        """Gets the max_thin_savings of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501

        Maximum thin savings ratio during the period.  # noqa: E501

        :return: The max_thin_savings of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :rtype: float
        """
        return self._max_thin_savings

    @max_thin_savings.setter
    def max_thin_savings(self, max_thin_savings):
        """Sets the max_thin_savings of this BaseSpaceMetricsByApplianceRollup.

        Maximum thin savings ratio during the period.  # noqa: E501

        :param max_thin_savings: The max_thin_savings of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :type: float
        """

        self._max_thin_savings = max_thin_savings

    @property
    def max_shared_logical_used(self):
        """Gets the max_shared_logical_used of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501

        Max shared logical used during the period.  # noqa: E501

        :return: The max_shared_logical_used of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :rtype: int
        """
        return self._max_shared_logical_used

    @max_shared_logical_used.setter
    def max_shared_logical_used(self, max_shared_logical_used):
        """Sets the max_shared_logical_used of this BaseSpaceMetricsByApplianceRollup.

        Max shared logical used during the period.  # noqa: E501

        :param max_shared_logical_used: The max_shared_logical_used of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                max_shared_logical_used is not None and max_shared_logical_used > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `max_shared_logical_used`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                max_shared_logical_used is not None and max_shared_logical_used < 0):  # noqa: E501
            raise ValueError("Invalid value for `max_shared_logical_used`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_shared_logical_used = max_shared_logical_used

    @property
    def max_system_free_space(self):
        """Gets the max_system_free_space of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501

        Maximum system free space during the period. Was added in version 3.0.0.0.  # noqa: E501

        :return: The max_system_free_space of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :rtype: int
        """
        return self._max_system_free_space

    @max_system_free_space.setter
    def max_system_free_space(self, max_system_free_space):
        """Sets the max_system_free_space of this BaseSpaceMetricsByApplianceRollup.

        Maximum system free space during the period. Was added in version 3.0.0.0.  # noqa: E501

        :param max_system_free_space: The max_system_free_space of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                max_system_free_space is not None and max_system_free_space > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `max_system_free_space`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                max_system_free_space is not None and max_system_free_space < 0):  # noqa: E501
            raise ValueError("Invalid value for `max_system_free_space`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_system_free_space = max_system_free_space

    @property
    def repeat_count(self):
        """Gets the repeat_count of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501

        Number of times the metrics are repeated.  # noqa: E501

        :return: The repeat_count of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :rtype: int
        """
        return self._repeat_count

    @repeat_count.setter
    def repeat_count(self, repeat_count):
        """Sets the repeat_count of this BaseSpaceMetricsByApplianceRollup.

        Number of times the metrics are repeated.  # noqa: E501

        :param repeat_count: The repeat_count of this BaseSpaceMetricsByApplianceRollup.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                repeat_count is not None and repeat_count > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `repeat_count`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                repeat_count is not None and repeat_count < 0):  # noqa: E501
            raise ValueError("Invalid value for `repeat_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._repeat_count = repeat_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseSpaceMetricsByApplianceRollup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseSpaceMetricsByApplianceRollup):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BaseSpaceMetricsByApplianceRollup):
            return True

        return self.to_dict() != other.to_dict()
