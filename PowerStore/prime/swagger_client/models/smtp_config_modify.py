# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class SmtpConfigModify(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'port': 'int',
        'source_email': 'str'
    }

    attribute_map = {
        'address': 'address',
        'port': 'port',
        'source_email': 'source_email'
    }

    def __init__(self, address=None, port=None, source_email=None, _configuration=None):  # noqa: E501
        """SmtpConfigModify - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._address = None
        self._port = None
        self._source_email = None
        self.discriminator = None

        if address is not None:
            self.address = address
        if port is not None:
            self.port = port
        if source_email is not None:
            self.source_email = source_email

    @property
    def address(self):
        """Gets the address of this SmtpConfigModify.  # noqa: E501

        IP address of the SMTP server.  # noqa: E501

        :return: The address of this SmtpConfigModify.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this SmtpConfigModify.

        IP address of the SMTP server.  # noqa: E501

        :param address: The address of this SmtpConfigModify.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def port(self):
        """Gets the port of this SmtpConfigModify.  # noqa: E501

        Port used for sending SMTP messages.  # noqa: E501

        :return: The port of this SmtpConfigModify.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this SmtpConfigModify.

        Port used for sending SMTP messages.  # noqa: E501

        :param port: The port of this SmtpConfigModify.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                port is not None and port > 65535):  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value less than or equal to `65535`")  # noqa: E501
        if (self._configuration.client_side_validation and
                port is not None and port < 0):  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value greater than or equal to `0`")  # noqa: E501

        self._port = port

    @property
    def source_email(self):
        """Gets the source_email of this SmtpConfigModify.  # noqa: E501

        Source email address used for sending SMTP messages.  # noqa: E501

        :return: The source_email of this SmtpConfigModify.  # noqa: E501
        :rtype: str
        """
        return self._source_email

    @source_email.setter
    def source_email(self, source_email):
        """Sets the source_email of this SmtpConfigModify.

        Source email address used for sending SMTP messages.  # noqa: E501

        :param source_email: The source_email of this SmtpConfigModify.  # noqa: E501
        :type: str
        """

        self._source_email = source_email

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SmtpConfigModify, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SmtpConfigModify):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SmtpConfigModify):
            return True

        return self.to_dict() != other.to_dict()
