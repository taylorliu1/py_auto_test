# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class DiscoveredApplianceInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'link_local_address': 'str',
        'service_name': 'str',
        'service_tag': 'str',
        'state': 'DiscoveredApplianceStateEnum',
        'type': 'DiscoveredApplianceTypeEnum',
        'mode': 'DiscoveredApplianceModeEnum',
        'model': 'str',
        'express_service_code': 'str',
        'is_local': 'bool',
        'management_service_ready': 'bool',
        'software_version_compatibility': 'DiscoveredApplianceSoftwareVersionCompatibilityEnum',
        'build_version': 'str',
        'build_id': 'str',
        'power_score': 'int',
        'node_count': 'int',
        'is_unified_capable': 'bool',
        'drive_failure_tolerance_level_and_availability': 'list[DiscoveredApplianceDriveFailureToleranceLevelAvailability]'
    }

    attribute_map = {
        'id': 'id',
        'link_local_address': 'link_local_address',
        'service_name': 'service_name',
        'service_tag': 'service_tag',
        'state': 'state',
        'type': 'type',
        'mode': 'mode',
        'model': 'model',
        'express_service_code': 'express_service_code',
        'is_local': 'is_local',
        'management_service_ready': 'management_service_ready',
        'software_version_compatibility': 'software_version_compatibility',
        'build_version': 'build_version',
        'build_id': 'build_id',
        'power_score': 'power_score',
        'node_count': 'node_count',
        'is_unified_capable': 'is_unified_capable',
        'drive_failure_tolerance_level_and_availability': 'drive_failure_tolerance_level_and_availability'
    }

    def __init__(self, id=None, link_local_address=None, service_name=None, service_tag=None, state=None, type=None, mode=None, model=None, express_service_code=None, is_local=None, management_service_ready=None, software_version_compatibility=None, build_version=None, build_id=None, power_score=None, node_count=2, is_unified_capable=None, drive_failure_tolerance_level_and_availability=None, _configuration=None):  # noqa: E501
        """DiscoveredApplianceInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._link_local_address = None
        self._service_name = None
        self._service_tag = None
        self._state = None
        self._type = None
        self._mode = None
        self._model = None
        self._express_service_code = None
        self._is_local = None
        self._management_service_ready = None
        self._software_version_compatibility = None
        self._build_version = None
        self._build_id = None
        self._power_score = None
        self._node_count = None
        self._is_unified_capable = None
        self._drive_failure_tolerance_level_and_availability = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if link_local_address is not None:
            self.link_local_address = link_local_address
        if service_name is not None:
            self.service_name = service_name
        if service_tag is not None:
            self.service_tag = service_tag
        if state is not None:
            self.state = state
        if type is not None:
            self.type = type
        if mode is not None:
            self.mode = mode
        if model is not None:
            self.model = model
        if express_service_code is not None:
            self.express_service_code = express_service_code
        if is_local is not None:
            self.is_local = is_local
        if management_service_ready is not None:
            self.management_service_ready = management_service_ready
        if software_version_compatibility is not None:
            self.software_version_compatibility = software_version_compatibility
        if build_version is not None:
            self.build_version = build_version
        if build_id is not None:
            self.build_id = build_id
        if power_score is not None:
            self.power_score = power_score
        if node_count is not None:
            self.node_count = node_count
        if is_unified_capable is not None:
            self.is_unified_capable = is_unified_capable
        if drive_failure_tolerance_level_and_availability is not None:
            self.drive_failure_tolerance_level_and_availability = drive_failure_tolerance_level_and_availability

    @property
    def id(self):
        """Gets the id of this DiscoveredApplianceInstance.  # noqa: E501

        Unique identifier of a discovered appliance. The local discovered appliance has the id \"0\".  # noqa: E501

        :return: The id of this DiscoveredApplianceInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DiscoveredApplianceInstance.

        Unique identifier of a discovered appliance. The local discovered appliance has the id \"0\".  # noqa: E501

        :param id: The id of this DiscoveredApplianceInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def link_local_address(self):
        """Gets the link_local_address of this DiscoveredApplianceInstance.  # noqa: E501

        The link local IPv4 address for the appliance.  # noqa: E501

        :return: The link_local_address of this DiscoveredApplianceInstance.  # noqa: E501
        :rtype: str
        """
        return self._link_local_address

    @link_local_address.setter
    def link_local_address(self, link_local_address):
        """Sets the link_local_address of this DiscoveredApplianceInstance.

        The link local IPv4 address for the appliance.  # noqa: E501

        :param link_local_address: The link_local_address of this DiscoveredApplianceInstance.  # noqa: E501
        :type: str
        """

        self._link_local_address = link_local_address

    @property
    def service_name(self):
        """Gets the service_name of this DiscoveredApplianceInstance.  # noqa: E501

        The service name of the appliance.  # noqa: E501

        :return: The service_name of this DiscoveredApplianceInstance.  # noqa: E501
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this DiscoveredApplianceInstance.

        The service name of the appliance.  # noqa: E501

        :param service_name: The service_name of this DiscoveredApplianceInstance.  # noqa: E501
        :type: str
        """

        self._service_name = service_name

    @property
    def service_tag(self):
        """Gets the service_tag of this DiscoveredApplianceInstance.  # noqa: E501

        The Dell service tag.  # noqa: E501

        :return: The service_tag of this DiscoveredApplianceInstance.  # noqa: E501
        :rtype: str
        """
        return self._service_tag

    @service_tag.setter
    def service_tag(self, service_tag):
        """Sets the service_tag of this DiscoveredApplianceInstance.

        The Dell service tag.  # noqa: E501

        :param service_tag: The service_tag of this DiscoveredApplianceInstance.  # noqa: E501
        :type: str
        """

        self._service_tag = service_tag

    @property
    def state(self):
        """Gets the state of this DiscoveredApplianceInstance.  # noqa: E501


        :return: The state of this DiscoveredApplianceInstance.  # noqa: E501
        :rtype: DiscoveredApplianceStateEnum
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DiscoveredApplianceInstance.


        :param state: The state of this DiscoveredApplianceInstance.  # noqa: E501
        :type: DiscoveredApplianceStateEnum
        """

        self._state = state

    @property
    def type(self):
        """Gets the type of this DiscoveredApplianceInstance.  # noqa: E501


        :return: The type of this DiscoveredApplianceInstance.  # noqa: E501
        :rtype: DiscoveredApplianceTypeEnum
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DiscoveredApplianceInstance.


        :param type: The type of this DiscoveredApplianceInstance.  # noqa: E501
        :type: DiscoveredApplianceTypeEnum
        """

        self._type = type

    @property
    def mode(self):
        """Gets the mode of this DiscoveredApplianceInstance.  # noqa: E501


        :return: The mode of this DiscoveredApplianceInstance.  # noqa: E501
        :rtype: DiscoveredApplianceModeEnum
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this DiscoveredApplianceInstance.


        :param mode: The mode of this DiscoveredApplianceInstance.  # noqa: E501
        :type: DiscoveredApplianceModeEnum
        """

        self._mode = mode

    @property
    def model(self):
        """Gets the model of this DiscoveredApplianceInstance.  # noqa: E501

        The model of the appliance.  # noqa: E501

        :return: The model of this DiscoveredApplianceInstance.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this DiscoveredApplianceInstance.

        The model of the appliance.  # noqa: E501

        :param model: The model of this DiscoveredApplianceInstance.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def express_service_code(self):
        """Gets the express_service_code of this DiscoveredApplianceInstance.  # noqa: E501

        The Express service code for the appliance.  # noqa: E501

        :return: The express_service_code of this DiscoveredApplianceInstance.  # noqa: E501
        :rtype: str
        """
        return self._express_service_code

    @express_service_code.setter
    def express_service_code(self, express_service_code):
        """Sets the express_service_code of this DiscoveredApplianceInstance.

        The Express service code for the appliance.  # noqa: E501

        :param express_service_code: The express_service_code of this DiscoveredApplianceInstance.  # noqa: E501
        :type: str
        """

        self._express_service_code = express_service_code

    @property
    def is_local(self):
        """Gets the is_local of this DiscoveredApplianceInstance.  # noqa: E501

        Indicates whether appliance is local (serving this request) or not.  # noqa: E501

        :return: The is_local of this DiscoveredApplianceInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_local

    @is_local.setter
    def is_local(self, is_local):
        """Sets the is_local of this DiscoveredApplianceInstance.

        Indicates whether appliance is local (serving this request) or not.  # noqa: E501

        :param is_local: The is_local of this DiscoveredApplianceInstance.  # noqa: E501
        :type: bool
        """

        self._is_local = is_local

    @property
    def management_service_ready(self):
        """Gets the management_service_ready of this DiscoveredApplianceInstance.  # noqa: E501

        Indicates whether necessary management services are ready.  # noqa: E501

        :return: The management_service_ready of this DiscoveredApplianceInstance.  # noqa: E501
        :rtype: bool
        """
        return self._management_service_ready

    @management_service_ready.setter
    def management_service_ready(self, management_service_ready):
        """Sets the management_service_ready of this DiscoveredApplianceInstance.

        Indicates whether necessary management services are ready.  # noqa: E501

        :param management_service_ready: The management_service_ready of this DiscoveredApplianceInstance.  # noqa: E501
        :type: bool
        """

        self._management_service_ready = management_service_ready

    @property
    def software_version_compatibility(self):
        """Gets the software_version_compatibility of this DiscoveredApplianceInstance.  # noqa: E501


        :return: The software_version_compatibility of this DiscoveredApplianceInstance.  # noqa: E501
        :rtype: DiscoveredApplianceSoftwareVersionCompatibilityEnum
        """
        return self._software_version_compatibility

    @software_version_compatibility.setter
    def software_version_compatibility(self, software_version_compatibility):
        """Sets the software_version_compatibility of this DiscoveredApplianceInstance.


        :param software_version_compatibility: The software_version_compatibility of this DiscoveredApplianceInstance.  # noqa: E501
        :type: DiscoveredApplianceSoftwareVersionCompatibilityEnum
        """

        self._software_version_compatibility = software_version_compatibility

    @property
    def build_version(self):
        """Gets the build_version of this DiscoveredApplianceInstance.  # noqa: E501

        Build version of the installed software package release.  # noqa: E501

        :return: The build_version of this DiscoveredApplianceInstance.  # noqa: E501
        :rtype: str
        """
        return self._build_version

    @build_version.setter
    def build_version(self, build_version):
        """Sets the build_version of this DiscoveredApplianceInstance.

        Build version of the installed software package release.  # noqa: E501

        :param build_version: The build_version of this DiscoveredApplianceInstance.  # noqa: E501
        :type: str
        """

        self._build_version = build_version

    @property
    def build_id(self):
        """Gets the build_id of this DiscoveredApplianceInstance.  # noqa: E501

        Unique identifier of this build.  # noqa: E501

        :return: The build_id of this DiscoveredApplianceInstance.  # noqa: E501
        :rtype: str
        """
        return self._build_id

    @build_id.setter
    def build_id(self, build_id):
        """Sets the build_id of this DiscoveredApplianceInstance.

        Unique identifier of this build.  # noqa: E501

        :param build_id: The build_id of this DiscoveredApplianceInstance.  # noqa: E501
        :type: str
        """

        self._build_id = build_id

    @property
    def power_score(self):
        """Gets the power_score of this DiscoveredApplianceInstance.  # noqa: E501

        Power rating for this appliance.  # noqa: E501

        :return: The power_score of this DiscoveredApplianceInstance.  # noqa: E501
        :rtype: int
        """
        return self._power_score

    @power_score.setter
    def power_score(self, power_score):
        """Sets the power_score of this DiscoveredApplianceInstance.

        Power rating for this appliance.  # noqa: E501

        :param power_score: The power_score of this DiscoveredApplianceInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                power_score is not None and power_score > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `power_score`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                power_score is not None and power_score < 0):  # noqa: E501
            raise ValueError("Invalid value for `power_score`, must be a value greater than or equal to `0`")  # noqa: E501

        self._power_score = power_score

    @property
    def node_count(self):
        """Gets the node_count of this DiscoveredApplianceInstance.  # noqa: E501

        The number of nodes deployed on an appliance.  # noqa: E501

        :return: The node_count of this DiscoveredApplianceInstance.  # noqa: E501
        :rtype: int
        """
        return self._node_count

    @node_count.setter
    def node_count(self, node_count):
        """Sets the node_count of this DiscoveredApplianceInstance.

        The number of nodes deployed on an appliance.  # noqa: E501

        :param node_count: The node_count of this DiscoveredApplianceInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                node_count is not None and node_count > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `node_count`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                node_count is not None and node_count < 0):  # noqa: E501
            raise ValueError("Invalid value for `node_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._node_count = node_count

    @property
    def is_unified_capable(self):
        """Gets the is_unified_capable of this DiscoveredApplianceInstance.  # noqa: E501

        Indicates whether the appliance is capable of a unified configuration  # noqa: E501

        :return: The is_unified_capable of this DiscoveredApplianceInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_unified_capable

    @is_unified_capable.setter
    def is_unified_capable(self, is_unified_capable):
        """Sets the is_unified_capable of this DiscoveredApplianceInstance.

        Indicates whether the appliance is capable of a unified configuration  # noqa: E501

        :param is_unified_capable: The is_unified_capable of this DiscoveredApplianceInstance.  # noqa: E501
        :type: bool
        """

        self._is_unified_capable = is_unified_capable

    @property
    def drive_failure_tolerance_level_and_availability(self):
        """Gets the drive_failure_tolerance_level_and_availability of this DiscoveredApplianceInstance.  # noqa: E501

        Information about the drive failure tolerance levels.  Filtering on the fields of this embedded resource is not supported.  # noqa: E501

        :return: The drive_failure_tolerance_level_and_availability of this DiscoveredApplianceInstance.  # noqa: E501
        :rtype: list[DiscoveredApplianceDriveFailureToleranceLevelAvailability]
        """
        return self._drive_failure_tolerance_level_and_availability

    @drive_failure_tolerance_level_and_availability.setter
    def drive_failure_tolerance_level_and_availability(self, drive_failure_tolerance_level_and_availability):
        """Sets the drive_failure_tolerance_level_and_availability of this DiscoveredApplianceInstance.

        Information about the drive failure tolerance levels.  Filtering on the fields of this embedded resource is not supported.  # noqa: E501

        :param drive_failure_tolerance_level_and_availability: The drive_failure_tolerance_level_and_availability of this DiscoveredApplianceInstance.  # noqa: E501
        :type: list[DiscoveredApplianceDriveFailureToleranceLevelAvailability]
        """

        self._drive_failure_tolerance_level_and_availability = drive_failure_tolerance_level_and_availability

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DiscoveredApplianceInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiscoveredApplianceInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DiscoveredApplianceInstance):
            return True

        return self.to_dict() != other.to_dict()
