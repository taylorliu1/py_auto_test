# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class ImportHostInitiatorInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'iqn_or_wwn': 'str',
        'protocol': 'HostInitiatorProtocolTypeEnum',
        'import_host_system_id': 'str',
        'protocol_l10n': 'str'
    }

    attribute_map = {
        'id': 'id',
        'iqn_or_wwn': 'iqn_or_wwn',
        'protocol': 'protocol',
        'import_host_system_id': 'import_host_system_id',
        'protocol_l10n': 'protocol_l10n'
    }

    def __init__(self, id=None, iqn_or_wwn=None, protocol=None, import_host_system_id=None, protocol_l10n=None, _configuration=None):  # noqa: E501
        """ImportHostInitiatorInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._iqn_or_wwn = None
        self._protocol = None
        self._import_host_system_id = None
        self._protocol_l10n = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if iqn_or_wwn is not None:
            self.iqn_or_wwn = iqn_or_wwn
        if protocol is not None:
            self.protocol = protocol
        if import_host_system_id is not None:
            self.import_host_system_id = import_host_system_id
        if protocol_l10n is not None:
            self.protocol_l10n = protocol_l10n

    @property
    def id(self):
        """Gets the id of this ImportHostInitiatorInstance.  # noqa: E501

        Unique identifier of the import host initiator.  # noqa: E501

        :return: The id of this ImportHostInitiatorInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ImportHostInitiatorInstance.

        Unique identifier of the import host initiator.  # noqa: E501

        :param id: The id of this ImportHostInitiatorInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def iqn_or_wwn(self):
        """Gets the iqn_or_wwn of this ImportHostInitiatorInstance.  # noqa: E501

        iSCSI Qualified Name (IQN) or World Wide Name (WWN) of the host initiator.  # noqa: E501

        :return: The iqn_or_wwn of this ImportHostInitiatorInstance.  # noqa: E501
        :rtype: str
        """
        return self._iqn_or_wwn

    @iqn_or_wwn.setter
    def iqn_or_wwn(self, iqn_or_wwn):
        """Sets the iqn_or_wwn of this ImportHostInitiatorInstance.

        iSCSI Qualified Name (IQN) or World Wide Name (WWN) of the host initiator.  # noqa: E501

        :param iqn_or_wwn: The iqn_or_wwn of this ImportHostInitiatorInstance.  # noqa: E501
        :type: str
        """

        self._iqn_or_wwn = iqn_or_wwn

    @property
    def protocol(self):
        """Gets the protocol of this ImportHostInitiatorInstance.  # noqa: E501


        :return: The protocol of this ImportHostInitiatorInstance.  # noqa: E501
        :rtype: HostInitiatorProtocolTypeEnum
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this ImportHostInitiatorInstance.


        :param protocol: The protocol of this ImportHostInitiatorInstance.  # noqa: E501
        :type: HostInitiatorProtocolTypeEnum
        """

        self._protocol = protocol

    @property
    def import_host_system_id(self):
        """Gets the import_host_system_id of this ImportHostInitiatorInstance.  # noqa: E501

        Unique identifier of the import host system.  # noqa: E501

        :return: The import_host_system_id of this ImportHostInitiatorInstance.  # noqa: E501
        :rtype: str
        """
        return self._import_host_system_id

    @import_host_system_id.setter
    def import_host_system_id(self, import_host_system_id):
        """Sets the import_host_system_id of this ImportHostInitiatorInstance.

        Unique identifier of the import host system.  # noqa: E501

        :param import_host_system_id: The import_host_system_id of this ImportHostInitiatorInstance.  # noqa: E501
        :type: str
        """

        self._import_host_system_id = import_host_system_id

    @property
    def protocol_l10n(self):
        """Gets the protocol_l10n of this ImportHostInitiatorInstance.  # noqa: E501

        Localized message string corresponding to protocol  # noqa: E501

        :return: The protocol_l10n of this ImportHostInitiatorInstance.  # noqa: E501
        :rtype: str
        """
        return self._protocol_l10n

    @protocol_l10n.setter
    def protocol_l10n(self, protocol_l10n):
        """Sets the protocol_l10n of this ImportHostInitiatorInstance.

        Localized message string corresponding to protocol  # noqa: E501

        :param protocol_l10n: The protocol_l10n of this ImportHostInitiatorInstance.  # noqa: E501
        :type: str
        """

        self._protocol_l10n = protocol_l10n

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImportHostInitiatorInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportHostInitiatorInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImportHostInitiatorInstance):
            return True

        return self.to_dict() != other.to_dict()
