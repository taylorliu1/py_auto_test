# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class ImportHostSystemCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'os_type': 'HAOSTypeEnum',
        'agent_address': 'str',
        'agent_port': 'int',
        'user_name': 'str',
        'password': 'str',
        'chap_single_username': 'str',
        'chap_single_password': 'str',
        'chap_mutual_username': 'str',
        'chap_mutual_password': 'str'
    }

    attribute_map = {
        'os_type': 'os_type',
        'agent_address': 'agent_address',
        'agent_port': 'agent_port',
        'user_name': 'user_name',
        'password': 'password',
        'chap_single_username': 'chap_single_username',
        'chap_single_password': 'chap_single_password',
        'chap_mutual_username': 'chap_mutual_username',
        'chap_mutual_password': 'chap_mutual_password'
    }

    def __init__(self, os_type=None, agent_address=None, agent_port=None, user_name=None, password=None, chap_single_username=None, chap_single_password=None, chap_mutual_username=None, chap_mutual_password=None, _configuration=None):  # noqa: E501
        """ImportHostSystemCreate - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._os_type = None
        self._agent_address = None
        self._agent_port = None
        self._user_name = None
        self._password = None
        self._chap_single_username = None
        self._chap_single_password = None
        self._chap_mutual_username = None
        self._chap_mutual_password = None
        self.discriminator = None

        self.os_type = os_type
        self.agent_address = agent_address
        self.agent_port = agent_port
        self.user_name = user_name
        self.password = password
        if chap_single_username is not None:
            self.chap_single_username = chap_single_username
        if chap_single_password is not None:
            self.chap_single_password = chap_single_password
        if chap_mutual_username is not None:
            self.chap_mutual_username = chap_mutual_username
        if chap_mutual_password is not None:
            self.chap_mutual_password = chap_mutual_password

    @property
    def os_type(self):
        """Gets the os_type of this ImportHostSystemCreate.  # noqa: E501


        :return: The os_type of this ImportHostSystemCreate.  # noqa: E501
        :rtype: HAOSTypeEnum
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type):
        """Sets the os_type of this ImportHostSystemCreate.


        :param os_type: The os_type of this ImportHostSystemCreate.  # noqa: E501
        :type: HAOSTypeEnum
        """
        if self._configuration.client_side_validation and os_type is None:
            raise ValueError("Invalid value for `os_type`, must not be `None`")  # noqa: E501

        self._os_type = os_type

    @property
    def agent_address(self):
        """Gets the agent_address of this ImportHostSystemCreate.  # noqa: E501

        Hostname or IPv4 address of the import host system.  # noqa: E501

        :return: The agent_address of this ImportHostSystemCreate.  # noqa: E501
        :rtype: str
        """
        return self._agent_address

    @agent_address.setter
    def agent_address(self, agent_address):
        """Sets the agent_address of this ImportHostSystemCreate.

        Hostname or IPv4 address of the import host system.  # noqa: E501

        :param agent_address: The agent_address of this ImportHostSystemCreate.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and agent_address is None:
            raise ValueError("Invalid value for `agent_address`, must not be `None`")  # noqa: E501

        self._agent_address = agent_address

    @property
    def agent_port(self):
        """Gets the agent_port of this ImportHostSystemCreate.  # noqa: E501

        TCP port of the import host system.  # noqa: E501

        :return: The agent_port of this ImportHostSystemCreate.  # noqa: E501
        :rtype: int
        """
        return self._agent_port

    @agent_port.setter
    def agent_port(self, agent_port):
        """Sets the agent_port of this ImportHostSystemCreate.

        TCP port of the import host system.  # noqa: E501

        :param agent_port: The agent_port of this ImportHostSystemCreate.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and agent_port is None:
            raise ValueError("Invalid value for `agent_port`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                agent_port is not None and agent_port > 65535):  # noqa: E501
            raise ValueError("Invalid value for `agent_port`, must be a value less than or equal to `65535`")  # noqa: E501
        if (self._configuration.client_side_validation and
                agent_port is not None and agent_port < 0):  # noqa: E501
            raise ValueError("Invalid value for `agent_port`, must be a value greater than or equal to `0`")  # noqa: E501

        self._agent_port = agent_port

    @property
    def user_name(self):
        """Gets the user_name of this ImportHostSystemCreate.  # noqa: E501

        Username for the import host system.  # noqa: E501

        :return: The user_name of this ImportHostSystemCreate.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this ImportHostSystemCreate.

        Username for the import host system.  # noqa: E501

        :param user_name: The user_name of this ImportHostSystemCreate.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")  # noqa: E501

        self._user_name = user_name

    @property
    def password(self):
        """Gets the password of this ImportHostSystemCreate.  # noqa: E501

        Password for the specified username.  # noqa: E501

        :return: The password of this ImportHostSystemCreate.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ImportHostSystemCreate.

        Password for the specified username.  # noqa: E501

        :param password: The password of this ImportHostSystemCreate.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def chap_single_username(self):
        """Gets the chap_single_username of this ImportHostSystemCreate.  # noqa: E501

        Username for single CHAP authentication. This username is required when the cluster is using single authentication CHAP mode.  # noqa: E501

        :return: The chap_single_username of this ImportHostSystemCreate.  # noqa: E501
        :rtype: str
        """
        return self._chap_single_username

    @chap_single_username.setter
    def chap_single_username(self, chap_single_username):
        """Sets the chap_single_username of this ImportHostSystemCreate.

        Username for single CHAP authentication. This username is required when the cluster is using single authentication CHAP mode.  # noqa: E501

        :param chap_single_username: The chap_single_username of this ImportHostSystemCreate.  # noqa: E501
        :type: str
        """

        self._chap_single_username = chap_single_username

    @property
    def chap_single_password(self):
        """Gets the chap_single_password of this ImportHostSystemCreate.  # noqa: E501

        Password for single CHAP authentication. This password is required when the cluster is using single authentication CHAP mode.  # noqa: E501

        :return: The chap_single_password of this ImportHostSystemCreate.  # noqa: E501
        :rtype: str
        """
        return self._chap_single_password

    @chap_single_password.setter
    def chap_single_password(self, chap_single_password):
        """Sets the chap_single_password of this ImportHostSystemCreate.

        Password for single CHAP authentication. This password is required when the cluster is using single authentication CHAP mode.  # noqa: E501

        :param chap_single_password: The chap_single_password of this ImportHostSystemCreate.  # noqa: E501
        :type: str
        """

        self._chap_single_password = chap_single_password

    @property
    def chap_mutual_username(self):
        """Gets the chap_mutual_username of this ImportHostSystemCreate.  # noqa: E501

        Username for mutual CHAP authentication. This username is required when the cluster is using mutual authentication CHAP mode.  # noqa: E501

        :return: The chap_mutual_username of this ImportHostSystemCreate.  # noqa: E501
        :rtype: str
        """
        return self._chap_mutual_username

    @chap_mutual_username.setter
    def chap_mutual_username(self, chap_mutual_username):
        """Sets the chap_mutual_username of this ImportHostSystemCreate.

        Username for mutual CHAP authentication. This username is required when the cluster is using mutual authentication CHAP mode.  # noqa: E501

        :param chap_mutual_username: The chap_mutual_username of this ImportHostSystemCreate.  # noqa: E501
        :type: str
        """

        self._chap_mutual_username = chap_mutual_username

    @property
    def chap_mutual_password(self):
        """Gets the chap_mutual_password of this ImportHostSystemCreate.  # noqa: E501

        Password for mutual CHAP authentication. This password is required when the cluster is using mutual authentication CHAP mode.  # noqa: E501

        :return: The chap_mutual_password of this ImportHostSystemCreate.  # noqa: E501
        :rtype: str
        """
        return self._chap_mutual_password

    @chap_mutual_password.setter
    def chap_mutual_password(self, chap_mutual_password):
        """Sets the chap_mutual_password of this ImportHostSystemCreate.

        Password for mutual CHAP authentication. This password is required when the cluster is using mutual authentication CHAP mode.  # noqa: E501

        :param chap_mutual_password: The chap_mutual_password of this ImportHostSystemCreate.  # noqa: E501
        :type: str
        """

        self._chap_mutual_password = chap_mutual_password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImportHostSystemCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportHostSystemCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImportHostSystemCreate):
            return True

        return self.to_dict() != other.to_dict()
