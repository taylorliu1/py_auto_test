# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class FileTreeQuotaCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file_system_id': 'str',
        'path': 'str',
        'description': 'str',
        'hard_limit': 'int',
        'soft_limit': 'int',
        'is_user_quotas_enforced': 'bool',
        'grace_period': 'int'
    }

    attribute_map = {
        'file_system_id': 'file_system_id',
        'path': 'path',
        'description': 'description',
        'hard_limit': 'hard_limit',
        'soft_limit': 'soft_limit',
        'is_user_quotas_enforced': 'is_user_quotas_enforced',
        'grace_period': 'grace_period'
    }

    def __init__(self, file_system_id=None, path=None, description=None, hard_limit=None, soft_limit=None, is_user_quotas_enforced=None, grace_period=0, _configuration=None):  # noqa: E501
        """FileTreeQuotaCreate - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._file_system_id = None
        self._path = None
        self._description = None
        self._hard_limit = None
        self._soft_limit = None
        self._is_user_quotas_enforced = None
        self._grace_period = None
        self.discriminator = None

        self.file_system_id = file_system_id
        self.path = path
        if description is not None:
            self.description = description
        if hard_limit is not None:
            self.hard_limit = hard_limit
        if soft_limit is not None:
            self.soft_limit = soft_limit
        if is_user_quotas_enforced is not None:
            self.is_user_quotas_enforced = is_user_quotas_enforced
        if grace_period is not None:
            self.grace_period = grace_period

    @property
    def file_system_id(self):
        """Gets the file_system_id of this FileTreeQuotaCreate.  # noqa: E501

        Unique identifier of the associated file system. name:{name} can be used instead of {id}. For example:'file_system_id':'name:file_system_name'  # noqa: E501

        :return: The file_system_id of this FileTreeQuotaCreate.  # noqa: E501
        :rtype: str
        """
        return self._file_system_id

    @file_system_id.setter
    def file_system_id(self, file_system_id):
        """Sets the file_system_id of this FileTreeQuotaCreate.

        Unique identifier of the associated file system. name:{name} can be used instead of {id}. For example:'file_system_id':'name:file_system_name'  # noqa: E501

        :param file_system_id: The file_system_id of this FileTreeQuotaCreate.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and file_system_id is None:
            raise ValueError("Invalid value for `file_system_id`, must not be `None`")  # noqa: E501

        self._file_system_id = file_system_id

    @property
    def path(self):
        """Gets the path of this FileTreeQuotaCreate.  # noqa: E501

        Path relative to the root of the associated filesystem.  # noqa: E501

        :return: The path of this FileTreeQuotaCreate.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this FileTreeQuotaCreate.

        Path relative to the root of the associated filesystem.  # noqa: E501

        :param path: The path of this FileTreeQuotaCreate.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                path is not None and len(path) > 1024):
            raise ValueError("Invalid value for `path`, length must be less than or equal to `1024`")  # noqa: E501
        if (self._configuration.client_side_validation and
                path is not None and len(path) < 1):
            raise ValueError("Invalid value for `path`, length must be greater than or equal to `1`")  # noqa: E501

        self._path = path

    @property
    def description(self):
        """Gets the description of this FileTreeQuotaCreate.  # noqa: E501

        Description of the tree quota.  # noqa: E501

        :return: The description of this FileTreeQuotaCreate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FileTreeQuotaCreate.

        Description of the tree quota.  # noqa: E501

        :param description: The description of this FileTreeQuotaCreate.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                description is not None and len(description) > 256):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `256`")  # noqa: E501
        if (self._configuration.client_side_validation and
                description is not None and len(description) < 0):
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")  # noqa: E501

        self._description = description

    @property
    def hard_limit(self):
        """Gets the hard_limit of this FileTreeQuotaCreate.  # noqa: E501

        Hard limit of the tree quota, in bytes. No hard limit when set to 0. This value can be used to compute amount of space that is consumed without limiting the space. Value is always rounded up to match the physical block size of the filesystem.  # noqa: E501

        :return: The hard_limit of this FileTreeQuotaCreate.  # noqa: E501
        :rtype: int
        """
        return self._hard_limit

    @hard_limit.setter
    def hard_limit(self, hard_limit):
        """Sets the hard_limit of this FileTreeQuotaCreate.

        Hard limit of the tree quota, in bytes. No hard limit when set to 0. This value can be used to compute amount of space that is consumed without limiting the space. Value is always rounded up to match the physical block size of the filesystem.  # noqa: E501

        :param hard_limit: The hard_limit of this FileTreeQuotaCreate.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                hard_limit is not None and hard_limit > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `hard_limit`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                hard_limit is not None and hard_limit < 0):  # noqa: E501
            raise ValueError("Invalid value for `hard_limit`, must be a value greater than or equal to `0`")  # noqa: E501

        self._hard_limit = hard_limit

    @property
    def soft_limit(self):
        """Gets the soft_limit of this FileTreeQuotaCreate.  # noqa: E501

        Soft limit of the tree quota, in bytes. No hard limit when set to 0. Value is always rounded up to match the physical block size of the filesystem.  # noqa: E501

        :return: The soft_limit of this FileTreeQuotaCreate.  # noqa: E501
        :rtype: int
        """
        return self._soft_limit

    @soft_limit.setter
    def soft_limit(self, soft_limit):
        """Sets the soft_limit of this FileTreeQuotaCreate.

        Soft limit of the tree quota, in bytes. No hard limit when set to 0. Value is always rounded up to match the physical block size of the filesystem.  # noqa: E501

        :param soft_limit: The soft_limit of this FileTreeQuotaCreate.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                soft_limit is not None and soft_limit > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `soft_limit`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                soft_limit is not None and soft_limit < 0):  # noqa: E501
            raise ValueError("Invalid value for `soft_limit`, must be a value greater than or equal to `0`")  # noqa: E501

        self._soft_limit = soft_limit

    @property
    def is_user_quotas_enforced(self):
        """Gets the is_user_quotas_enforced of this FileTreeQuotaCreate.  # noqa: E501

        Whether the quota must be enabled for all users, and whether user quota limits, if any, are enforced. Values are: * true  - Start tracking usage for all users on the quota tree, and enforce user quota limits. * false - Stop tracking usage for all users on the quota tree, and do not enforce user quota limits.   # noqa: E501

        :return: The is_user_quotas_enforced of this FileTreeQuotaCreate.  # noqa: E501
        :rtype: bool
        """
        return self._is_user_quotas_enforced

    @is_user_quotas_enforced.setter
    def is_user_quotas_enforced(self, is_user_quotas_enforced):
        """Sets the is_user_quotas_enforced of this FileTreeQuotaCreate.

        Whether the quota must be enabled for all users, and whether user quota limits, if any, are enforced. Values are: * true  - Start tracking usage for all users on the quota tree, and enforce user quota limits. * false - Stop tracking usage for all users on the quota tree, and do not enforce user quota limits.   # noqa: E501

        :param is_user_quotas_enforced: The is_user_quotas_enforced of this FileTreeQuotaCreate.  # noqa: E501
        :type: bool
        """

        self._is_user_quotas_enforced = is_user_quotas_enforced

    @property
    def grace_period(self):
        """Gets the grace_period of this FileTreeQuotaCreate.  # noqa: E501

        Grace period of soft limit (seconds). This will override the default grace period set at filesystem level.  * -1: Infinite grace period (Windows policy).  *  0: Use default grace period of 1 week (default).  * Positive: Grace period after which the soft limit is treated as a hard limit (seconds).  Was added in version 2.0.0.0.  # noqa: E501

        :return: The grace_period of this FileTreeQuotaCreate.  # noqa: E501
        :rtype: int
        """
        return self._grace_period

    @grace_period.setter
    def grace_period(self, grace_period):
        """Sets the grace_period of this FileTreeQuotaCreate.

        Grace period of soft limit (seconds). This will override the default grace period set at filesystem level.  * -1: Infinite grace period (Windows policy).  *  0: Use default grace period of 1 week (default).  * Positive: Grace period after which the soft limit is treated as a hard limit (seconds).  Was added in version 2.0.0.0.  # noqa: E501

        :param grace_period: The grace_period of this FileTreeQuotaCreate.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                grace_period is not None and grace_period > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `grace_period`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                grace_period is not None and grace_period < -1):  # noqa: E501
            raise ValueError("Invalid value for `grace_period`, must be a value greater than or equal to `-1`")  # noqa: E501

        self._grace_period = grace_period

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileTreeQuotaCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileTreeQuotaCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FileTreeQuotaCreate):
            return True

        return self.to_dict() != other.to_dict()
