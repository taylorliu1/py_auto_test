# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class LicenseInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'is_licensed': 'bool',
        'trial_expiration_timestamp': 'datetime',
        'activation_file_content': 'str'
    }

    attribute_map = {
        'id': 'id',
        'is_licensed': 'is_licensed',
        'trial_expiration_timestamp': 'trial_expiration_timestamp',
        'activation_file_content': 'activation_file_content'
    }

    def __init__(self, id=None, is_licensed=None, trial_expiration_timestamp=None, activation_file_content=None, _configuration=None):  # noqa: E501
        """LicenseInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._is_licensed = None
        self._trial_expiration_timestamp = None
        self._activation_file_content = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if is_licensed is not None:
            self.is_licensed = is_licensed
        if trial_expiration_timestamp is not None:
            self.trial_expiration_timestamp = trial_expiration_timestamp
        if activation_file_content is not None:
            self.activation_file_content = activation_file_content

    @property
    def id(self):
        """Gets the id of this LicenseInstance.  # noqa: E501

        Unique ididentifier of the cluster license.  # noqa: E501

        :return: The id of this LicenseInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LicenseInstance.

        Unique ididentifier of the cluster license.  # noqa: E501

        :param id: The id of this LicenseInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_licensed(self):
        """Gets the is_licensed of this LicenseInstance.  # noqa: E501

        Whether or not the cluster currently has a valid license.  # noqa: E501

        :return: The is_licensed of this LicenseInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_licensed

    @is_licensed.setter
    def is_licensed(self, is_licensed):
        """Sets the is_licensed of this LicenseInstance.

        Whether or not the cluster currently has a valid license.  # noqa: E501

        :param is_licensed: The is_licensed of this LicenseInstance.  # noqa: E501
        :type: bool
        """

        self._is_licensed = is_licensed

    @property
    def trial_expiration_timestamp(self):
        """Gets the trial_expiration_timestamp of this LicenseInstance.  # noqa: E501

        If not currently licensed, the date the trial period expires. If the trial period expires, new provisioning operations will not be allowed.  # noqa: E501

        :return: The trial_expiration_timestamp of this LicenseInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._trial_expiration_timestamp

    @trial_expiration_timestamp.setter
    def trial_expiration_timestamp(self, trial_expiration_timestamp):
        """Sets the trial_expiration_timestamp of this LicenseInstance.

        If not currently licensed, the date the trial period expires. If the trial period expires, new provisioning operations will not be allowed.  # noqa: E501

        :param trial_expiration_timestamp: The trial_expiration_timestamp of this LicenseInstance.  # noqa: E501
        :type: datetime
        """

        self._trial_expiration_timestamp = trial_expiration_timestamp

    @property
    def activation_file_content(self):
        """Gets the activation_file_content of this LicenseInstance.  # noqa: E501

        The content of the license activation file to send to the DellEMC Software Licensing Central to retrieve the software license for the cluster.  # noqa: E501

        :return: The activation_file_content of this LicenseInstance.  # noqa: E501
        :rtype: str
        """
        return self._activation_file_content

    @activation_file_content.setter
    def activation_file_content(self, activation_file_content):
        """Sets the activation_file_content of this LicenseInstance.

        The content of the license activation file to send to the DellEMC Software Licensing Central to retrieve the software license for the cluster.  # noqa: E501

        :param activation_file_content: The activation_file_content of this LicenseInstance.  # noqa: E501
        :type: str
        """

        self._activation_file_content = activation_file_content

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LicenseInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LicenseInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LicenseInstance):
            return True

        return self.to_dict() != other.to_dict()
