# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class FileEventsPublisherModify(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'is_enabled': 'bool',
        'heartbeat': 'int',
        'connection_timeout': 'int',
        'post_event_policy': 'PostEventPolicyEnum',
        'deny_access_when_all_servers_offline': 'bool',
        'username': 'str',
        'password': 'str',
        'http_port': 'int',
        'file_events_pool_ids': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'is_enabled': 'is_enabled',
        'heartbeat': 'heartbeat',
        'connection_timeout': 'connection_timeout',
        'post_event_policy': 'post_event_policy',
        'deny_access_when_all_servers_offline': 'deny_access_when_all_servers_offline',
        'username': 'username',
        'password': 'password',
        'http_port': 'http_port',
        'file_events_pool_ids': 'file_events_pool_ids'
    }

    def __init__(self, name=None, is_enabled=None, heartbeat=10, connection_timeout=1000, post_event_policy=None, deny_access_when_all_servers_offline=False, username=None, password=None, http_port=12228, file_events_pool_ids=None, _configuration=None):  # noqa: E501
        """FileEventsPublisherModify - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._is_enabled = None
        self._heartbeat = None
        self._connection_timeout = None
        self._post_event_policy = None
        self._deny_access_when_all_servers_offline = None
        self._username = None
        self._password = None
        self._http_port = None
        self._file_events_pool_ids = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if is_enabled is not None:
            self.is_enabled = is_enabled
        if heartbeat is not None:
            self.heartbeat = heartbeat
        if connection_timeout is not None:
            self.connection_timeout = connection_timeout
        if post_event_policy is not None:
            self.post_event_policy = post_event_policy
        if deny_access_when_all_servers_offline is not None:
            self.deny_access_when_all_servers_offline = deny_access_when_all_servers_offline
        if username is not None:
            self.username = username
        if password is not None:
            self.password = password
        if http_port is not None:
            self.http_port = http_port
        if file_events_pool_ids is not None:
            self.file_events_pool_ids = file_events_pool_ids

    @property
    def name(self):
        """Gets the name of this FileEventsPublisherModify.  # noqa: E501

        Unique name of the file events publisher.  # noqa: E501

        :return: The name of this FileEventsPublisherModify.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FileEventsPublisherModify.

        Unique name of the file events publisher.  # noqa: E501

        :param name: The name of this FileEventsPublisherModify.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 80):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `80`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def is_enabled(self):
        """Gets the is_enabled of this FileEventsPublisherModify.  # noqa: E501

        Whether or not the event publisher will publish events.  # noqa: E501

        :return: The is_enabled of this FileEventsPublisherModify.  # noqa: E501
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this FileEventsPublisherModify.

        Whether or not the event publisher will publish events.  # noqa: E501

        :param is_enabled: The is_enabled of this FileEventsPublisherModify.  # noqa: E501
        :type: bool
        """

        self._is_enabled = is_enabled

    @property
    def heartbeat(self):
        """Gets the heartbeat of this FileEventsPublisherModify.  # noqa: E501

        Time interval to scan each CEPA server (in seconds) for online/offline status.   # noqa: E501

        :return: The heartbeat of this FileEventsPublisherModify.  # noqa: E501
        :rtype: int
        """
        return self._heartbeat

    @heartbeat.setter
    def heartbeat(self, heartbeat):
        """Sets the heartbeat of this FileEventsPublisherModify.

        Time interval to scan each CEPA server (in seconds) for online/offline status.   # noqa: E501

        :param heartbeat: The heartbeat of this FileEventsPublisherModify.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                heartbeat is not None and heartbeat > 120):  # noqa: E501
            raise ValueError("Invalid value for `heartbeat`, must be a value less than or equal to `120`")  # noqa: E501
        if (self._configuration.client_side_validation and
                heartbeat is not None and heartbeat < 1):  # noqa: E501
            raise ValueError("Invalid value for `heartbeat`, must be a value greater than or equal to `1`")  # noqa: E501

        self._heartbeat = heartbeat

    @property
    def connection_timeout(self):
        """Gets the connection_timeout of this FileEventsPublisherModify.  # noqa: E501

        Timeout in milliseconds while attempting to send event to a CEPA server to determine that is offline.   # noqa: E501

        :return: The connection_timeout of this FileEventsPublisherModify.  # noqa: E501
        :rtype: int
        """
        return self._connection_timeout

    @connection_timeout.setter
    def connection_timeout(self, connection_timeout):
        """Sets the connection_timeout of this FileEventsPublisherModify.

        Timeout in milliseconds while attempting to send event to a CEPA server to determine that is offline.   # noqa: E501

        :param connection_timeout: The connection_timeout of this FileEventsPublisherModify.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                connection_timeout is not None and connection_timeout > 5000):  # noqa: E501
            raise ValueError("Invalid value for `connection_timeout`, must be a value less than or equal to `5000`")  # noqa: E501
        if (self._configuration.client_side_validation and
                connection_timeout is not None and connection_timeout < 50):  # noqa: E501
            raise ValueError("Invalid value for `connection_timeout`, must be a value greater than or equal to `50`")  # noqa: E501

        self._connection_timeout = connection_timeout

    @property
    def post_event_policy(self):
        """Gets the post_event_policy of this FileEventsPublisherModify.  # noqa: E501


        :return: The post_event_policy of this FileEventsPublisherModify.  # noqa: E501
        :rtype: PostEventPolicyEnum
        """
        return self._post_event_policy

    @post_event_policy.setter
    def post_event_policy(self, post_event_policy):
        """Sets the post_event_policy of this FileEventsPublisherModify.


        :param post_event_policy: The post_event_policy of this FileEventsPublisherModify.  # noqa: E501
        :type: PostEventPolicyEnum
        """

        self._post_event_policy = post_event_policy

    @property
    def deny_access_when_all_servers_offline(self):
        """Gets the deny_access_when_all_servers_offline of this FileEventsPublisherModify.  # noqa: E501

        Behavior when no configured file events servers respond. Values are: false - allow I/O to the file system to continue. true - deny I/O to the filesystem when an event cannot be published to any server.   # noqa: E501

        :return: The deny_access_when_all_servers_offline of this FileEventsPublisherModify.  # noqa: E501
        :rtype: bool
        """
        return self._deny_access_when_all_servers_offline

    @deny_access_when_all_servers_offline.setter
    def deny_access_when_all_servers_offline(self, deny_access_when_all_servers_offline):
        """Sets the deny_access_when_all_servers_offline of this FileEventsPublisherModify.

        Behavior when no configured file events servers respond. Values are: false - allow I/O to the file system to continue. true - deny I/O to the filesystem when an event cannot be published to any server.   # noqa: E501

        :param deny_access_when_all_servers_offline: The deny_access_when_all_servers_offline of this FileEventsPublisherModify.  # noqa: E501
        :type: bool
        """

        self._deny_access_when_all_servers_offline = deny_access_when_all_servers_offline

    @property
    def username(self):
        """Gets the username of this FileEventsPublisherModify.  # noqa: E501

        Name of a Windows user allowing Events Publishing to connect to CEPA servers. To ensure that a secure connection (via Microsoft RPC protocol) is used disable HTTP by setting http_port to 0.   # noqa: E501

        :return: The username of this FileEventsPublisherModify.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this FileEventsPublisherModify.

        Name of a Windows user allowing Events Publishing to connect to CEPA servers. To ensure that a secure connection (via Microsoft RPC protocol) is used disable HTTP by setting http_port to 0.   # noqa: E501

        :param username: The username of this FileEventsPublisherModify.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def password(self):
        """Gets the password of this FileEventsPublisherModify.  # noqa: E501

        Password of the windows user.  # noqa: E501

        :return: The password of this FileEventsPublisherModify.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this FileEventsPublisherModify.

        Password of the windows user.  # noqa: E501

        :param password: The password of this FileEventsPublisherModify.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def http_port(self):
        """Gets the http_port of this FileEventsPublisherModify.  # noqa: E501

        TCP port number used but the service to connect to the CEPA server(s) with HTTP. Default port number is 12228. Set this value to 0 to disable HTTP. When enabled, connection via HTTP is attempted first. If HTTP connection is disabled, or the connection fails, then connection through MSRPC is attempted if all CEPP server(s) are defined by FQDN. The SMB account of the NAS server in the AD Domain is used to make the connection via MSRPC. Note that HTTP connections should only be used on secure networks, as it is neither SSL nor authenticated.   # noqa: E501

        :return: The http_port of this FileEventsPublisherModify.  # noqa: E501
        :rtype: int
        """
        return self._http_port

    @http_port.setter
    def http_port(self, http_port):
        """Sets the http_port of this FileEventsPublisherModify.

        TCP port number used but the service to connect to the CEPA server(s) with HTTP. Default port number is 12228. Set this value to 0 to disable HTTP. When enabled, connection via HTTP is attempted first. If HTTP connection is disabled, or the connection fails, then connection through MSRPC is attempted if all CEPP server(s) are defined by FQDN. The SMB account of the NAS server in the AD Domain is used to make the connection via MSRPC. Note that HTTP connections should only be used on secure networks, as it is neither SSL nor authenticated.   # noqa: E501

        :param http_port: The http_port of this FileEventsPublisherModify.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                http_port is not None and http_port > 65535):  # noqa: E501
            raise ValueError("Invalid value for `http_port`, must be a value less than or equal to `65535`")  # noqa: E501
        if (self._configuration.client_side_validation and
                http_port is not None and http_port < 0):  # noqa: E501
            raise ValueError("Invalid value for `http_port`, must be a value greater than or equal to `0`")  # noqa: E501

        self._http_port = http_port

    @property
    def file_events_pool_ids(self):
        """Gets the file_events_pool_ids of this FileEventsPublisherModify.  # noqa: E501

        The list of file events pool identifiers included in this file events publisher. Maximum of 3 file events pools can be associated to a file events publisher.  # noqa: E501

        :return: The file_events_pool_ids of this FileEventsPublisherModify.  # noqa: E501
        :rtype: list[str]
        """
        return self._file_events_pool_ids

    @file_events_pool_ids.setter
    def file_events_pool_ids(self, file_events_pool_ids):
        """Sets the file_events_pool_ids of this FileEventsPublisherModify.

        The list of file events pool identifiers included in this file events publisher. Maximum of 3 file events pools can be associated to a file events publisher.  # noqa: E501

        :param file_events_pool_ids: The file_events_pool_ids of this FileEventsPublisherModify.  # noqa: E501
        :type: list[str]
        """

        self._file_events_pool_ids = file_events_pool_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileEventsPublisherModify, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileEventsPublisherModify):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FileEventsPublisherModify):
            return True

        return self.to_dict() != other.to_dict()
