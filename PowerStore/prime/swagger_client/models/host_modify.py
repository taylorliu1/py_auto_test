# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class HostModify(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'host_connectivity': 'HostConnectivityEnum',
        'remove_initiators': 'list[str]',
        'add_initiators': 'list[InitiatorCreateModify]',
        'modify_initiators': 'list[UpdateInitiatorInHost]'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'host_connectivity': 'host_connectivity',
        'remove_initiators': 'remove_initiators',
        'add_initiators': 'add_initiators',
        'modify_initiators': 'modify_initiators'
    }

    def __init__(self, name=None, description=None, host_connectivity=None, remove_initiators=None, add_initiators=None, modify_initiators=None, _configuration=None):  # noqa: E501
        """HostModify - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._description = None
        self._host_connectivity = None
        self._remove_initiators = None
        self._add_initiators = None
        self._modify_initiators = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if host_connectivity is not None:
            self.host_connectivity = host_connectivity
        if remove_initiators is not None:
            self.remove_initiators = remove_initiators
        if add_initiators is not None:
            self.add_initiators = add_initiators
        if modify_initiators is not None:
            self.modify_initiators = modify_initiators

    @property
    def name(self):
        """Gets the name of this HostModify.  # noqa: E501

        The host name. The name should not be more than 128 UTF-8 characters long and should not have any unprintable characters.  # noqa: E501

        :return: The name of this HostModify.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HostModify.

        The host name. The name should not be more than 128 UTF-8 characters long and should not have any unprintable characters.  # noqa: E501

        :param name: The name of this HostModify.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 128):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this HostModify.  # noqa: E501

        An optional description for the host. The description should not be more than 256 UTF-8 characters long and should not have any unprintable characters.  # noqa: E501

        :return: The description of this HostModify.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this HostModify.

        An optional description for the host. The description should not be more than 256 UTF-8 characters long and should not have any unprintable characters.  # noqa: E501

        :param description: The description of this HostModify.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                description is not None and len(description) > 256):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `256`")  # noqa: E501

        self._description = description

    @property
    def host_connectivity(self):
        """Gets the host_connectivity of this HostModify.  # noqa: E501

         Was added in version 3.0.0.0.  # noqa: E501

        :return: The host_connectivity of this HostModify.  # noqa: E501
        :rtype: HostConnectivityEnum
        """
        return self._host_connectivity

    @host_connectivity.setter
    def host_connectivity(self, host_connectivity):
        """Sets the host_connectivity of this HostModify.

         Was added in version 3.0.0.0.  # noqa: E501

        :param host_connectivity: The host_connectivity of this HostModify.  # noqa: E501
        :type: HostConnectivityEnum
        """

        self._host_connectivity = host_connectivity

    @property
    def remove_initiators(self):
        """Gets the remove_initiators of this HostModify.  # noqa: E501

        The list of initiator port_names to be removed.  # noqa: E501

        :return: The remove_initiators of this HostModify.  # noqa: E501
        :rtype: list[str]
        """
        return self._remove_initiators

    @remove_initiators.setter
    def remove_initiators(self, remove_initiators):
        """Sets the remove_initiators of this HostModify.

        The list of initiator port_names to be removed.  # noqa: E501

        :param remove_initiators: The remove_initiators of this HostModify.  # noqa: E501
        :type: list[str]
        """

        self._remove_initiators = remove_initiators

    @property
    def add_initiators(self):
        """Gets the add_initiators of this HostModify.  # noqa: E501

        The list of initiators to be added. CHAP username and password are optional.  # noqa: E501

        :return: The add_initiators of this HostModify.  # noqa: E501
        :rtype: list[InitiatorCreateModify]
        """
        return self._add_initiators

    @add_initiators.setter
    def add_initiators(self, add_initiators):
        """Sets the add_initiators of this HostModify.

        The list of initiators to be added. CHAP username and password are optional.  # noqa: E501

        :param add_initiators: The add_initiators of this HostModify.  # noqa: E501
        :type: list[InitiatorCreateModify]
        """

        self._add_initiators = add_initiators

    @property
    def modify_initiators(self):
        """Gets the modify_initiators of this HostModify.  # noqa: E501

        Update list of existing initiators, identified by port_name, with new CHAP usernames and/or passwords.  # noqa: E501

        :return: The modify_initiators of this HostModify.  # noqa: E501
        :rtype: list[UpdateInitiatorInHost]
        """
        return self._modify_initiators

    @modify_initiators.setter
    def modify_initiators(self, modify_initiators):
        """Sets the modify_initiators of this HostModify.

        Update list of existing initiators, identified by port_name, with new CHAP usernames and/or passwords.  # noqa: E501

        :param modify_initiators: The modify_initiators of this HostModify.  # noqa: E501
        :type: list[UpdateInitiatorInHost]
        """

        self._modify_initiators = modify_initiators

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HostModify, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HostModify):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HostModify):
            return True

        return self.to_dict() != other.to_dict()
