# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class MigrationRecommendationAction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource_id': 'str',
        'resource_type': 'MigrationResourceTypeEnum',
        'src_appliance_id': 'str',
        'dst_appliance_id': 'str',
        'cost': 'int',
        'host_connectivity_to_destination': 'bool',
        'action_state': 'MigrationRecommendationActionStateEnum',
        'primary_id': 'str',
        'primary_name': 'str',
        'migration_primary_resource_type': 'MigrationRecommendationPrimaryResourceTypeEnum',
        'migration_reason': 'MigrationRecommendationReasonEnum',
        'active': 'bool',
        'connected_appliance_ids': 'list[str]',
        'resource_type_l10n': 'str',
        'action_state_l10n': 'str',
        'migration_primary_resource_type_l10n': 'str',
        'migration_reason_l10n': 'str'
    }

    attribute_map = {
        'resource_id': 'resource_id',
        'resource_type': 'resource_type',
        'src_appliance_id': 'src_appliance_id',
        'dst_appliance_id': 'dst_appliance_id',
        'cost': 'cost',
        'host_connectivity_to_destination': 'host_connectivity_to_destination',
        'action_state': 'action_state',
        'primary_id': 'primary_id',
        'primary_name': 'primary_name',
        'migration_primary_resource_type': 'migration_primary_resource_type',
        'migration_reason': 'migration_reason',
        'active': 'active',
        'connected_appliance_ids': 'connected_appliance_ids',
        'resource_type_l10n': 'resource_type_l10n',
        'action_state_l10n': 'action_state_l10n',
        'migration_primary_resource_type_l10n': 'migration_primary_resource_type_l10n',
        'migration_reason_l10n': 'migration_reason_l10n'
    }

    def __init__(self, resource_id=None, resource_type=None, src_appliance_id=None, dst_appliance_id=None, cost=None, host_connectivity_to_destination=None, action_state=None, primary_id=None, primary_name=None, migration_primary_resource_type=None, migration_reason=None, active=None, connected_appliance_ids=None, resource_type_l10n=None, action_state_l10n=None, migration_primary_resource_type_l10n=None, migration_reason_l10n=None, _configuration=None):  # noqa: E501
        """MigrationRecommendationAction - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._resource_id = None
        self._resource_type = None
        self._src_appliance_id = None
        self._dst_appliance_id = None
        self._cost = None
        self._host_connectivity_to_destination = None
        self._action_state = None
        self._primary_id = None
        self._primary_name = None
        self._migration_primary_resource_type = None
        self._migration_reason = None
        self._active = None
        self._connected_appliance_ids = None
        self._resource_type_l10n = None
        self._action_state_l10n = None
        self._migration_primary_resource_type_l10n = None
        self._migration_reason_l10n = None
        self.discriminator = None

        self.resource_id = resource_id
        self.resource_type = resource_type
        self.src_appliance_id = src_appliance_id
        self.dst_appliance_id = dst_appliance_id
        self.cost = cost
        self.host_connectivity_to_destination = host_connectivity_to_destination
        self.action_state = action_state
        self.primary_id = primary_id
        self.primary_name = primary_name
        self.migration_primary_resource_type = migration_primary_resource_type
        self.migration_reason = migration_reason
        if active is not None:
            self.active = active
        if connected_appliance_ids is not None:
            self.connected_appliance_ids = connected_appliance_ids
        if resource_type_l10n is not None:
            self.resource_type_l10n = resource_type_l10n
        if action_state_l10n is not None:
            self.action_state_l10n = action_state_l10n
        if migration_primary_resource_type_l10n is not None:
            self.migration_primary_resource_type_l10n = migration_primary_resource_type_l10n
        if migration_reason_l10n is not None:
            self.migration_reason_l10n = migration_reason_l10n

    @property
    def resource_id(self):
        """Gets the resource_id of this MigrationRecommendationAction.  # noqa: E501

        ID of storage resource migrated by this action.  # noqa: E501

        :return: The resource_id of this MigrationRecommendationAction.  # noqa: E501
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this MigrationRecommendationAction.

        ID of storage resource migrated by this action.  # noqa: E501

        :param resource_id: The resource_id of this MigrationRecommendationAction.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and resource_id is None:
            raise ValueError("Invalid value for `resource_id`, must not be `None`")  # noqa: E501

        self._resource_id = resource_id

    @property
    def resource_type(self):
        """Gets the resource_type of this MigrationRecommendationAction.  # noqa: E501


        :return: The resource_type of this MigrationRecommendationAction.  # noqa: E501
        :rtype: MigrationResourceTypeEnum
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this MigrationRecommendationAction.


        :param resource_type: The resource_type of this MigrationRecommendationAction.  # noqa: E501
        :type: MigrationResourceTypeEnum
        """
        if self._configuration.client_side_validation and resource_type is None:
            raise ValueError("Invalid value for `resource_type`, must not be `None`")  # noqa: E501

        self._resource_type = resource_type

    @property
    def src_appliance_id(self):
        """Gets the src_appliance_id of this MigrationRecommendationAction.  # noqa: E501

        ID of appliance that is the source for this migration action.  # noqa: E501

        :return: The src_appliance_id of this MigrationRecommendationAction.  # noqa: E501
        :rtype: str
        """
        return self._src_appliance_id

    @src_appliance_id.setter
    def src_appliance_id(self, src_appliance_id):
        """Sets the src_appliance_id of this MigrationRecommendationAction.

        ID of appliance that is the source for this migration action.  # noqa: E501

        :param src_appliance_id: The src_appliance_id of this MigrationRecommendationAction.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and src_appliance_id is None:
            raise ValueError("Invalid value for `src_appliance_id`, must not be `None`")  # noqa: E501

        self._src_appliance_id = src_appliance_id

    @property
    def dst_appliance_id(self):
        """Gets the dst_appliance_id of this MigrationRecommendationAction.  # noqa: E501

        ID of appliance that is the destination for this migration action.  # noqa: E501

        :return: The dst_appliance_id of this MigrationRecommendationAction.  # noqa: E501
        :rtype: str
        """
        return self._dst_appliance_id

    @dst_appliance_id.setter
    def dst_appliance_id(self, dst_appliance_id):
        """Sets the dst_appliance_id of this MigrationRecommendationAction.

        ID of appliance that is the destination for this migration action.  # noqa: E501

        :param dst_appliance_id: The dst_appliance_id of this MigrationRecommendationAction.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and dst_appliance_id is None:
            raise ValueError("Invalid value for `dst_appliance_id`, must not be `None`")  # noqa: E501

        self._dst_appliance_id = dst_appliance_id

    @property
    def cost(self):
        """Gets the cost of this MigrationRecommendationAction.  # noqa: E501

        Unitless value describing estimated cost to perform relative to other migration actions.  # noqa: E501

        :return: The cost of this MigrationRecommendationAction.  # noqa: E501
        :rtype: int
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this MigrationRecommendationAction.

        Unitless value describing estimated cost to perform relative to other migration actions.  # noqa: E501

        :param cost: The cost of this MigrationRecommendationAction.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and cost is None:
            raise ValueError("Invalid value for `cost`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                cost is not None and cost > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `cost`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                cost is not None and cost < 0):  # noqa: E501
            raise ValueError("Invalid value for `cost`, must be a value greater than or equal to `0`")  # noqa: E501

        self._cost = cost

    @property
    def host_connectivity_to_destination(self):
        """Gets the host_connectivity_to_destination of this MigrationRecommendationAction.  # noqa: E501

        Whether all hosts for the migrating resource have connectivity to the destination appliance.  # noqa: E501

        :return: The host_connectivity_to_destination of this MigrationRecommendationAction.  # noqa: E501
        :rtype: bool
        """
        return self._host_connectivity_to_destination

    @host_connectivity_to_destination.setter
    def host_connectivity_to_destination(self, host_connectivity_to_destination):
        """Sets the host_connectivity_to_destination of this MigrationRecommendationAction.

        Whether all hosts for the migrating resource have connectivity to the destination appliance.  # noqa: E501

        :param host_connectivity_to_destination: The host_connectivity_to_destination of this MigrationRecommendationAction.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and host_connectivity_to_destination is None:
            raise ValueError("Invalid value for `host_connectivity_to_destination`, must not be `None`")  # noqa: E501

        self._host_connectivity_to_destination = host_connectivity_to_destination

    @property
    def action_state(self):
        """Gets the action_state of this MigrationRecommendationAction.  # noqa: E501


        :return: The action_state of this MigrationRecommendationAction.  # noqa: E501
        :rtype: MigrationRecommendationActionStateEnum
        """
        return self._action_state

    @action_state.setter
    def action_state(self, action_state):
        """Sets the action_state of this MigrationRecommendationAction.


        :param action_state: The action_state of this MigrationRecommendationAction.  # noqa: E501
        :type: MigrationRecommendationActionStateEnum
        """
        if self._configuration.client_side_validation and action_state is None:
            raise ValueError("Invalid value for `action_state`, must not be `None`")  # noqa: E501

        self._action_state = action_state

    @property
    def primary_id(self):
        """Gets the primary_id of this MigrationRecommendationAction.  # noqa: E501

        Unique ID of the primary object.  # noqa: E501

        :return: The primary_id of this MigrationRecommendationAction.  # noqa: E501
        :rtype: str
        """
        return self._primary_id

    @primary_id.setter
    def primary_id(self, primary_id):
        """Sets the primary_id of this MigrationRecommendationAction.

        Unique ID of the primary object.  # noqa: E501

        :param primary_id: The primary_id of this MigrationRecommendationAction.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and primary_id is None:
            raise ValueError("Invalid value for `primary_id`, must not be `None`")  # noqa: E501

        self._primary_id = primary_id

    @property
    def primary_name(self):
        """Gets the primary_name of this MigrationRecommendationAction.  # noqa: E501

        Name of the primary object.  # noqa: E501

        :return: The primary_name of this MigrationRecommendationAction.  # noqa: E501
        :rtype: str
        """
        return self._primary_name

    @primary_name.setter
    def primary_name(self, primary_name):
        """Sets the primary_name of this MigrationRecommendationAction.

        Name of the primary object.  # noqa: E501

        :param primary_name: The primary_name of this MigrationRecommendationAction.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and primary_name is None:
            raise ValueError("Invalid value for `primary_name`, must not be `None`")  # noqa: E501

        self._primary_name = primary_name

    @property
    def migration_primary_resource_type(self):
        """Gets the migration_primary_resource_type of this MigrationRecommendationAction.  # noqa: E501


        :return: The migration_primary_resource_type of this MigrationRecommendationAction.  # noqa: E501
        :rtype: MigrationRecommendationPrimaryResourceTypeEnum
        """
        return self._migration_primary_resource_type

    @migration_primary_resource_type.setter
    def migration_primary_resource_type(self, migration_primary_resource_type):
        """Sets the migration_primary_resource_type of this MigrationRecommendationAction.


        :param migration_primary_resource_type: The migration_primary_resource_type of this MigrationRecommendationAction.  # noqa: E501
        :type: MigrationRecommendationPrimaryResourceTypeEnum
        """
        if self._configuration.client_side_validation and migration_primary_resource_type is None:
            raise ValueError("Invalid value for `migration_primary_resource_type`, must not be `None`")  # noqa: E501

        self._migration_primary_resource_type = migration_primary_resource_type

    @property
    def migration_reason(self):
        """Gets the migration_reason of this MigrationRecommendationAction.  # noqa: E501


        :return: The migration_reason of this MigrationRecommendationAction.  # noqa: E501
        :rtype: MigrationRecommendationReasonEnum
        """
        return self._migration_reason

    @migration_reason.setter
    def migration_reason(self, migration_reason):
        """Sets the migration_reason of this MigrationRecommendationAction.


        :param migration_reason: The migration_reason of this MigrationRecommendationAction.  # noqa: E501
        :type: MigrationRecommendationReasonEnum
        """
        if self._configuration.client_side_validation and migration_reason is None:
            raise ValueError("Invalid value for `migration_reason`, must not be `None`")  # noqa: E501

        self._migration_reason = migration_reason

    @property
    def active(self):
        """Gets the active of this MigrationRecommendationAction.  # noqa: E501

        Whether this migration action in active or not. New recommendations will consist entirely of active recommendations but this may be changed with the modify operation. Was added in version 2.0.0.0.  # noqa: E501

        :return: The active of this MigrationRecommendationAction.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this MigrationRecommendationAction.

        Whether this migration action in active or not. New recommendations will consist entirely of active recommendations but this may be changed with the modify operation. Was added in version 2.0.0.0.  # noqa: E501

        :param active: The active of this MigrationRecommendationAction.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def connected_appliance_ids(self):
        """Gets the connected_appliance_ids of this MigrationRecommendationAction.  # noqa: E501

        List of appliance ids to which the host attached to this resource has connectivity. Was added in version 2.0.0.0.  # noqa: E501

        :return: The connected_appliance_ids of this MigrationRecommendationAction.  # noqa: E501
        :rtype: list[str]
        """
        return self._connected_appliance_ids

    @connected_appliance_ids.setter
    def connected_appliance_ids(self, connected_appliance_ids):
        """Sets the connected_appliance_ids of this MigrationRecommendationAction.

        List of appliance ids to which the host attached to this resource has connectivity. Was added in version 2.0.0.0.  # noqa: E501

        :param connected_appliance_ids: The connected_appliance_ids of this MigrationRecommendationAction.  # noqa: E501
        :type: list[str]
        """

        self._connected_appliance_ids = connected_appliance_ids

    @property
    def resource_type_l10n(self):
        """Gets the resource_type_l10n of this MigrationRecommendationAction.  # noqa: E501

        Localized message string corresponding to resource_type  # noqa: E501

        :return: The resource_type_l10n of this MigrationRecommendationAction.  # noqa: E501
        :rtype: str
        """
        return self._resource_type_l10n

    @resource_type_l10n.setter
    def resource_type_l10n(self, resource_type_l10n):
        """Sets the resource_type_l10n of this MigrationRecommendationAction.

        Localized message string corresponding to resource_type  # noqa: E501

        :param resource_type_l10n: The resource_type_l10n of this MigrationRecommendationAction.  # noqa: E501
        :type: str
        """

        self._resource_type_l10n = resource_type_l10n

    @property
    def action_state_l10n(self):
        """Gets the action_state_l10n of this MigrationRecommendationAction.  # noqa: E501

        Localized message string corresponding to action_state  # noqa: E501

        :return: The action_state_l10n of this MigrationRecommendationAction.  # noqa: E501
        :rtype: str
        """
        return self._action_state_l10n

    @action_state_l10n.setter
    def action_state_l10n(self, action_state_l10n):
        """Sets the action_state_l10n of this MigrationRecommendationAction.

        Localized message string corresponding to action_state  # noqa: E501

        :param action_state_l10n: The action_state_l10n of this MigrationRecommendationAction.  # noqa: E501
        :type: str
        """

        self._action_state_l10n = action_state_l10n

    @property
    def migration_primary_resource_type_l10n(self):
        """Gets the migration_primary_resource_type_l10n of this MigrationRecommendationAction.  # noqa: E501

        Localized message string corresponding to migration_primary_resource_type  # noqa: E501

        :return: The migration_primary_resource_type_l10n of this MigrationRecommendationAction.  # noqa: E501
        :rtype: str
        """
        return self._migration_primary_resource_type_l10n

    @migration_primary_resource_type_l10n.setter
    def migration_primary_resource_type_l10n(self, migration_primary_resource_type_l10n):
        """Sets the migration_primary_resource_type_l10n of this MigrationRecommendationAction.

        Localized message string corresponding to migration_primary_resource_type  # noqa: E501

        :param migration_primary_resource_type_l10n: The migration_primary_resource_type_l10n of this MigrationRecommendationAction.  # noqa: E501
        :type: str
        """

        self._migration_primary_resource_type_l10n = migration_primary_resource_type_l10n

    @property
    def migration_reason_l10n(self):
        """Gets the migration_reason_l10n of this MigrationRecommendationAction.  # noqa: E501

        Localized message string corresponding to migration_reason  # noqa: E501

        :return: The migration_reason_l10n of this MigrationRecommendationAction.  # noqa: E501
        :rtype: str
        """
        return self._migration_reason_l10n

    @migration_reason_l10n.setter
    def migration_reason_l10n(self, migration_reason_l10n):
        """Sets the migration_reason_l10n of this MigrationRecommendationAction.

        Localized message string corresponding to migration_reason  # noqa: E501

        :param migration_reason_l10n: The migration_reason_l10n of this MigrationRecommendationAction.  # noqa: E501
        :type: str
        """

        self._migration_reason_l10n = migration_reason_l10n

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MigrationRecommendationAction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MigrationRecommendationAction):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MigrationRecommendationAction):
            return True

        return self.to_dict() != other.to_dict()
