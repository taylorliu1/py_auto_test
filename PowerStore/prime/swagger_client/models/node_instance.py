# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class NodeInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'slot': 'int',
        'appliance_id': 'str',
        'appliance': 'ApplianceInstance',
        'ip_pool_addresses': 'list[IpPoolAddressInstance]',
        'veth_ports': 'list[VethPortInstance]'
    }

    attribute_map = {
        'id': 'id',
        'slot': 'slot',
        'appliance_id': 'appliance_id',
        'appliance': 'appliance',
        'ip_pool_addresses': 'ip_pool_addresses',
        'veth_ports': 'veth_ports'
    }

    def __init__(self, id=None, slot=None, appliance_id=None, appliance=None, ip_pool_addresses=None, veth_ports=None, _configuration=None):  # noqa: E501
        """NodeInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._slot = None
        self._appliance_id = None
        self._appliance = None
        self._ip_pool_addresses = None
        self._veth_ports = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if slot is not None:
            self.slot = slot
        if appliance_id is not None:
            self.appliance_id = appliance_id
        if appliance is not None:
            self.appliance = appliance
        if ip_pool_addresses is not None:
            self.ip_pool_addresses = ip_pool_addresses
        if veth_ports is not None:
            self.veth_ports = veth_ports

    @property
    def id(self):
        """Gets the id of this NodeInstance.  # noqa: E501

        Unique identifier of the node.  # noqa: E501

        :return: The id of this NodeInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NodeInstance.

        Unique identifier of the node.  # noqa: E501

        :param id: The id of this NodeInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def slot(self):
        """Gets the slot of this NodeInstance.  # noqa: E501

        Slot number of the node.  # noqa: E501

        :return: The slot of this NodeInstance.  # noqa: E501
        :rtype: int
        """
        return self._slot

    @slot.setter
    def slot(self, slot):
        """Sets the slot of this NodeInstance.

        Slot number of the node.  # noqa: E501

        :param slot: The slot of this NodeInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                slot is not None and slot > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `slot`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                slot is not None and slot < 0):  # noqa: E501
            raise ValueError("Invalid value for `slot`, must be a value greater than or equal to `0`")  # noqa: E501

        self._slot = slot

    @property
    def appliance_id(self):
        """Gets the appliance_id of this NodeInstance.  # noqa: E501

        Unique identifier of the appliance to which the node belongs.  # noqa: E501

        :return: The appliance_id of this NodeInstance.  # noqa: E501
        :rtype: str
        """
        return self._appliance_id

    @appliance_id.setter
    def appliance_id(self, appliance_id):
        """Sets the appliance_id of this NodeInstance.

        Unique identifier of the appliance to which the node belongs.  # noqa: E501

        :param appliance_id: The appliance_id of this NodeInstance.  # noqa: E501
        :type: str
        """

        self._appliance_id = appliance_id

    @property
    def appliance(self):
        """Gets the appliance of this NodeInstance.  # noqa: E501

        This is the embeddable reference form of appliance_id attribute.  # noqa: E501

        :return: The appliance of this NodeInstance.  # noqa: E501
        :rtype: ApplianceInstance
        """
        return self._appliance

    @appliance.setter
    def appliance(self, appliance):
        """Sets the appliance of this NodeInstance.

        This is the embeddable reference form of appliance_id attribute.  # noqa: E501

        :param appliance: The appliance of this NodeInstance.  # noqa: E501
        :type: ApplianceInstance
        """

        self._appliance = appliance

    @property
    def ip_pool_addresses(self):
        """Gets the ip_pool_addresses of this NodeInstance.  # noqa: E501

        This is the inverse of the resource type ip_pool_address association.  # noqa: E501

        :return: The ip_pool_addresses of this NodeInstance.  # noqa: E501
        :rtype: list[IpPoolAddressInstance]
        """
        return self._ip_pool_addresses

    @ip_pool_addresses.setter
    def ip_pool_addresses(self, ip_pool_addresses):
        """Sets the ip_pool_addresses of this NodeInstance.

        This is the inverse of the resource type ip_pool_address association.  # noqa: E501

        :param ip_pool_addresses: The ip_pool_addresses of this NodeInstance.  # noqa: E501
        :type: list[IpPoolAddressInstance]
        """

        self._ip_pool_addresses = ip_pool_addresses

    @property
    def veth_ports(self):
        """Gets the veth_ports of this NodeInstance.  # noqa: E501

        This is the inverse of the resource type veth_port association.  # noqa: E501

        :return: The veth_ports of this NodeInstance.  # noqa: E501
        :rtype: list[VethPortInstance]
        """
        return self._veth_ports

    @veth_ports.setter
    def veth_ports(self, veth_ports):
        """Sets the veth_ports of this NodeInstance.

        This is the inverse of the resource type veth_port association.  # noqa: E501

        :param veth_ports: The veth_ports of this NodeInstance.  # noqa: E501
        :type: list[VethPortInstance]
        """

        self._veth_ports = veth_ports

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NodeInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodeInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NodeInstance):
            return True

        return self.to_dict() != other.to_dict()
