# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class HardwareModify(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_marked': 'bool'
    }

    attribute_map = {
        'is_marked': 'is_marked'
    }

    def __init__(self, is_marked=None, _configuration=None):  # noqa: E501
        """HardwareModify - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._is_marked = None
        self.discriminator = None

        self.is_marked = is_marked

    @property
    def is_marked(self):
        """Gets the is_marked of this HardwareModify.  # noqa: E501

        New state for the hardware component location marker LED. Setting it to true will put the LED in a blinking state until set to false. Note that the state returned in the hardware component may not actually change for up to 60 seconds. This operation is currently supported for Base_Enclosure, Expansion_Enclosure, Node, Drive, and Access_Module. Note that operations at the Base_Enclosure and Expansion_Enclosure apply to their children (Nodes and Drives for Base_Enclosure, and Access_Modules and Drives for Expansion_Enclosure). For components with a single physical LED (Base_Enclosure, NVME Expansion_Enclosure, Node, Drive, and Access_Module), setting is_marked=true overrides the status_led_state property from on (or off) to Null, and setting is_marked=false reverts status_led_state to showing the state of the physical LED.  # noqa: E501

        :return: The is_marked of this HardwareModify.  # noqa: E501
        :rtype: bool
        """
        return self._is_marked

    @is_marked.setter
    def is_marked(self, is_marked):
        """Sets the is_marked of this HardwareModify.

        New state for the hardware component location marker LED. Setting it to true will put the LED in a blinking state until set to false. Note that the state returned in the hardware component may not actually change for up to 60 seconds. This operation is currently supported for Base_Enclosure, Expansion_Enclosure, Node, Drive, and Access_Module. Note that operations at the Base_Enclosure and Expansion_Enclosure apply to their children (Nodes and Drives for Base_Enclosure, and Access_Modules and Drives for Expansion_Enclosure). For components with a single physical LED (Base_Enclosure, NVME Expansion_Enclosure, Node, Drive, and Access_Module), setting is_marked=true overrides the status_led_state property from on (or off) to Null, and setting is_marked=false reverts status_led_state to showing the state of the physical LED.  # noqa: E501

        :param is_marked: The is_marked of this HardwareModify.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and is_marked is None:
            raise ValueError("Invalid value for `is_marked`, must not be `None`")  # noqa: E501

        self._is_marked = is_marked

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HardwareModify, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HardwareModify):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HardwareModify):
            return True

        return self.to_dict() != other.to_dict()
