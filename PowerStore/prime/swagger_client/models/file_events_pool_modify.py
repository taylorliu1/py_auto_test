# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class FileEventsPoolModify(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'file_events_publisher_servers': 'list[str]',
        'destination_file_events_publisher_servers': 'list[str]',
        'file_events_settings': 'list[FileEventsSettingsInstance]',
        'remove_categories': 'list[FileEventsCategoryEnum]'
    }

    attribute_map = {
        'name': 'name',
        'file_events_publisher_servers': 'file_events_publisher_servers',
        'destination_file_events_publisher_servers': 'destination_file_events_publisher_servers',
        'file_events_settings': 'file_events_settings',
        'remove_categories': 'remove_categories'
    }

    def __init__(self, name=None, file_events_publisher_servers=None, destination_file_events_publisher_servers=None, file_events_settings=None, remove_categories=None, _configuration=None):  # noqa: E501
        """FileEventsPoolModify - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._file_events_publisher_servers = None
        self._destination_file_events_publisher_servers = None
        self._file_events_settings = None
        self._remove_categories = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if file_events_publisher_servers is not None:
            self.file_events_publisher_servers = file_events_publisher_servers
        if destination_file_events_publisher_servers is not None:
            self.destination_file_events_publisher_servers = destination_file_events_publisher_servers
        if file_events_settings is not None:
            self.file_events_settings = file_events_settings
        if remove_categories is not None:
            self.remove_categories = remove_categories

    @property
    def name(self):
        """Gets the name of this FileEventsPoolModify.  # noqa: E501

        Name assigned to the set of Windows servers where file event service software is installed.   # noqa: E501

        :return: The name of this FileEventsPoolModify.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FileEventsPoolModify.

        Name assigned to the set of Windows servers where file event service software is installed.   # noqa: E501

        :param name: The name of this FileEventsPoolModify.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 80):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `80`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def file_events_publisher_servers(self):
        """Gets the file_events_publisher_servers of this FileEventsPoolModify.  # noqa: E501

        File event service server addresses, in IPv4, IPv6, or FQDN format. Up to five file event service servers may be set per file events pool.   # noqa: E501

        :return: The file_events_publisher_servers of this FileEventsPoolModify.  # noqa: E501
        :rtype: list[str]
        """
        return self._file_events_publisher_servers

    @file_events_publisher_servers.setter
    def file_events_publisher_servers(self, file_events_publisher_servers):
        """Sets the file_events_publisher_servers of this FileEventsPoolModify.

        File event service server addresses, in IPv4, IPv6, or FQDN format. Up to five file event service servers may be set per file events pool.   # noqa: E501

        :param file_events_publisher_servers: The file_events_publisher_servers of this FileEventsPoolModify.  # noqa: E501
        :type: list[str]
        """

        self._file_events_publisher_servers = file_events_publisher_servers

    @property
    def destination_file_events_publisher_servers(self):
        """Gets the destination_file_events_publisher_servers of this FileEventsPoolModify.  # noqa: E501

        If this value is set file event service server addresses will be overridden on the destination with these values. File event service server addresses, in IPv4, IPv6, or FQDN format. Up to five file event service servers may be set per file events pool.   # noqa: E501

        :return: The destination_file_events_publisher_servers of this FileEventsPoolModify.  # noqa: E501
        :rtype: list[str]
        """
        return self._destination_file_events_publisher_servers

    @destination_file_events_publisher_servers.setter
    def destination_file_events_publisher_servers(self, destination_file_events_publisher_servers):
        """Sets the destination_file_events_publisher_servers of this FileEventsPoolModify.

        If this value is set file event service server addresses will be overridden on the destination with these values. File event service server addresses, in IPv4, IPv6, or FQDN format. Up to five file event service servers may be set per file events pool.   # noqa: E501

        :param destination_file_events_publisher_servers: The destination_file_events_publisher_servers of this FileEventsPoolModify.  # noqa: E501
        :type: list[str]
        """

        self._destination_file_events_publisher_servers = destination_file_events_publisher_servers

    @property
    def file_events_settings(self):
        """Gets the file_events_settings of this FileEventsPoolModify.  # noqa: E501

        List of up to three (one per category) sets of file event settings.   # noqa: E501

        :return: The file_events_settings of this FileEventsPoolModify.  # noqa: E501
        :rtype: list[FileEventsSettingsInstance]
        """
        return self._file_events_settings

    @file_events_settings.setter
    def file_events_settings(self, file_events_settings):
        """Sets the file_events_settings of this FileEventsPoolModify.

        List of up to three (one per category) sets of file event settings.   # noqa: E501

        :param file_events_settings: The file_events_settings of this FileEventsPoolModify.  # noqa: E501
        :type: list[FileEventsSettingsInstance]
        """

        self._file_events_settings = file_events_settings

    @property
    def remove_categories(self):
        """Gets the remove_categories of this FileEventsPoolModify.  # noqa: E501

        List of up to three (one per category) sets of file event settings to be removed.   # noqa: E501

        :return: The remove_categories of this FileEventsPoolModify.  # noqa: E501
        :rtype: list[FileEventsCategoryEnum]
        """
        return self._remove_categories

    @remove_categories.setter
    def remove_categories(self, remove_categories):
        """Sets the remove_categories of this FileEventsPoolModify.

        List of up to three (one per category) sets of file event settings to be removed.   # noqa: E501

        :param remove_categories: The remove_categories of this FileEventsPoolModify.  # noqa: E501
        :type: list[FileEventsCategoryEnum]
        """

        self._remove_categories = remove_categories

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileEventsPoolModify, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileEventsPoolModify):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FileEventsPoolModify):
            return True

        return self.to_dict() != other.to_dict()
