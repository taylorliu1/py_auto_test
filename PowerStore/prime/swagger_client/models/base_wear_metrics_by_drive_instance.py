# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class BaseWearMetricsByDriveInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'drive_id': 'str',
        'timestamp': 'datetime',
        'percent_endurance_remaining': 'float',
        'repeat_count': 'int'
    }

    attribute_map = {
        'drive_id': 'drive_id',
        'timestamp': 'timestamp',
        'percent_endurance_remaining': 'percent_endurance_remaining',
        'repeat_count': 'repeat_count'
    }

    def __init__(self, drive_id=None, timestamp=None, percent_endurance_remaining=None, repeat_count=None, _configuration=None):  # noqa: E501
        """BaseWearMetricsByDriveInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._drive_id = None
        self._timestamp = None
        self._percent_endurance_remaining = None
        self._repeat_count = None
        self.discriminator = None

        if drive_id is not None:
            self.drive_id = drive_id
        if timestamp is not None:
            self.timestamp = timestamp
        if percent_endurance_remaining is not None:
            self.percent_endurance_remaining = percent_endurance_remaining
        if repeat_count is not None:
            self.repeat_count = repeat_count

    @property
    def drive_id(self):
        """Gets the drive_id of this BaseWearMetricsByDriveInstance.  # noqa: E501

        Reference to the associated drive which these metrics were recorded.  # noqa: E501

        :return: The drive_id of this BaseWearMetricsByDriveInstance.  # noqa: E501
        :rtype: str
        """
        return self._drive_id

    @drive_id.setter
    def drive_id(self, drive_id):
        """Sets the drive_id of this BaseWearMetricsByDriveInstance.

        Reference to the associated drive which these metrics were recorded.  # noqa: E501

        :param drive_id: The drive_id of this BaseWearMetricsByDriveInstance.  # noqa: E501
        :type: str
        """

        self._drive_id = drive_id

    @property
    def timestamp(self):
        """Gets the timestamp of this BaseWearMetricsByDriveInstance.  # noqa: E501

        End of sample period.  # noqa: E501

        :return: The timestamp of this BaseWearMetricsByDriveInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this BaseWearMetricsByDriveInstance.

        End of sample period.  # noqa: E501

        :param timestamp: The timestamp of this BaseWearMetricsByDriveInstance.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def percent_endurance_remaining(self):
        """Gets the percent_endurance_remaining of this BaseWearMetricsByDriveInstance.  # noqa: E501

        The percentage of drive wear remaining.  # noqa: E501

        :return: The percent_endurance_remaining of this BaseWearMetricsByDriveInstance.  # noqa: E501
        :rtype: float
        """
        return self._percent_endurance_remaining

    @percent_endurance_remaining.setter
    def percent_endurance_remaining(self, percent_endurance_remaining):
        """Sets the percent_endurance_remaining of this BaseWearMetricsByDriveInstance.

        The percentage of drive wear remaining.  # noqa: E501

        :param percent_endurance_remaining: The percent_endurance_remaining of this BaseWearMetricsByDriveInstance.  # noqa: E501
        :type: float
        """

        self._percent_endurance_remaining = percent_endurance_remaining

    @property
    def repeat_count(self):
        """Gets the repeat_count of this BaseWearMetricsByDriveInstance.  # noqa: E501

        Number of times the metrics is repeated.  # noqa: E501

        :return: The repeat_count of this BaseWearMetricsByDriveInstance.  # noqa: E501
        :rtype: int
        """
        return self._repeat_count

    @repeat_count.setter
    def repeat_count(self, repeat_count):
        """Sets the repeat_count of this BaseWearMetricsByDriveInstance.

        Number of times the metrics is repeated.  # noqa: E501

        :param repeat_count: The repeat_count of this BaseWearMetricsByDriveInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                repeat_count is not None and repeat_count > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `repeat_count`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                repeat_count is not None and repeat_count < 0):  # noqa: E501
            raise ValueError("Invalid value for `repeat_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._repeat_count = repeat_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseWearMetricsByDriveInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseWearMetricsByDriveInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BaseWearMetricsByDriveInstance):
            return True

        return self.to_dict() != other.to_dict()
