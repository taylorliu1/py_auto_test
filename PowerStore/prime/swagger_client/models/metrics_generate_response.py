# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class MetricsGenerateResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entity': 'MetricsEntityEnum',
        'response_definition': 'str',
        'entity_l10n': 'str'
    }

    attribute_map = {
        'entity': 'entity',
        'response_definition': 'response_definition',
        'entity_l10n': 'entity_l10n'
    }

    discriminator_value_class_map = {
        'space_metrics_by_volume': 'SpaceMetricsByVolume',
        'performance_metrics_file_by_cluster': 'PerformanceMetricsFileByCluster',
        'performance_metrics_by_appliance_rollup': 'PerformanceMetricsByApplianceRollup',
        'performance_metrics_by_cluster_rollup': 'PerformanceMetricsByClusterRollup',
        'space_metrics_by_vg_family': 'SpaceMetricsByVgFamily',
        'performance_metrics_by_volume_rollup': 'PerformanceMetricsByVolumeRollup',
        'performance_metrics_by_cluster': 'PerformanceMetricsByCluster',
        'performance_metrics_by_fe_eth_port_rollup': 'PerformanceMetricsByFeEthPortRollup',
        'copy_metrics_by_appliance': 'CopyMetricsByAppliance',
        'performance_metrics_by_volume': 'PerformanceMetricsByVolume',
        'performance_metrics_by_fe_eth_node_rollup': 'PerformanceMetricsByFeEthNodeRollup',
        'performance_metrics_by_fe_fc_node': 'PerformanceMetricsByFeFcNode',
        'performance_metrics_by_vm_rollup': 'PerformanceMetricsByVmRollup',
        'wear_metrics_by_drive_daily_instance': 'WearMetricsByDriveDailyInstance',
        'space_metrics_by_volume_rollup': 'SpaceMetricsByVolumeRollup',
        'space_metrics_by_cluster': 'SpaceMetricsByCluster',
        'copy_metrics_by_vg': 'CopyMetricsByVg',
        'performance_metrics_file_by_node_rollup': 'PerformanceMetricsFileByNodeRollup',
        'copy_metrics_by_rg': 'CopyMetricsByRg',
        'performance_metrics_by_initiator_rollup': 'PerformanceMetricsByInitiatorRollup',
        'space_metrics_by_vm_rollup': 'SpaceMetricsByVmRollup',
        'performance_metrics_nfsv3_by_node': 'PerformanceMetricsNfsv3ByNode',
        'performance_metrics_smb_branch_cache_by_node': 'PerformanceMetricsSmbBranchCacheByNode',
        'performance_metrics_nfs_by_node': 'PerformanceMetricsNfsByNode',
        'latest_space_metrics_by_vg_family': 'LatestSpaceMetricsByVgFamily',
        'copy_metrics_by_volume': 'CopyMetricsByVolume',
        'performance_metrics_nfs_by_node_rollup': 'PerformanceMetricsNfsByNodeRollup',
        'wear_metrics_by_drive_instance': 'WearMetricsByDriveInstance',
        'performance_metrics_file_by_cluster_rollup': 'PerformanceMetricsFileByClusterRollup',
        'vsphere_metrics_by_vm': 'VsphereMetricsByVm',
        'performance_metrics_by_fe_fc_port_rollup': 'PerformanceMetricsByFeFcPortRollup',
        'performance_metrics_by_initiator': 'PerformanceMetricsByInitiator',
        'performance_metrics_by_fe_eth_node': 'PerformanceMetricsByFeEthNode',
        'performance_metrics_smb1_by_node_rollup': 'PerformanceMetricsSmb1ByNodeRollup',
        'space_metrics_by_storage_container': 'SpaceMetricsByStorageContainer',
        'copy_metrics_by_remote_system': 'CopyMetricsByRemoteSystem',
        'performance_metrics_smb_builtinclient_by_node_rollup': 'PerformanceMetricsSmbBuiltinclientByNodeRollup',
        'performance_metrics_by_node': 'PerformanceMetricsByNode',
        'performance_metrics_smb_by_node': 'PerformanceMetricsSmbByNode',
        'performance_metrics_smb1_by_node': 'PerformanceMetricsSmb1ByNode',
        'space_metrics_by_appliance_rollup': 'SpaceMetricsByApplianceRollup',
        'performance_metrics_smb_builtinclient_by_node': 'PerformanceMetricsSmbBuiltinclientByNode',
        'performance_metrics_smb2_by_node': 'PerformanceMetricsSmb2ByNode',
        'performance_metrics_by_host': 'PerformanceMetricsByHost',
        'performance_metrics_smb2_builtinclient_by_node': 'PerformanceMetricsSmb2BuiltinclientByNode',
        'space_metrics_by_storage_container_rollup': 'SpaceMetricsByStorageContainerRollup',
        'performance_metrics_nfsv4_by_node_rollup': 'PerformanceMetricsNfsv4ByNodeRollup',
        'performance_metrics_by_hg': 'PerformanceMetricsByHg',
        'performance_metrics_smb1_builtinclient_by_node_rollup': 'PerformanceMetricsSmb1BuiltinclientByNodeRollup',
        'space_metrics_by_appliance': 'SpaceMetricsByAppliance',
        'space_metrics_by_volume_family_rollup': 'SpaceMetricsByVolumeFamilyRollup',
        'space_metrics_by_vg_rollup': 'SpaceMetricsByVgRollup',
        'performance_metrics_file_by_appliance_rollup': 'PerformanceMetricsFileByApplianceRollup',
        'performance_metrics_by_appliance': 'PerformanceMetricsByAppliance',
        'performance_metrics_smb_branch_cache_by_node_rollup': 'PerformanceMetricsSmbBranchCacheByNodeRollup',
        'performance_metrics_by_ip_port_rollup': 'PerformanceMetricsByIpPortRollup',
        'performance_metrics_smb_by_node_rollup': 'PerformanceMetricsSmbByNodeRollup',
        'performance_metrics_by_fe_eth_port': 'PerformanceMetricsByFeEthPort',
        'performance_metrics_nfsv3_by_node_rollup': 'PerformanceMetricsNfsv3ByNodeRollup',
        'performance_metrics_by_ip_port': 'PerformanceMetricsByIpPort',
        'performance_metrics_smb1_builtinclient_by_node': 'PerformanceMetricsSmb1BuiltinclientByNode',
        'performance_metrics_nfsv4_by_node': 'PerformanceMetricsNfsv4ByNode',
        'performance_metrics_by_fe_fc_node_rollup': 'PerformanceMetricsByFeFcNodeRollup',
        'space_metrics_by_cluster_rollup': 'SpaceMetricsByClusterRollup',
        'space_metrics_by_vg': 'SpaceMetricsByVg',
        'space_metrics_by_vm': 'SpaceMetricsByVm',
        'vsphere_appson_metrics_by_appliance': 'VsphereAppsonMetricsByAppliance',
        'performance_metrics_by_fe_fc_port': 'PerformanceMetricsByFeFcPort',
        'performance_metrics_by_vm': 'PerformanceMetricsByVm',
        'performance_metrics_by_vg': 'PerformanceMetricsByVg',
        'performance_metrics_by_node_rollup': 'PerformanceMetricsByNodeRollup',
        'space_metrics_by_volume_family': 'SpaceMetricsByVolumeFamily',
        'copy_metrics_by_cluster': 'CopyMetricsByCluster',
        'performance_metrics_by_file_system': 'PerformanceMetricsByFileSystem',
        'performance_metrics_file_by_appliance': 'PerformanceMetricsFileByAppliance',
        'performance_metrics_smb2_by_node_rollup': 'PerformanceMetricsSmb2ByNodeRollup',
        'performance_metrics_smb2_builtinclient_by_node_rollup': 'PerformanceMetricsSmb2BuiltinclientByNodeRollup',
        'performance_metrics_by_host_rollup': 'PerformanceMetricsByHostRollup',
        'performance_metrics_by_hg_rollup': 'PerformanceMetricsByHgRollup',
        'performance_metrics_by_file_system_rollup': 'PerformanceMetricsByFileSystemRollup',
        'vsphere_appson_metrics_by_node': 'VsphereAppsonMetricsByNode',
        'performance_metrics_file_by_node': 'PerformanceMetricsFileByNode'
    }

    def __init__(self, entity=None, response_definition=None, entity_l10n=None, _configuration=None):  # noqa: E501
        """MetricsGenerateResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._entity = None
        self._response_definition = None
        self._entity_l10n = None
        self.discriminator = 'response_definition'

        self.entity = entity
        self.response_definition = response_definition
        if entity_l10n is not None:
            self.entity_l10n = entity_l10n

    @property
    def entity(self):
        """Gets the entity of this MetricsGenerateResponse.  # noqa: E501

        Localized message string corresponding to entity.  # noqa: E501

        :return: The entity of this MetricsGenerateResponse.  # noqa: E501
        :rtype: MetricsEntityEnum
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this MetricsGenerateResponse.

        Localized message string corresponding to entity.  # noqa: E501

        :param entity: The entity of this MetricsGenerateResponse.  # noqa: E501
        :type: MetricsEntityEnum
        """
        if self._configuration.client_side_validation and entity is None:
            raise ValueError("Invalid value for `entity`, must not be `None`")  # noqa: E501

        self._entity = entity

    @property
    def response_definition(self):
        """Gets the response_definition of this MetricsGenerateResponse.  # noqa: E501

        Response definition for the entity.  # noqa: E501

        :return: The response_definition of this MetricsGenerateResponse.  # noqa: E501
        :rtype: str
        """
        return self._response_definition

    @response_definition.setter
    def response_definition(self, response_definition):
        """Sets the response_definition of this MetricsGenerateResponse.

        Response definition for the entity.  # noqa: E501

        :param response_definition: The response_definition of this MetricsGenerateResponse.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and response_definition is None:
            raise ValueError("Invalid value for `response_definition`, must not be `None`")  # noqa: E501

        self._response_definition = response_definition

    @property
    def entity_l10n(self):
        """Gets the entity_l10n of this MetricsGenerateResponse.  # noqa: E501

        Localized message string corresponding to entity  # noqa: E501

        :return: The entity_l10n of this MetricsGenerateResponse.  # noqa: E501
        :rtype: str
        """
        return self._entity_l10n

    @entity_l10n.setter
    def entity_l10n(self, entity_l10n):
        """Sets the entity_l10n of this MetricsGenerateResponse.

        Localized message string corresponding to entity  # noqa: E501

        :param entity_l10n: The entity_l10n of this MetricsGenerateResponse.  # noqa: E501
        :type: str
        """

        self._entity_l10n = entity_l10n

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetricsGenerateResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetricsGenerateResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MetricsGenerateResponse):
            return True

        return self.to_dict() != other.to_dict()
