# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class RemoteSystemCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'management_address': 'str',
        'management_port': 'int',
        'name': 'str',
        'description': 'str',
        'type': 'RemoteSystemTypeEnum',
        'remote_username': 'str',
        'remote_password': 'str',
        'data_connection_type': 'DataConnectionTypeEnum',
        'iscsi_addresses': 'list[str]',
        'import_chap_info': 'ChapCredentialsInstance',
        'discovery_chap_mode': 'RemoteSystemChapModeEnum',
        'session_chap_mode': 'RemoteSystemChapModeEnum',
        'data_network_latency': 'RemoteSystemLatencyEnum',
        'file_connection_address': 'str',
        'vnx_file_username': 'str',
        'vnx_file_password': 'str'
    }

    attribute_map = {
        'management_address': 'management_address',
        'management_port': 'management_port',
        'name': 'name',
        'description': 'description',
        'type': 'type',
        'remote_username': 'remote_username',
        'remote_password': 'remote_password',
        'data_connection_type': 'data_connection_type',
        'iscsi_addresses': 'iscsi_addresses',
        'import_chap_info': 'import_chap_info',
        'discovery_chap_mode': 'discovery_chap_mode',
        'session_chap_mode': 'session_chap_mode',
        'data_network_latency': 'data_network_latency',
        'file_connection_address': 'file_connection_address',
        'vnx_file_username': 'vnx_file_username',
        'vnx_file_password': 'vnx_file_password'
    }

    def __init__(self, management_address=None, management_port=5443, name=None, description=None, type=None, remote_username=None, remote_password=None, data_connection_type=None, iscsi_addresses=None, import_chap_info=None, discovery_chap_mode=None, session_chap_mode=None, data_network_latency=None, file_connection_address=None, vnx_file_username=None, vnx_file_password=None, _configuration=None):  # noqa: E501
        """RemoteSystemCreate - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._management_address = None
        self._management_port = None
        self._name = None
        self._description = None
        self._type = None
        self._remote_username = None
        self._remote_password = None
        self._data_connection_type = None
        self._iscsi_addresses = None
        self._import_chap_info = None
        self._discovery_chap_mode = None
        self._session_chap_mode = None
        self._data_network_latency = None
        self._file_connection_address = None
        self._vnx_file_username = None
        self._vnx_file_password = None
        self.discriminator = None

        if management_address is not None:
            self.management_address = management_address
        if management_port is not None:
            self.management_port = management_port
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if type is not None:
            self.type = type
        if remote_username is not None:
            self.remote_username = remote_username
        if remote_password is not None:
            self.remote_password = remote_password
        if data_connection_type is not None:
            self.data_connection_type = data_connection_type
        if iscsi_addresses is not None:
            self.iscsi_addresses = iscsi_addresses
        if import_chap_info is not None:
            self.import_chap_info = import_chap_info
        if discovery_chap_mode is not None:
            self.discovery_chap_mode = discovery_chap_mode
        if session_chap_mode is not None:
            self.session_chap_mode = session_chap_mode
        if data_network_latency is not None:
            self.data_network_latency = data_network_latency
        if file_connection_address is not None:
            self.file_connection_address = file_connection_address
        if vnx_file_username is not None:
            self.vnx_file_username = vnx_file_username
        if vnx_file_password is not None:
            self.vnx_file_password = vnx_file_password

    @property
    def management_address(self):
        """Gets the management_address of this RemoteSystemCreate.  # noqa: E501

        Management IP address of the remote system instance. IPv4 and FQDN are supported for non-PowerStore remote systems. Both IPv4 and IPv6 and FQDN are supported for PowerStore remote systems.   # noqa: E501

        :return: The management_address of this RemoteSystemCreate.  # noqa: E501
        :rtype: str
        """
        return self._management_address

    @management_address.setter
    def management_address(self, management_address):
        """Sets the management_address of this RemoteSystemCreate.

        Management IP address of the remote system instance. IPv4 and FQDN are supported for non-PowerStore remote systems. Both IPv4 and IPv6 and FQDN are supported for PowerStore remote systems.   # noqa: E501

        :param management_address: The management_address of this RemoteSystemCreate.  # noqa: E501
        :type: str
        """

        self._management_address = management_address

    @property
    def management_port(self):
        """Gets the management_port of this RemoteSystemCreate.  # noqa: E501

        Management port is applicable only for creating PowerMax/VMAX remote system.  Was added in version 3.0.0.0.  # noqa: E501

        :return: The management_port of this RemoteSystemCreate.  # noqa: E501
        :rtype: int
        """
        return self._management_port

    @management_port.setter
    def management_port(self, management_port):
        """Sets the management_port of this RemoteSystemCreate.

        Management port is applicable only for creating PowerMax/VMAX remote system.  Was added in version 3.0.0.0.  # noqa: E501

        :param management_port: The management_port of this RemoteSystemCreate.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                management_port is not None and management_port > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `management_port`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                management_port is not None and management_port < 0):  # noqa: E501
            raise ValueError("Invalid value for `management_port`, must be a value greater than or equal to `0`")  # noqa: E501

        self._management_port = management_port

    @property
    def name(self):
        """Gets the name of this RemoteSystemCreate.  # noqa: E501

        User-specified name of the remote system. Used only for non-PowerStore systems. This value must contain 128 or fewer printable Unicode characters.   # noqa: E501

        :return: The name of this RemoteSystemCreate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RemoteSystemCreate.

        User-specified name of the remote system. Used only for non-PowerStore systems. This value must contain 128 or fewer printable Unicode characters.   # noqa: E501

        :param name: The name of this RemoteSystemCreate.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 128):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this RemoteSystemCreate.  # noqa: E501

        User-specified description of the remote system.   # noqa: E501

        :return: The description of this RemoteSystemCreate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RemoteSystemCreate.

        User-specified description of the remote system.   # noqa: E501

        :param description: The description of this RemoteSystemCreate.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                description is not None and len(description) > 256):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `256`")  # noqa: E501

        self._description = description

    @property
    def type(self):
        """Gets the type of this RemoteSystemCreate.  # noqa: E501


        :return: The type of this RemoteSystemCreate.  # noqa: E501
        :rtype: RemoteSystemTypeEnum
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RemoteSystemCreate.


        :param type: The type of this RemoteSystemCreate.  # noqa: E501
        :type: RemoteSystemTypeEnum
        """

        self._type = type

    @property
    def remote_username(self):
        """Gets the remote_username of this RemoteSystemCreate.  # noqa: E501

        Username used to access the remote system.   # noqa: E501

        :return: The remote_username of this RemoteSystemCreate.  # noqa: E501
        :rtype: str
        """
        return self._remote_username

    @remote_username.setter
    def remote_username(self, remote_username):
        """Sets the remote_username of this RemoteSystemCreate.

        Username used to access the remote system.   # noqa: E501

        :param remote_username: The remote_username of this RemoteSystemCreate.  # noqa: E501
        :type: str
        """

        self._remote_username = remote_username

    @property
    def remote_password(self):
        """Gets the remote_password of this RemoteSystemCreate.  # noqa: E501

        Password used to access the remote system.   # noqa: E501

        :return: The remote_password of this RemoteSystemCreate.  # noqa: E501
        :rtype: str
        """
        return self._remote_password

    @remote_password.setter
    def remote_password(self, remote_password):
        """Sets the remote_password of this RemoteSystemCreate.

        Password used to access the remote system.   # noqa: E501

        :param remote_password: The remote_password of this RemoteSystemCreate.  # noqa: E501
        :type: str
        """

        self._remote_password = remote_password

    @property
    def data_connection_type(self):
        """Gets the data_connection_type of this RemoteSystemCreate.  # noqa: E501

         Was added in version 3.0.0.0.  # noqa: E501

        :return: The data_connection_type of this RemoteSystemCreate.  # noqa: E501
        :rtype: DataConnectionTypeEnum
        """
        return self._data_connection_type

    @data_connection_type.setter
    def data_connection_type(self, data_connection_type):
        """Sets the data_connection_type of this RemoteSystemCreate.

         Was added in version 3.0.0.0.  # noqa: E501

        :param data_connection_type: The data_connection_type of this RemoteSystemCreate.  # noqa: E501
        :type: DataConnectionTypeEnum
        """

        self._data_connection_type = data_connection_type

    @property
    def iscsi_addresses(self):
        """Gets the iscsi_addresses of this RemoteSystemCreate.  # noqa: E501

        iSCSI target IP addresses for the data connection to the remote system. Must be specified when creating a non-PowerStore remote system.   # noqa: E501

        :return: The iscsi_addresses of this RemoteSystemCreate.  # noqa: E501
        :rtype: list[str]
        """
        return self._iscsi_addresses

    @iscsi_addresses.setter
    def iscsi_addresses(self, iscsi_addresses):
        """Sets the iscsi_addresses of this RemoteSystemCreate.

        iSCSI target IP addresses for the data connection to the remote system. Must be specified when creating a non-PowerStore remote system.   # noqa: E501

        :param iscsi_addresses: The iscsi_addresses of this RemoteSystemCreate.  # noqa: E501
        :type: list[str]
        """

        self._iscsi_addresses = iscsi_addresses

    @property
    def import_chap_info(self):
        """Gets the import_chap_info of this RemoteSystemCreate.  # noqa: E501

        Chap information to be used for session and discovery. This is applicable to non-PowerStore remote systems.   # noqa: E501

        :return: The import_chap_info of this RemoteSystemCreate.  # noqa: E501
        :rtype: ChapCredentialsInstance
        """
        return self._import_chap_info

    @import_chap_info.setter
    def import_chap_info(self, import_chap_info):
        """Sets the import_chap_info of this RemoteSystemCreate.

        Chap information to be used for session and discovery. This is applicable to non-PowerStore remote systems.   # noqa: E501

        :param import_chap_info: The import_chap_info of this RemoteSystemCreate.  # noqa: E501
        :type: ChapCredentialsInstance
        """

        self._import_chap_info = import_chap_info

    @property
    def discovery_chap_mode(self):
        """Gets the discovery_chap_mode of this RemoteSystemCreate.  # noqa: E501


        :return: The discovery_chap_mode of this RemoteSystemCreate.  # noqa: E501
        :rtype: RemoteSystemChapModeEnum
        """
        return self._discovery_chap_mode

    @discovery_chap_mode.setter
    def discovery_chap_mode(self, discovery_chap_mode):
        """Sets the discovery_chap_mode of this RemoteSystemCreate.


        :param discovery_chap_mode: The discovery_chap_mode of this RemoteSystemCreate.  # noqa: E501
        :type: RemoteSystemChapModeEnum
        """

        self._discovery_chap_mode = discovery_chap_mode

    @property
    def session_chap_mode(self):
        """Gets the session_chap_mode of this RemoteSystemCreate.  # noqa: E501


        :return: The session_chap_mode of this RemoteSystemCreate.  # noqa: E501
        :rtype: RemoteSystemChapModeEnum
        """
        return self._session_chap_mode

    @session_chap_mode.setter
    def session_chap_mode(self, session_chap_mode):
        """Sets the session_chap_mode of this RemoteSystemCreate.


        :param session_chap_mode: The session_chap_mode of this RemoteSystemCreate.  # noqa: E501
        :type: RemoteSystemChapModeEnum
        """

        self._session_chap_mode = session_chap_mode

    @property
    def data_network_latency(self):
        """Gets the data_network_latency of this RemoteSystemCreate.  # noqa: E501


        :return: The data_network_latency of this RemoteSystemCreate.  # noqa: E501
        :rtype: RemoteSystemLatencyEnum
        """
        return self._data_network_latency

    @data_network_latency.setter
    def data_network_latency(self, data_network_latency):
        """Sets the data_network_latency of this RemoteSystemCreate.


        :param data_network_latency: The data_network_latency of this RemoteSystemCreate.  # noqa: E501
        :type: RemoteSystemLatencyEnum
        """

        self._data_network_latency = data_network_latency

    @property
    def file_connection_address(self):
        """Gets the file_connection_address of this RemoteSystemCreate.  # noqa: E501

        Control station address of the VNX to establish file management connection from PowerStore. Not applicable for other remote systems. This address can be modified. Provide IP aliasing address to transparently handle connection failures from primary to secondary control station.  Was added in version 3.0.0.0.  # noqa: E501

        :return: The file_connection_address of this RemoteSystemCreate.  # noqa: E501
        :rtype: str
        """
        return self._file_connection_address

    @file_connection_address.setter
    def file_connection_address(self, file_connection_address):
        """Sets the file_connection_address of this RemoteSystemCreate.

        Control station address of the VNX to establish file management connection from PowerStore. Not applicable for other remote systems. This address can be modified. Provide IP aliasing address to transparently handle connection failures from primary to secondary control station.  Was added in version 3.0.0.0.  # noqa: E501

        :param file_connection_address: The file_connection_address of this RemoteSystemCreate.  # noqa: E501
        :type: str
        """

        self._file_connection_address = file_connection_address

    @property
    def vnx_file_username(self):
        """Gets the vnx_file_username of this RemoteSystemCreate.  # noqa: E501

        User-specified VNX NAS administrator username. nasadmin account is preferred for file import.  Was added in version 3.0.0.0.  # noqa: E501

        :return: The vnx_file_username of this RemoteSystemCreate.  # noqa: E501
        :rtype: str
        """
        return self._vnx_file_username

    @vnx_file_username.setter
    def vnx_file_username(self, vnx_file_username):
        """Sets the vnx_file_username of this RemoteSystemCreate.

        User-specified VNX NAS administrator username. nasadmin account is preferred for file import.  Was added in version 3.0.0.0.  # noqa: E501

        :param vnx_file_username: The vnx_file_username of this RemoteSystemCreate.  # noqa: E501
        :type: str
        """

        self._vnx_file_username = vnx_file_username

    @property
    def vnx_file_password(self):
        """Gets the vnx_file_password of this RemoteSystemCreate.  # noqa: E501

        Password used to access the control station.  Was added in version 3.0.0.0.  # noqa: E501

        :return: The vnx_file_password of this RemoteSystemCreate.  # noqa: E501
        :rtype: str
        """
        return self._vnx_file_password

    @vnx_file_password.setter
    def vnx_file_password(self, vnx_file_password):
        """Sets the vnx_file_password of this RemoteSystemCreate.

        Password used to access the control station.  Was added in version 3.0.0.0.  # noqa: E501

        :param vnx_file_password: The vnx_file_password of this RemoteSystemCreate.  # noqa: E501
        :type: str
        """

        self._vnx_file_password = vnx_file_password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RemoteSystemCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RemoteSystemCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RemoteSystemCreate):
            return True

        return self.to_dict() != other.to_dict()
