# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class FlrInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mode': 'FileSystemFLRModeEnum',
        'minimum_retention': 'str',
        'default_retention': 'str',
        'maximum_retention': 'str',
        'auto_lock': 'bool',
        'auto_delete': 'bool',
        'policy_interval': 'int',
        'has_protected_files': 'bool',
        'clock_time': 'datetime',
        'maximum_retention_date': 'datetime',
        'mode_l10n': 'str'
    }

    attribute_map = {
        'mode': 'mode',
        'minimum_retention': 'minimum_retention',
        'default_retention': 'default_retention',
        'maximum_retention': 'maximum_retention',
        'auto_lock': 'auto_lock',
        'auto_delete': 'auto_delete',
        'policy_interval': 'policy_interval',
        'has_protected_files': 'has_protected_files',
        'clock_time': 'clock_time',
        'maximum_retention_date': 'maximum_retention_date',
        'mode_l10n': 'mode_l10n'
    }

    def __init__(self, mode=None, minimum_retention=None, default_retention=None, maximum_retention=None, auto_lock=None, auto_delete=None, policy_interval=None, has_protected_files=None, clock_time=None, maximum_retention_date=None, mode_l10n=None, _configuration=None):  # noqa: E501
        """FlrInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._mode = None
        self._minimum_retention = None
        self._default_retention = None
        self._maximum_retention = None
        self._auto_lock = None
        self._auto_delete = None
        self._policy_interval = None
        self._has_protected_files = None
        self._clock_time = None
        self._maximum_retention_date = None
        self._mode_l10n = None
        self.discriminator = None

        if mode is not None:
            self.mode = mode
        if minimum_retention is not None:
            self.minimum_retention = minimum_retention
        if default_retention is not None:
            self.default_retention = default_retention
        if maximum_retention is not None:
            self.maximum_retention = maximum_retention
        if auto_lock is not None:
            self.auto_lock = auto_lock
        if auto_delete is not None:
            self.auto_delete = auto_delete
        if policy_interval is not None:
            self.policy_interval = policy_interval
        if has_protected_files is not None:
            self.has_protected_files = has_protected_files
        if clock_time is not None:
            self.clock_time = clock_time
        if maximum_retention_date is not None:
            self.maximum_retention_date = maximum_retention_date
        if mode_l10n is not None:
            self.mode_l10n = mode_l10n

    @property
    def mode(self):
        """Gets the mode of this FlrInstance.  # noqa: E501


        :return: The mode of this FlrInstance.  # noqa: E501
        :rtype: FileSystemFLRModeEnum
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this FlrInstance.


        :param mode: The mode of this FlrInstance.  # noqa: E501
        :type: FileSystemFLRModeEnum
        """

        self._mode = mode

    @property
    def minimum_retention(self):
        """Gets the minimum_retention of this FlrInstance.  # noqa: E501

        The shortest retention period for which files on an FLR-enabled file system can be locked and protected from deletion. This value must be less than or equal to the maximum retention period. Any attempt to lock a file for less than the minimum retention period results in the file being locked until the current system time plus the minimum retention period is reached. The default value for the minimum retention period is 1 day. Format [integer][Y|M|D]|\"infinite\" (example \"5Y\" for 5 years). Specify Y for years, M for months, D for days, or the keyword infinite. Setting infinite means that the files can never be deleted. This setting is significant only when flr mode is not None.   # noqa: E501

        :return: The minimum_retention of this FlrInstance.  # noqa: E501
        :rtype: str
        """
        return self._minimum_retention

    @minimum_retention.setter
    def minimum_retention(self, minimum_retention):
        """Sets the minimum_retention of this FlrInstance.

        The shortest retention period for which files on an FLR-enabled file system can be locked and protected from deletion. This value must be less than or equal to the maximum retention period. Any attempt to lock a file for less than the minimum retention period results in the file being locked until the current system time plus the minimum retention period is reached. The default value for the minimum retention period is 1 day. Format [integer][Y|M|D]|\"infinite\" (example \"5Y\" for 5 years). Specify Y for years, M for months, D for days, or the keyword infinite. Setting infinite means that the files can never be deleted. This setting is significant only when flr mode is not None.   # noqa: E501

        :param minimum_retention: The minimum_retention of this FlrInstance.  # noqa: E501
        :type: str
        """

        self._minimum_retention = minimum_retention

    @property
    def default_retention(self):
        """Gets the default_retention of this FlrInstance.  # noqa: E501

        The default retention period that is used in an FLR-enabled file system when a file is locked and a retention period is not specified. This value must be greater than or equal to the minimum retention period, and less than or equal to the maximum retention period. Format [integer][Y|M|D]|\"infinite\" (example \"5Y\" for 5 years). Specify Y for years, M for months, D for days, or infinite. The default value for the default retention period is infinite, which means that the files can never be deleted. This setting is significant only when flr mode is not None.   # noqa: E501

        :return: The default_retention of this FlrInstance.  # noqa: E501
        :rtype: str
        """
        return self._default_retention

    @default_retention.setter
    def default_retention(self, default_retention):
        """Sets the default_retention of this FlrInstance.

        The default retention period that is used in an FLR-enabled file system when a file is locked and a retention period is not specified. This value must be greater than or equal to the minimum retention period, and less than or equal to the maximum retention period. Format [integer][Y|M|D]|\"infinite\" (example \"5Y\" for 5 years). Specify Y for years, M for months, D for days, or infinite. The default value for the default retention period is infinite, which means that the files can never be deleted. This setting is significant only when flr mode is not None.   # noqa: E501

        :param default_retention: The default_retention of this FlrInstance.  # noqa: E501
        :type: str
        """

        self._default_retention = default_retention

    @property
    def maximum_retention(self):
        """Gets the maximum_retention of this FlrInstance.  # noqa: E501

        The longest retention period for which files on an FLR-enabled file system can be locked and protected from deletion. Any attempt to lock a file for more than this maximum retention period results in the file being locked until the current system time plus the maximum retention period is reached. Format [integer][Y|M|D]|\"infinite\" (example \"5Y\" for 5 years). Specify Y for years, M for months, D for days, or the keyword infinite. The default value for the maximum retention period is infinite, which means that the files can never be deleted. This setting is significant only when flr mode is not None.   # noqa: E501

        :return: The maximum_retention of this FlrInstance.  # noqa: E501
        :rtype: str
        """
        return self._maximum_retention

    @maximum_retention.setter
    def maximum_retention(self, maximum_retention):
        """Sets the maximum_retention of this FlrInstance.

        The longest retention period for which files on an FLR-enabled file system can be locked and protected from deletion. Any attempt to lock a file for more than this maximum retention period results in the file being locked until the current system time plus the maximum retention period is reached. Format [integer][Y|M|D]|\"infinite\" (example \"5Y\" for 5 years). Specify Y for years, M for months, D for days, or the keyword infinite. The default value for the maximum retention period is infinite, which means that the files can never be deleted. This setting is significant only when flr mode is not None.   # noqa: E501

        :param maximum_retention: The maximum_retention of this FlrInstance.  # noqa: E501
        :type: str
        """

        self._maximum_retention = maximum_retention

    @property
    def auto_lock(self):
        """Gets the auto_lock of this FlrInstance.  # noqa: E501

        Indicates whether to automatically lock files in an FLR-enabled file system. When true files are locked automatically after modification based on the policy_interval. When enabled, auto-locked files are set with the default retention period value. This setting is significant only when flr mode is not None.   # noqa: E501

        :return: The auto_lock of this FlrInstance.  # noqa: E501
        :rtype: bool
        """
        return self._auto_lock

    @auto_lock.setter
    def auto_lock(self, auto_lock):
        """Sets the auto_lock of this FlrInstance.

        Indicates whether to automatically lock files in an FLR-enabled file system. When true files are locked automatically after modification based on the policy_interval. When enabled, auto-locked files are set with the default retention period value. This setting is significant only when flr mode is not None.   # noqa: E501

        :param auto_lock: The auto_lock of this FlrInstance.  # noqa: E501
        :type: bool
        """

        self._auto_lock = auto_lock

    @property
    def auto_delete(self):
        """Gets the auto_delete of this FlrInstance.  # noqa: E501

        Indicates whether locked files will be automatically delete from an FLR-enabled file system once their retention periods have expired. This setting is significant only when flr mode is not None.   # noqa: E501

        :return: The auto_delete of this FlrInstance.  # noqa: E501
        :rtype: bool
        """
        return self._auto_delete

    @auto_delete.setter
    def auto_delete(self, auto_delete):
        """Sets the auto_delete of this FlrInstance.

        Indicates whether locked files will be automatically delete from an FLR-enabled file system once their retention periods have expired. This setting is significant only when flr mode is not None.   # noqa: E501

        :param auto_delete: The auto_delete of this FlrInstance.  # noqa: E501
        :type: bool
        """

        self._auto_delete = auto_delete

    @property
    def policy_interval(self):
        """Gets the policy_interval of this FlrInstance.  # noqa: E501

        Indicates how long to wait (in seconds) after files are modified before the files are automatically locked. The default value is 3600 seconds (1 hour). This setting is significant only when flr mode is not None.   # noqa: E501

        :return: The policy_interval of this FlrInstance.  # noqa: E501
        :rtype: int
        """
        return self._policy_interval

    @policy_interval.setter
    def policy_interval(self, policy_interval):
        """Sets the policy_interval of this FlrInstance.

        Indicates how long to wait (in seconds) after files are modified before the files are automatically locked. The default value is 3600 seconds (1 hour). This setting is significant only when flr mode is not None.   # noqa: E501

        :param policy_interval: The policy_interval of this FlrInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                policy_interval is not None and policy_interval > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `policy_interval`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                policy_interval is not None and policy_interval < 0):  # noqa: E501
            raise ValueError("Invalid value for `policy_interval`, must be a value greater than or equal to `0`")  # noqa: E501

        self._policy_interval = policy_interval

    @property
    def has_protected_files(self):
        """Gets the has_protected_files of this FlrInstance.  # noqa: E501

        Indicates whether FLR file system has protected files. This setting is significant only when flr mode is not None.   # noqa: E501

        :return: The has_protected_files of this FlrInstance.  # noqa: E501
        :rtype: bool
        """
        return self._has_protected_files

    @has_protected_files.setter
    def has_protected_files(self, has_protected_files):
        """Sets the has_protected_files of this FlrInstance.

        Indicates whether FLR file system has protected files. This setting is significant only when flr mode is not None.   # noqa: E501

        :param has_protected_files: The has_protected_files of this FlrInstance.  # noqa: E501
        :type: bool
        """

        self._has_protected_files = has_protected_files

    @property
    def clock_time(self):
        """Gets the clock_time of this FlrInstance.  # noqa: E501

        Per file system clock used to track the retention date. It is initialized when an FLR-enabled file system is first mounted on a NAS Server. It does not advance when a file system is not mounted. This setting is significant only when flr mode is not None.   # noqa: E501

        :return: The clock_time of this FlrInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._clock_time

    @clock_time.setter
    def clock_time(self, clock_time):
        """Sets the clock_time of this FlrInstance.

        Per file system clock used to track the retention date. It is initialized when an FLR-enabled file system is first mounted on a NAS Server. It does not advance when a file system is not mounted. This setting is significant only when flr mode is not None.   # noqa: E501

        :param clock_time: The clock_time of this FlrInstance.  # noqa: E501
        :type: datetime
        """

        self._clock_time = clock_time

    @property
    def maximum_retention_date(self):
        """Gets the maximum_retention_date of this FlrInstance.  # noqa: E501

        Maximum date and time that has been set on any locked file in an FLR-enabled file system, which means that the file system itself will be protected until this date and time. This value is compared to the FLR Clock Time to determine whether the date and time have passed. Value is null if the maximum locked date is infinite, or a specific time. This setting is significant only when flr mode is not None.   # noqa: E501

        :return: The maximum_retention_date of this FlrInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._maximum_retention_date

    @maximum_retention_date.setter
    def maximum_retention_date(self, maximum_retention_date):
        """Sets the maximum_retention_date of this FlrInstance.

        Maximum date and time that has been set on any locked file in an FLR-enabled file system, which means that the file system itself will be protected until this date and time. This value is compared to the FLR Clock Time to determine whether the date and time have passed. Value is null if the maximum locked date is infinite, or a specific time. This setting is significant only when flr mode is not None.   # noqa: E501

        :param maximum_retention_date: The maximum_retention_date of this FlrInstance.  # noqa: E501
        :type: datetime
        """

        self._maximum_retention_date = maximum_retention_date

    @property
    def mode_l10n(self):
        """Gets the mode_l10n of this FlrInstance.  # noqa: E501

        Localized message string corresponding to mode Was added in version 3.0.0.0.  # noqa: E501

        :return: The mode_l10n of this FlrInstance.  # noqa: E501
        :rtype: str
        """
        return self._mode_l10n

    @mode_l10n.setter
    def mode_l10n(self, mode_l10n):
        """Sets the mode_l10n of this FlrInstance.

        Localized message string corresponding to mode Was added in version 3.0.0.0.  # noqa: E501

        :param mode_l10n: The mode_l10n of this FlrInstance.  # noqa: E501
        :type: str
        """

        self._mode_l10n = mode_l10n

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FlrInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FlrInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FlrInstance):
            return True

        return self.to_dict() != other.to_dict()
