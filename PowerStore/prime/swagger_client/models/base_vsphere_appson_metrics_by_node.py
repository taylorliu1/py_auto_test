# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class BaseVsphereAppsonMetricsByNode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'node_id': 'str',
        'timestamp': 'datetime',
        'avg_cpu_usage': 'float',
        'avg_cpu_usage_pct': 'float',
        'avg_mem_consumed': 'float',
        'avg_mem_consumed_pct': 'float',
        'repeat_count': 'int'
    }

    attribute_map = {
        'node_id': 'node_id',
        'timestamp': 'timestamp',
        'avg_cpu_usage': 'avg_cpu_usage',
        'avg_cpu_usage_pct': 'avg_cpu_usage_pct',
        'avg_mem_consumed': 'avg_mem_consumed',
        'avg_mem_consumed_pct': 'avg_mem_consumed_pct',
        'repeat_count': 'repeat_count'
    }

    def __init__(self, node_id=None, timestamp=None, avg_cpu_usage=None, avg_cpu_usage_pct=None, avg_mem_consumed=None, avg_mem_consumed_pct=None, repeat_count=None, _configuration=None):  # noqa: E501
        """BaseVsphereAppsonMetricsByNode - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._node_id = None
        self._timestamp = None
        self._avg_cpu_usage = None
        self._avg_cpu_usage_pct = None
        self._avg_mem_consumed = None
        self._avg_mem_consumed_pct = None
        self._repeat_count = None
        self.discriminator = None

        if node_id is not None:
            self.node_id = node_id
        if timestamp is not None:
            self.timestamp = timestamp
        if avg_cpu_usage is not None:
            self.avg_cpu_usage = avg_cpu_usage
        if avg_cpu_usage_pct is not None:
            self.avg_cpu_usage_pct = avg_cpu_usage_pct
        if avg_mem_consumed is not None:
            self.avg_mem_consumed = avg_mem_consumed
        if avg_mem_consumed_pct is not None:
            self.avg_mem_consumed_pct = avg_mem_consumed_pct
        if repeat_count is not None:
            self.repeat_count = repeat_count

    @property
    def node_id(self):
        """Gets the node_id of this BaseVsphereAppsonMetricsByNode.  # noqa: E501

        Unique identifier representing a specific node.  # noqa: E501

        :return: The node_id of this BaseVsphereAppsonMetricsByNode.  # noqa: E501
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this BaseVsphereAppsonMetricsByNode.

        Unique identifier representing a specific node.  # noqa: E501

        :param node_id: The node_id of this BaseVsphereAppsonMetricsByNode.  # noqa: E501
        :type: str
        """

        self._node_id = node_id

    @property
    def timestamp(self):
        """Gets the timestamp of this BaseVsphereAppsonMetricsByNode.  # noqa: E501

        End of sample period.  # noqa: E501

        :return: The timestamp of this BaseVsphereAppsonMetricsByNode.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this BaseVsphereAppsonMetricsByNode.

        End of sample period.  # noqa: E501

        :param timestamp: The timestamp of this BaseVsphereAppsonMetricsByNode.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def avg_cpu_usage(self):
        """Gets the avg_cpu_usage of this BaseVsphereAppsonMetricsByNode.  # noqa: E501

        Average CPU usage in MHz.  # noqa: E501

        :return: The avg_cpu_usage of this BaseVsphereAppsonMetricsByNode.  # noqa: E501
        :rtype: float
        """
        return self._avg_cpu_usage

    @avg_cpu_usage.setter
    def avg_cpu_usage(self, avg_cpu_usage):
        """Sets the avg_cpu_usage of this BaseVsphereAppsonMetricsByNode.

        Average CPU usage in MHz.  # noqa: E501

        :param avg_cpu_usage: The avg_cpu_usage of this BaseVsphereAppsonMetricsByNode.  # noqa: E501
        :type: float
        """

        self._avg_cpu_usage = avg_cpu_usage

    @property
    def avg_cpu_usage_pct(self):
        """Gets the avg_cpu_usage_pct of this BaseVsphereAppsonMetricsByNode.  # noqa: E501

        Average CPU usage as % of amount available on ESX host.  # noqa: E501

        :return: The avg_cpu_usage_pct of this BaseVsphereAppsonMetricsByNode.  # noqa: E501
        :rtype: float
        """
        return self._avg_cpu_usage_pct

    @avg_cpu_usage_pct.setter
    def avg_cpu_usage_pct(self, avg_cpu_usage_pct):
        """Sets the avg_cpu_usage_pct of this BaseVsphereAppsonMetricsByNode.

        Average CPU usage as % of amount available on ESX host.  # noqa: E501

        :param avg_cpu_usage_pct: The avg_cpu_usage_pct of this BaseVsphereAppsonMetricsByNode.  # noqa: E501
        :type: float
        """

        self._avg_cpu_usage_pct = avg_cpu_usage_pct

    @property
    def avg_mem_consumed(self):
        """Gets the avg_mem_consumed of this BaseVsphereAppsonMetricsByNode.  # noqa: E501

        Average memory consumption in KB.  # noqa: E501

        :return: The avg_mem_consumed of this BaseVsphereAppsonMetricsByNode.  # noqa: E501
        :rtype: float
        """
        return self._avg_mem_consumed

    @avg_mem_consumed.setter
    def avg_mem_consumed(self, avg_mem_consumed):
        """Sets the avg_mem_consumed of this BaseVsphereAppsonMetricsByNode.

        Average memory consumption in KB.  # noqa: E501

        :param avg_mem_consumed: The avg_mem_consumed of this BaseVsphereAppsonMetricsByNode.  # noqa: E501
        :type: float
        """

        self._avg_mem_consumed = avg_mem_consumed

    @property
    def avg_mem_consumed_pct(self):
        """Gets the avg_mem_consumed_pct of this BaseVsphereAppsonMetricsByNode.  # noqa: E501

        Average memory consumption as % of amount available on ESX host.  # noqa: E501

        :return: The avg_mem_consumed_pct of this BaseVsphereAppsonMetricsByNode.  # noqa: E501
        :rtype: float
        """
        return self._avg_mem_consumed_pct

    @avg_mem_consumed_pct.setter
    def avg_mem_consumed_pct(self, avg_mem_consumed_pct):
        """Sets the avg_mem_consumed_pct of this BaseVsphereAppsonMetricsByNode.

        Average memory consumption as % of amount available on ESX host.  # noqa: E501

        :param avg_mem_consumed_pct: The avg_mem_consumed_pct of this BaseVsphereAppsonMetricsByNode.  # noqa: E501
        :type: float
        """

        self._avg_mem_consumed_pct = avg_mem_consumed_pct

    @property
    def repeat_count(self):
        """Gets the repeat_count of this BaseVsphereAppsonMetricsByNode.  # noqa: E501

        The number of times the current metric is repeated.  # noqa: E501

        :return: The repeat_count of this BaseVsphereAppsonMetricsByNode.  # noqa: E501
        :rtype: int
        """
        return self._repeat_count

    @repeat_count.setter
    def repeat_count(self, repeat_count):
        """Sets the repeat_count of this BaseVsphereAppsonMetricsByNode.

        The number of times the current metric is repeated.  # noqa: E501

        :param repeat_count: The repeat_count of this BaseVsphereAppsonMetricsByNode.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                repeat_count is not None and repeat_count > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `repeat_count`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                repeat_count is not None and repeat_count < 0):  # noqa: E501
            raise ValueError("Invalid value for `repeat_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._repeat_count = repeat_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseVsphereAppsonMetricsByNode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseVsphereAppsonMetricsByNode):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BaseVsphereAppsonMetricsByNode):
            return True

        return self.to_dict() != other.to_dict()
