# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class JobInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'resource_action': 'ResourceActionEnum',
        'resource_type': 'ResourceTypeEnum',
        'resource_id': 'str',
        'resource_name': 'str',
        'description_l10n': 'str',
        'state': 'JobStateEnum',
        'start_time': 'datetime',
        'phase': 'JobPhaseEnum',
        'end_time': 'datetime',
        'estimated_completion_time': 'datetime',
        'progress_percentage': 'int',
        'parent_id': 'str',
        'root_id': 'str',
        'user': 'str',
        'response_body': 'BaseResponse',
        'response_status': 'HttpStatusEnum',
        'step_order': 'int',
        'resource_action_l10n': 'str',
        'resource_type_l10n': 'str',
        'state_l10n': 'str',
        'phase_l10n': 'str',
        'response_status_l10n': 'str',
        'parent': 'JobInstance',
        'children': 'list[JobInstance]',
        'root': 'JobInstance',
        'leafs': 'list[JobInstance]'
    }

    attribute_map = {
        'id': 'id',
        'resource_action': 'resource_action',
        'resource_type': 'resource_type',
        'resource_id': 'resource_id',
        'resource_name': 'resource_name',
        'description_l10n': 'description_l10n',
        'state': 'state',
        'start_time': 'start_time',
        'phase': 'phase',
        'end_time': 'end_time',
        'estimated_completion_time': 'estimated_completion_time',
        'progress_percentage': 'progress_percentage',
        'parent_id': 'parent_id',
        'root_id': 'root_id',
        'user': 'user',
        'response_body': 'response_body',
        'response_status': 'response_status',
        'step_order': 'step_order',
        'resource_action_l10n': 'resource_action_l10n',
        'resource_type_l10n': 'resource_type_l10n',
        'state_l10n': 'state_l10n',
        'phase_l10n': 'phase_l10n',
        'response_status_l10n': 'response_status_l10n',
        'parent': 'parent',
        'children': 'children',
        'root': 'root',
        'leafs': 'leafs'
    }

    def __init__(self, id=None, resource_action=None, resource_type=None, resource_id=None, resource_name=None, description_l10n=None, state=None, start_time=None, phase=None, end_time=None, estimated_completion_time=None, progress_percentage=None, parent_id=None, root_id=None, user=None, response_body=None, response_status=None, step_order=None, resource_action_l10n=None, resource_type_l10n=None, state_l10n=None, phase_l10n=None, response_status_l10n=None, parent=None, children=None, root=None, leafs=None, _configuration=None):  # noqa: E501
        """JobInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._resource_action = None
        self._resource_type = None
        self._resource_id = None
        self._resource_name = None
        self._description_l10n = None
        self._state = None
        self._start_time = None
        self._phase = None
        self._end_time = None
        self._estimated_completion_time = None
        self._progress_percentage = None
        self._parent_id = None
        self._root_id = None
        self._user = None
        self._response_body = None
        self._response_status = None
        self._step_order = None
        self._resource_action_l10n = None
        self._resource_type_l10n = None
        self._state_l10n = None
        self._phase_l10n = None
        self._response_status_l10n = None
        self._parent = None
        self._children = None
        self._root = None
        self._leafs = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if resource_action is not None:
            self.resource_action = resource_action
        if resource_type is not None:
            self.resource_type = resource_type
        if resource_id is not None:
            self.resource_id = resource_id
        if resource_name is not None:
            self.resource_name = resource_name
        if description_l10n is not None:
            self.description_l10n = description_l10n
        if state is not None:
            self.state = state
        if start_time is not None:
            self.start_time = start_time
        if phase is not None:
            self.phase = phase
        if end_time is not None:
            self.end_time = end_time
        if estimated_completion_time is not None:
            self.estimated_completion_time = estimated_completion_time
        if progress_percentage is not None:
            self.progress_percentage = progress_percentage
        if parent_id is not None:
            self.parent_id = parent_id
        if root_id is not None:
            self.root_id = root_id
        if user is not None:
            self.user = user
        if response_body is not None:
            self.response_body = response_body
        if response_status is not None:
            self.response_status = response_status
        if step_order is not None:
            self.step_order = step_order
        if resource_action_l10n is not None:
            self.resource_action_l10n = resource_action_l10n
        if resource_type_l10n is not None:
            self.resource_type_l10n = resource_type_l10n
        if state_l10n is not None:
            self.state_l10n = state_l10n
        if phase_l10n is not None:
            self.phase_l10n = phase_l10n
        if response_status_l10n is not None:
            self.response_status_l10n = response_status_l10n
        if parent is not None:
            self.parent = parent
        if children is not None:
            self.children = children
        if root is not None:
            self.root = root
        if leafs is not None:
            self.leafs = leafs

    @property
    def id(self):
        """Gets the id of this JobInstance.  # noqa: E501

        Unique identifier of the job.  # noqa: E501

        :return: The id of this JobInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JobInstance.

        Unique identifier of the job.  # noqa: E501

        :param id: The id of this JobInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def resource_action(self):
        """Gets the resource_action of this JobInstance.  # noqa: E501


        :return: The resource_action of this JobInstance.  # noqa: E501
        :rtype: ResourceActionEnum
        """
        return self._resource_action

    @resource_action.setter
    def resource_action(self, resource_action):
        """Sets the resource_action of this JobInstance.


        :param resource_action: The resource_action of this JobInstance.  # noqa: E501
        :type: ResourceActionEnum
        """

        self._resource_action = resource_action

    @property
    def resource_type(self):
        """Gets the resource_type of this JobInstance.  # noqa: E501


        :return: The resource_type of this JobInstance.  # noqa: E501
        :rtype: ResourceTypeEnum
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this JobInstance.


        :param resource_type: The resource_type of this JobInstance.  # noqa: E501
        :type: ResourceTypeEnum
        """

        self._resource_type = resource_type

    @property
    def resource_id(self):
        """Gets the resource_id of this JobInstance.  # noqa: E501

        Unique identifier of the resource on which the job is operating.  # noqa: E501

        :return: The resource_id of this JobInstance.  # noqa: E501
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this JobInstance.

        Unique identifier of the resource on which the job is operating.  # noqa: E501

        :param resource_id: The resource_id of this JobInstance.  # noqa: E501
        :type: str
        """

        self._resource_id = resource_id

    @property
    def resource_name(self):
        """Gets the resource_name of this JobInstance.  # noqa: E501

        Name of the resource on which the job is operating.  This property supports case-insensitive filtering.  # noqa: E501

        :return: The resource_name of this JobInstance.  # noqa: E501
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this JobInstance.

        Name of the resource on which the job is operating.  This property supports case-insensitive filtering.  # noqa: E501

        :param resource_name: The resource_name of this JobInstance.  # noqa: E501
        :type: str
        """

        self._resource_name = resource_name

    @property
    def description_l10n(self):
        """Gets the description_l10n of this JobInstance.  # noqa: E501

        Description of the job.  # noqa: E501

        :return: The description_l10n of this JobInstance.  # noqa: E501
        :rtype: str
        """
        return self._description_l10n

    @description_l10n.setter
    def description_l10n(self, description_l10n):
        """Sets the description_l10n of this JobInstance.

        Description of the job.  # noqa: E501

        :param description_l10n: The description_l10n of this JobInstance.  # noqa: E501
        :type: str
        """

        self._description_l10n = description_l10n

    @property
    def state(self):
        """Gets the state of this JobInstance.  # noqa: E501

         Was deprecated in version 1.0.2.  # noqa: E501

        :return: The state of this JobInstance.  # noqa: E501
        :rtype: JobStateEnum
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this JobInstance.

         Was deprecated in version 1.0.2.  # noqa: E501

        :param state: The state of this JobInstance.  # noqa: E501
        :type: JobStateEnum
        """

        self._state = state

    @property
    def start_time(self):
        """Gets the start_time of this JobInstance.  # noqa: E501

        Date and time when the job execution started.  # noqa: E501

        :return: The start_time of this JobInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this JobInstance.

        Date and time when the job execution started.  # noqa: E501

        :param start_time: The start_time of this JobInstance.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def phase(self):
        """Gets the phase of this JobInstance.  # noqa: E501

         Was added in version 1.0.2.  # noqa: E501

        :return: The phase of this JobInstance.  # noqa: E501
        :rtype: JobPhaseEnum
        """
        return self._phase

    @phase.setter
    def phase(self, phase):
        """Sets the phase of this JobInstance.

         Was added in version 1.0.2.  # noqa: E501

        :param phase: The phase of this JobInstance.  # noqa: E501
        :type: JobPhaseEnum
        """

        self._phase = phase

    @property
    def end_time(self):
        """Gets the end_time of this JobInstance.  # noqa: E501

        Date and time when the job execution completed.  # noqa: E501

        :return: The end_time of this JobInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this JobInstance.

        Date and time when the job execution completed.  # noqa: E501

        :param end_time: The end_time of this JobInstance.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def estimated_completion_time(self):
        """Gets the estimated_completion_time of this JobInstance.  # noqa: E501

        Estimated completion date and time.  # noqa: E501

        :return: The estimated_completion_time of this JobInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._estimated_completion_time

    @estimated_completion_time.setter
    def estimated_completion_time(self, estimated_completion_time):
        """Sets the estimated_completion_time of this JobInstance.

        Estimated completion date and time.  # noqa: E501

        :param estimated_completion_time: The estimated_completion_time of this JobInstance.  # noqa: E501
        :type: datetime
        """

        self._estimated_completion_time = estimated_completion_time

    @property
    def progress_percentage(self):
        """Gets the progress_percentage of this JobInstance.  # noqa: E501

        Percent complete of the job.  # noqa: E501

        :return: The progress_percentage of this JobInstance.  # noqa: E501
        :rtype: int
        """
        return self._progress_percentage

    @progress_percentage.setter
    def progress_percentage(self, progress_percentage):
        """Sets the progress_percentage of this JobInstance.

        Percent complete of the job.  # noqa: E501

        :param progress_percentage: The progress_percentage of this JobInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                progress_percentage is not None and progress_percentage > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `progress_percentage`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                progress_percentage is not None and progress_percentage < 0):  # noqa: E501
            raise ValueError("Invalid value for `progress_percentage`, must be a value greater than or equal to `0`")  # noqa: E501

        self._progress_percentage = progress_percentage

    @property
    def parent_id(self):
        """Gets the parent_id of this JobInstance.  # noqa: E501

        Unique identifier of the parent job, if applicable.  # noqa: E501

        :return: The parent_id of this JobInstance.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this JobInstance.

        Unique identifier of the parent job, if applicable.  # noqa: E501

        :param parent_id: The parent_id of this JobInstance.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    @property
    def root_id(self):
        """Gets the root_id of this JobInstance.  # noqa: E501

        Unique identifier of the root job, if applicable. The root job is the job at the top of the parent hierarchy.  # noqa: E501

        :return: The root_id of this JobInstance.  # noqa: E501
        :rtype: str
        """
        return self._root_id

    @root_id.setter
    def root_id(self, root_id):
        """Sets the root_id of this JobInstance.

        Unique identifier of the root job, if applicable. The root job is the job at the top of the parent hierarchy.  # noqa: E501

        :param root_id: The root_id of this JobInstance.  # noqa: E501
        :type: str
        """

        self._root_id = root_id

    @property
    def user(self):
        """Gets the user of this JobInstance.  # noqa: E501

        Name of the user associated with the job.  # noqa: E501

        :return: The user of this JobInstance.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this JobInstance.

        Name of the user associated with the job.  # noqa: E501

        :param user: The user of this JobInstance.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def response_body(self):
        """Gets the response_body of this JobInstance.  # noqa: E501


        :return: The response_body of this JobInstance.  # noqa: E501
        :rtype: BaseResponse
        """
        return self._response_body

    @response_body.setter
    def response_body(self, response_body):
        """Sets the response_body of this JobInstance.


        :param response_body: The response_body of this JobInstance.  # noqa: E501
        :type: BaseResponse
        """

        self._response_body = response_body

    @property
    def response_status(self):
        """Gets the response_status of this JobInstance.  # noqa: E501

         Was added in version 2.0.0.0.  # noqa: E501

        :return: The response_status of this JobInstance.  # noqa: E501
        :rtype: HttpStatusEnum
        """
        return self._response_status

    @response_status.setter
    def response_status(self, response_status):
        """Sets the response_status of this JobInstance.

         Was added in version 2.0.0.0.  # noqa: E501

        :param response_status: The response_status of this JobInstance.  # noqa: E501
        :type: HttpStatusEnum
        """

        self._response_status = response_status

    @property
    def step_order(self):
        """Gets the step_order of this JobInstance.  # noqa: E501

        Order of a given job step with respect to its siblings within the job hierarchy.  # noqa: E501

        :return: The step_order of this JobInstance.  # noqa: E501
        :rtype: int
        """
        return self._step_order

    @step_order.setter
    def step_order(self, step_order):
        """Sets the step_order of this JobInstance.

        Order of a given job step with respect to its siblings within the job hierarchy.  # noqa: E501

        :param step_order: The step_order of this JobInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                step_order is not None and step_order > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `step_order`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                step_order is not None and step_order < 0):  # noqa: E501
            raise ValueError("Invalid value for `step_order`, must be a value greater than or equal to `0`")  # noqa: E501

        self._step_order = step_order

    @property
    def resource_action_l10n(self):
        """Gets the resource_action_l10n of this JobInstance.  # noqa: E501

        Localized message string corresponding to resource_action  # noqa: E501

        :return: The resource_action_l10n of this JobInstance.  # noqa: E501
        :rtype: str
        """
        return self._resource_action_l10n

    @resource_action_l10n.setter
    def resource_action_l10n(self, resource_action_l10n):
        """Sets the resource_action_l10n of this JobInstance.

        Localized message string corresponding to resource_action  # noqa: E501

        :param resource_action_l10n: The resource_action_l10n of this JobInstance.  # noqa: E501
        :type: str
        """

        self._resource_action_l10n = resource_action_l10n

    @property
    def resource_type_l10n(self):
        """Gets the resource_type_l10n of this JobInstance.  # noqa: E501

        Localized message string corresponding to resource_type  # noqa: E501

        :return: The resource_type_l10n of this JobInstance.  # noqa: E501
        :rtype: str
        """
        return self._resource_type_l10n

    @resource_type_l10n.setter
    def resource_type_l10n(self, resource_type_l10n):
        """Sets the resource_type_l10n of this JobInstance.

        Localized message string corresponding to resource_type  # noqa: E501

        :param resource_type_l10n: The resource_type_l10n of this JobInstance.  # noqa: E501
        :type: str
        """

        self._resource_type_l10n = resource_type_l10n

    @property
    def state_l10n(self):
        """Gets the state_l10n of this JobInstance.  # noqa: E501

        Localized message string corresponding to state Was deprecated in version 1.0.2.  # noqa: E501

        :return: The state_l10n of this JobInstance.  # noqa: E501
        :rtype: str
        """
        return self._state_l10n

    @state_l10n.setter
    def state_l10n(self, state_l10n):
        """Sets the state_l10n of this JobInstance.

        Localized message string corresponding to state Was deprecated in version 1.0.2.  # noqa: E501

        :param state_l10n: The state_l10n of this JobInstance.  # noqa: E501
        :type: str
        """

        self._state_l10n = state_l10n

    @property
    def phase_l10n(self):
        """Gets the phase_l10n of this JobInstance.  # noqa: E501

        Localized message string corresponding to phase Was added in version 1.0.2.  # noqa: E501

        :return: The phase_l10n of this JobInstance.  # noqa: E501
        :rtype: str
        """
        return self._phase_l10n

    @phase_l10n.setter
    def phase_l10n(self, phase_l10n):
        """Sets the phase_l10n of this JobInstance.

        Localized message string corresponding to phase Was added in version 1.0.2.  # noqa: E501

        :param phase_l10n: The phase_l10n of this JobInstance.  # noqa: E501
        :type: str
        """

        self._phase_l10n = phase_l10n

    @property
    def response_status_l10n(self):
        """Gets the response_status_l10n of this JobInstance.  # noqa: E501

        Localized message string corresponding to response_status Was added in version 2.0.0.0.  # noqa: E501

        :return: The response_status_l10n of this JobInstance.  # noqa: E501
        :rtype: str
        """
        return self._response_status_l10n

    @response_status_l10n.setter
    def response_status_l10n(self, response_status_l10n):
        """Sets the response_status_l10n of this JobInstance.

        Localized message string corresponding to response_status Was added in version 2.0.0.0.  # noqa: E501

        :param response_status_l10n: The response_status_l10n of this JobInstance.  # noqa: E501
        :type: str
        """

        self._response_status_l10n = response_status_l10n

    @property
    def parent(self):
        """Gets the parent of this JobInstance.  # noqa: E501

        This is the embeddable reference form of parent_id attribute.  # noqa: E501

        :return: The parent of this JobInstance.  # noqa: E501
        :rtype: JobInstance
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this JobInstance.

        This is the embeddable reference form of parent_id attribute.  # noqa: E501

        :param parent: The parent of this JobInstance.  # noqa: E501
        :type: JobInstance
        """

        self._parent = parent

    @property
    def children(self):
        """Gets the children of this JobInstance.  # noqa: E501

        This is the inverse of the resource type job association.  # noqa: E501

        :return: The children of this JobInstance.  # noqa: E501
        :rtype: list[JobInstance]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this JobInstance.

        This is the inverse of the resource type job association.  # noqa: E501

        :param children: The children of this JobInstance.  # noqa: E501
        :type: list[JobInstance]
        """

        self._children = children

    @property
    def root(self):
        """Gets the root of this JobInstance.  # noqa: E501

        This is the embeddable reference form of root_id attribute.  # noqa: E501

        :return: The root of this JobInstance.  # noqa: E501
        :rtype: JobInstance
        """
        return self._root

    @root.setter
    def root(self, root):
        """Sets the root of this JobInstance.

        This is the embeddable reference form of root_id attribute.  # noqa: E501

        :param root: The root of this JobInstance.  # noqa: E501
        :type: JobInstance
        """

        self._root = root

    @property
    def leafs(self):
        """Gets the leafs of this JobInstance.  # noqa: E501

        This is the inverse of the resource type job association.  # noqa: E501

        :return: The leafs of this JobInstance.  # noqa: E501
        :rtype: list[JobInstance]
        """
        return self._leafs

    @leafs.setter
    def leafs(self, leafs):
        """Sets the leafs of this JobInstance.

        This is the inverse of the resource type job association.  # noqa: E501

        :param leafs: The leafs of this JobInstance.  # noqa: E501
        :type: list[JobInstance]
        """

        self._leafs = leafs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JobInstance):
            return True

        return self.to_dict() != other.to_dict()
