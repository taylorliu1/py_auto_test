# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class ResourceTypeEnum(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    ALERT = "alert"
    APPLIANCE = "appliance"
    AUDIT_EVENT = "audit_event"
    BOND = "bond"
    CHAP_CONFIG = "chap_config"
    CLUSTER = "cluster"
    CMA_LOGOUT = "cma_logout"
    CMA_USER_PREFERENCE = "cma_user_preference"
    DATASTORE = "datastore"
    DATASTORE_VOLUME_ASSOCIATION = "datastore_volume_association"
    DATASTORE_VSPHERE_HOST_ASSOCIATION = "datastore_vsphere_host_association"
    DISCOVERED_APPLIANCE = "discovered_appliance"
    DISCOVERED_INITIATOR = "discovered_initiator"
    DNS = "dns"
    EMAIL_NOTIFY_DESTINATION = "email_notify_destination"
    ETH_BE_PORT = "eth_be_port"
    ETH_PORT = "eth_port"
    EVENT = "event"
    FAST_METRICS_CONFIG = "fast_metrics_config"
    FC_PORT = "fc_port"
    FILE_DHSM_CONFIG = "file_dhsm_config"
    FILE_DNS = "file_dns"
    FILE_EVENTS_POOL = "file_events_pool"
    FILE_EVENTS_PUBLISHER = "file_events_publisher"
    FILE_EVENTS_PUBLISHER_FILE_EVENTS_POOL_ASSOCIATION = "file_events_publisher_file_events_pool_association"
    FILE_FTP = "file_ftp"
    FILE_IMPORT_INTERFACE = "file_import_interface"
    FILE_IMPORT_NAS_SERVER = "file_import_nas_server"
    FILE_IMPORT_PRODUCTION_INTERFACE = "file_import_production_interface"
    FILE_IMPORT_SESSION = "file_import_session"
    FILE_IMPORT_VNX_ARRAY = "file_import_vnx_array"
    FILE_INTERFACE = "file_interface"
    FILE_INTERFACE_ROUTE = "file_interface_route"
    FILE_KERBEROS = "file_kerberos"
    FILE_LDAP = "file_ldap"
    FILE_NDMP = "file_ndmp"
    FILE_NIS = "file_nis"
    FILE_SYSTEM = "file_system"
    FILE_TREE_QUOTA = "file_tree_quota"
    FILE_USER_QUOTA = "file_user_quota"
    FILE_VIRUS_CHECKER = "file_virus_checker"
    FSN = "fsn"
    HARDWARE = "hardware"
    HOST = "host"
    HOST_GROUP = "host_group"
    HOST_VIRTUAL_VOLUME_MAPPING = "host_virtual_volume_mapping"
    HOST_VOLUME_MAPPING = "host_volume_mapping"
    HOST_VSPHERE_HOST_ASSOCIATION = "host_vsphere_host_association"
    IMPORT_HOST_INITIATOR = "import_host_initiator"
    IMPORT_HOST_SYSTEM = "import_host_system"
    IMPORT_HOST_VOLUME = "import_host_volume"
    IMPORT_NETAPP = "import_netapp"
    IMPORT_NETAPP_VOLUME = "import_netapp_volume"
    IMPORT_PSGROUP = "import_psgroup"
    IMPORT_PSGROUP_VOLUME = "import_psgroup_volume"
    IMPORT_SESSION = "import_session"
    IMPORT_STORAGE_CENTER = "import_storage_center"
    IMPORT_STORAGE_CENTER_CONSISTENCY_GROUP = "import_storage_center_consistency_group"
    IMPORT_STORAGE_CENTER_VOLUME = "import_storage_center_volume"
    IMPORT_UNITY = "import_unity"
    IMPORT_UNITY_CONSISTENCY_GROUP = "import_unity_consistency_group"
    IMPORT_UNITY_VOLUME = "import_unity_volume"
    IMPORT_VMAX = "import_vmax"
    IMPORT_VMAX_STORAGE_GROUP = "import_vmax_storage_group"
    IMPORT_VMAX_VOLUME = "import_vmax_volume"
    IMPORT_VNX_ARRAY = "import_vnx_array"
    IMPORT_VNX_CONSISTENCY_GROUP = "import_vnx_consistency_group"
    IMPORT_VNX_VOLUME = "import_vnx_volume"
    INITIATOR = "initiator"
    IP_POOL_ADDRESS = "ip_pool_address"
    IP_PORT = "ip_port"
    JOB = "job"
    KEYSTORE_ARCHIVE = "keystore_archive"
    KMIP_CONFIG = "kmip_config"
    LATEST_FIVE_MIN_METRICS = "latest_five_min_metrics"
    LAUNCHABLE_APPLICATION = "launchable_application"
    LDAP_ACCOUNT = "ldap_account"
    LDAP_DOMAIN = "ldap_domain"
    LICENSE = "license"
    LIMIT = "limit"
    LOCAL_USER = "local_user"
    LOGIN_BANNER = "login_banner"
    LOGIN_SESSION = "login_session"
    MAINTENANCE_WINDOW = "maintenance_window"
    METRICS = "metrics"
    METRICS_ARCHIVE = "metrics_archive"
    METRO_SESSION = "metro_session"
    MIGRATION_RECOMMENDATION = "migration_recommendation"
    MIGRATION_SESSION = "migration_session"
    NAS_CLUSTER_INFO = "nas_cluster_info"
    NAS_CONFIGURATION = "nas_configuration"
    NAS_SERVER = "nas_server"
    NAS_SERVER_FILE_EVENTS_PUBLISHER_ASSOCIATION = "nas_server_file_events_publisher_association"
    NAS_VOLUME = "nas_volume"
    NDU = "ndu"
    NETWORK = "network"
    NFS_EXPORT = "nfs_export"
    NFS_SERVER = "nfs_server"
    NODE = "node"
    NTP = "ntp"
    NVME_DISCOVERED_CDC = "nvme_discovered_cdc"
    PERFORMANCE_RULE = "performance_rule"
    PHYSICAL_SWITCH = "physical_switch"
    POLICY = "policy"
    PROTECTABLE_RESOURCE = "protectable_resource"
    RECYCLE_BIN = "recycle_bin"
    REMOTE_SYSLOG_SERVER = "remote_syslog_server"
    REMOTE_SYSTEM = "remote_system"
    REPLICATION_RULE = "replication_rule"
    REPLICATION_SESSION = "replication_session"
    ROLE = "role"
    SAS_PORT = "sas_port"
    SCHEDULER = "scheduler"
    SECURITY_CONFIG = "security_config"
    SERVICE_CONFIG = "service_config"
    SERVICE_USER = "service_user"
    SMB_SERVER = "smb_server"
    SMB_SHARE = "smb_share"
    SMTP_CONFIG = "smtp_config"
    SNAPSHOT_RULE = "snapshot_rule"
    SOFTWARE_INSTALLED = "software_installed"
    SOFTWARE_PACKAGE = "software_package"
    STORAGE_CONTAINER = "storage_container"
    STORAGE_CONTAINER_DESTINATION = "storage_container_destination"
    SYSTEM_HEALTH_CHECK = "system_health_check"
    VCENTER = "vcenter"
    VETH_PORT = "veth_port"
    VIRTUAL_MACHINE = "virtual_machine"
    VIRTUAL_MACHINE_DATASTORE_ASSOCIATION = "virtual_machine_datastore_association"
    VIRTUAL_MACHINE_VIRTUAL_VOLUME_ASSOCIATION = "virtual_machine_virtual_volume_association"
    VIRTUAL_MACHINE_VSPHERE_HOST_ASSOCIATION = "virtual_machine_vsphere_host_association"
    VIRTUAL_VOLUME = "virtual_volume"
    VIRTUAL_VOLUME_METADATA = "virtual_volume_metadata"
    VOLUME = "volume"
    VOLUME_GROUP = "volume_group"
    VSPHERE_HOST = "vsphere_host"
    VSPHERE_HOST_LICENSE_ASSIGNMENT = "vsphere_host_license_assignment"
    X509_CERTIFICATE = "x509_certificate"

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self, _configuration=None):  # noqa: E501
        """ResourceTypeEnum - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResourceTypeEnum, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourceTypeEnum):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResourceTypeEnum):
            return True

        return self.to_dict() != other.to_dict()
