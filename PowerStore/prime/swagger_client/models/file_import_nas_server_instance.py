# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class FileImportNasServerInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'protocol_type': 'FileImportNasServerProtocolTypeEnum',
        'importable_criteria': 'FileImportNasServerImportableCriteriaEnum',
        'remote_system_id': 'str',
        'smb_server': 'FileImportSmbConfiguration',
        'file_systems': 'FileImportSourceFilesystem',
        'file_interfaces': 'FileImportSourceNetworkInterface',
        'non_importable_reasons': 'str',
        'protocol_type_l10n': 'str',
        'importable_criteria_l10n': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'protocol_type': 'protocol_type',
        'importable_criteria': 'importable_criteria',
        'remote_system_id': 'remote_system_id',
        'smb_server': 'smb_server',
        'file_systems': 'file_systems',
        'file_interfaces': 'file_interfaces',
        'non_importable_reasons': 'non_importable_reasons',
        'protocol_type_l10n': 'protocol_type_l10n',
        'importable_criteria_l10n': 'importable_criteria_l10n'
    }

    def __init__(self, id=None, name=None, protocol_type=None, importable_criteria=None, remote_system_id=None, smb_server=None, file_systems=None, file_interfaces=None, non_importable_reasons=None, protocol_type_l10n=None, importable_criteria_l10n=None, _configuration=None):  # noqa: E501
        """FileImportNasServerInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._protocol_type = None
        self._importable_criteria = None
        self._remote_system_id = None
        self._smb_server = None
        self._file_systems = None
        self._file_interfaces = None
        self._non_importable_reasons = None
        self._protocol_type_l10n = None
        self._importable_criteria_l10n = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if protocol_type is not None:
            self.protocol_type = protocol_type
        if importable_criteria is not None:
            self.importable_criteria = importable_criteria
        if remote_system_id is not None:
            self.remote_system_id = remote_system_id
        if smb_server is not None:
            self.smb_server = smb_server
        if file_systems is not None:
            self.file_systems = file_systems
        if file_interfaces is not None:
            self.file_interfaces = file_interfaces
        if non_importable_reasons is not None:
            self.non_importable_reasons = non_importable_reasons
        if protocol_type_l10n is not None:
            self.protocol_type_l10n = protocol_type_l10n
        if importable_criteria_l10n is not None:
            self.importable_criteria_l10n = importable_criteria_l10n

    @property
    def id(self):
        """Gets the id of this FileImportNasServerInstance.  # noqa: E501

        Unique identifier of the NAS Server for the file import connection.  # noqa: E501

        :return: The id of this FileImportNasServerInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FileImportNasServerInstance.

        Unique identifier of the NAS Server for the file import connection.  # noqa: E501

        :param id: The id of this FileImportNasServerInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this FileImportNasServerInstance.  # noqa: E501

        Name of the NAS Server for the file import connection.  This property supports case-insensitive filtering.  # noqa: E501

        :return: The name of this FileImportNasServerInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FileImportNasServerInstance.

        Name of the NAS Server for the file import connection.  This property supports case-insensitive filtering.  # noqa: E501

        :param name: The name of this FileImportNasServerInstance.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def protocol_type(self):
        """Gets the protocol_type of this FileImportNasServerInstance.  # noqa: E501


        :return: The protocol_type of this FileImportNasServerInstance.  # noqa: E501
        :rtype: FileImportNasServerProtocolTypeEnum
        """
        return self._protocol_type

    @protocol_type.setter
    def protocol_type(self, protocol_type):
        """Sets the protocol_type of this FileImportNasServerInstance.


        :param protocol_type: The protocol_type of this FileImportNasServerInstance.  # noqa: E501
        :type: FileImportNasServerProtocolTypeEnum
        """

        self._protocol_type = protocol_type

    @property
    def importable_criteria(self):
        """Gets the importable_criteria of this FileImportNasServerInstance.  # noqa: E501


        :return: The importable_criteria of this FileImportNasServerInstance.  # noqa: E501
        :rtype: FileImportNasServerImportableCriteriaEnum
        """
        return self._importable_criteria

    @importable_criteria.setter
    def importable_criteria(self, importable_criteria):
        """Sets the importable_criteria of this FileImportNasServerInstance.


        :param importable_criteria: The importable_criteria of this FileImportNasServerInstance.  # noqa: E501
        :type: FileImportNasServerImportableCriteriaEnum
        """

        self._importable_criteria = importable_criteria

    @property
    def remote_system_id(self):
        """Gets the remote_system_id of this FileImportNasServerInstance.  # noqa: E501

        Unique identifier of the remote system where the NAS Server exists.  # noqa: E501

        :return: The remote_system_id of this FileImportNasServerInstance.  # noqa: E501
        :rtype: str
        """
        return self._remote_system_id

    @remote_system_id.setter
    def remote_system_id(self, remote_system_id):
        """Sets the remote_system_id of this FileImportNasServerInstance.

        Unique identifier of the remote system where the NAS Server exists.  # noqa: E501

        :param remote_system_id: The remote_system_id of this FileImportNasServerInstance.  # noqa: E501
        :type: str
        """

        self._remote_system_id = remote_system_id

    @property
    def smb_server(self):
        """Gets the smb_server of this FileImportNasServerInstance.  # noqa: E501


        :return: The smb_server of this FileImportNasServerInstance.  # noqa: E501
        :rtype: FileImportSmbConfiguration
        """
        return self._smb_server

    @smb_server.setter
    def smb_server(self, smb_server):
        """Sets the smb_server of this FileImportNasServerInstance.


        :param smb_server: The smb_server of this FileImportNasServerInstance.  # noqa: E501
        :type: FileImportSmbConfiguration
        """

        self._smb_server = smb_server

    @property
    def file_systems(self):
        """Gets the file_systems of this FileImportNasServerInstance.  # noqa: E501


        :return: The file_systems of this FileImportNasServerInstance.  # noqa: E501
        :rtype: FileImportSourceFilesystem
        """
        return self._file_systems

    @file_systems.setter
    def file_systems(self, file_systems):
        """Sets the file_systems of this FileImportNasServerInstance.


        :param file_systems: The file_systems of this FileImportNasServerInstance.  # noqa: E501
        :type: FileImportSourceFilesystem
        """

        self._file_systems = file_systems

    @property
    def file_interfaces(self):
        """Gets the file_interfaces of this FileImportNasServerInstance.  # noqa: E501


        :return: The file_interfaces of this FileImportNasServerInstance.  # noqa: E501
        :rtype: FileImportSourceNetworkInterface
        """
        return self._file_interfaces

    @file_interfaces.setter
    def file_interfaces(self, file_interfaces):
        """Sets the file_interfaces of this FileImportNasServerInstance.


        :param file_interfaces: The file_interfaces of this FileImportNasServerInstance.  # noqa: E501
        :type: FileImportSourceNetworkInterface
        """

        self._file_interfaces = file_interfaces

    @property
    def non_importable_reasons(self):
        """Gets the non_importable_reasons of this FileImportNasServerInstance.  # noqa: E501

        Non importable reason of the source NAS Server.  # noqa: E501

        :return: The non_importable_reasons of this FileImportNasServerInstance.  # noqa: E501
        :rtype: str
        """
        return self._non_importable_reasons

    @non_importable_reasons.setter
    def non_importable_reasons(self, non_importable_reasons):
        """Sets the non_importable_reasons of this FileImportNasServerInstance.

        Non importable reason of the source NAS Server.  # noqa: E501

        :param non_importable_reasons: The non_importable_reasons of this FileImportNasServerInstance.  # noqa: E501
        :type: str
        """

        self._non_importable_reasons = non_importable_reasons

    @property
    def protocol_type_l10n(self):
        """Gets the protocol_type_l10n of this FileImportNasServerInstance.  # noqa: E501

        Localized message string corresponding to protocol_type Was added in version 3.0.0.0.  # noqa: E501

        :return: The protocol_type_l10n of this FileImportNasServerInstance.  # noqa: E501
        :rtype: str
        """
        return self._protocol_type_l10n

    @protocol_type_l10n.setter
    def protocol_type_l10n(self, protocol_type_l10n):
        """Sets the protocol_type_l10n of this FileImportNasServerInstance.

        Localized message string corresponding to protocol_type Was added in version 3.0.0.0.  # noqa: E501

        :param protocol_type_l10n: The protocol_type_l10n of this FileImportNasServerInstance.  # noqa: E501
        :type: str
        """

        self._protocol_type_l10n = protocol_type_l10n

    @property
    def importable_criteria_l10n(self):
        """Gets the importable_criteria_l10n of this FileImportNasServerInstance.  # noqa: E501

        Localized message string corresponding to importable_criteria Was added in version 3.0.0.0.  # noqa: E501

        :return: The importable_criteria_l10n of this FileImportNasServerInstance.  # noqa: E501
        :rtype: str
        """
        return self._importable_criteria_l10n

    @importable_criteria_l10n.setter
    def importable_criteria_l10n(self, importable_criteria_l10n):
        """Sets the importable_criteria_l10n of this FileImportNasServerInstance.

        Localized message string corresponding to importable_criteria Was added in version 3.0.0.0.  # noqa: E501

        :param importable_criteria_l10n: The importable_criteria_l10n of this FileImportNasServerInstance.  # noqa: E501
        :type: str
        """

        self._importable_criteria_l10n = importable_criteria_l10n

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileImportNasServerInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileImportNasServerInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FileImportNasServerInstance):
            return True

        return self.to_dict() != other.to_dict()
