# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class ImportNetappCronScheduleInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hours': 'list[int]',
        'minutes': 'list[int]',
        'weekdays': 'list[int]',
        'months': 'list[int]',
        'days': 'list[int]'
    }

    attribute_map = {
        'hours': 'hours',
        'minutes': 'minutes',
        'weekdays': 'weekdays',
        'months': 'months',
        'days': 'days'
    }

    def __init__(self, hours=None, minutes=None, weekdays=None, months=None, days=None, _configuration=None):  # noqa: E501
        """ImportNetappCronScheduleInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._hours = None
        self._minutes = None
        self._weekdays = None
        self._months = None
        self._days = None
        self.discriminator = None

        if hours is not None:
            self.hours = hours
        if minutes is not None:
            self.minutes = minutes
        if weekdays is not None:
            self.weekdays = weekdays
        if months is not None:
            self.months = months
        if days is not None:
            self.days = days

    @property
    def hours(self):
        """Gets the hours of this ImportNetappCronScheduleInstance.  # noqa: E501

        The hours of the day the schedule runs. This is empty for all.  # noqa: E501

        :return: The hours of this ImportNetappCronScheduleInstance.  # noqa: E501
        :rtype: list[int]
        """
        return self._hours

    @hours.setter
    def hours(self, hours):
        """Sets the hours of this ImportNetappCronScheduleInstance.

        The hours of the day the schedule runs. This is empty for all.  # noqa: E501

        :param hours: The hours of this ImportNetappCronScheduleInstance.  # noqa: E501
        :type: list[int]
        """

        self._hours = hours

    @property
    def minutes(self):
        """Gets the minutes of this ImportNetappCronScheduleInstance.  # noqa: E501

        The minutes the schedule runs.  # noqa: E501

        :return: The minutes of this ImportNetappCronScheduleInstance.  # noqa: E501
        :rtype: list[int]
        """
        return self._minutes

    @minutes.setter
    def minutes(self, minutes):
        """Sets the minutes of this ImportNetappCronScheduleInstance.

        The minutes the schedule runs.  # noqa: E501

        :param minutes: The minutes of this ImportNetappCronScheduleInstance.  # noqa: E501
        :type: list[int]
        """

        self._minutes = minutes

    @property
    def weekdays(self):
        """Gets the weekdays of this ImportNetappCronScheduleInstance.  # noqa: E501

        The weekdays the schedule runs. This is empty for all.  # noqa: E501

        :return: The weekdays of this ImportNetappCronScheduleInstance.  # noqa: E501
        :rtype: list[int]
        """
        return self._weekdays

    @weekdays.setter
    def weekdays(self, weekdays):
        """Sets the weekdays of this ImportNetappCronScheduleInstance.

        The weekdays the schedule runs. This is empty for all.  # noqa: E501

        :param weekdays: The weekdays of this ImportNetappCronScheduleInstance.  # noqa: E501
        :type: list[int]
        """

        self._weekdays = weekdays

    @property
    def months(self):
        """Gets the months of this ImportNetappCronScheduleInstance.  # noqa: E501

        The months of the year the schedule runs. This is empty for all.  # noqa: E501

        :return: The months of this ImportNetappCronScheduleInstance.  # noqa: E501
        :rtype: list[int]
        """
        return self._months

    @months.setter
    def months(self, months):
        """Sets the months of this ImportNetappCronScheduleInstance.

        The months of the year the schedule runs. This is empty for all.  # noqa: E501

        :param months: The months of this ImportNetappCronScheduleInstance.  # noqa: E501
        :type: list[int]
        """

        self._months = months

    @property
    def days(self):
        """Gets the days of this ImportNetappCronScheduleInstance.  # noqa: E501

        The days of the month the schedule runs. This is empty for all.  # noqa: E501

        :return: The days of this ImportNetappCronScheduleInstance.  # noqa: E501
        :rtype: list[int]
        """
        return self._days

    @days.setter
    def days(self, days):
        """Sets the days of this ImportNetappCronScheduleInstance.

        The days of the month the schedule runs. This is empty for all.  # noqa: E501

        :param days: The days of this ImportNetappCronScheduleInstance.  # noqa: E501
        :type: list[int]
        """

        self._days = days

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImportNetappCronScheduleInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportNetappCronScheduleInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImportNetappCronScheduleInstance):
            return True

        return self.to_dict() != other.to_dict()
