# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class ChapCredentialsInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'target_session_username': 'str',
        'target_session_password': 'str',
        'target_discovery_username': 'str',
        'target_discovery_password': 'str',
        'initiator_session_username': 'str',
        'initiator_session_password': 'str',
        'initiator_discovery_username': 'str',
        'initiator_discovery_password': 'str'
    }

    attribute_map = {
        'target_session_username': 'target_session_username',
        'target_session_password': 'target_session_password',
        'target_discovery_username': 'target_discovery_username',
        'target_discovery_password': 'target_discovery_password',
        'initiator_session_username': 'initiator_session_username',
        'initiator_session_password': 'initiator_session_password',
        'initiator_discovery_username': 'initiator_discovery_username',
        'initiator_discovery_password': 'initiator_discovery_password'
    }

    def __init__(self, target_session_username=None, target_session_password=None, target_discovery_username=None, target_discovery_password=None, initiator_session_username=None, initiator_session_password=None, initiator_discovery_username=None, initiator_discovery_password=None, _configuration=None):  # noqa: E501
        """ChapCredentialsInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._target_session_username = None
        self._target_session_password = None
        self._target_discovery_username = None
        self._target_discovery_password = None
        self._initiator_session_username = None
        self._initiator_session_password = None
        self._initiator_discovery_username = None
        self._initiator_discovery_password = None
        self.discriminator = None

        if target_session_username is not None:
            self.target_session_username = target_session_username
        if target_session_password is not None:
            self.target_session_password = target_session_password
        if target_discovery_username is not None:
            self.target_discovery_username = target_discovery_username
        if target_discovery_password is not None:
            self.target_discovery_password = target_discovery_password
        if initiator_session_username is not None:
            self.initiator_session_username = initiator_session_username
        if initiator_session_password is not None:
            self.initiator_session_password = initiator_session_password
        if initiator_discovery_username is not None:
            self.initiator_discovery_username = initiator_discovery_username
        if initiator_discovery_password is not None:
            self.initiator_discovery_password = initiator_discovery_password

    @property
    def target_session_username(self):
        """Gets the target_session_username of this ChapCredentialsInstance.  # noqa: E501

        Username used by the target to authenticate the initiator during session authentication. Single CHAP mode only.   # noqa: E501

        :return: The target_session_username of this ChapCredentialsInstance.  # noqa: E501
        :rtype: str
        """
        return self._target_session_username

    @target_session_username.setter
    def target_session_username(self, target_session_username):
        """Sets the target_session_username of this ChapCredentialsInstance.

        Username used by the target to authenticate the initiator during session authentication. Single CHAP mode only.   # noqa: E501

        :param target_session_username: The target_session_username of this ChapCredentialsInstance.  # noqa: E501
        :type: str
        """

        self._target_session_username = target_session_username

    @property
    def target_session_password(self):
        """Gets the target_session_password of this ChapCredentialsInstance.  # noqa: E501

        Password used by the target to authenticate the initiator during session authentication. Single CHAP mode only.   # noqa: E501

        :return: The target_session_password of this ChapCredentialsInstance.  # noqa: E501
        :rtype: str
        """
        return self._target_session_password

    @target_session_password.setter
    def target_session_password(self, target_session_password):
        """Sets the target_session_password of this ChapCredentialsInstance.

        Password used by the target to authenticate the initiator during session authentication. Single CHAP mode only.   # noqa: E501

        :param target_session_password: The target_session_password of this ChapCredentialsInstance.  # noqa: E501
        :type: str
        """

        self._target_session_password = target_session_password

    @property
    def target_discovery_username(self):
        """Gets the target_discovery_username of this ChapCredentialsInstance.  # noqa: E501

        Username used by the target to authenticate the initiator during discovery authentication. Single CHAP mode only.   # noqa: E501

        :return: The target_discovery_username of this ChapCredentialsInstance.  # noqa: E501
        :rtype: str
        """
        return self._target_discovery_username

    @target_discovery_username.setter
    def target_discovery_username(self, target_discovery_username):
        """Sets the target_discovery_username of this ChapCredentialsInstance.

        Username used by the target to authenticate the initiator during discovery authentication. Single CHAP mode only.   # noqa: E501

        :param target_discovery_username: The target_discovery_username of this ChapCredentialsInstance.  # noqa: E501
        :type: str
        """

        self._target_discovery_username = target_discovery_username

    @property
    def target_discovery_password(self):
        """Gets the target_discovery_password of this ChapCredentialsInstance.  # noqa: E501

        Password used by the target to authenticate the initiator during discovery authentication. Single CHAP mode only.   # noqa: E501

        :return: The target_discovery_password of this ChapCredentialsInstance.  # noqa: E501
        :rtype: str
        """
        return self._target_discovery_password

    @target_discovery_password.setter
    def target_discovery_password(self, target_discovery_password):
        """Sets the target_discovery_password of this ChapCredentialsInstance.

        Password used by the target to authenticate the initiator during discovery authentication. Single CHAP mode only.   # noqa: E501

        :param target_discovery_password: The target_discovery_password of this ChapCredentialsInstance.  # noqa: E501
        :type: str
        """

        self._target_discovery_password = target_discovery_password

    @property
    def initiator_session_username(self):
        """Gets the initiator_session_username of this ChapCredentialsInstance.  # noqa: E501

        Username used by the initiator to authenticate the target during session authentication. Mutual CHAP mode only.   # noqa: E501

        :return: The initiator_session_username of this ChapCredentialsInstance.  # noqa: E501
        :rtype: str
        """
        return self._initiator_session_username

    @initiator_session_username.setter
    def initiator_session_username(self, initiator_session_username):
        """Sets the initiator_session_username of this ChapCredentialsInstance.

        Username used by the initiator to authenticate the target during session authentication. Mutual CHAP mode only.   # noqa: E501

        :param initiator_session_username: The initiator_session_username of this ChapCredentialsInstance.  # noqa: E501
        :type: str
        """

        self._initiator_session_username = initiator_session_username

    @property
    def initiator_session_password(self):
        """Gets the initiator_session_password of this ChapCredentialsInstance.  # noqa: E501

        Password used by the initiator to authenticate the target during session authentication. Mutual CHAP mode only.   # noqa: E501

        :return: The initiator_session_password of this ChapCredentialsInstance.  # noqa: E501
        :rtype: str
        """
        return self._initiator_session_password

    @initiator_session_password.setter
    def initiator_session_password(self, initiator_session_password):
        """Sets the initiator_session_password of this ChapCredentialsInstance.

        Password used by the initiator to authenticate the target during session authentication. Mutual CHAP mode only.   # noqa: E501

        :param initiator_session_password: The initiator_session_password of this ChapCredentialsInstance.  # noqa: E501
        :type: str
        """

        self._initiator_session_password = initiator_session_password

    @property
    def initiator_discovery_username(self):
        """Gets the initiator_discovery_username of this ChapCredentialsInstance.  # noqa: E501

        Username used by the initiator to authenticate the target during discovery authentication. Mutual CHAP mode only.   # noqa: E501

        :return: The initiator_discovery_username of this ChapCredentialsInstance.  # noqa: E501
        :rtype: str
        """
        return self._initiator_discovery_username

    @initiator_discovery_username.setter
    def initiator_discovery_username(self, initiator_discovery_username):
        """Sets the initiator_discovery_username of this ChapCredentialsInstance.

        Username used by the initiator to authenticate the target during discovery authentication. Mutual CHAP mode only.   # noqa: E501

        :param initiator_discovery_username: The initiator_discovery_username of this ChapCredentialsInstance.  # noqa: E501
        :type: str
        """

        self._initiator_discovery_username = initiator_discovery_username

    @property
    def initiator_discovery_password(self):
        """Gets the initiator_discovery_password of this ChapCredentialsInstance.  # noqa: E501

        Password used by the initiator to authenticate the target during discovery authentication. Mutual CHAP mode only.   # noqa: E501

        :return: The initiator_discovery_password of this ChapCredentialsInstance.  # noqa: E501
        :rtype: str
        """
        return self._initiator_discovery_password

    @initiator_discovery_password.setter
    def initiator_discovery_password(self, initiator_discovery_password):
        """Sets the initiator_discovery_password of this ChapCredentialsInstance.

        Password used by the initiator to authenticate the target during discovery authentication. Mutual CHAP mode only.   # noqa: E501

        :param initiator_discovery_password: The initiator_discovery_password of this ChapCredentialsInstance.  # noqa: E501
        :type: str
        """

        self._initiator_discovery_password = initiator_discovery_password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChapCredentialsInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChapCredentialsInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ChapCredentialsInstance):
            return True

        return self.to_dict() != other.to_dict()
