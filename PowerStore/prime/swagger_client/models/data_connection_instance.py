# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class DataConnectionInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'node_id': 'str',
        'initiator_address': 'str',
        'target_address': 'str',
        'status': 'TransitConnectionStatusEnum',
        'data_connection_type': 'DataConnectionTypeEnum',
        'status_l10n': 'str',
        'data_connection_type_l10n': 'str'
    }

    attribute_map = {
        'node_id': 'node_id',
        'initiator_address': 'initiator_address',
        'target_address': 'target_address',
        'status': 'status',
        'data_connection_type': 'data_connection_type',
        'status_l10n': 'status_l10n',
        'data_connection_type_l10n': 'data_connection_type_l10n'
    }

    def __init__(self, node_id=None, initiator_address=None, target_address=None, status=None, data_connection_type=None, status_l10n=None, data_connection_type_l10n=None, _configuration=None):  # noqa: E501
        """DataConnectionInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._node_id = None
        self._initiator_address = None
        self._target_address = None
        self._status = None
        self._data_connection_type = None
        self._status_l10n = None
        self._data_connection_type_l10n = None
        self.discriminator = None

        if node_id is not None:
            self.node_id = node_id
        if initiator_address is not None:
            self.initiator_address = initiator_address
        if target_address is not None:
            self.target_address = target_address
        if status is not None:
            self.status = status
        if data_connection_type is not None:
            self.data_connection_type = data_connection_type
        if status_l10n is not None:
            self.status_l10n = status_l10n
        if data_connection_type_l10n is not None:
            self.data_connection_type_l10n = data_connection_type_l10n

    @property
    def node_id(self):
        """Gets the node_id of this DataConnectionInstance.  # noqa: E501

        Unique identifier of the local, initiating node.   # noqa: E501

        :return: The node_id of this DataConnectionInstance.  # noqa: E501
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this DataConnectionInstance.

        Unique identifier of the local, initiating node.   # noqa: E501

        :param node_id: The node_id of this DataConnectionInstance.  # noqa: E501
        :type: str
        """

        self._node_id = node_id

    @property
    def initiator_address(self):
        """Gets the initiator_address of this DataConnectionInstance.  # noqa: E501

        Initiating address from the local node. IP for ISCSI and TCP data connection type. WWN for FC data connection type.   # noqa: E501

        :return: The initiator_address of this DataConnectionInstance.  # noqa: E501
        :rtype: str
        """
        return self._initiator_address

    @initiator_address.setter
    def initiator_address(self, initiator_address):
        """Sets the initiator_address of this DataConnectionInstance.

        Initiating address from the local node. IP for ISCSI and TCP data connection type. WWN for FC data connection type.   # noqa: E501

        :param initiator_address: The initiator_address of this DataConnectionInstance.  # noqa: E501
        :type: str
        """

        self._initiator_address = initiator_address

    @property
    def target_address(self):
        """Gets the target_address of this DataConnectionInstance.  # noqa: E501

        Target address from the remote system. IP for ISCSI and TCP data connection type. WWN for FC data connection type.   # noqa: E501

        :return: The target_address of this DataConnectionInstance.  # noqa: E501
        :rtype: str
        """
        return self._target_address

    @target_address.setter
    def target_address(self, target_address):
        """Sets the target_address of this DataConnectionInstance.

        Target address from the remote system. IP for ISCSI and TCP data connection type. WWN for FC data connection type.   # noqa: E501

        :param target_address: The target_address of this DataConnectionInstance.  # noqa: E501
        :type: str
        """

        self._target_address = target_address

    @property
    def status(self):
        """Gets the status of this DataConnectionInstance.  # noqa: E501


        :return: The status of this DataConnectionInstance.  # noqa: E501
        :rtype: TransitConnectionStatusEnum
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DataConnectionInstance.


        :param status: The status of this DataConnectionInstance.  # noqa: E501
        :type: TransitConnectionStatusEnum
        """

        self._status = status

    @property
    def data_connection_type(self):
        """Gets the data_connection_type of this DataConnectionInstance.  # noqa: E501

         Was added in version 3.0.0.0.  # noqa: E501

        :return: The data_connection_type of this DataConnectionInstance.  # noqa: E501
        :rtype: DataConnectionTypeEnum
        """
        return self._data_connection_type

    @data_connection_type.setter
    def data_connection_type(self, data_connection_type):
        """Sets the data_connection_type of this DataConnectionInstance.

         Was added in version 3.0.0.0.  # noqa: E501

        :param data_connection_type: The data_connection_type of this DataConnectionInstance.  # noqa: E501
        :type: DataConnectionTypeEnum
        """

        self._data_connection_type = data_connection_type

    @property
    def status_l10n(self):
        """Gets the status_l10n of this DataConnectionInstance.  # noqa: E501

        Localized message string corresponding to status  # noqa: E501

        :return: The status_l10n of this DataConnectionInstance.  # noqa: E501
        :rtype: str
        """
        return self._status_l10n

    @status_l10n.setter
    def status_l10n(self, status_l10n):
        """Sets the status_l10n of this DataConnectionInstance.

        Localized message string corresponding to status  # noqa: E501

        :param status_l10n: The status_l10n of this DataConnectionInstance.  # noqa: E501
        :type: str
        """

        self._status_l10n = status_l10n

    @property
    def data_connection_type_l10n(self):
        """Gets the data_connection_type_l10n of this DataConnectionInstance.  # noqa: E501

        Localized message string corresponding to data_connection_type Was added in version 3.0.0.0.  # noqa: E501

        :return: The data_connection_type_l10n of this DataConnectionInstance.  # noqa: E501
        :rtype: str
        """
        return self._data_connection_type_l10n

    @data_connection_type_l10n.setter
    def data_connection_type_l10n(self, data_connection_type_l10n):
        """Sets the data_connection_type_l10n of this DataConnectionInstance.

        Localized message string corresponding to data_connection_type Was added in version 3.0.0.0.  # noqa: E501

        :param data_connection_type_l10n: The data_connection_type_l10n of this DataConnectionInstance.  # noqa: E501
        :type: str
        """

        self._data_connection_type_l10n = data_connection_type_l10n

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataConnectionInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataConnectionInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataConnectionInstance):
            return True

        return self.to_dict() != other.to_dict()
