# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class PolicyCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'snapshot_rule_ids': 'list[str]',
        'replication_rule_ids': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'snapshot_rule_ids': 'snapshot_rule_ids',
        'replication_rule_ids': 'replication_rule_ids'
    }

    def __init__(self, name=None, description=None, snapshot_rule_ids=None, replication_rule_ids=None, _configuration=None):  # noqa: E501
        """PolicyCreate - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._description = None
        self._snapshot_rule_ids = None
        self._replication_rule_ids = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if snapshot_rule_ids is not None:
            self.snapshot_rule_ids = snapshot_rule_ids
        if replication_rule_ids is not None:
            self.replication_rule_ids = replication_rule_ids

    @property
    def name(self):
        """Gets the name of this PolicyCreate.  # noqa: E501

        Policy name.  # noqa: E501

        :return: The name of this PolicyCreate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PolicyCreate.

        Policy name.  # noqa: E501

        :param name: The name of this PolicyCreate.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 128):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this PolicyCreate.  # noqa: E501

        Policy description.  # noqa: E501

        :return: The description of this PolicyCreate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PolicyCreate.

        Policy description.  # noqa: E501

        :param description: The description of this PolicyCreate.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def snapshot_rule_ids(self):
        """Gets the snapshot_rule_ids of this PolicyCreate.  # noqa: E501

        Snapshot rule identifiers included in this policy. At least one snapshot rule or one replication rule must be specified to create a protection policy.  # noqa: E501

        :return: The snapshot_rule_ids of this PolicyCreate.  # noqa: E501
        :rtype: list[str]
        """
        return self._snapshot_rule_ids

    @snapshot_rule_ids.setter
    def snapshot_rule_ids(self, snapshot_rule_ids):
        """Sets the snapshot_rule_ids of this PolicyCreate.

        Snapshot rule identifiers included in this policy. At least one snapshot rule or one replication rule must be specified to create a protection policy.  # noqa: E501

        :param snapshot_rule_ids: The snapshot_rule_ids of this PolicyCreate.  # noqa: E501
        :type: list[str]
        """

        self._snapshot_rule_ids = snapshot_rule_ids

    @property
    def replication_rule_ids(self):
        """Gets the replication_rule_ids of this PolicyCreate.  # noqa: E501

        Replication rule identifiers included in this policy. At least one snapshot rule or one replication rule must be specified to create a protection policy.  # noqa: E501

        :return: The replication_rule_ids of this PolicyCreate.  # noqa: E501
        :rtype: list[str]
        """
        return self._replication_rule_ids

    @replication_rule_ids.setter
    def replication_rule_ids(self, replication_rule_ids):
        """Sets the replication_rule_ids of this PolicyCreate.

        Replication rule identifiers included in this policy. At least one snapshot rule or one replication rule must be specified to create a protection policy.  # noqa: E501

        :param replication_rule_ids: The replication_rule_ids of this PolicyCreate.  # noqa: E501
        :type: list[str]
        """

        self._replication_rule_ids = replication_rule_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PolicyCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PolicyCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PolicyCreate):
            return True

        return self.to_dict() != other.to_dict()
