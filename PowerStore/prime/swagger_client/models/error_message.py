# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class ErrorMessage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'str',
        'severity': 'MessageSeverityEnum',
        'message_l10n': 'str',
        'arguments': 'list[str]'
    }

    attribute_map = {
        'code': 'code',
        'severity': 'severity',
        'message_l10n': 'message_l10n',
        'arguments': 'arguments'
    }

    def __init__(self, code=None, severity=None, message_l10n=None, arguments=None, _configuration=None):  # noqa: E501
        """ErrorMessage - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._code = None
        self._severity = None
        self._message_l10n = None
        self._arguments = None
        self.discriminator = None

        if code is not None:
            self.code = code
        if severity is not None:
            self.severity = severity
        if message_l10n is not None:
            self.message_l10n = message_l10n
        if arguments is not None:
            self.arguments = arguments

    @property
    def code(self):
        """Gets the code of this ErrorMessage.  # noqa: E501

        Hexadecimal error code of the message.  # noqa: E501

        :return: The code of this ErrorMessage.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ErrorMessage.

        Hexadecimal error code of the message.  # noqa: E501

        :param code: The code of this ErrorMessage.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def severity(self):
        """Gets the severity of this ErrorMessage.  # noqa: E501


        :return: The severity of this ErrorMessage.  # noqa: E501
        :rtype: MessageSeverityEnum
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this ErrorMessage.


        :param severity: The severity of this ErrorMessage.  # noqa: E501
        :type: MessageSeverityEnum
        """

        self._severity = severity

    @property
    def message_l10n(self):
        """Gets the message_l10n of this ErrorMessage.  # noqa: E501

        The message description in the specified locale with arguments substituted.  # noqa: E501

        :return: The message_l10n of this ErrorMessage.  # noqa: E501
        :rtype: str
        """
        return self._message_l10n

    @message_l10n.setter
    def message_l10n(self, message_l10n):
        """Sets the message_l10n of this ErrorMessage.

        The message description in the specified locale with arguments substituted.  # noqa: E501

        :param message_l10n: The message_l10n of this ErrorMessage.  # noqa: E501
        :type: str
        """

        self._message_l10n = message_l10n

    @property
    def arguments(self):
        """Gets the arguments of this ErrorMessage.  # noqa: E501

        Arguments (if applicable) for the error message.  # noqa: E501

        :return: The arguments of this ErrorMessage.  # noqa: E501
        :rtype: list[str]
        """
        return self._arguments

    @arguments.setter
    def arguments(self, arguments):
        """Sets the arguments of this ErrorMessage.

        Arguments (if applicable) for the error message.  # noqa: E501

        :param arguments: The arguments of this ErrorMessage.  # noqa: E501
        :type: list[str]
        """

        self._arguments = arguments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ErrorMessage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ErrorMessage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ErrorMessage):
            return True

        return self.to_dict() != other.to_dict()
