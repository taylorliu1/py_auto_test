# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class HardwareDriveRepurpose(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'psid': 'str'
    }

    attribute_map = {
        'psid': 'psid'
    }

    def __init__(self, psid=None, _configuration=None):  # noqa: E501
        """HardwareDriveRepurpose - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._psid = None
        self.discriminator = None

        self.psid = psid

    @property
    def psid(self):
        """Gets the psid of this HardwareDriveRepurpose.  # noqa: E501

        An alpha-numeric string that can be found on the physical label of the drive to repurpose. This is needed to validate that the user has physical control of the drive before performing the operation.  # noqa: E501

        :return: The psid of this HardwareDriveRepurpose.  # noqa: E501
        :rtype: str
        """
        return self._psid

    @psid.setter
    def psid(self, psid):
        """Sets the psid of this HardwareDriveRepurpose.

        An alpha-numeric string that can be found on the physical label of the drive to repurpose. This is needed to validate that the user has physical control of the drive before performing the operation.  # noqa: E501

        :param psid: The psid of this HardwareDriveRepurpose.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and psid is None:
            raise ValueError("Invalid value for `psid`, must not be `None`")  # noqa: E501

        self._psid = psid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HardwareDriveRepurpose, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HardwareDriveRepurpose):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HardwareDriveRepurpose):
            return True

        return self.to_dict() != other.to_dict()
