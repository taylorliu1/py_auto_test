# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class ImportXtremioSnapshotScheduleRetentionPolicyInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'short_period_duration': 'int',
        'short_period_unit': 'XtremIODurationUnitEnum',
        'short_retention_copies': 'int',
        'middle_period_duration': 'int',
        'middle_period_unit': 'XtremIODurationUnitEnum',
        'middle_retention_copies': 'int',
        'long_period_duration': 'int',
        'long_period_unit': 'XtremIODurationUnitEnum',
        'long_retention_copies': 'int',
        'short_period_unit_l10n': 'str',
        'middle_period_unit_l10n': 'str',
        'long_period_unit_l10n': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'short_period_duration': 'short_period_duration',
        'short_period_unit': 'short_period_unit',
        'short_retention_copies': 'short_retention_copies',
        'middle_period_duration': 'middle_period_duration',
        'middle_period_unit': 'middle_period_unit',
        'middle_retention_copies': 'middle_retention_copies',
        'long_period_duration': 'long_period_duration',
        'long_period_unit': 'long_period_unit',
        'long_retention_copies': 'long_retention_copies',
        'short_period_unit_l10n': 'short_period_unit_l10n',
        'middle_period_unit_l10n': 'middle_period_unit_l10n',
        'long_period_unit_l10n': 'long_period_unit_l10n'
    }

    def __init__(self, id=None, name=None, short_period_duration=None, short_period_unit=None, short_retention_copies=None, middle_period_duration=None, middle_period_unit=None, middle_retention_copies=None, long_period_duration=None, long_period_unit=None, long_retention_copies=None, short_period_unit_l10n=None, middle_period_unit_l10n=None, long_period_unit_l10n=None, _configuration=None):  # noqa: E501
        """ImportXtremioSnapshotScheduleRetentionPolicyInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._short_period_duration = None
        self._short_period_unit = None
        self._short_retention_copies = None
        self._middle_period_duration = None
        self._middle_period_unit = None
        self._middle_retention_copies = None
        self._long_period_duration = None
        self._long_period_unit = None
        self._long_retention_copies = None
        self._short_period_unit_l10n = None
        self._middle_period_unit_l10n = None
        self._long_period_unit_l10n = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if short_period_duration is not None:
            self.short_period_duration = short_period_duration
        if short_period_unit is not None:
            self.short_period_unit = short_period_unit
        if short_retention_copies is not None:
            self.short_retention_copies = short_retention_copies
        if middle_period_duration is not None:
            self.middle_period_duration = middle_period_duration
        if middle_period_unit is not None:
            self.middle_period_unit = middle_period_unit
        if middle_retention_copies is not None:
            self.middle_retention_copies = middle_retention_copies
        if long_period_duration is not None:
            self.long_period_duration = long_period_duration
        if long_period_unit is not None:
            self.long_period_unit = long_period_unit
        if long_retention_copies is not None:
            self.long_retention_copies = long_retention_copies
        if short_period_unit_l10n is not None:
            self.short_period_unit_l10n = short_period_unit_l10n
        if middle_period_unit_l10n is not None:
            self.middle_period_unit_l10n = middle_period_unit_l10n
        if long_period_unit_l10n is not None:
            self.long_period_unit_l10n = long_period_unit_l10n

    @property
    def id(self):
        """Gets the id of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.  # noqa: E501

        Unique identifier of the snapshot schedule retention policy.  # noqa: E501

        :return: The id of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.

        Unique identifier of the snapshot schedule retention policy.  # noqa: E501

        :param id: The id of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.  # noqa: E501

        The name of the Retention Policy.  # noqa: E501

        :return: The name of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.

        The name of the Retention Policy.  # noqa: E501

        :param name: The name of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def short_period_duration(self):
        """Gets the short_period_duration of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.  # noqa: E501

        The duration of the short term period ranging from 1 to 500.  # noqa: E501

        :return: The short_period_duration of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.  # noqa: E501
        :rtype: int
        """
        return self._short_period_duration

    @short_period_duration.setter
    def short_period_duration(self, short_period_duration):
        """Sets the short_period_duration of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.

        The duration of the short term period ranging from 1 to 500.  # noqa: E501

        :param short_period_duration: The short_period_duration of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                short_period_duration is not None and short_period_duration > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `short_period_duration`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                short_period_duration is not None and short_period_duration < 0):  # noqa: E501
            raise ValueError("Invalid value for `short_period_duration`, must be a value greater than or equal to `0`")  # noqa: E501

        self._short_period_duration = short_period_duration

    @property
    def short_period_unit(self):
        """Gets the short_period_unit of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.  # noqa: E501


        :return: The short_period_unit of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.  # noqa: E501
        :rtype: XtremIODurationUnitEnum
        """
        return self._short_period_unit

    @short_period_unit.setter
    def short_period_unit(self, short_period_unit):
        """Sets the short_period_unit of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.


        :param short_period_unit: The short_period_unit of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.  # noqa: E501
        :type: XtremIODurationUnitEnum
        """

        self._short_period_unit = short_period_unit

    @property
    def short_retention_copies(self):
        """Gets the short_retention_copies of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.  # noqa: E501

        The short term retention number of copies ranging from 1 to 500. The value of 0 indicates that this period is not in use.  # noqa: E501

        :return: The short_retention_copies of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.  # noqa: E501
        :rtype: int
        """
        return self._short_retention_copies

    @short_retention_copies.setter
    def short_retention_copies(self, short_retention_copies):
        """Sets the short_retention_copies of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.

        The short term retention number of copies ranging from 1 to 500. The value of 0 indicates that this period is not in use.  # noqa: E501

        :param short_retention_copies: The short_retention_copies of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                short_retention_copies is not None and short_retention_copies > 500):  # noqa: E501
            raise ValueError("Invalid value for `short_retention_copies`, must be a value less than or equal to `500`")  # noqa: E501
        if (self._configuration.client_side_validation and
                short_retention_copies is not None and short_retention_copies < 0):  # noqa: E501
            raise ValueError("Invalid value for `short_retention_copies`, must be a value greater than or equal to `0`")  # noqa: E501

        self._short_retention_copies = short_retention_copies

    @property
    def middle_period_duration(self):
        """Gets the middle_period_duration of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.  # noqa: E501

        The duration of the middle term period ranging from 1 to 500.  # noqa: E501

        :return: The middle_period_duration of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.  # noqa: E501
        :rtype: int
        """
        return self._middle_period_duration

    @middle_period_duration.setter
    def middle_period_duration(self, middle_period_duration):
        """Sets the middle_period_duration of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.

        The duration of the middle term period ranging from 1 to 500.  # noqa: E501

        :param middle_period_duration: The middle_period_duration of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                middle_period_duration is not None and middle_period_duration > 500):  # noqa: E501
            raise ValueError("Invalid value for `middle_period_duration`, must be a value less than or equal to `500`")  # noqa: E501
        if (self._configuration.client_side_validation and
                middle_period_duration is not None and middle_period_duration < 1):  # noqa: E501
            raise ValueError("Invalid value for `middle_period_duration`, must be a value greater than or equal to `1`")  # noqa: E501

        self._middle_period_duration = middle_period_duration

    @property
    def middle_period_unit(self):
        """Gets the middle_period_unit of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.  # noqa: E501


        :return: The middle_period_unit of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.  # noqa: E501
        :rtype: XtremIODurationUnitEnum
        """
        return self._middle_period_unit

    @middle_period_unit.setter
    def middle_period_unit(self, middle_period_unit):
        """Sets the middle_period_unit of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.


        :param middle_period_unit: The middle_period_unit of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.  # noqa: E501
        :type: XtremIODurationUnitEnum
        """

        self._middle_period_unit = middle_period_unit

    @property
    def middle_retention_copies(self):
        """Gets the middle_retention_copies of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.  # noqa: E501

        The middle term retention number of copies ranging from 1 to 500. The value of 0 indicates that this period is not in use.  # noqa: E501

        :return: The middle_retention_copies of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.  # noqa: E501
        :rtype: int
        """
        return self._middle_retention_copies

    @middle_retention_copies.setter
    def middle_retention_copies(self, middle_retention_copies):
        """Sets the middle_retention_copies of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.

        The middle term retention number of copies ranging from 1 to 500. The value of 0 indicates that this period is not in use.  # noqa: E501

        :param middle_retention_copies: The middle_retention_copies of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                middle_retention_copies is not None and middle_retention_copies > 500):  # noqa: E501
            raise ValueError("Invalid value for `middle_retention_copies`, must be a value less than or equal to `500`")  # noqa: E501
        if (self._configuration.client_side_validation and
                middle_retention_copies is not None and middle_retention_copies < 0):  # noqa: E501
            raise ValueError("Invalid value for `middle_retention_copies`, must be a value greater than or equal to `0`")  # noqa: E501

        self._middle_retention_copies = middle_retention_copies

    @property
    def long_period_duration(self):
        """Gets the long_period_duration of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.  # noqa: E501

        The duration of the long term period ranging from 1 to 500.  # noqa: E501

        :return: The long_period_duration of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.  # noqa: E501
        :rtype: int
        """
        return self._long_period_duration

    @long_period_duration.setter
    def long_period_duration(self, long_period_duration):
        """Sets the long_period_duration of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.

        The duration of the long term period ranging from 1 to 500.  # noqa: E501

        :param long_period_duration: The long_period_duration of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                long_period_duration is not None and long_period_duration > 500):  # noqa: E501
            raise ValueError("Invalid value for `long_period_duration`, must be a value less than or equal to `500`")  # noqa: E501
        if (self._configuration.client_side_validation and
                long_period_duration is not None and long_period_duration < 1):  # noqa: E501
            raise ValueError("Invalid value for `long_period_duration`, must be a value greater than or equal to `1`")  # noqa: E501

        self._long_period_duration = long_period_duration

    @property
    def long_period_unit(self):
        """Gets the long_period_unit of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.  # noqa: E501


        :return: The long_period_unit of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.  # noqa: E501
        :rtype: XtremIODurationUnitEnum
        """
        return self._long_period_unit

    @long_period_unit.setter
    def long_period_unit(self, long_period_unit):
        """Sets the long_period_unit of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.


        :param long_period_unit: The long_period_unit of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.  # noqa: E501
        :type: XtremIODurationUnitEnum
        """

        self._long_period_unit = long_period_unit

    @property
    def long_retention_copies(self):
        """Gets the long_retention_copies of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.  # noqa: E501

        The long term retention number of copies ranging from 1 to 500. The value of 0 indicates that this period is not in use.  # noqa: E501

        :return: The long_retention_copies of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.  # noqa: E501
        :rtype: int
        """
        return self._long_retention_copies

    @long_retention_copies.setter
    def long_retention_copies(self, long_retention_copies):
        """Sets the long_retention_copies of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.

        The long term retention number of copies ranging from 1 to 500. The value of 0 indicates that this period is not in use.  # noqa: E501

        :param long_retention_copies: The long_retention_copies of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                long_retention_copies is not None and long_retention_copies > 500):  # noqa: E501
            raise ValueError("Invalid value for `long_retention_copies`, must be a value less than or equal to `500`")  # noqa: E501
        if (self._configuration.client_side_validation and
                long_retention_copies is not None and long_retention_copies < 0):  # noqa: E501
            raise ValueError("Invalid value for `long_retention_copies`, must be a value greater than or equal to `0`")  # noqa: E501

        self._long_retention_copies = long_retention_copies

    @property
    def short_period_unit_l10n(self):
        """Gets the short_period_unit_l10n of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.  # noqa: E501

        Localized message string corresponding to short_period_unit Was added in version 1.0.2.  # noqa: E501

        :return: The short_period_unit_l10n of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.  # noqa: E501
        :rtype: str
        """
        return self._short_period_unit_l10n

    @short_period_unit_l10n.setter
    def short_period_unit_l10n(self, short_period_unit_l10n):
        """Sets the short_period_unit_l10n of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.

        Localized message string corresponding to short_period_unit Was added in version 1.0.2.  # noqa: E501

        :param short_period_unit_l10n: The short_period_unit_l10n of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.  # noqa: E501
        :type: str
        """

        self._short_period_unit_l10n = short_period_unit_l10n

    @property
    def middle_period_unit_l10n(self):
        """Gets the middle_period_unit_l10n of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.  # noqa: E501

        Localized message string corresponding to middle_period_unit Was added in version 1.0.2.  # noqa: E501

        :return: The middle_period_unit_l10n of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.  # noqa: E501
        :rtype: str
        """
        return self._middle_period_unit_l10n

    @middle_period_unit_l10n.setter
    def middle_period_unit_l10n(self, middle_period_unit_l10n):
        """Sets the middle_period_unit_l10n of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.

        Localized message string corresponding to middle_period_unit Was added in version 1.0.2.  # noqa: E501

        :param middle_period_unit_l10n: The middle_period_unit_l10n of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.  # noqa: E501
        :type: str
        """

        self._middle_period_unit_l10n = middle_period_unit_l10n

    @property
    def long_period_unit_l10n(self):
        """Gets the long_period_unit_l10n of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.  # noqa: E501

        Localized message string corresponding to long_period_unit Was added in version 1.0.2.  # noqa: E501

        :return: The long_period_unit_l10n of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.  # noqa: E501
        :rtype: str
        """
        return self._long_period_unit_l10n

    @long_period_unit_l10n.setter
    def long_period_unit_l10n(self, long_period_unit_l10n):
        """Sets the long_period_unit_l10n of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.

        Localized message string corresponding to long_period_unit Was added in version 1.0.2.  # noqa: E501

        :param long_period_unit_l10n: The long_period_unit_l10n of this ImportXtremioSnapshotScheduleRetentionPolicyInstance.  # noqa: E501
        :type: str
        """

        self._long_period_unit_l10n = long_period_unit_l10n

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImportXtremioSnapshotScheduleRetentionPolicyInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportXtremioSnapshotScheduleRetentionPolicyInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImportXtremioSnapshotScheduleRetentionPolicyInstance):
            return True

        return self.to_dict() != other.to_dict()
