# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class NetworkScale(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'add_port_ids': 'list[str]',
        'remove_port_ids': 'list[str]',
        'force': 'bool'
    }

    attribute_map = {
        'add_port_ids': 'add_port_ids',
        'remove_port_ids': 'remove_port_ids',
        'force': 'force'
    }

    def __init__(self, add_port_ids=None, remove_port_ids=None, force=False, _configuration=None):  # noqa: E501
        """NetworkScale - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._add_port_ids = None
        self._remove_port_ids = None
        self._force = None
        self.discriminator = None

        if add_port_ids is not None:
            self.add_port_ids = add_port_ids
        if remove_port_ids is not None:
            self.remove_port_ids = remove_port_ids
        if force is not None:
            self.force = force

    @property
    def add_port_ids(self):
        """Gets the add_port_ids of this NetworkScale.  # noqa: E501

        Unique identifiers of available IP ports to be used in the network.   # noqa: E501

        :return: The add_port_ids of this NetworkScale.  # noqa: E501
        :rtype: list[str]
        """
        return self._add_port_ids

    @add_port_ids.setter
    def add_port_ids(self, add_port_ids):
        """Sets the add_port_ids of this NetworkScale.

        Unique identifiers of available IP ports to be used in the network.   # noqa: E501

        :param add_port_ids: The add_port_ids of this NetworkScale.  # noqa: E501
        :type: list[str]
        """

        self._add_port_ids = add_port_ids

    @property
    def remove_port_ids(self):
        """Gets the remove_port_ids of this NetworkScale.  # noqa: E501

        Unique identifiers of IP ports to remove from use in the network.   # noqa: E501

        :return: The remove_port_ids of this NetworkScale.  # noqa: E501
        :rtype: list[str]
        """
        return self._remove_port_ids

    @remove_port_ids.setter
    def remove_port_ids(self, remove_port_ids):
        """Sets the remove_port_ids of this NetworkScale.

        Unique identifiers of IP ports to remove from use in the network.   # noqa: E501

        :param remove_port_ids: The remove_port_ids of this NetworkScale.  # noqa: E501
        :type: list[str]
        """

        self._remove_port_ids = remove_port_ids

    @property
    def force(self):
        """Gets the force of this NetworkScale.  # noqa: E501

        * Indicates whether to suppress network validation errors. * The option is intended to suppress false errors caused by network environment constraints.  Normally the command will fail with an error when: * system network ports on top of which IP ports are configured are in degraded state or have cabling issues, * or network IP addresses applied as a result of network scaling have duplicates in the network environment.  When force is true, the command will proceed instead.  Caution: Only use this option when you are certain, that your requested settings are correct and you understand why they are failing at this time, and you want to apply the settings anyway. Improper network settings can make the system unreachable for data.   # noqa: E501

        :return: The force of this NetworkScale.  # noqa: E501
        :rtype: bool
        """
        return self._force

    @force.setter
    def force(self, force):
        """Sets the force of this NetworkScale.

        * Indicates whether to suppress network validation errors. * The option is intended to suppress false errors caused by network environment constraints.  Normally the command will fail with an error when: * system network ports on top of which IP ports are configured are in degraded state or have cabling issues, * or network IP addresses applied as a result of network scaling have duplicates in the network environment.  When force is true, the command will proceed instead.  Caution: Only use this option when you are certain, that your requested settings are correct and you understand why they are failing at this time, and you want to apply the settings anyway. Improper network settings can make the system unreachable for data.   # noqa: E501

        :param force: The force of this NetworkScale.  # noqa: E501
        :type: bool
        """

        self._force = force

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetworkScale, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkScale):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NetworkScale):
            return True

        return self.to_dict() != other.to_dict()
