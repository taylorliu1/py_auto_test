# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class DiscoveredInitiatorInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'nvme_transport_addresses': 'list[str]',
        'nvme_transport_types': 'list[NvmeTransportTypeEnum]',
        'protocol_type': 'InitiatorProtocolTypeEnum',
        'protocol_type_l10n': 'str',
        'nvme_transport_types_l10n': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'nvme_transport_addresses': 'nvme_transport_addresses',
        'nvme_transport_types': 'nvme_transport_types',
        'protocol_type': 'protocol_type',
        'protocol_type_l10n': 'protocol_type_l10n',
        'nvme_transport_types_l10n': 'nvme_transport_types_l10n'
    }

    def __init__(self, name=None, nvme_transport_addresses=None, nvme_transport_types=None, protocol_type=None, protocol_type_l10n=None, nvme_transport_types_l10n=None, _configuration=None):  # noqa: E501
        """DiscoveredInitiatorInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._nvme_transport_addresses = None
        self._nvme_transport_types = None
        self._protocol_type = None
        self._protocol_type_l10n = None
        self._nvme_transport_types_l10n = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if nvme_transport_addresses is not None:
            self.nvme_transport_addresses = nvme_transport_addresses
        if nvme_transport_types is not None:
            self.nvme_transport_types = nvme_transport_types
        if protocol_type is not None:
            self.protocol_type = protocol_type
        if protocol_type_l10n is not None:
            self.protocol_type_l10n = protocol_type_l10n
        if nvme_transport_types_l10n is not None:
            self.nvme_transport_types_l10n = nvme_transport_types_l10n

    @property
    def name(self):
        """Gets the name of this DiscoveredInitiatorInstance.  # noqa: E501

        IQN - for iSCSi Initiators; WWN - for SCSI over FC initiators; NQN - for NVMe/NVMe-vVol initiators.  # noqa: E501

        :return: The name of this DiscoveredInitiatorInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DiscoveredInitiatorInstance.

        IQN - for iSCSi Initiators; WWN - for SCSI over FC initiators; NQN - for NVMe/NVMe-vVol initiators.  # noqa: E501

        :param name: The name of this DiscoveredInitiatorInstance.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def nvme_transport_addresses(self):
        """Gets the nvme_transport_addresses of this DiscoveredInitiatorInstance.  # noqa: E501

        List of discovered NVMe Initiators' addresses. For NVMe/FC - nvme_wwns list; for NVMe/TCP - ip address list. It may be that same nqn (NVMe identifier) will be applied to multiple WWNs (FC port address) and/or multiple IP addresses for NVMe/TCP over Eth port. Was added in version 2.0.0.0.  # noqa: E501

        :return: The nvme_transport_addresses of this DiscoveredInitiatorInstance.  # noqa: E501
        :rtype: list[str]
        """
        return self._nvme_transport_addresses

    @nvme_transport_addresses.setter
    def nvme_transport_addresses(self, nvme_transport_addresses):
        """Sets the nvme_transport_addresses of this DiscoveredInitiatorInstance.

        List of discovered NVMe Initiators' addresses. For NVMe/FC - nvme_wwns list; for NVMe/TCP - ip address list. It may be that same nqn (NVMe identifier) will be applied to multiple WWNs (FC port address) and/or multiple IP addresses for NVMe/TCP over Eth port. Was added in version 2.0.0.0.  # noqa: E501

        :param nvme_transport_addresses: The nvme_transport_addresses of this DiscoveredInitiatorInstance.  # noqa: E501
        :type: list[str]
        """

        self._nvme_transport_addresses = nvme_transport_addresses

    @property
    def nvme_transport_types(self):
        """Gets the nvme_transport_types of this DiscoveredInitiatorInstance.  # noqa: E501

        List of transport types for discovered NVMe initiators. For NVMe/FC, there will be only 1 item of type FC. For NVMe/TCP, there will be only 1 item of type TCP. If the same nqn (NVMe identifier) is applied to NVMe/FC and NVMe/TCP, the list will have both FC and TCP. If the protocol_type is not NVMe this value will be null. Was added in version 2.1.0.0.  # noqa: E501

        :return: The nvme_transport_types of this DiscoveredInitiatorInstance.  # noqa: E501
        :rtype: list[NvmeTransportTypeEnum]
        """
        return self._nvme_transport_types

    @nvme_transport_types.setter
    def nvme_transport_types(self, nvme_transport_types):
        """Sets the nvme_transport_types of this DiscoveredInitiatorInstance.

        List of transport types for discovered NVMe initiators. For NVMe/FC, there will be only 1 item of type FC. For NVMe/TCP, there will be only 1 item of type TCP. If the same nqn (NVMe identifier) is applied to NVMe/FC and NVMe/TCP, the list will have both FC and TCP. If the protocol_type is not NVMe this value will be null. Was added in version 2.1.0.0.  # noqa: E501

        :param nvme_transport_types: The nvme_transport_types of this DiscoveredInitiatorInstance.  # noqa: E501
        :type: list[NvmeTransportTypeEnum]
        """

        self._nvme_transport_types = nvme_transport_types

    @property
    def protocol_type(self):
        """Gets the protocol_type of this DiscoveredInitiatorInstance.  # noqa: E501


        :return: The protocol_type of this DiscoveredInitiatorInstance.  # noqa: E501
        :rtype: InitiatorProtocolTypeEnum
        """
        return self._protocol_type

    @protocol_type.setter
    def protocol_type(self, protocol_type):
        """Sets the protocol_type of this DiscoveredInitiatorInstance.


        :param protocol_type: The protocol_type of this DiscoveredInitiatorInstance.  # noqa: E501
        :type: InitiatorProtocolTypeEnum
        """

        self._protocol_type = protocol_type

    @property
    def protocol_type_l10n(self):
        """Gets the protocol_type_l10n of this DiscoveredInitiatorInstance.  # noqa: E501

        Localized message string corresponding to protocol_type Was deprecated in version 3.0.0.0.  # noqa: E501

        :return: The protocol_type_l10n of this DiscoveredInitiatorInstance.  # noqa: E501
        :rtype: str
        """
        return self._protocol_type_l10n

    @protocol_type_l10n.setter
    def protocol_type_l10n(self, protocol_type_l10n):
        """Sets the protocol_type_l10n of this DiscoveredInitiatorInstance.

        Localized message string corresponding to protocol_type Was deprecated in version 3.0.0.0.  # noqa: E501

        :param protocol_type_l10n: The protocol_type_l10n of this DiscoveredInitiatorInstance.  # noqa: E501
        :type: str
        """

        self._protocol_type_l10n = protocol_type_l10n

    @property
    def nvme_transport_types_l10n(self):
        """Gets the nvme_transport_types_l10n of this DiscoveredInitiatorInstance.  # noqa: E501

        Localized message array corresponding to nvme_transport_types Was added in version 2.1.0.0.  # noqa: E501

        :return: The nvme_transport_types_l10n of this DiscoveredInitiatorInstance.  # noqa: E501
        :rtype: list[str]
        """
        return self._nvme_transport_types_l10n

    @nvme_transport_types_l10n.setter
    def nvme_transport_types_l10n(self, nvme_transport_types_l10n):
        """Sets the nvme_transport_types_l10n of this DiscoveredInitiatorInstance.

        Localized message array corresponding to nvme_transport_types Was added in version 2.1.0.0.  # noqa: E501

        :param nvme_transport_types_l10n: The nvme_transport_types_l10n of this DiscoveredInitiatorInstance.  # noqa: E501
        :type: list[str]
        """

        self._nvme_transport_types_l10n = nvme_transport_types_l10n

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DiscoveredInitiatorInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiscoveredInitiatorInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DiscoveredInitiatorInstance):
            return True

        return self.to_dict() != other.to_dict()
