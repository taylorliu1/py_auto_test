# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class AlertInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'event_code': 'str',
        'severity': 'SeverityEnum',
        'resource_type': 'ResourceTypeEnum',
        'resource_id': 'str',
        'resource_name': 'str',
        'description_l10n': 'str',
        'generated_timestamp': 'datetime',
        'state': 'AlertStateEnum',
        'is_acknowledged': 'bool',
        'raised_timestamp': 'datetime',
        'cleared_timestamp': 'datetime',
        'called_home_timestamp': 'datetime',
        'email_sent_timestamp': 'datetime',
        'snmp_sent_timestamp': 'datetime',
        'acknowledged_timestamp': 'datetime',
        'events': 'list[EventInstance]',
        'severity_l10n': 'str',
        'resource_type_l10n': 'str',
        'state_l10n': 'str'
    }

    attribute_map = {
        'id': 'id',
        'event_code': 'event_code',
        'severity': 'severity',
        'resource_type': 'resource_type',
        'resource_id': 'resource_id',
        'resource_name': 'resource_name',
        'description_l10n': 'description_l10n',
        'generated_timestamp': 'generated_timestamp',
        'state': 'state',
        'is_acknowledged': 'is_acknowledged',
        'raised_timestamp': 'raised_timestamp',
        'cleared_timestamp': 'cleared_timestamp',
        'called_home_timestamp': 'called_home_timestamp',
        'email_sent_timestamp': 'email_sent_timestamp',
        'snmp_sent_timestamp': 'snmp_sent_timestamp',
        'acknowledged_timestamp': 'acknowledged_timestamp',
        'events': 'events',
        'severity_l10n': 'severity_l10n',
        'resource_type_l10n': 'resource_type_l10n',
        'state_l10n': 'state_l10n'
    }

    def __init__(self, id=None, event_code=None, severity=None, resource_type=None, resource_id=None, resource_name=None, description_l10n=None, generated_timestamp=None, state=None, is_acknowledged=None, raised_timestamp=None, cleared_timestamp=None, called_home_timestamp=None, email_sent_timestamp=None, snmp_sent_timestamp=None, acknowledged_timestamp=None, events=None, severity_l10n=None, resource_type_l10n=None, state_l10n=None, _configuration=None):  # noqa: E501
        """AlertInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._event_code = None
        self._severity = None
        self._resource_type = None
        self._resource_id = None
        self._resource_name = None
        self._description_l10n = None
        self._generated_timestamp = None
        self._state = None
        self._is_acknowledged = None
        self._raised_timestamp = None
        self._cleared_timestamp = None
        self._called_home_timestamp = None
        self._email_sent_timestamp = None
        self._snmp_sent_timestamp = None
        self._acknowledged_timestamp = None
        self._events = None
        self._severity_l10n = None
        self._resource_type_l10n = None
        self._state_l10n = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if event_code is not None:
            self.event_code = event_code
        if severity is not None:
            self.severity = severity
        if resource_type is not None:
            self.resource_type = resource_type
        if resource_id is not None:
            self.resource_id = resource_id
        if resource_name is not None:
            self.resource_name = resource_name
        if description_l10n is not None:
            self.description_l10n = description_l10n
        if generated_timestamp is not None:
            self.generated_timestamp = generated_timestamp
        if state is not None:
            self.state = state
        if is_acknowledged is not None:
            self.is_acknowledged = is_acknowledged
        if raised_timestamp is not None:
            self.raised_timestamp = raised_timestamp
        if cleared_timestamp is not None:
            self.cleared_timestamp = cleared_timestamp
        if called_home_timestamp is not None:
            self.called_home_timestamp = called_home_timestamp
        if email_sent_timestamp is not None:
            self.email_sent_timestamp = email_sent_timestamp
        if snmp_sent_timestamp is not None:
            self.snmp_sent_timestamp = snmp_sent_timestamp
        if acknowledged_timestamp is not None:
            self.acknowledged_timestamp = acknowledged_timestamp
        if events is not None:
            self.events = events
        if severity_l10n is not None:
            self.severity_l10n = severity_l10n
        if resource_type_l10n is not None:
            self.resource_type_l10n = resource_type_l10n
        if state_l10n is not None:
            self.state_l10n = state_l10n

    @property
    def id(self):
        """Gets the id of this AlertInstance.  # noqa: E501

        Unique identifier of the alert.  # noqa: E501

        :return: The id of this AlertInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AlertInstance.

        Unique identifier of the alert.  # noqa: E501

        :param id: The id of this AlertInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def event_code(self):
        """Gets the event_code of this AlertInstance.  # noqa: E501

        The event code of the latest event for this alert.  # noqa: E501

        :return: The event_code of this AlertInstance.  # noqa: E501
        :rtype: str
        """
        return self._event_code

    @event_code.setter
    def event_code(self, event_code):
        """Sets the event_code of this AlertInstance.

        The event code of the latest event for this alert.  # noqa: E501

        :param event_code: The event_code of this AlertInstance.  # noqa: E501
        :type: str
        """

        self._event_code = event_code

    @property
    def severity(self):
        """Gets the severity of this AlertInstance.  # noqa: E501

        Severity of the latest event for this alert.  # noqa: E501

        :return: The severity of this AlertInstance.  # noqa: E501
        :rtype: SeverityEnum
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this AlertInstance.

        Severity of the latest event for this alert.  # noqa: E501

        :param severity: The severity of this AlertInstance.  # noqa: E501
        :type: SeverityEnum
        """

        self._severity = severity

    @property
    def resource_type(self):
        """Gets the resource_type of this AlertInstance.  # noqa: E501

        Type of the resource instance which generated this alert.  # noqa: E501

        :return: The resource_type of this AlertInstance.  # noqa: E501
        :rtype: ResourceTypeEnum
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this AlertInstance.

        Type of the resource instance which generated this alert.  # noqa: E501

        :param resource_type: The resource_type of this AlertInstance.  # noqa: E501
        :type: ResourceTypeEnum
        """

        self._resource_type = resource_type

    @property
    def resource_id(self):
        """Gets the resource_id of this AlertInstance.  # noqa: E501

        Unique identifier of the resource instance which generated this alert.  # noqa: E501

        :return: The resource_id of this AlertInstance.  # noqa: E501
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this AlertInstance.

        Unique identifier of the resource instance which generated this alert.  # noqa: E501

        :param resource_id: The resource_id of this AlertInstance.  # noqa: E501
        :type: str
        """

        self._resource_id = resource_id

    @property
    def resource_name(self):
        """Gets the resource_name of this AlertInstance.  # noqa: E501

        Name of the resource instance which generated this alert.  This property supports case-insensitive filtering.  # noqa: E501

        :return: The resource_name of this AlertInstance.  # noqa: E501
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this AlertInstance.

        Name of the resource instance which generated this alert.  This property supports case-insensitive filtering.  # noqa: E501

        :param resource_name: The resource_name of this AlertInstance.  # noqa: E501
        :type: str
        """

        self._resource_name = resource_name

    @property
    def description_l10n(self):
        """Gets the description_l10n of this AlertInstance.  # noqa: E501

        Latest event's description text for this alert.  # noqa: E501

        :return: The description_l10n of this AlertInstance.  # noqa: E501
        :rtype: str
        """
        return self._description_l10n

    @description_l10n.setter
    def description_l10n(self, description_l10n):
        """Sets the description_l10n of this AlertInstance.

        Latest event's description text for this alert.  # noqa: E501

        :param description_l10n: The description_l10n of this AlertInstance.  # noqa: E501
        :type: str
        """

        self._description_l10n = description_l10n

    @property
    def generated_timestamp(self):
        """Gets the generated_timestamp of this AlertInstance.  # noqa: E501

        Timestamp of the latest event for this alert.  # noqa: E501

        :return: The generated_timestamp of this AlertInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._generated_timestamp

    @generated_timestamp.setter
    def generated_timestamp(self, generated_timestamp):
        """Sets the generated_timestamp of this AlertInstance.

        Timestamp of the latest event for this alert.  # noqa: E501

        :param generated_timestamp: The generated_timestamp of this AlertInstance.  # noqa: E501
        :type: datetime
        """

        self._generated_timestamp = generated_timestamp

    @property
    def state(self):
        """Gets the state of this AlertInstance.  # noqa: E501


        :return: The state of this AlertInstance.  # noqa: E501
        :rtype: AlertStateEnum
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AlertInstance.


        :param state: The state of this AlertInstance.  # noqa: E501
        :type: AlertStateEnum
        """

        self._state = state

    @property
    def is_acknowledged(self):
        """Gets the is_acknowledged of this AlertInstance.  # noqa: E501

        Whether an alert has been acknowledged.  # noqa: E501

        :return: The is_acknowledged of this AlertInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_acknowledged

    @is_acknowledged.setter
    def is_acknowledged(self, is_acknowledged):
        """Sets the is_acknowledged of this AlertInstance.

        Whether an alert has been acknowledged.  # noqa: E501

        :param is_acknowledged: The is_acknowledged of this AlertInstance.  # noqa: E501
        :type: bool
        """

        self._is_acknowledged = is_acknowledged

    @property
    def raised_timestamp(self):
        """Gets the raised_timestamp of this AlertInstance.  # noqa: E501

        Timestamp of the first event for this alert.  # noqa: E501

        :return: The raised_timestamp of this AlertInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._raised_timestamp

    @raised_timestamp.setter
    def raised_timestamp(self, raised_timestamp):
        """Sets the raised_timestamp of this AlertInstance.

        Timestamp of the first event for this alert.  # noqa: E501

        :param raised_timestamp: The raised_timestamp of this AlertInstance.  # noqa: E501
        :type: datetime
        """

        self._raised_timestamp = raised_timestamp

    @property
    def cleared_timestamp(self):
        """Gets the cleared_timestamp of this AlertInstance.  # noqa: E501

        Timestamp of the event that cleared this alert.  # noqa: E501

        :return: The cleared_timestamp of this AlertInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._cleared_timestamp

    @cleared_timestamp.setter
    def cleared_timestamp(self, cleared_timestamp):
        """Sets the cleared_timestamp of this AlertInstance.

        Timestamp of the event that cleared this alert.  # noqa: E501

        :param cleared_timestamp: The cleared_timestamp of this AlertInstance.  # noqa: E501
        :type: datetime
        """

        self._cleared_timestamp = cleared_timestamp

    @property
    def called_home_timestamp(self):
        """Gets the called_home_timestamp of this AlertInstance.  # noqa: E501

        Timestamp when the event resulted in a notification to support (via Secured Remote Services), if any.  # noqa: E501

        :return: The called_home_timestamp of this AlertInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._called_home_timestamp

    @called_home_timestamp.setter
    def called_home_timestamp(self, called_home_timestamp):
        """Sets the called_home_timestamp of this AlertInstance.

        Timestamp when the event resulted in a notification to support (via Secured Remote Services), if any.  # noqa: E501

        :param called_home_timestamp: The called_home_timestamp of this AlertInstance.  # noqa: E501
        :type: datetime
        """

        self._called_home_timestamp = called_home_timestamp

    @property
    def email_sent_timestamp(self):
        """Gets the email_sent_timestamp of this AlertInstance.  # noqa: E501

        Timestamp when the email was sent for the raised alert, if any.  # noqa: E501

        :return: The email_sent_timestamp of this AlertInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._email_sent_timestamp

    @email_sent_timestamp.setter
    def email_sent_timestamp(self, email_sent_timestamp):
        """Sets the email_sent_timestamp of this AlertInstance.

        Timestamp when the email was sent for the raised alert, if any.  # noqa: E501

        :param email_sent_timestamp: The email_sent_timestamp of this AlertInstance.  # noqa: E501
        :type: datetime
        """

        self._email_sent_timestamp = email_sent_timestamp

    @property
    def snmp_sent_timestamp(self):
        """Gets the snmp_sent_timestamp of this AlertInstance.  # noqa: E501

        Timestamp when the SNMP trap was sent for the raised alert, if any. Was added in version 2.0.0.0.  # noqa: E501

        :return: The snmp_sent_timestamp of this AlertInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._snmp_sent_timestamp

    @snmp_sent_timestamp.setter
    def snmp_sent_timestamp(self, snmp_sent_timestamp):
        """Sets the snmp_sent_timestamp of this AlertInstance.

        Timestamp when the SNMP trap was sent for the raised alert, if any. Was added in version 2.0.0.0.  # noqa: E501

        :param snmp_sent_timestamp: The snmp_sent_timestamp of this AlertInstance.  # noqa: E501
        :type: datetime
        """

        self._snmp_sent_timestamp = snmp_sent_timestamp

    @property
    def acknowledged_timestamp(self):
        """Gets the acknowledged_timestamp of this AlertInstance.  # noqa: E501

        Timestamp when the alert was acknowledged, if any.  # noqa: E501

        :return: The acknowledged_timestamp of this AlertInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._acknowledged_timestamp

    @acknowledged_timestamp.setter
    def acknowledged_timestamp(self, acknowledged_timestamp):
        """Sets the acknowledged_timestamp of this AlertInstance.

        Timestamp when the alert was acknowledged, if any.  # noqa: E501

        :param acknowledged_timestamp: The acknowledged_timestamp of this AlertInstance.  # noqa: E501
        :type: datetime
        """

        self._acknowledged_timestamp = acknowledged_timestamp

    @property
    def events(self):
        """Gets the events of this AlertInstance.  # noqa: E501

        List of events associated with this alert.  Filtering on the fields of this embedded resource is not supported.  # noqa: E501

        :return: The events of this AlertInstance.  # noqa: E501
        :rtype: list[EventInstance]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this AlertInstance.

        List of events associated with this alert.  Filtering on the fields of this embedded resource is not supported.  # noqa: E501

        :param events: The events of this AlertInstance.  # noqa: E501
        :type: list[EventInstance]
        """

        self._events = events

    @property
    def severity_l10n(self):
        """Gets the severity_l10n of this AlertInstance.  # noqa: E501

        Localized message string corresponding to severity  # noqa: E501

        :return: The severity_l10n of this AlertInstance.  # noqa: E501
        :rtype: str
        """
        return self._severity_l10n

    @severity_l10n.setter
    def severity_l10n(self, severity_l10n):
        """Sets the severity_l10n of this AlertInstance.

        Localized message string corresponding to severity  # noqa: E501

        :param severity_l10n: The severity_l10n of this AlertInstance.  # noqa: E501
        :type: str
        """

        self._severity_l10n = severity_l10n

    @property
    def resource_type_l10n(self):
        """Gets the resource_type_l10n of this AlertInstance.  # noqa: E501

        Localized message string corresponding to resource_type  # noqa: E501

        :return: The resource_type_l10n of this AlertInstance.  # noqa: E501
        :rtype: str
        """
        return self._resource_type_l10n

    @resource_type_l10n.setter
    def resource_type_l10n(self, resource_type_l10n):
        """Sets the resource_type_l10n of this AlertInstance.

        Localized message string corresponding to resource_type  # noqa: E501

        :param resource_type_l10n: The resource_type_l10n of this AlertInstance.  # noqa: E501
        :type: str
        """

        self._resource_type_l10n = resource_type_l10n

    @property
    def state_l10n(self):
        """Gets the state_l10n of this AlertInstance.  # noqa: E501

        Localized message string corresponding to state  # noqa: E501

        :return: The state_l10n of this AlertInstance.  # noqa: E501
        :rtype: str
        """
        return self._state_l10n

    @state_l10n.setter
    def state_l10n(self, state_l10n):
        """Sets the state_l10n of this AlertInstance.

        Localized message string corresponding to state  # noqa: E501

        :param state_l10n: The state_l10n of this AlertInstance.  # noqa: E501
        :type: str
        """

        self._state_l10n = state_l10n

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlertInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlertInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AlertInstance):
            return True

        return self.to_dict() != other.to_dict()
