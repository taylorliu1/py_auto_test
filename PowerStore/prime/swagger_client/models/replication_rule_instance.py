# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class ReplicationRuleInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'rpo': 'RPOEnum',
        'remote_system_id': 'str',
        'is_replica': 'bool',
        'is_read_only': 'bool',
        'alert_threshold': 'int',
        'managed_by': 'PolicyManagedByEnum',
        'managed_by_id': 'str',
        'rpo_l10n': 'str',
        'managed_by_l10n': 'str',
        'replication_sessions': 'list[ReplicationSessionInstance]',
        'policies': 'list[PolicyInstance]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'rpo': 'rpo',
        'remote_system_id': 'remote_system_id',
        'is_replica': 'is_replica',
        'is_read_only': 'is_read_only',
        'alert_threshold': 'alert_threshold',
        'managed_by': 'managed_by',
        'managed_by_id': 'managed_by_id',
        'rpo_l10n': 'rpo_l10n',
        'managed_by_l10n': 'managed_by_l10n',
        'replication_sessions': 'replication_sessions',
        'policies': 'policies'
    }

    def __init__(self, id=None, name=None, rpo=None, remote_system_id=None, is_replica=False, is_read_only=False, alert_threshold=None, managed_by=None, managed_by_id=None, rpo_l10n=None, managed_by_l10n=None, replication_sessions=None, policies=None, _configuration=None):  # noqa: E501
        """ReplicationRuleInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._rpo = None
        self._remote_system_id = None
        self._is_replica = None
        self._is_read_only = None
        self._alert_threshold = None
        self._managed_by = None
        self._managed_by_id = None
        self._rpo_l10n = None
        self._managed_by_l10n = None
        self._replication_sessions = None
        self._policies = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if rpo is not None:
            self.rpo = rpo
        if remote_system_id is not None:
            self.remote_system_id = remote_system_id
        if is_replica is not None:
            self.is_replica = is_replica
        if is_read_only is not None:
            self.is_read_only = is_read_only
        if alert_threshold is not None:
            self.alert_threshold = alert_threshold
        if managed_by is not None:
            self.managed_by = managed_by
        if managed_by_id is not None:
            self.managed_by_id = managed_by_id
        if rpo_l10n is not None:
            self.rpo_l10n = rpo_l10n
        if managed_by_l10n is not None:
            self.managed_by_l10n = managed_by_l10n
        if replication_sessions is not None:
            self.replication_sessions = replication_sessions
        if policies is not None:
            self.policies = policies

    @property
    def id(self):
        """Gets the id of this ReplicationRuleInstance.  # noqa: E501

        Unique identifier of the replication rule.  # noqa: E501

        :return: The id of this ReplicationRuleInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReplicationRuleInstance.

        Unique identifier of the replication rule.  # noqa: E501

        :param id: The id of this ReplicationRuleInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ReplicationRuleInstance.  # noqa: E501

        Name of the replication rule.  This property supports case-insensitive filtering.  # noqa: E501

        :return: The name of this ReplicationRuleInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReplicationRuleInstance.

        Name of the replication rule.  This property supports case-insensitive filtering.  # noqa: E501

        :param name: The name of this ReplicationRuleInstance.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def rpo(self):
        """Gets the rpo of this ReplicationRuleInstance.  # noqa: E501


        :return: The rpo of this ReplicationRuleInstance.  # noqa: E501
        :rtype: RPOEnum
        """
        return self._rpo

    @rpo.setter
    def rpo(self, rpo):
        """Sets the rpo of this ReplicationRuleInstance.


        :param rpo: The rpo of this ReplicationRuleInstance.  # noqa: E501
        :type: RPOEnum
        """

        self._rpo = rpo

    @property
    def remote_system_id(self):
        """Gets the remote_system_id of this ReplicationRuleInstance.  # noqa: E501

        Unique identifier of the remote system to which this replication rule will replicate the associated storage resources.   # noqa: E501

        :return: The remote_system_id of this ReplicationRuleInstance.  # noqa: E501
        :rtype: str
        """
        return self._remote_system_id

    @remote_system_id.setter
    def remote_system_id(self, remote_system_id):
        """Sets the remote_system_id of this ReplicationRuleInstance.

        Unique identifier of the remote system to which this replication rule will replicate the associated storage resources.   # noqa: E501

        :param remote_system_id: The remote_system_id of this ReplicationRuleInstance.  # noqa: E501
        :type: str
        """

        self._remote_system_id = remote_system_id

    @property
    def is_replica(self):
        """Gets the is_replica of this ReplicationRuleInstance.  # noqa: E501

        Indicates whether this is a replica of a replication rule on a remote system that is the source of a replication session replicating a storage resource to the local system.   # noqa: E501

        :return: The is_replica of this ReplicationRuleInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_replica

    @is_replica.setter
    def is_replica(self, is_replica):
        """Sets the is_replica of this ReplicationRuleInstance.

        Indicates whether this is a replica of a replication rule on a remote system that is the source of a replication session replicating a storage resource to the local system.   # noqa: E501

        :param is_replica: The is_replica of this ReplicationRuleInstance.  # noqa: E501
        :type: bool
        """

        self._is_replica = is_replica

    @property
    def is_read_only(self):
        """Gets the is_read_only of this ReplicationRuleInstance.  # noqa: E501

        Indicates whether this replication rule can be modified.  Was added in version 3.0.0.0.  # noqa: E501

        :return: The is_read_only of this ReplicationRuleInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_read_only

    @is_read_only.setter
    def is_read_only(self, is_read_only):
        """Sets the is_read_only of this ReplicationRuleInstance.

        Indicates whether this replication rule can be modified.  Was added in version 3.0.0.0.  # noqa: E501

        :param is_read_only: The is_read_only of this ReplicationRuleInstance.  # noqa: E501
        :type: bool
        """

        self._is_read_only = is_read_only

    @property
    def alert_threshold(self):
        """Gets the alert_threshold of this ReplicationRuleInstance.  # noqa: E501

        Number of minutes the system will wait before generating a compliance alert when a replication session does not meet the RPO. By default, this will be set to the number of minutes in the configured RPO.   # noqa: E501

        :return: The alert_threshold of this ReplicationRuleInstance.  # noqa: E501
        :rtype: int
        """
        return self._alert_threshold

    @alert_threshold.setter
    def alert_threshold(self, alert_threshold):
        """Sets the alert_threshold of this ReplicationRuleInstance.

        Number of minutes the system will wait before generating a compliance alert when a replication session does not meet the RPO. By default, this will be set to the number of minutes in the configured RPO.   # noqa: E501

        :param alert_threshold: The alert_threshold of this ReplicationRuleInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                alert_threshold is not None and alert_threshold > 1440):  # noqa: E501
            raise ValueError("Invalid value for `alert_threshold`, must be a value less than or equal to `1440`")  # noqa: E501
        if (self._configuration.client_side_validation and
                alert_threshold is not None and alert_threshold < 0):  # noqa: E501
            raise ValueError("Invalid value for `alert_threshold`, must be a value greater than or equal to `0`")  # noqa: E501

        self._alert_threshold = alert_threshold

    @property
    def managed_by(self):
        """Gets the managed_by of this ReplicationRuleInstance.  # noqa: E501

         Was added in version 3.0.0.0.  # noqa: E501

        :return: The managed_by of this ReplicationRuleInstance.  # noqa: E501
        :rtype: PolicyManagedByEnum
        """
        return self._managed_by

    @managed_by.setter
    def managed_by(self, managed_by):
        """Sets the managed_by of this ReplicationRuleInstance.

         Was added in version 3.0.0.0.  # noqa: E501

        :param managed_by: The managed_by of this ReplicationRuleInstance.  # noqa: E501
        :type: PolicyManagedByEnum
        """

        self._managed_by = managed_by

    @property
    def managed_by_id(self):
        """Gets the managed_by_id of this ReplicationRuleInstance.  # noqa: E501

        Unique identifier of the managing entity based on the value of the managed_by property, as shown below:   * User - Empty   * Metro - Unique identifier of the remote system where the policy was assigned.   * Replication - Unique identifier of the source remote system.   * VMware_vSphere - Unique identifier of the owning VMware vSphere/vCenter.  Was added in version 3.0.0.0.  # noqa: E501

        :return: The managed_by_id of this ReplicationRuleInstance.  # noqa: E501
        :rtype: str
        """
        return self._managed_by_id

    @managed_by_id.setter
    def managed_by_id(self, managed_by_id):
        """Sets the managed_by_id of this ReplicationRuleInstance.

        Unique identifier of the managing entity based on the value of the managed_by property, as shown below:   * User - Empty   * Metro - Unique identifier of the remote system where the policy was assigned.   * Replication - Unique identifier of the source remote system.   * VMware_vSphere - Unique identifier of the owning VMware vSphere/vCenter.  Was added in version 3.0.0.0.  # noqa: E501

        :param managed_by_id: The managed_by_id of this ReplicationRuleInstance.  # noqa: E501
        :type: str
        """

        self._managed_by_id = managed_by_id

    @property
    def rpo_l10n(self):
        """Gets the rpo_l10n of this ReplicationRuleInstance.  # noqa: E501

        Localized message string corresponding to rpo  # noqa: E501

        :return: The rpo_l10n of this ReplicationRuleInstance.  # noqa: E501
        :rtype: str
        """
        return self._rpo_l10n

    @rpo_l10n.setter
    def rpo_l10n(self, rpo_l10n):
        """Sets the rpo_l10n of this ReplicationRuleInstance.

        Localized message string corresponding to rpo  # noqa: E501

        :param rpo_l10n: The rpo_l10n of this ReplicationRuleInstance.  # noqa: E501
        :type: str
        """

        self._rpo_l10n = rpo_l10n

    @property
    def managed_by_l10n(self):
        """Gets the managed_by_l10n of this ReplicationRuleInstance.  # noqa: E501

        Localized message string corresponding to managed_by Was added in version 3.0.0.0.  # noqa: E501

        :return: The managed_by_l10n of this ReplicationRuleInstance.  # noqa: E501
        :rtype: str
        """
        return self._managed_by_l10n

    @managed_by_l10n.setter
    def managed_by_l10n(self, managed_by_l10n):
        """Sets the managed_by_l10n of this ReplicationRuleInstance.

        Localized message string corresponding to managed_by Was added in version 3.0.0.0.  # noqa: E501

        :param managed_by_l10n: The managed_by_l10n of this ReplicationRuleInstance.  # noqa: E501
        :type: str
        """

        self._managed_by_l10n = managed_by_l10n

    @property
    def replication_sessions(self):
        """Gets the replication_sessions of this ReplicationRuleInstance.  # noqa: E501

        This is the inverse of the resource type replication_session association.  # noqa: E501

        :return: The replication_sessions of this ReplicationRuleInstance.  # noqa: E501
        :rtype: list[ReplicationSessionInstance]
        """
        return self._replication_sessions

    @replication_sessions.setter
    def replication_sessions(self, replication_sessions):
        """Sets the replication_sessions of this ReplicationRuleInstance.

        This is the inverse of the resource type replication_session association.  # noqa: E501

        :param replication_sessions: The replication_sessions of this ReplicationRuleInstance.  # noqa: E501
        :type: list[ReplicationSessionInstance]
        """

        self._replication_sessions = replication_sessions

    @property
    def policies(self):
        """Gets the policies of this ReplicationRuleInstance.  # noqa: E501

        List of the policies that are associated with this replication_rule.  # noqa: E501

        :return: The policies of this ReplicationRuleInstance.  # noqa: E501
        :rtype: list[PolicyInstance]
        """
        return self._policies

    @policies.setter
    def policies(self, policies):
        """Sets the policies of this ReplicationRuleInstance.

        List of the policies that are associated with this replication_rule.  # noqa: E501

        :param policies: The policies of this ReplicationRuleInstance.  # noqa: E501
        :type: list[PolicyInstance]
        """

        self._policies = policies

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReplicationRuleInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReplicationRuleInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReplicationRuleInstance):
            return True

        return self.to_dict() != other.to_dict()
