# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class HostGroupModify(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'host_connectivity': 'HostConnectivityEnum',
        'remove_host_ids': 'list[str]',
        'add_host_ids': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'host_connectivity': 'host_connectivity',
        'remove_host_ids': 'remove_host_ids',
        'add_host_ids': 'add_host_ids'
    }

    def __init__(self, name=None, description=None, host_connectivity=None, remove_host_ids=None, add_host_ids=None, _configuration=None):  # noqa: E501
        """HostGroupModify - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._description = None
        self._host_connectivity = None
        self._remove_host_ids = None
        self._add_host_ids = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if host_connectivity is not None:
            self.host_connectivity = host_connectivity
        if remove_host_ids is not None:
            self.remove_host_ids = remove_host_ids
        if add_host_ids is not None:
            self.add_host_ids = add_host_ids

    @property
    def name(self):
        """Gets the name of this HostGroupModify.  # noqa: E501

        A new host group name. The name should not be more than 128 UTF-8 characters long and should not have any unprintable characters.  # noqa: E501

        :return: The name of this HostGroupModify.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HostGroupModify.

        A new host group name. The name should not be more than 128 UTF-8 characters long and should not have any unprintable characters.  # noqa: E501

        :param name: The name of this HostGroupModify.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 128):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this HostGroupModify.  # noqa: E501

        An optional description for the host group. The description should not be more than 256 UTF-8  characters long and should not have any unprintable characters.  # noqa: E501

        :return: The description of this HostGroupModify.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this HostGroupModify.

        An optional description for the host group. The description should not be more than 256 UTF-8  characters long and should not have any unprintable characters.  # noqa: E501

        :param description: The description of this HostGroupModify.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                description is not None and len(description) > 256):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `256`")  # noqa: E501

        self._description = description

    @property
    def host_connectivity(self):
        """Gets the host_connectivity of this HostGroupModify.  # noqa: E501

         Was added in version 3.0.0.0.  # noqa: E501

        :return: The host_connectivity of this HostGroupModify.  # noqa: E501
        :rtype: HostConnectivityEnum
        """
        return self._host_connectivity

    @host_connectivity.setter
    def host_connectivity(self, host_connectivity):
        """Sets the host_connectivity of this HostGroupModify.

         Was added in version 3.0.0.0.  # noqa: E501

        :param host_connectivity: The host_connectivity of this HostGroupModify.  # noqa: E501
        :type: HostConnectivityEnum
        """

        self._host_connectivity = host_connectivity

    @property
    def remove_host_ids(self):
        """Gets the remove_host_ids of this HostGroupModify.  # noqa: E501

        List of hosts to be removed from the host group. The operation fails if the host group is attached to any volume and the list includes all hosts in the host group.  # noqa: E501

        :return: The remove_host_ids of this HostGroupModify.  # noqa: E501
        :rtype: list[str]
        """
        return self._remove_host_ids

    @remove_host_ids.setter
    def remove_host_ids(self, remove_host_ids):
        """Sets the remove_host_ids of this HostGroupModify.

        List of hosts to be removed from the host group. The operation fails if the host group is attached to any volume and the list includes all hosts in the host group.  # noqa: E501

        :param remove_host_ids: The remove_host_ids of this HostGroupModify.  # noqa: E501
        :type: list[str]
        """

        self._remove_host_ids = remove_host_ids

    @property
    def add_host_ids(self):
        """Gets the add_host_ids of this HostGroupModify.  # noqa: E501

        List of hosts to be added to host group. The operation fails if the host(s) to be added are attached to volume.  # noqa: E501

        :return: The add_host_ids of this HostGroupModify.  # noqa: E501
        :rtype: list[str]
        """
        return self._add_host_ids

    @add_host_ids.setter
    def add_host_ids(self, add_host_ids):
        """Sets the add_host_ids of this HostGroupModify.

        List of hosts to be added to host group. The operation fails if the host(s) to be added are attached to volume.  # noqa: E501

        :param add_host_ids: The add_host_ids of this HostGroupModify.  # noqa: E501
        :type: list[str]
        """

        self._add_host_ids = add_host_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HostGroupModify, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HostGroupModify):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HostGroupModify):
            return True

        return self.to_dict() != other.to_dict()
