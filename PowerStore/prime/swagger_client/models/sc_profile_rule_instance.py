# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class ScProfileRuleInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'expiration': 'int',
        'frequency': 'ScScheduleTypeEnum',
        'start_date_time': 'datetime',
        'start_time': 'str',
        'end_time': 'str',
        'interval': 'int',
        'month_of_year': 'list[MonthOfYearEnum]',
        'week_of_month': 'list[WeekOfMonthEnum]',
        'day_of_week': 'list[DayOfWeekEnum]',
        'date_of_month': 'list[int]',
        'frequency_l10n': 'str',
        'month_of_year_l10n': 'list[str]',
        'week_of_month_l10n': 'list[str]',
        'day_of_week_l10n': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'expiration': 'expiration',
        'frequency': 'frequency',
        'start_date_time': 'start_date_time',
        'start_time': 'start_time',
        'end_time': 'end_time',
        'interval': 'interval',
        'month_of_year': 'month_of_year',
        'week_of_month': 'week_of_month',
        'day_of_week': 'day_of_week',
        'date_of_month': 'date_of_month',
        'frequency_l10n': 'frequency_l10n',
        'month_of_year_l10n': 'month_of_year_l10n',
        'week_of_month_l10n': 'week_of_month_l10n',
        'day_of_week_l10n': 'day_of_week_l10n'
    }

    def __init__(self, name=None, expiration=None, frequency=None, start_date_time=None, start_time=None, end_time=None, interval=None, month_of_year=None, week_of_month=None, day_of_week=None, date_of_month=None, frequency_l10n=None, month_of_year_l10n=None, week_of_month_l10n=None, day_of_week_l10n=None, _configuration=None):  # noqa: E501
        """ScProfileRuleInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._expiration = None
        self._frequency = None
        self._start_date_time = None
        self._start_time = None
        self._end_time = None
        self._interval = None
        self._month_of_year = None
        self._week_of_month = None
        self._day_of_week = None
        self._date_of_month = None
        self._frequency_l10n = None
        self._month_of_year_l10n = None
        self._week_of_month_l10n = None
        self._day_of_week_l10n = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if expiration is not None:
            self.expiration = expiration
        if frequency is not None:
            self.frequency = frequency
        if start_date_time is not None:
            self.start_date_time = start_date_time
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if interval is not None:
            self.interval = interval
        if month_of_year is not None:
            self.month_of_year = month_of_year
        if week_of_month is not None:
            self.week_of_month = week_of_month
        if day_of_week is not None:
            self.day_of_week = day_of_week
        if date_of_month is not None:
            self.date_of_month = date_of_month
        if frequency_l10n is not None:
            self.frequency_l10n = frequency_l10n
        if month_of_year_l10n is not None:
            self.month_of_year_l10n = month_of_year_l10n
        if week_of_month_l10n is not None:
            self.week_of_month_l10n = week_of_month_l10n
        if day_of_week_l10n is not None:
            self.day_of_week_l10n = day_of_week_l10n

    @property
    def name(self):
        """Gets the name of this ScProfileRuleInstance.  # noqa: E501

        Name of the snapshot profile rule.  # noqa: E501

        :return: The name of this ScProfileRuleInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ScProfileRuleInstance.

        Name of the snapshot profile rule.  # noqa: E501

        :param name: The name of this ScProfileRuleInstance.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def expiration(self):
        """Gets the expiration of this ScProfileRuleInstance.  # noqa: E501

        Length of time to keep snapshots before deleting them, in minutes.  # noqa: E501

        :return: The expiration of this ScProfileRuleInstance.  # noqa: E501
        :rtype: int
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this ScProfileRuleInstance.

        Length of time to keep snapshots before deleting them, in minutes.  # noqa: E501

        :param expiration: The expiration of this ScProfileRuleInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                expiration is not None and expiration > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `expiration`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                expiration is not None and expiration < 0):  # noqa: E501
            raise ValueError("Invalid value for `expiration`, must be a value greater than or equal to `0`")  # noqa: E501

        self._expiration = expiration

    @property
    def frequency(self):
        """Gets the frequency of this ScProfileRuleInstance.  # noqa: E501

        Frequency at which the snapshot will be taken.  # noqa: E501

        :return: The frequency of this ScProfileRuleInstance.  # noqa: E501
        :rtype: ScScheduleTypeEnum
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this ScProfileRuleInstance.

        Frequency at which the snapshot will be taken.  # noqa: E501

        :param frequency: The frequency of this ScProfileRuleInstance.  # noqa: E501
        :type: ScScheduleTypeEnum
        """

        self._frequency = frequency

    @property
    def start_date_time(self):
        """Gets the start_date_time of this ScProfileRuleInstance.  # noqa: E501

        Date and time when the snapshot will be created. This applies to the value Once in the ScScheduleTypeEnum.  # noqa: E501

        :return: The start_date_time of this ScProfileRuleInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date_time

    @start_date_time.setter
    def start_date_time(self, start_date_time):
        """Sets the start_date_time of this ScProfileRuleInstance.

        Date and time when the snapshot will be created. This applies to the value Once in the ScScheduleTypeEnum.  # noqa: E501

        :param start_date_time: The start_date_time of this ScProfileRuleInstance.  # noqa: E501
        :type: datetime
        """

        self._start_date_time = start_date_time

    @property
    def start_time(self):
        """Gets the start_time of this ScProfileRuleInstance.  # noqa: E501

        Time when snapshot creation will start.  # noqa: E501

        :return: The start_time of this ScProfileRuleInstance.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ScProfileRuleInstance.

        Time when snapshot creation will start.  # noqa: E501

        :param start_time: The start_time of this ScProfileRuleInstance.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this ScProfileRuleInstance.  # noqa: E501

        Time when snapshot creation will stop.  # noqa: E501

        :return: The end_time of this ScProfileRuleInstance.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this ScProfileRuleInstance.

        Time when snapshot creation will stop.  # noqa: E501

        :param end_time: The end_time of this ScProfileRuleInstance.  # noqa: E501
        :type: str
        """

        self._end_time = end_time

    @property
    def interval(self):
        """Gets the interval of this ScProfileRuleInstance.  # noqa: E501

        Time interval between any two snapshot creations, in minutes.  # noqa: E501

        :return: The interval of this ScProfileRuleInstance.  # noqa: E501
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this ScProfileRuleInstance.

        Time interval between any two snapshot creations, in minutes.  # noqa: E501

        :param interval: The interval of this ScProfileRuleInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                interval is not None and interval > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `interval`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                interval is not None and interval < 0):  # noqa: E501
            raise ValueError("Invalid value for `interval`, must be a value greater than or equal to `0`")  # noqa: E501

        self._interval = interval

    @property
    def month_of_year(self):
        """Gets the month_of_year of this ScProfileRuleInstance.  # noqa: E501

        Months of the year in which a snapshot will be taken.  # noqa: E501

        :return: The month_of_year of this ScProfileRuleInstance.  # noqa: E501
        :rtype: list[MonthOfYearEnum]
        """
        return self._month_of_year

    @month_of_year.setter
    def month_of_year(self, month_of_year):
        """Sets the month_of_year of this ScProfileRuleInstance.

        Months of the year in which a snapshot will be taken.  # noqa: E501

        :param month_of_year: The month_of_year of this ScProfileRuleInstance.  # noqa: E501
        :type: list[MonthOfYearEnum]
        """

        self._month_of_year = month_of_year

    @property
    def week_of_month(self):
        """Gets the week_of_month of this ScProfileRuleInstance.  # noqa: E501

        Weeks of the month in which a snapshot will be taken.  # noqa: E501

        :return: The week_of_month of this ScProfileRuleInstance.  # noqa: E501
        :rtype: list[WeekOfMonthEnum]
        """
        return self._week_of_month

    @week_of_month.setter
    def week_of_month(self, week_of_month):
        """Sets the week_of_month of this ScProfileRuleInstance.

        Weeks of the month in which a snapshot will be taken.  # noqa: E501

        :param week_of_month: The week_of_month of this ScProfileRuleInstance.  # noqa: E501
        :type: list[WeekOfMonthEnum]
        """

        self._week_of_month = week_of_month

    @property
    def day_of_week(self):
        """Gets the day_of_week of this ScProfileRuleInstance.  # noqa: E501

        Days of the week in which a snapshot will be taken.  # noqa: E501

        :return: The day_of_week of this ScProfileRuleInstance.  # noqa: E501
        :rtype: list[DayOfWeekEnum]
        """
        return self._day_of_week

    @day_of_week.setter
    def day_of_week(self, day_of_week):
        """Sets the day_of_week of this ScProfileRuleInstance.

        Days of the week in which a snapshot will be taken.  # noqa: E501

        :param day_of_week: The day_of_week of this ScProfileRuleInstance.  # noqa: E501
        :type: list[DayOfWeekEnum]
        """

        self._day_of_week = day_of_week

    @property
    def date_of_month(self):
        """Gets the date_of_month of this ScProfileRuleInstance.  # noqa: E501

        Dates of the month in which a snapshot will be taken.  # noqa: E501

        :return: The date_of_month of this ScProfileRuleInstance.  # noqa: E501
        :rtype: list[int]
        """
        return self._date_of_month

    @date_of_month.setter
    def date_of_month(self, date_of_month):
        """Sets the date_of_month of this ScProfileRuleInstance.

        Dates of the month in which a snapshot will be taken.  # noqa: E501

        :param date_of_month: The date_of_month of this ScProfileRuleInstance.  # noqa: E501
        :type: list[int]
        """

        self._date_of_month = date_of_month

    @property
    def frequency_l10n(self):
        """Gets the frequency_l10n of this ScProfileRuleInstance.  # noqa: E501

        Localized message string corresponding to frequency  # noqa: E501

        :return: The frequency_l10n of this ScProfileRuleInstance.  # noqa: E501
        :rtype: str
        """
        return self._frequency_l10n

    @frequency_l10n.setter
    def frequency_l10n(self, frequency_l10n):
        """Sets the frequency_l10n of this ScProfileRuleInstance.

        Localized message string corresponding to frequency  # noqa: E501

        :param frequency_l10n: The frequency_l10n of this ScProfileRuleInstance.  # noqa: E501
        :type: str
        """

        self._frequency_l10n = frequency_l10n

    @property
    def month_of_year_l10n(self):
        """Gets the month_of_year_l10n of this ScProfileRuleInstance.  # noqa: E501

        Localized message array corresponding to month_of_year  # noqa: E501

        :return: The month_of_year_l10n of this ScProfileRuleInstance.  # noqa: E501
        :rtype: list[str]
        """
        return self._month_of_year_l10n

    @month_of_year_l10n.setter
    def month_of_year_l10n(self, month_of_year_l10n):
        """Sets the month_of_year_l10n of this ScProfileRuleInstance.

        Localized message array corresponding to month_of_year  # noqa: E501

        :param month_of_year_l10n: The month_of_year_l10n of this ScProfileRuleInstance.  # noqa: E501
        :type: list[str]
        """

        self._month_of_year_l10n = month_of_year_l10n

    @property
    def week_of_month_l10n(self):
        """Gets the week_of_month_l10n of this ScProfileRuleInstance.  # noqa: E501

        Localized message array corresponding to week_of_month  # noqa: E501

        :return: The week_of_month_l10n of this ScProfileRuleInstance.  # noqa: E501
        :rtype: list[str]
        """
        return self._week_of_month_l10n

    @week_of_month_l10n.setter
    def week_of_month_l10n(self, week_of_month_l10n):
        """Sets the week_of_month_l10n of this ScProfileRuleInstance.

        Localized message array corresponding to week_of_month  # noqa: E501

        :param week_of_month_l10n: The week_of_month_l10n of this ScProfileRuleInstance.  # noqa: E501
        :type: list[str]
        """

        self._week_of_month_l10n = week_of_month_l10n

    @property
    def day_of_week_l10n(self):
        """Gets the day_of_week_l10n of this ScProfileRuleInstance.  # noqa: E501

        Localized message array corresponding to day_of_week  # noqa: E501

        :return: The day_of_week_l10n of this ScProfileRuleInstance.  # noqa: E501
        :rtype: list[str]
        """
        return self._day_of_week_l10n

    @day_of_week_l10n.setter
    def day_of_week_l10n(self, day_of_week_l10n):
        """Sets the day_of_week_l10n of this ScProfileRuleInstance.

        Localized message array corresponding to day_of_week  # noqa: E501

        :param day_of_week_l10n: The day_of_week_l10n of this ScProfileRuleInstance.  # noqa: E501
        :type: list[str]
        """

        self._day_of_week_l10n = day_of_week_l10n

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScProfileRuleInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScProfileRuleInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ScProfileRuleInstance):
            return True

        return self.to_dict() != other.to_dict()
