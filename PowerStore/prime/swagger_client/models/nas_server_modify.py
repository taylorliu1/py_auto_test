# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class NasServerModify(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'current_node_id': 'str',
        'preferred_node_id': 'str',
        'current_unix_directory_service': 'NASServerCurrentUnixDirectoryServiceEnum',
        'default_unix_user': 'str',
        'default_windows_user': 'str',
        'is_username_translation_enabled': 'bool',
        'is_auto_user_mapping_enabled': 'bool',
        'production_i_pv4_interface_id': 'str',
        'production_i_pv6_interface_id': 'str',
        'backup_i_pv4_interface_id': 'str',
        'backup_i_pv6_interface_id': 'str',
        'file_events_publisher_id': 'str',
        'file_events_publishing_mode': 'FileEventsPublishingModeEnum',
        'protection_policy_id': 'str',
        'is_replication_destination': 'bool',
        'is_production_mode_enabled': 'bool',
        'force': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'current_node_id': 'current_node_id',
        'preferred_node_id': 'preferred_node_id',
        'current_unix_directory_service': 'current_unix_directory_service',
        'default_unix_user': 'default_unix_user',
        'default_windows_user': 'default_windows_user',
        'is_username_translation_enabled': 'is_username_translation_enabled',
        'is_auto_user_mapping_enabled': 'is_auto_user_mapping_enabled',
        'production_i_pv4_interface_id': 'production_IPv4_interface_id',
        'production_i_pv6_interface_id': 'production_IPv6_interface_id',
        'backup_i_pv4_interface_id': 'backup_IPv4_interface_id',
        'backup_i_pv6_interface_id': 'backup_IPv6_interface_id',
        'file_events_publisher_id': 'file_events_publisher_id',
        'file_events_publishing_mode': 'file_events_publishing_mode',
        'protection_policy_id': 'protection_policy_id',
        'is_replication_destination': 'is_replication_destination',
        'is_production_mode_enabled': 'is_production_mode_enabled',
        'force': 'force'
    }

    def __init__(self, name=None, description=None, current_node_id=None, preferred_node_id=None, current_unix_directory_service=None, default_unix_user=None, default_windows_user=None, is_username_translation_enabled=False, is_auto_user_mapping_enabled=False, production_i_pv4_interface_id=None, production_i_pv6_interface_id=None, backup_i_pv4_interface_id=None, backup_i_pv6_interface_id=None, file_events_publisher_id=None, file_events_publishing_mode=None, protection_policy_id=None, is_replication_destination=None, is_production_mode_enabled=None, force=False, _configuration=None):  # noqa: E501
        """NasServerModify - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._description = None
        self._current_node_id = None
        self._preferred_node_id = None
        self._current_unix_directory_service = None
        self._default_unix_user = None
        self._default_windows_user = None
        self._is_username_translation_enabled = None
        self._is_auto_user_mapping_enabled = None
        self._production_i_pv4_interface_id = None
        self._production_i_pv6_interface_id = None
        self._backup_i_pv4_interface_id = None
        self._backup_i_pv6_interface_id = None
        self._file_events_publisher_id = None
        self._file_events_publishing_mode = None
        self._protection_policy_id = None
        self._is_replication_destination = None
        self._is_production_mode_enabled = None
        self._force = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if current_node_id is not None:
            self.current_node_id = current_node_id
        if preferred_node_id is not None:
            self.preferred_node_id = preferred_node_id
        if current_unix_directory_service is not None:
            self.current_unix_directory_service = current_unix_directory_service
        if default_unix_user is not None:
            self.default_unix_user = default_unix_user
        if default_windows_user is not None:
            self.default_windows_user = default_windows_user
        if is_username_translation_enabled is not None:
            self.is_username_translation_enabled = is_username_translation_enabled
        if is_auto_user_mapping_enabled is not None:
            self.is_auto_user_mapping_enabled = is_auto_user_mapping_enabled
        if production_i_pv4_interface_id is not None:
            self.production_i_pv4_interface_id = production_i_pv4_interface_id
        if production_i_pv6_interface_id is not None:
            self.production_i_pv6_interface_id = production_i_pv6_interface_id
        if backup_i_pv4_interface_id is not None:
            self.backup_i_pv4_interface_id = backup_i_pv4_interface_id
        if backup_i_pv6_interface_id is not None:
            self.backup_i_pv6_interface_id = backup_i_pv6_interface_id
        if file_events_publisher_id is not None:
            self.file_events_publisher_id = file_events_publisher_id
        if file_events_publishing_mode is not None:
            self.file_events_publishing_mode = file_events_publishing_mode
        if protection_policy_id is not None:
            self.protection_policy_id = protection_policy_id
        if is_replication_destination is not None:
            self.is_replication_destination = is_replication_destination
        if is_production_mode_enabled is not None:
            self.is_production_mode_enabled = is_production_mode_enabled
        if force is not None:
            self.force = force

    @property
    def name(self):
        """Gets the name of this NasServerModify.  # noqa: E501

        Name of the NAS server.  # noqa: E501

        :return: The name of this NasServerModify.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NasServerModify.

        Name of the NAS server.  # noqa: E501

        :param name: The name of this NasServerModify.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 255):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this NasServerModify.  # noqa: E501

        Description of the NAS server.  # noqa: E501

        :return: The description of this NasServerModify.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NasServerModify.

        Description of the NAS server.  # noqa: E501

        :param description: The description of this NasServerModify.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                description is not None and len(description) > 255):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                description is not None and len(description) < 0):
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")  # noqa: E501

        self._description = description

    @property
    def current_node_id(self):
        """Gets the current_node_id of this NasServerModify.  # noqa: E501

        Unique identifier of the node on which the NAS server is running.  # noqa: E501

        :return: The current_node_id of this NasServerModify.  # noqa: E501
        :rtype: str
        """
        return self._current_node_id

    @current_node_id.setter
    def current_node_id(self, current_node_id):
        """Sets the current_node_id of this NasServerModify.

        Unique identifier of the node on which the NAS server is running.  # noqa: E501

        :param current_node_id: The current_node_id of this NasServerModify.  # noqa: E501
        :type: str
        """

        self._current_node_id = current_node_id

    @property
    def preferred_node_id(self):
        """Gets the preferred_node_id of this NasServerModify.  # noqa: E501

        Unique identifier of the preferred node for the NAS server The initial value (on NAS server create) is taken from the current node.  # noqa: E501

        :return: The preferred_node_id of this NasServerModify.  # noqa: E501
        :rtype: str
        """
        return self._preferred_node_id

    @preferred_node_id.setter
    def preferred_node_id(self, preferred_node_id):
        """Sets the preferred_node_id of this NasServerModify.

        Unique identifier of the preferred node for the NAS server The initial value (on NAS server create) is taken from the current node.  # noqa: E501

        :param preferred_node_id: The preferred_node_id of this NasServerModify.  # noqa: E501
        :type: str
        """

        self._preferred_node_id = preferred_node_id

    @property
    def current_unix_directory_service(self):
        """Gets the current_unix_directory_service of this NasServerModify.  # noqa: E501


        :return: The current_unix_directory_service of this NasServerModify.  # noqa: E501
        :rtype: NASServerCurrentUnixDirectoryServiceEnum
        """
        return self._current_unix_directory_service

    @current_unix_directory_service.setter
    def current_unix_directory_service(self, current_unix_directory_service):
        """Sets the current_unix_directory_service of this NasServerModify.


        :param current_unix_directory_service: The current_unix_directory_service of this NasServerModify.  # noqa: E501
        :type: NASServerCurrentUnixDirectoryServiceEnum
        """

        self._current_unix_directory_service = current_unix_directory_service

    @property
    def default_unix_user(self):
        """Gets the default_unix_user of this NasServerModify.  # noqa: E501

        Default Unix user name used for granting access in case of Windows to Unix user mapping failure. When empty, access in such case is denied.  # noqa: E501

        :return: The default_unix_user of this NasServerModify.  # noqa: E501
        :rtype: str
        """
        return self._default_unix_user

    @default_unix_user.setter
    def default_unix_user(self, default_unix_user):
        """Sets the default_unix_user of this NasServerModify.

        Default Unix user name used for granting access in case of Windows to Unix user mapping failure. When empty, access in such case is denied.  # noqa: E501

        :param default_unix_user: The default_unix_user of this NasServerModify.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                default_unix_user is not None and len(default_unix_user) > 63):
            raise ValueError("Invalid value for `default_unix_user`, length must be less than or equal to `63`")  # noqa: E501
        if (self._configuration.client_side_validation and
                default_unix_user is not None and len(default_unix_user) < 0):
            raise ValueError("Invalid value for `default_unix_user`, length must be greater than or equal to `0`")  # noqa: E501

        self._default_unix_user = default_unix_user

    @property
    def default_windows_user(self):
        """Gets the default_windows_user of this NasServerModify.  # noqa: E501

        Default Windows user name used for granting access in case of Unix to Windows user mapping failure. When empty, access in such case is denied.  # noqa: E501

        :return: The default_windows_user of this NasServerModify.  # noqa: E501
        :rtype: str
        """
        return self._default_windows_user

    @default_windows_user.setter
    def default_windows_user(self, default_windows_user):
        """Sets the default_windows_user of this NasServerModify.

        Default Windows user name used for granting access in case of Unix to Windows user mapping failure. When empty, access in such case is denied.  # noqa: E501

        :param default_windows_user: The default_windows_user of this NasServerModify.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                default_windows_user is not None and len(default_windows_user) > 1023):
            raise ValueError("Invalid value for `default_windows_user`, length must be less than or equal to `1023`")  # noqa: E501
        if (self._configuration.client_side_validation and
                default_windows_user is not None and len(default_windows_user) < 0):
            raise ValueError("Invalid value for `default_windows_user`, length must be greater than or equal to `0`")  # noqa: E501

        self._default_windows_user = default_windows_user

    @property
    def is_username_translation_enabled(self):
        """Gets the is_username_translation_enabled of this NasServerModify.  # noqa: E501

        Enable the possibility to match a windows account to a Unix account with different names  # noqa: E501

        :return: The is_username_translation_enabled of this NasServerModify.  # noqa: E501
        :rtype: bool
        """
        return self._is_username_translation_enabled

    @is_username_translation_enabled.setter
    def is_username_translation_enabled(self, is_username_translation_enabled):
        """Sets the is_username_translation_enabled of this NasServerModify.

        Enable the possibility to match a windows account to a Unix account with different names  # noqa: E501

        :param is_username_translation_enabled: The is_username_translation_enabled of this NasServerModify.  # noqa: E501
        :type: bool
        """

        self._is_username_translation_enabled = is_username_translation_enabled

    @property
    def is_auto_user_mapping_enabled(self):
        """Gets the is_auto_user_mapping_enabled of this NasServerModify.  # noqa: E501

        A Windows user must have a corresponding matching Unix user (uid) in order to connect. This attribute enables you to automatically generate this Unix user (uid), if that Windows user does not have any in the configured Unix directory service (UDS). In a pure SMB or non multi-protocol environment, this should be set to true.   # noqa: E501

        :return: The is_auto_user_mapping_enabled of this NasServerModify.  # noqa: E501
        :rtype: bool
        """
        return self._is_auto_user_mapping_enabled

    @is_auto_user_mapping_enabled.setter
    def is_auto_user_mapping_enabled(self, is_auto_user_mapping_enabled):
        """Sets the is_auto_user_mapping_enabled of this NasServerModify.

        A Windows user must have a corresponding matching Unix user (uid) in order to connect. This attribute enables you to automatically generate this Unix user (uid), if that Windows user does not have any in the configured Unix directory service (UDS). In a pure SMB or non multi-protocol environment, this should be set to true.   # noqa: E501

        :param is_auto_user_mapping_enabled: The is_auto_user_mapping_enabled of this NasServerModify.  # noqa: E501
        :type: bool
        """

        self._is_auto_user_mapping_enabled = is_auto_user_mapping_enabled

    @property
    def production_i_pv4_interface_id(self):
        """Gets the production_i_pv4_interface_id of this NasServerModify.  # noqa: E501

        Unique identifier of the preferred IPv4 production interface.  # noqa: E501

        :return: The production_i_pv4_interface_id of this NasServerModify.  # noqa: E501
        :rtype: str
        """
        return self._production_i_pv4_interface_id

    @production_i_pv4_interface_id.setter
    def production_i_pv4_interface_id(self, production_i_pv4_interface_id):
        """Sets the production_i_pv4_interface_id of this NasServerModify.

        Unique identifier of the preferred IPv4 production interface.  # noqa: E501

        :param production_i_pv4_interface_id: The production_i_pv4_interface_id of this NasServerModify.  # noqa: E501
        :type: str
        """

        self._production_i_pv4_interface_id = production_i_pv4_interface_id

    @property
    def production_i_pv6_interface_id(self):
        """Gets the production_i_pv6_interface_id of this NasServerModify.  # noqa: E501

        Unique identifier of the preferred IPv6 production interface.  # noqa: E501

        :return: The production_i_pv6_interface_id of this NasServerModify.  # noqa: E501
        :rtype: str
        """
        return self._production_i_pv6_interface_id

    @production_i_pv6_interface_id.setter
    def production_i_pv6_interface_id(self, production_i_pv6_interface_id):
        """Sets the production_i_pv6_interface_id of this NasServerModify.

        Unique identifier of the preferred IPv6 production interface.  # noqa: E501

        :param production_i_pv6_interface_id: The production_i_pv6_interface_id of this NasServerModify.  # noqa: E501
        :type: str
        """

        self._production_i_pv6_interface_id = production_i_pv6_interface_id

    @property
    def backup_i_pv4_interface_id(self):
        """Gets the backup_i_pv4_interface_id of this NasServerModify.  # noqa: E501

        Unique identifier of the preferred IPv4 backup interface.  # noqa: E501

        :return: The backup_i_pv4_interface_id of this NasServerModify.  # noqa: E501
        :rtype: str
        """
        return self._backup_i_pv4_interface_id

    @backup_i_pv4_interface_id.setter
    def backup_i_pv4_interface_id(self, backup_i_pv4_interface_id):
        """Sets the backup_i_pv4_interface_id of this NasServerModify.

        Unique identifier of the preferred IPv4 backup interface.  # noqa: E501

        :param backup_i_pv4_interface_id: The backup_i_pv4_interface_id of this NasServerModify.  # noqa: E501
        :type: str
        """

        self._backup_i_pv4_interface_id = backup_i_pv4_interface_id

    @property
    def backup_i_pv6_interface_id(self):
        """Gets the backup_i_pv6_interface_id of this NasServerModify.  # noqa: E501

        Unique identifier of the preferred IPv6 backup interface.  # noqa: E501

        :return: The backup_i_pv6_interface_id of this NasServerModify.  # noqa: E501
        :rtype: str
        """
        return self._backup_i_pv6_interface_id

    @backup_i_pv6_interface_id.setter
    def backup_i_pv6_interface_id(self, backup_i_pv6_interface_id):
        """Sets the backup_i_pv6_interface_id of this NasServerModify.

        Unique identifier of the preferred IPv6 backup interface.  # noqa: E501

        :param backup_i_pv6_interface_id: The backup_i_pv6_interface_id of this NasServerModify.  # noqa: E501
        :type: str
        """

        self._backup_i_pv6_interface_id = backup_i_pv6_interface_id

    @property
    def file_events_publisher_id(self):
        """Gets the file_events_publisher_id of this NasServerModify.  # noqa: E501

        Unique identifier of the file events publisher. name:{name} can be used instead of {id}. For example:'file_events_publisher_id':'name:file_events_publisher_name' Was added in version 3.0.0.0.  # noqa: E501

        :return: The file_events_publisher_id of this NasServerModify.  # noqa: E501
        :rtype: str
        """
        return self._file_events_publisher_id

    @file_events_publisher_id.setter
    def file_events_publisher_id(self, file_events_publisher_id):
        """Sets the file_events_publisher_id of this NasServerModify.

        Unique identifier of the file events publisher. name:{name} can be used instead of {id}. For example:'file_events_publisher_id':'name:file_events_publisher_name' Was added in version 3.0.0.0.  # noqa: E501

        :param file_events_publisher_id: The file_events_publisher_id of this NasServerModify.  # noqa: E501
        :type: str
        """

        self._file_events_publisher_id = file_events_publisher_id

    @property
    def file_events_publishing_mode(self):
        """Gets the file_events_publishing_mode of this NasServerModify.  # noqa: E501

         Was added in version 3.0.0.0.  # noqa: E501

        :return: The file_events_publishing_mode of this NasServerModify.  # noqa: E501
        :rtype: FileEventsPublishingModeEnum
        """
        return self._file_events_publishing_mode

    @file_events_publishing_mode.setter
    def file_events_publishing_mode(self, file_events_publishing_mode):
        """Sets the file_events_publishing_mode of this NasServerModify.

         Was added in version 3.0.0.0.  # noqa: E501

        :param file_events_publishing_mode: The file_events_publishing_mode of this NasServerModify.  # noqa: E501
        :type: FileEventsPublishingModeEnum
        """

        self._file_events_publishing_mode = file_events_publishing_mode

    @property
    def protection_policy_id(self):
        """Gets the protection_policy_id of this NasServerModify.  # noqa: E501

        Id of the protection policy applied to the nas server. Was added in version 3.0.0.0.  # noqa: E501

        :return: The protection_policy_id of this NasServerModify.  # noqa: E501
        :rtype: str
        """
        return self._protection_policy_id

    @protection_policy_id.setter
    def protection_policy_id(self, protection_policy_id):
        """Sets the protection_policy_id of this NasServerModify.

        Id of the protection policy applied to the nas server. Was added in version 3.0.0.0.  # noqa: E501

        :param protection_policy_id: The protection_policy_id of this NasServerModify.  # noqa: E501
        :type: str
        """

        self._protection_policy_id = protection_policy_id

    @property
    def is_replication_destination(self):
        """Gets the is_replication_destination of this NasServerModify.  # noqa: E501

        Indicates nas server is a replication destination. Was added in version 3.0.0.0.  # noqa: E501

        :return: The is_replication_destination of this NasServerModify.  # noqa: E501
        :rtype: bool
        """
        return self._is_replication_destination

    @is_replication_destination.setter
    def is_replication_destination(self, is_replication_destination):
        """Sets the is_replication_destination of this NasServerModify.

        Indicates nas server is a replication destination. Was added in version 3.0.0.0.  # noqa: E501

        :param is_replication_destination: The is_replication_destination of this NasServerModify.  # noqa: E501
        :type: bool
        """

        self._is_replication_destination = is_replication_destination

    @property
    def is_production_mode_enabled(self):
        """Gets the is_production_mode_enabled of this NasServerModify.  # noqa: E501

        true (Production mode) - In this mode, the NAS Server is fully operational. A NAS Server that is not part of a replication is always in production mode. User data is accessible through regular protocols like SMB/NFS etc. Its configuration can also be changed without any restrictions. A NAS Server that is not part of a replication is always in production mode. false (Destination mode) - In this mode, user data access and configuration change is restricted. User file systems are all unmounted and so not directly accessible. The administrator may create a snapshot of a file system and share the snap. The data is then only accessible through NFS (not secure nfs) or NDMP. Only network settings of objects can be changed (overridden locally). This includes objects such as network interfaces, dns, nis, ldap etc... This allows a destination NAS Server to have appropriate local network services configured in the event of a failover. Was added in version 3.0.0.0.  # noqa: E501

        :return: The is_production_mode_enabled of this NasServerModify.  # noqa: E501
        :rtype: bool
        """
        return self._is_production_mode_enabled

    @is_production_mode_enabled.setter
    def is_production_mode_enabled(self, is_production_mode_enabled):
        """Sets the is_production_mode_enabled of this NasServerModify.

        true (Production mode) - In this mode, the NAS Server is fully operational. A NAS Server that is not part of a replication is always in production mode. User data is accessible through regular protocols like SMB/NFS etc. Its configuration can also be changed without any restrictions. A NAS Server that is not part of a replication is always in production mode. false (Destination mode) - In this mode, user data access and configuration change is restricted. User file systems are all unmounted and so not directly accessible. The administrator may create a snapshot of a file system and share the snap. The data is then only accessible through NFS (not secure nfs) or NDMP. Only network settings of objects can be changed (overridden locally). This includes objects such as network interfaces, dns, nis, ldap etc... This allows a destination NAS Server to have appropriate local network services configured in the event of a failover. Was added in version 3.0.0.0.  # noqa: E501

        :param is_production_mode_enabled: The is_production_mode_enabled of this NasServerModify.  # noqa: E501
        :type: bool
        """

        self._is_production_mode_enabled = is_production_mode_enabled

    @property
    def force(self):
        """Gets the force of this NasServerModify.  # noqa: E501

        Normally a replication destination NAS server cannot be modified since it is controlled by replication. However, there can be cases where replication has failed or is no longer active and the replication destination NAS server needs to be cleaned up. With the force option, the user will be allowed to remove the protection policy from the replication destination NAS server provided that the replication session does not exists. This parameter defaults to false, if not specified. Was added in version 3.0.0.0.  # noqa: E501

        :return: The force of this NasServerModify.  # noqa: E501
        :rtype: bool
        """
        return self._force

    @force.setter
    def force(self, force):
        """Sets the force of this NasServerModify.

        Normally a replication destination NAS server cannot be modified since it is controlled by replication. However, there can be cases where replication has failed or is no longer active and the replication destination NAS server needs to be cleaned up. With the force option, the user will be allowed to remove the protection policy from the replication destination NAS server provided that the replication session does not exists. This parameter defaults to false, if not specified. Was added in version 3.0.0.0.  # noqa: E501

        :param force: The force of this NasServerModify.  # noqa: E501
        :type: bool
        """

        self._force = force

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NasServerModify, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NasServerModify):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NasServerModify):
            return True

        return self.to_dict() != other.to_dict()
