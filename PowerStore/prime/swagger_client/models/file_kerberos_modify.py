# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class FileKerberosModify(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'realm': 'str',
        'kdc_addresses': 'list[str]',
        'add_kdc_addresses': 'list[str]',
        'remove_kdc_addresses': 'list[str]',
        'port_number': 'int'
    }

    attribute_map = {
        'realm': 'realm',
        'kdc_addresses': 'kdc_addresses',
        'add_kdc_addresses': 'add_kdc_addresses',
        'remove_kdc_addresses': 'remove_kdc_addresses',
        'port_number': 'port_number'
    }

    def __init__(self, realm=None, kdc_addresses=None, add_kdc_addresses=None, remove_kdc_addresses=None, port_number=88, _configuration=None):  # noqa: E501
        """FileKerberosModify - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._realm = None
        self._kdc_addresses = None
        self._add_kdc_addresses = None
        self._remove_kdc_addresses = None
        self._port_number = None
        self.discriminator = None

        if realm is not None:
            self.realm = realm
        if kdc_addresses is not None:
            self.kdc_addresses = kdc_addresses
        if add_kdc_addresses is not None:
            self.add_kdc_addresses = add_kdc_addresses
        if remove_kdc_addresses is not None:
            self.remove_kdc_addresses = remove_kdc_addresses
        if port_number is not None:
            self.port_number = port_number

    @property
    def realm(self):
        """Gets the realm of this FileKerberosModify.  # noqa: E501

        Realm name of the Kerberos Service.  # noqa: E501

        :return: The realm of this FileKerberosModify.  # noqa: E501
        :rtype: str
        """
        return self._realm

    @realm.setter
    def realm(self, realm):
        """Sets the realm of this FileKerberosModify.

        Realm name of the Kerberos Service.  # noqa: E501

        :param realm: The realm of this FileKerberosModify.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                realm is not None and len(realm) > 255):
            raise ValueError("Invalid value for `realm`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                realm is not None and len(realm) < 1):
            raise ValueError("Invalid value for `realm`, length must be greater than or equal to `1`")  # noqa: E501

        self._realm = realm

    @property
    def kdc_addresses(self):
        """Gets the kdc_addresses of this FileKerberosModify.  # noqa: E501

        Fully Qualified domain names of the Kerberos Key Distribution Center (KDC) servers. IPv4 and IPv6 addresses are not supported.  # noqa: E501

        :return: The kdc_addresses of this FileKerberosModify.  # noqa: E501
        :rtype: list[str]
        """
        return self._kdc_addresses

    @kdc_addresses.setter
    def kdc_addresses(self, kdc_addresses):
        """Sets the kdc_addresses of this FileKerberosModify.

        Fully Qualified domain names of the Kerberos Key Distribution Center (KDC) servers. IPv4 and IPv6 addresses are not supported.  # noqa: E501

        :param kdc_addresses: The kdc_addresses of this FileKerberosModify.  # noqa: E501
        :type: list[str]
        """

        self._kdc_addresses = kdc_addresses

    @property
    def add_kdc_addresses(self):
        """Gets the add_kdc_addresses of this FileKerberosModify.  # noqa: E501

        Fully Qualified domain names of the Kerberos Key Distribution Center (KDC) servers to add to the current list. Error occurs if name already exists. Cannot be combined with kdc_addresses. IPv4 and IPv6 addresses are not supported.  # noqa: E501

        :return: The add_kdc_addresses of this FileKerberosModify.  # noqa: E501
        :rtype: list[str]
        """
        return self._add_kdc_addresses

    @add_kdc_addresses.setter
    def add_kdc_addresses(self, add_kdc_addresses):
        """Sets the add_kdc_addresses of this FileKerberosModify.

        Fully Qualified domain names of the Kerberos Key Distribution Center (KDC) servers to add to the current list. Error occurs if name already exists. Cannot be combined with kdc_addresses. IPv4 and IPv6 addresses are not supported.  # noqa: E501

        :param add_kdc_addresses: The add_kdc_addresses of this FileKerberosModify.  # noqa: E501
        :type: list[str]
        """

        self._add_kdc_addresses = add_kdc_addresses

    @property
    def remove_kdc_addresses(self):
        """Gets the remove_kdc_addresses of this FileKerberosModify.  # noqa: E501

        Fully Qualified domain names of the Kerberos Key Distribution Center (KDC) servers to remove from the current list. Error occurs if name is not in the existing list. Cannot be combined with kdc_addresses. IPv4 and IPv6 addresses are not supported.  # noqa: E501

        :return: The remove_kdc_addresses of this FileKerberosModify.  # noqa: E501
        :rtype: list[str]
        """
        return self._remove_kdc_addresses

    @remove_kdc_addresses.setter
    def remove_kdc_addresses(self, remove_kdc_addresses):
        """Sets the remove_kdc_addresses of this FileKerberosModify.

        Fully Qualified domain names of the Kerberos Key Distribution Center (KDC) servers to remove from the current list. Error occurs if name is not in the existing list. Cannot be combined with kdc_addresses. IPv4 and IPv6 addresses are not supported.  # noqa: E501

        :param remove_kdc_addresses: The remove_kdc_addresses of this FileKerberosModify.  # noqa: E501
        :type: list[str]
        """

        self._remove_kdc_addresses = remove_kdc_addresses

    @property
    def port_number(self):
        """Gets the port_number of this FileKerberosModify.  # noqa: E501

        KDC servers TCP port.  # noqa: E501

        :return: The port_number of this FileKerberosModify.  # noqa: E501
        :rtype: int
        """
        return self._port_number

    @port_number.setter
    def port_number(self, port_number):
        """Sets the port_number of this FileKerberosModify.

        KDC servers TCP port.  # noqa: E501

        :param port_number: The port_number of this FileKerberosModify.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                port_number is not None and port_number > 65535):  # noqa: E501
            raise ValueError("Invalid value for `port_number`, must be a value less than or equal to `65535`")  # noqa: E501
        if (self._configuration.client_side_validation and
                port_number is not None and port_number < 1):  # noqa: E501
            raise ValueError("Invalid value for `port_number`, must be a value greater than or equal to `1`")  # noqa: E501

        self._port_number = port_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileKerberosModify, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileKerberosModify):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FileKerberosModify):
            return True

        return self.to_dict() != other.to_dict()
