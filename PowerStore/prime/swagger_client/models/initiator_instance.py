# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class InitiatorInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'host_id': 'str',
        'port_name': 'str',
        'port_type': 'InitiatorProtocolTypeEnum',
        'chap_single_username': 'str',
        'chap_mutual_username': 'str',
        'active_sessions': 'list[ActiveSessionInstance]',
        'host': 'HostInstance'
    }

    attribute_map = {
        'id': 'id',
        'host_id': 'host_id',
        'port_name': 'port_name',
        'port_type': 'port_type',
        'chap_single_username': 'chap_single_username',
        'chap_mutual_username': 'chap_mutual_username',
        'active_sessions': 'active_sessions',
        'host': 'host'
    }

    def __init__(self, id=None, host_id=None, port_name=None, port_type=None, chap_single_username=None, chap_mutual_username=None, active_sessions=None, host=None, _configuration=None):  # noqa: E501
        """InitiatorInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._host_id = None
        self._port_name = None
        self._port_type = None
        self._chap_single_username = None
        self._chap_mutual_username = None
        self._active_sessions = None
        self._host = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if host_id is not None:
            self.host_id = host_id
        if port_name is not None:
            self.port_name = port_name
        if port_type is not None:
            self.port_type = port_type
        if chap_single_username is not None:
            self.chap_single_username = chap_single_username
        if chap_mutual_username is not None:
            self.chap_mutual_username = chap_mutual_username
        if active_sessions is not None:
            self.active_sessions = active_sessions
        if host is not None:
            self.host = host

    @property
    def id(self):
        """Gets the id of this InitiatorInstance.  # noqa: E501

        Unique id of the initiator.  # noqa: E501

        :return: The id of this InitiatorInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InitiatorInstance.

        Unique id of the initiator.  # noqa: E501

        :param id: The id of this InitiatorInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def host_id(self):
        """Gets the host_id of this InitiatorInstance.  # noqa: E501

        Unique id of a host instance.  # noqa: E501

        :return: The host_id of this InitiatorInstance.  # noqa: E501
        :rtype: str
        """
        return self._host_id

    @host_id.setter
    def host_id(self, host_id):
        """Sets the host_id of this InitiatorInstance.

        Unique id of a host instance.  # noqa: E501

        :param host_id: The host_id of this InitiatorInstance.  # noqa: E501
        :type: str
        """

        self._host_id = host_id

    @property
    def port_name(self):
        """Gets the port_name of this InitiatorInstance.  # noqa: E501

        The port name, one of: IQN, WWN, or NQN.  # noqa: E501

        :return: The port_name of this InitiatorInstance.  # noqa: E501
        :rtype: str
        """
        return self._port_name

    @port_name.setter
    def port_name(self, port_name):
        """Sets the port_name of this InitiatorInstance.

        The port name, one of: IQN, WWN, or NQN.  # noqa: E501

        :param port_name: The port_name of this InitiatorInstance.  # noqa: E501
        :type: str
        """

        self._port_name = port_name

    @property
    def port_type(self):
        """Gets the port_type of this InitiatorInstance.  # noqa: E501


        :return: The port_type of this InitiatorInstance.  # noqa: E501
        :rtype: InitiatorProtocolTypeEnum
        """
        return self._port_type

    @port_type.setter
    def port_type(self, port_type):
        """Sets the port_type of this InitiatorInstance.


        :param port_type: The port_type of this InitiatorInstance.  # noqa: E501
        :type: InitiatorProtocolTypeEnum
        """

        self._port_type = port_type

    @property
    def chap_single_username(self):
        """Gets the chap_single_username of this InitiatorInstance.  # noqa: E501

        Username for CHAP authentication. This value must be 1 to 64 UTF-8 characters. CHAP username is required when the cluster CHAP mode is mutual authentication.  # noqa: E501

        :return: The chap_single_username of this InitiatorInstance.  # noqa: E501
        :rtype: str
        """
        return self._chap_single_username

    @chap_single_username.setter
    def chap_single_username(self, chap_single_username):
        """Sets the chap_single_username of this InitiatorInstance.

        Username for CHAP authentication. This value must be 1 to 64 UTF-8 characters. CHAP username is required when the cluster CHAP mode is mutual authentication.  # noqa: E501

        :param chap_single_username: The chap_single_username of this InitiatorInstance.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                chap_single_username is not None and len(chap_single_username) > 64):
            raise ValueError("Invalid value for `chap_single_username`, length must be less than or equal to `64`")  # noqa: E501
        if (self._configuration.client_side_validation and
                chap_single_username is not None and len(chap_single_username) < 1):
            raise ValueError("Invalid value for `chap_single_username`, length must be greater than or equal to `1`")  # noqa: E501

        self._chap_single_username = chap_single_username

    @property
    def chap_mutual_username(self):
        """Gets the chap_mutual_username of this InitiatorInstance.  # noqa: E501

        Username for CHAP authentication. This value must be 1 to 64 UTF-8 characters. CHAP username is required when the cluster CHAP mode is mutual authentication.  # noqa: E501

        :return: The chap_mutual_username of this InitiatorInstance.  # noqa: E501
        :rtype: str
        """
        return self._chap_mutual_username

    @chap_mutual_username.setter
    def chap_mutual_username(self, chap_mutual_username):
        """Sets the chap_mutual_username of this InitiatorInstance.

        Username for CHAP authentication. This value must be 1 to 64 UTF-8 characters. CHAP username is required when the cluster CHAP mode is mutual authentication.  # noqa: E501

        :param chap_mutual_username: The chap_mutual_username of this InitiatorInstance.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                chap_mutual_username is not None and len(chap_mutual_username) > 64):
            raise ValueError("Invalid value for `chap_mutual_username`, length must be less than or equal to `64`")  # noqa: E501
        if (self._configuration.client_side_validation and
                chap_mutual_username is not None and len(chap_mutual_username) < 1):
            raise ValueError("Invalid value for `chap_mutual_username`, length must be greater than or equal to `1`")  # noqa: E501

        self._chap_mutual_username = chap_mutual_username

    @property
    def active_sessions(self):
        """Gets the active_sessions of this InitiatorInstance.  # noqa: E501

        Array of active login sessions between an initiator and a target port.  Filtering on the fields of this embedded resource is not supported.  # noqa: E501

        :return: The active_sessions of this InitiatorInstance.  # noqa: E501
        :rtype: list[ActiveSessionInstance]
        """
        return self._active_sessions

    @active_sessions.setter
    def active_sessions(self, active_sessions):
        """Sets the active_sessions of this InitiatorInstance.

        Array of active login sessions between an initiator and a target port.  Filtering on the fields of this embedded resource is not supported.  # noqa: E501

        :param active_sessions: The active_sessions of this InitiatorInstance.  # noqa: E501
        :type: list[ActiveSessionInstance]
        """

        self._active_sessions = active_sessions

    @property
    def host(self):
        """Gets the host of this InitiatorInstance.  # noqa: E501

        This is the embeddable reference form of host_id attribute.  # noqa: E501

        :return: The host of this InitiatorInstance.  # noqa: E501
        :rtype: HostInstance
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this InitiatorInstance.

        This is the embeddable reference form of host_id attribute.  # noqa: E501

        :param host: The host of this InitiatorInstance.  # noqa: E501
        :type: HostInstance
        """

        self._host = host

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InitiatorInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InitiatorInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InitiatorInstance):
            return True

        return self.to_dict() != other.to_dict()
