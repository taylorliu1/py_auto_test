# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class VolumeGroupCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'volume_ids': 'list[str]',
        'is_write_order_consistent': 'bool',
        'protection_policy_id': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'volume_ids': 'volume_ids',
        'is_write_order_consistent': 'is_write_order_consistent',
        'protection_policy_id': 'protection_policy_id'
    }

    def __init__(self, name=None, description=None, volume_ids=None, is_write_order_consistent=True, protection_policy_id=None, _configuration=None):  # noqa: E501
        """VolumeGroupCreate - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._description = None
        self._volume_ids = None
        self._is_write_order_consistent = None
        self._protection_policy_id = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if volume_ids is not None:
            self.volume_ids = volume_ids
        if is_write_order_consistent is not None:
            self.is_write_order_consistent = is_write_order_consistent
        if protection_policy_id is not None:
            self.protection_policy_id = protection_policy_id

    @property
    def name(self):
        """Gets the name of this VolumeGroupCreate.  # noqa: E501

        Unique name for the volume group. The name should contain no special HTTP characters and no unprintable characters. Although the case of the name provided is reserved, uniqueness check is case-insensitive, so the same name in two different cases is not considered unique.  # noqa: E501

        :return: The name of this VolumeGroupCreate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VolumeGroupCreate.

        Unique name for the volume group. The name should contain no special HTTP characters and no unprintable characters. Although the case of the name provided is reserved, uniqueness check is case-insensitive, so the same name in two different cases is not considered unique.  # noqa: E501

        :param name: The name of this VolumeGroupCreate.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 128):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this VolumeGroupCreate.  # noqa: E501

        Description for the volume group. The description should not be more than 256 characters long and should not have any unprintable characters.  If description is not specified, the description for the volume group will not be set.  # noqa: E501

        :return: The description of this VolumeGroupCreate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VolumeGroupCreate.

        Description for the volume group. The description should not be more than 256 characters long and should not have any unprintable characters.  If description is not specified, the description for the volume group will not be set.  # noqa: E501

        :param description: The description of this VolumeGroupCreate.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                description is not None and len(description) > 256):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `256`")  # noqa: E501

        self._description = description

    @property
    def volume_ids(self):
        """Gets the volume_ids of this VolumeGroupCreate.  # noqa: E501

        A list of identifiers of existing volumes that should be added to the volume group.   All the volumes must be on the same Cyclone appliance and should not be part of another volume group.  If a list of volumes is not specified or if the specified list is empty, an empty volume group of type Volume will be created.  # noqa: E501

        :return: The volume_ids of this VolumeGroupCreate.  # noqa: E501
        :rtype: list[str]
        """
        return self._volume_ids

    @volume_ids.setter
    def volume_ids(self, volume_ids):
        """Sets the volume_ids of this VolumeGroupCreate.

        A list of identifiers of existing volumes that should be added to the volume group.   All the volumes must be on the same Cyclone appliance and should not be part of another volume group.  If a list of volumes is not specified or if the specified list is empty, an empty volume group of type Volume will be created.  # noqa: E501

        :param volume_ids: The volume_ids of this VolumeGroupCreate.  # noqa: E501
        :type: list[str]
        """

        self._volume_ids = volume_ids

    @property
    def is_write_order_consistent(self):
        """Gets the is_write_order_consistent of this VolumeGroupCreate.  # noqa: E501

        A boolean flag to indicate whether snapshot sets of the volume group will be write-order consistent.  This parameter defaults to true, if not specified.  # noqa: E501

        :return: The is_write_order_consistent of this VolumeGroupCreate.  # noqa: E501
        :rtype: bool
        """
        return self._is_write_order_consistent

    @is_write_order_consistent.setter
    def is_write_order_consistent(self, is_write_order_consistent):
        """Sets the is_write_order_consistent of this VolumeGroupCreate.

        A boolean flag to indicate whether snapshot sets of the volume group will be write-order consistent.  This parameter defaults to true, if not specified.  # noqa: E501

        :param is_write_order_consistent: The is_write_order_consistent of this VolumeGroupCreate.  # noqa: E501
        :type: bool
        """

        self._is_write_order_consistent = is_write_order_consistent

    @property
    def protection_policy_id(self):
        """Gets the protection_policy_id of this VolumeGroupCreate.  # noqa: E501

        Unique identifier of an optional protection policy to assign to the volume group.  # noqa: E501

        :return: The protection_policy_id of this VolumeGroupCreate.  # noqa: E501
        :rtype: str
        """
        return self._protection_policy_id

    @protection_policy_id.setter
    def protection_policy_id(self, protection_policy_id):
        """Sets the protection_policy_id of this VolumeGroupCreate.

        Unique identifier of an optional protection policy to assign to the volume group.  # noqa: E501

        :param protection_policy_id: The protection_policy_id of this VolumeGroupCreate.  # noqa: E501
        :type: str
        """

        self._protection_policy_id = protection_policy_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VolumeGroupCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VolumeGroupCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VolumeGroupCreate):
            return True

        return self.to_dict() != other.to_dict()
