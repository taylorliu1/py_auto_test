# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class SoftwarePackageInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description_l10n': 'str',
        'justification_l10n': 'str',
        'software_package_type': 'SoftwarePackageTypeEnum',
        'software_package_state': 'SoftwarePackageStateEnum',
        'size': 'int',
        'is_reboot_required': 'bool',
        'release_version': 'str',
        'build_version': 'str',
        'release_timestamp': 'datetime',
        'installed_date': 'datetime',
        'build_flavor': 'SoftwarePackageBuildFlavorEnum',
        'build_type': 'SoftwarePackageBuildTypeEnum',
        'build_id': 'str',
        'software_package_type_l10n': 'str',
        'software_package_state_l10n': 'str',
        'build_flavor_l10n': 'str',
        'build_type_l10n': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description_l10n': 'description_l10n',
        'justification_l10n': 'justification_l10n',
        'software_package_type': 'software_package_type',
        'software_package_state': 'software_package_state',
        'size': 'size',
        'is_reboot_required': 'is_reboot_required',
        'release_version': 'release_version',
        'build_version': 'build_version',
        'release_timestamp': 'release_timestamp',
        'installed_date': 'installed_date',
        'build_flavor': 'build_flavor',
        'build_type': 'build_type',
        'build_id': 'build_id',
        'software_package_type_l10n': 'software_package_type_l10n',
        'software_package_state_l10n': 'software_package_state_l10n',
        'build_flavor_l10n': 'build_flavor_l10n',
        'build_type_l10n': 'build_type_l10n'
    }

    def __init__(self, id=None, name=None, description_l10n=None, justification_l10n=None, software_package_type=None, software_package_state=None, size=None, is_reboot_required=None, release_version=None, build_version=None, release_timestamp=None, installed_date=None, build_flavor=None, build_type=None, build_id=None, software_package_type_l10n=None, software_package_state_l10n=None, build_flavor_l10n=None, build_type_l10n=None, _configuration=None):  # noqa: E501
        """SoftwarePackageInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._description_l10n = None
        self._justification_l10n = None
        self._software_package_type = None
        self._software_package_state = None
        self._size = None
        self._is_reboot_required = None
        self._release_version = None
        self._build_version = None
        self._release_timestamp = None
        self._installed_date = None
        self._build_flavor = None
        self._build_type = None
        self._build_id = None
        self._software_package_type_l10n = None
        self._software_package_state_l10n = None
        self._build_flavor_l10n = None
        self._build_type_l10n = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description_l10n is not None:
            self.description_l10n = description_l10n
        if justification_l10n is not None:
            self.justification_l10n = justification_l10n
        if software_package_type is not None:
            self.software_package_type = software_package_type
        if software_package_state is not None:
            self.software_package_state = software_package_state
        if size is not None:
            self.size = size
        if is_reboot_required is not None:
            self.is_reboot_required = is_reboot_required
        if release_version is not None:
            self.release_version = release_version
        if build_version is not None:
            self.build_version = build_version
        if release_timestamp is not None:
            self.release_timestamp = release_timestamp
        if installed_date is not None:
            self.installed_date = installed_date
        if build_flavor is not None:
            self.build_flavor = build_flavor
        if build_type is not None:
            self.build_type = build_type
        if build_id is not None:
            self.build_id = build_id
        if software_package_type_l10n is not None:
            self.software_package_type_l10n = software_package_type_l10n
        if software_package_state_l10n is not None:
            self.software_package_state_l10n = software_package_state_l10n
        if build_flavor_l10n is not None:
            self.build_flavor_l10n = build_flavor_l10n
        if build_type_l10n is not None:
            self.build_type_l10n = build_type_l10n

    @property
    def id(self):
        """Gets the id of this SoftwarePackageInstance.  # noqa: E501

        Unique identifier of the software package.  # noqa: E501

        :return: The id of this SoftwarePackageInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SoftwarePackageInstance.

        Unique identifier of the software package.  # noqa: E501

        :param id: The id of this SoftwarePackageInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this SoftwarePackageInstance.  # noqa: E501

        Name of the software package.  This property supports case-insensitive filtering.  # noqa: E501

        :return: The name of this SoftwarePackageInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SoftwarePackageInstance.

        Name of the software package.  This property supports case-insensitive filtering.  # noqa: E501

        :param name: The name of this SoftwarePackageInstance.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description_l10n(self):
        """Gets the description_l10n of this SoftwarePackageInstance.  # noqa: E501

        Summary of the contents in this package.  # noqa: E501

        :return: The description_l10n of this SoftwarePackageInstance.  # noqa: E501
        :rtype: str
        """
        return self._description_l10n

    @description_l10n.setter
    def description_l10n(self, description_l10n):
        """Sets the description_l10n of this SoftwarePackageInstance.

        Summary of the contents in this package.  # noqa: E501

        :param description_l10n: The description_l10n of this SoftwarePackageInstance.  # noqa: E501
        :type: str
        """

        self._description_l10n = description_l10n

    @property
    def justification_l10n(self):
        """Gets the justification_l10n of this SoftwarePackageInstance.  # noqa: E501

        Explanation of why this software release is recommended for this cluster.  # noqa: E501

        :return: The justification_l10n of this SoftwarePackageInstance.  # noqa: E501
        :rtype: str
        """
        return self._justification_l10n

    @justification_l10n.setter
    def justification_l10n(self, justification_l10n):
        """Sets the justification_l10n of this SoftwarePackageInstance.

        Explanation of why this software release is recommended for this cluster.  # noqa: E501

        :param justification_l10n: The justification_l10n of this SoftwarePackageInstance.  # noqa: E501
        :type: str
        """

        self._justification_l10n = justification_l10n

    @property
    def software_package_type(self):
        """Gets the software_package_type of this SoftwarePackageInstance.  # noqa: E501


        :return: The software_package_type of this SoftwarePackageInstance.  # noqa: E501
        :rtype: SoftwarePackageTypeEnum
        """
        return self._software_package_type

    @software_package_type.setter
    def software_package_type(self, software_package_type):
        """Sets the software_package_type of this SoftwarePackageInstance.


        :param software_package_type: The software_package_type of this SoftwarePackageInstance.  # noqa: E501
        :type: SoftwarePackageTypeEnum
        """

        self._software_package_type = software_package_type

    @property
    def software_package_state(self):
        """Gets the software_package_state of this SoftwarePackageInstance.  # noqa: E501


        :return: The software_package_state of this SoftwarePackageInstance.  # noqa: E501
        :rtype: SoftwarePackageStateEnum
        """
        return self._software_package_state

    @software_package_state.setter
    def software_package_state(self, software_package_state):
        """Sets the software_package_state of this SoftwarePackageInstance.


        :param software_package_state: The software_package_state of this SoftwarePackageInstance.  # noqa: E501
        :type: SoftwarePackageStateEnum
        """

        self._software_package_state = software_package_state

    @property
    def size(self):
        """Gets the size of this SoftwarePackageInstance.  # noqa: E501

        File size of the software package in bytes.  # noqa: E501

        :return: The size of this SoftwarePackageInstance.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this SoftwarePackageInstance.

        File size of the software package in bytes.  # noqa: E501

        :param size: The size of this SoftwarePackageInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                size is not None and size > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `size`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                size is not None and size < 0):  # noqa: E501
            raise ValueError("Invalid value for `size`, must be a value greater than or equal to `0`")  # noqa: E501

        self._size = size

    @property
    def is_reboot_required(self):
        """Gets the is_reboot_required of this SoftwarePackageInstance.  # noqa: E501

        Whether a reboot is required during the upgrade process.  # noqa: E501

        :return: The is_reboot_required of this SoftwarePackageInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_reboot_required

    @is_reboot_required.setter
    def is_reboot_required(self, is_reboot_required):
        """Sets the is_reboot_required of this SoftwarePackageInstance.

        Whether a reboot is required during the upgrade process.  # noqa: E501

        :param is_reboot_required: The is_reboot_required of this SoftwarePackageInstance.  # noqa: E501
        :type: bool
        """

        self._is_reboot_required = is_reboot_required

    @property
    def release_version(self):
        """Gets the release_version of this SoftwarePackageInstance.  # noqa: E501

        Version number of the software package.  # noqa: E501

        :return: The release_version of this SoftwarePackageInstance.  # noqa: E501
        :rtype: str
        """
        return self._release_version

    @release_version.setter
    def release_version(self, release_version):
        """Sets the release_version of this SoftwarePackageInstance.

        Version number of the software package.  # noqa: E501

        :param release_version: The release_version of this SoftwarePackageInstance.  # noqa: E501
        :type: str
        """

        self._release_version = release_version

    @property
    def build_version(self):
        """Gets the build_version of this SoftwarePackageInstance.  # noqa: E501

        Build number of the software package. Was added in version 2.0.0.0.  # noqa: E501

        :return: The build_version of this SoftwarePackageInstance.  # noqa: E501
        :rtype: str
        """
        return self._build_version

    @build_version.setter
    def build_version(self, build_version):
        """Sets the build_version of this SoftwarePackageInstance.

        Build number of the software package. Was added in version 2.0.0.0.  # noqa: E501

        :param build_version: The build_version of this SoftwarePackageInstance.  # noqa: E501
        :type: str
        """

        self._build_version = build_version

    @property
    def release_timestamp(self):
        """Gets the release_timestamp of this SoftwarePackageInstance.  # noqa: E501

        Date and time when this software package was produced.  # noqa: E501

        :return: The release_timestamp of this SoftwarePackageInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._release_timestamp

    @release_timestamp.setter
    def release_timestamp(self, release_timestamp):
        """Sets the release_timestamp of this SoftwarePackageInstance.

        Date and time when this software package was produced.  # noqa: E501

        :param release_timestamp: The release_timestamp of this SoftwarePackageInstance.  # noqa: E501
        :type: datetime
        """

        self._release_timestamp = release_timestamp

    @property
    def installed_date(self):
        """Gets the installed_date of this SoftwarePackageInstance.  # noqa: E501

        Date and time when this software package was successfully installed and committed on the cluster. If the software package has not been committed, this value is null.  # noqa: E501

        :return: The installed_date of this SoftwarePackageInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._installed_date

    @installed_date.setter
    def installed_date(self, installed_date):
        """Sets the installed_date of this SoftwarePackageInstance.

        Date and time when this software package was successfully installed and committed on the cluster. If the software package has not been committed, this value is null.  # noqa: E501

        :param installed_date: The installed_date of this SoftwarePackageInstance.  # noqa: E501
        :type: datetime
        """

        self._installed_date = installed_date

    @property
    def build_flavor(self):
        """Gets the build_flavor of this SoftwarePackageInstance.  # noqa: E501

         Was added in version 2.0.0.0.  # noqa: E501

        :return: The build_flavor of this SoftwarePackageInstance.  # noqa: E501
        :rtype: SoftwarePackageBuildFlavorEnum
        """
        return self._build_flavor

    @build_flavor.setter
    def build_flavor(self, build_flavor):
        """Sets the build_flavor of this SoftwarePackageInstance.

         Was added in version 2.0.0.0.  # noqa: E501

        :param build_flavor: The build_flavor of this SoftwarePackageInstance.  # noqa: E501
        :type: SoftwarePackageBuildFlavorEnum
        """

        self._build_flavor = build_flavor

    @property
    def build_type(self):
        """Gets the build_type of this SoftwarePackageInstance.  # noqa: E501

         Was added in version 2.0.0.0.  # noqa: E501

        :return: The build_type of this SoftwarePackageInstance.  # noqa: E501
        :rtype: SoftwarePackageBuildTypeEnum
        """
        return self._build_type

    @build_type.setter
    def build_type(self, build_type):
        """Sets the build_type of this SoftwarePackageInstance.

         Was added in version 2.0.0.0.  # noqa: E501

        :param build_type: The build_type of this SoftwarePackageInstance.  # noqa: E501
        :type: SoftwarePackageBuildTypeEnum
        """

        self._build_type = build_type

    @property
    def build_id(self):
        """Gets the build_id of this SoftwarePackageInstance.  # noqa: E501

        Unique identifier of this build. Was added in version 2.0.0.0.  # noqa: E501

        :return: The build_id of this SoftwarePackageInstance.  # noqa: E501
        :rtype: str
        """
        return self._build_id

    @build_id.setter
    def build_id(self, build_id):
        """Sets the build_id of this SoftwarePackageInstance.

        Unique identifier of this build. Was added in version 2.0.0.0.  # noqa: E501

        :param build_id: The build_id of this SoftwarePackageInstance.  # noqa: E501
        :type: str
        """

        self._build_id = build_id

    @property
    def software_package_type_l10n(self):
        """Gets the software_package_type_l10n of this SoftwarePackageInstance.  # noqa: E501

        Localized message string corresponding to software_package_type  # noqa: E501

        :return: The software_package_type_l10n of this SoftwarePackageInstance.  # noqa: E501
        :rtype: str
        """
        return self._software_package_type_l10n

    @software_package_type_l10n.setter
    def software_package_type_l10n(self, software_package_type_l10n):
        """Sets the software_package_type_l10n of this SoftwarePackageInstance.

        Localized message string corresponding to software_package_type  # noqa: E501

        :param software_package_type_l10n: The software_package_type_l10n of this SoftwarePackageInstance.  # noqa: E501
        :type: str
        """

        self._software_package_type_l10n = software_package_type_l10n

    @property
    def software_package_state_l10n(self):
        """Gets the software_package_state_l10n of this SoftwarePackageInstance.  # noqa: E501

        Localized message string corresponding to software_package_state  # noqa: E501

        :return: The software_package_state_l10n of this SoftwarePackageInstance.  # noqa: E501
        :rtype: str
        """
        return self._software_package_state_l10n

    @software_package_state_l10n.setter
    def software_package_state_l10n(self, software_package_state_l10n):
        """Sets the software_package_state_l10n of this SoftwarePackageInstance.

        Localized message string corresponding to software_package_state  # noqa: E501

        :param software_package_state_l10n: The software_package_state_l10n of this SoftwarePackageInstance.  # noqa: E501
        :type: str
        """

        self._software_package_state_l10n = software_package_state_l10n

    @property
    def build_flavor_l10n(self):
        """Gets the build_flavor_l10n of this SoftwarePackageInstance.  # noqa: E501

        Localized message string corresponding to build_flavor Was added in version 2.0.0.0.  # noqa: E501

        :return: The build_flavor_l10n of this SoftwarePackageInstance.  # noqa: E501
        :rtype: str
        """
        return self._build_flavor_l10n

    @build_flavor_l10n.setter
    def build_flavor_l10n(self, build_flavor_l10n):
        """Sets the build_flavor_l10n of this SoftwarePackageInstance.

        Localized message string corresponding to build_flavor Was added in version 2.0.0.0.  # noqa: E501

        :param build_flavor_l10n: The build_flavor_l10n of this SoftwarePackageInstance.  # noqa: E501
        :type: str
        """

        self._build_flavor_l10n = build_flavor_l10n

    @property
    def build_type_l10n(self):
        """Gets the build_type_l10n of this SoftwarePackageInstance.  # noqa: E501

        Localized message string corresponding to build_type Was added in version 2.0.0.0.  # noqa: E501

        :return: The build_type_l10n of this SoftwarePackageInstance.  # noqa: E501
        :rtype: str
        """
        return self._build_type_l10n

    @build_type_l10n.setter
    def build_type_l10n(self, build_type_l10n):
        """Sets the build_type_l10n of this SoftwarePackageInstance.

        Localized message string corresponding to build_type Was added in version 2.0.0.0.  # noqa: E501

        :param build_type_l10n: The build_type_l10n of this SoftwarePackageInstance.  # noqa: E501
        :type: str
        """

        self._build_type_l10n = build_type_l10n

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SoftwarePackageInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SoftwarePackageInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SoftwarePackageInstance):
            return True

        return self.to_dict() != other.to_dict()
