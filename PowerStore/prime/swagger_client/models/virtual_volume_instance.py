# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class VirtualVolumeInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'size': 'int',
        'type': 'VirtualVolumeTypeEnum',
        'usage_type': 'VirtualVolumeUsageTypeEnum',
        'appliance_id': 'str',
        'storage_container_id': 'str',
        'io_priority': 'IoPriorityEnum',
        'profile_id': 'str',
        'replication_group_id': 'str',
        'creator_type': 'StorageCreatorTypeEnum',
        'is_readonly': 'bool',
        'migration_session_id': 'str',
        'virtual_machine_uuid': 'str',
        'family_id': 'str',
        'parent_id': 'str',
        'source_id': 'str',
        'source_timestamp': 'datetime',
        'creation_timestamp': 'datetime',
        'naa_name': 'str',
        'is_replication_destination': 'bool',
        'location_history': 'list[LocationHistoryInstance]',
        'protection_policy_id': 'str',
        'nsid': 'int',
        'nguid': 'str',
        'type_l10n': 'str',
        'usage_type_l10n': 'str',
        'io_priority_l10n': 'str',
        'creator_type_l10n': 'str',
        'appliance': 'ApplianceInstance',
        'storage_container': 'StorageContainerInstance',
        'replication_group': 'ReplicationGroupInstance',
        'migration_session': 'MigrationSessionInstance',
        'parent': 'VirtualVolumeInstance',
        'child_virtual_volumes': 'list[VirtualVolumeInstance]',
        'source': 'VirtualVolumeInstance',
        'target_virtual_volumes': 'list[VirtualVolumeInstance]',
        'protection_policy': 'PolicyInstance',
        'host_virtual_volume_mappings': 'list[HostVirtualVolumeMappingInstance]',
        'virtual_machines': 'list[VirtualMachineInstance]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'size': 'size',
        'type': 'type',
        'usage_type': 'usage_type',
        'appliance_id': 'appliance_id',
        'storage_container_id': 'storage_container_id',
        'io_priority': 'io_priority',
        'profile_id': 'profile_id',
        'replication_group_id': 'replication_group_id',
        'creator_type': 'creator_type',
        'is_readonly': 'is_readonly',
        'migration_session_id': 'migration_session_id',
        'virtual_machine_uuid': 'virtual_machine_uuid',
        'family_id': 'family_id',
        'parent_id': 'parent_id',
        'source_id': 'source_id',
        'source_timestamp': 'source_timestamp',
        'creation_timestamp': 'creation_timestamp',
        'naa_name': 'naa_name',
        'is_replication_destination': 'is_replication_destination',
        'location_history': 'location_history',
        'protection_policy_id': 'protection_policy_id',
        'nsid': 'nsid',
        'nguid': 'nguid',
        'type_l10n': 'type_l10n',
        'usage_type_l10n': 'usage_type_l10n',
        'io_priority_l10n': 'io_priority_l10n',
        'creator_type_l10n': 'creator_type_l10n',
        'appliance': 'appliance',
        'storage_container': 'storage_container',
        'replication_group': 'replication_group',
        'migration_session': 'migration_session',
        'parent': 'parent',
        'child_virtual_volumes': 'child_virtual_volumes',
        'source': 'source',
        'target_virtual_volumes': 'target_virtual_volumes',
        'protection_policy': 'protection_policy',
        'host_virtual_volume_mappings': 'host_virtual_volume_mappings',
        'virtual_machines': 'virtual_machines'
    }

    def __init__(self, id=None, name=None, size=None, type=None, usage_type=None, appliance_id=None, storage_container_id=None, io_priority=None, profile_id=None, replication_group_id=None, creator_type=None, is_readonly=None, migration_session_id=None, virtual_machine_uuid=None, family_id=None, parent_id=None, source_id=None, source_timestamp=None, creation_timestamp=None, naa_name=None, is_replication_destination=None, location_history=None, protection_policy_id=None, nsid=None, nguid=None, type_l10n=None, usage_type_l10n=None, io_priority_l10n=None, creator_type_l10n=None, appliance=None, storage_container=None, replication_group=None, migration_session=None, parent=None, child_virtual_volumes=None, source=None, target_virtual_volumes=None, protection_policy=None, host_virtual_volume_mappings=None, virtual_machines=None, _configuration=None):  # noqa: E501
        """VirtualVolumeInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._size = None
        self._type = None
        self._usage_type = None
        self._appliance_id = None
        self._storage_container_id = None
        self._io_priority = None
        self._profile_id = None
        self._replication_group_id = None
        self._creator_type = None
        self._is_readonly = None
        self._migration_session_id = None
        self._virtual_machine_uuid = None
        self._family_id = None
        self._parent_id = None
        self._source_id = None
        self._source_timestamp = None
        self._creation_timestamp = None
        self._naa_name = None
        self._is_replication_destination = None
        self._location_history = None
        self._protection_policy_id = None
        self._nsid = None
        self._nguid = None
        self._type_l10n = None
        self._usage_type_l10n = None
        self._io_priority_l10n = None
        self._creator_type_l10n = None
        self._appliance = None
        self._storage_container = None
        self._replication_group = None
        self._migration_session = None
        self._parent = None
        self._child_virtual_volumes = None
        self._source = None
        self._target_virtual_volumes = None
        self._protection_policy = None
        self._host_virtual_volume_mappings = None
        self._virtual_machines = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if size is not None:
            self.size = size
        if type is not None:
            self.type = type
        if usage_type is not None:
            self.usage_type = usage_type
        if appliance_id is not None:
            self.appliance_id = appliance_id
        if storage_container_id is not None:
            self.storage_container_id = storage_container_id
        if io_priority is not None:
            self.io_priority = io_priority
        if profile_id is not None:
            self.profile_id = profile_id
        if replication_group_id is not None:
            self.replication_group_id = replication_group_id
        if creator_type is not None:
            self.creator_type = creator_type
        if is_readonly is not None:
            self.is_readonly = is_readonly
        if migration_session_id is not None:
            self.migration_session_id = migration_session_id
        if virtual_machine_uuid is not None:
            self.virtual_machine_uuid = virtual_machine_uuid
        if family_id is not None:
            self.family_id = family_id
        if parent_id is not None:
            self.parent_id = parent_id
        if source_id is not None:
            self.source_id = source_id
        if source_timestamp is not None:
            self.source_timestamp = source_timestamp
        if creation_timestamp is not None:
            self.creation_timestamp = creation_timestamp
        if naa_name is not None:
            self.naa_name = naa_name
        if is_replication_destination is not None:
            self.is_replication_destination = is_replication_destination
        if location_history is not None:
            self.location_history = location_history
        if protection_policy_id is not None:
            self.protection_policy_id = protection_policy_id
        if nsid is not None:
            self.nsid = nsid
        if nguid is not None:
            self.nguid = nguid
        if type_l10n is not None:
            self.type_l10n = type_l10n
        if usage_type_l10n is not None:
            self.usage_type_l10n = usage_type_l10n
        if io_priority_l10n is not None:
            self.io_priority_l10n = io_priority_l10n
        if creator_type_l10n is not None:
            self.creator_type_l10n = creator_type_l10n
        if appliance is not None:
            self.appliance = appliance
        if storage_container is not None:
            self.storage_container = storage_container
        if replication_group is not None:
            self.replication_group = replication_group
        if migration_session is not None:
            self.migration_session = migration_session
        if parent is not None:
            self.parent = parent
        if child_virtual_volumes is not None:
            self.child_virtual_volumes = child_virtual_volumes
        if source is not None:
            self.source = source
        if target_virtual_volumes is not None:
            self.target_virtual_volumes = target_virtual_volumes
        if protection_policy is not None:
            self.protection_policy = protection_policy
        if host_virtual_volume_mappings is not None:
            self.host_virtual_volume_mappings = host_virtual_volume_mappings
        if virtual_machines is not None:
            self.virtual_machines = virtual_machines

    @property
    def id(self):
        """Gets the id of this VirtualVolumeInstance.  # noqa: E501

        The unique identifier of the virtual volume.  # noqa: E501

        :return: The id of this VirtualVolumeInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VirtualVolumeInstance.

        The unique identifier of the virtual volume.  # noqa: E501

        :param id: The id of this VirtualVolumeInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this VirtualVolumeInstance.  # noqa: E501

        The name of the virtual volume, based on metadata provided by vSphere.  This property supports case-insensitive filtering.  # noqa: E501

        :return: The name of this VirtualVolumeInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VirtualVolumeInstance.

        The name of the virtual volume, based on metadata provided by vSphere.  This property supports case-insensitive filtering.  # noqa: E501

        :param name: The name of this VirtualVolumeInstance.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def size(self):
        """Gets the size of this VirtualVolumeInstance.  # noqa: E501

        The size of the virtual volume in bytes.  # noqa: E501

        :return: The size of this VirtualVolumeInstance.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this VirtualVolumeInstance.

        The size of the virtual volume in bytes.  # noqa: E501

        :param size: The size of this VirtualVolumeInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                size is not None and size > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `size`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                size is not None and size < 0):  # noqa: E501
            raise ValueError("Invalid value for `size`, must be a value greater than or equal to `0`")  # noqa: E501

        self._size = size

    @property
    def type(self):
        """Gets the type of this VirtualVolumeInstance.  # noqa: E501


        :return: The type of this VirtualVolumeInstance.  # noqa: E501
        :rtype: VirtualVolumeTypeEnum
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this VirtualVolumeInstance.


        :param type: The type of this VirtualVolumeInstance.  # noqa: E501
        :type: VirtualVolumeTypeEnum
        """

        self._type = type

    @property
    def usage_type(self):
        """Gets the usage_type of this VirtualVolumeInstance.  # noqa: E501


        :return: The usage_type of this VirtualVolumeInstance.  # noqa: E501
        :rtype: VirtualVolumeUsageTypeEnum
        """
        return self._usage_type

    @usage_type.setter
    def usage_type(self, usage_type):
        """Sets the usage_type of this VirtualVolumeInstance.


        :param usage_type: The usage_type of this VirtualVolumeInstance.  # noqa: E501
        :type: VirtualVolumeUsageTypeEnum
        """

        self._usage_type = usage_type

    @property
    def appliance_id(self):
        """Gets the appliance_id of this VirtualVolumeInstance.  # noqa: E501

        The appliance where the virtual volume resides.  # noqa: E501

        :return: The appliance_id of this VirtualVolumeInstance.  # noqa: E501
        :rtype: str
        """
        return self._appliance_id

    @appliance_id.setter
    def appliance_id(self, appliance_id):
        """Sets the appliance_id of this VirtualVolumeInstance.

        The appliance where the virtual volume resides.  # noqa: E501

        :param appliance_id: The appliance_id of this VirtualVolumeInstance.  # noqa: E501
        :type: str
        """

        self._appliance_id = appliance_id

    @property
    def storage_container_id(self):
        """Gets the storage_container_id of this VirtualVolumeInstance.  # noqa: E501

        The storage container where the virtual volume resides.  # noqa: E501

        :return: The storage_container_id of this VirtualVolumeInstance.  # noqa: E501
        :rtype: str
        """
        return self._storage_container_id

    @storage_container_id.setter
    def storage_container_id(self, storage_container_id):
        """Sets the storage_container_id of this VirtualVolumeInstance.

        The storage container where the virtual volume resides.  # noqa: E501

        :param storage_container_id: The storage_container_id of this VirtualVolumeInstance.  # noqa: E501
        :type: str
        """

        self._storage_container_id = storage_container_id

    @property
    def io_priority(self):
        """Gets the io_priority of this VirtualVolumeInstance.  # noqa: E501


        :return: The io_priority of this VirtualVolumeInstance.  # noqa: E501
        :rtype: IoPriorityEnum
        """
        return self._io_priority

    @io_priority.setter
    def io_priority(self, io_priority):
        """Sets the io_priority of this VirtualVolumeInstance.


        :param io_priority: The io_priority of this VirtualVolumeInstance.  # noqa: E501
        :type: IoPriorityEnum
        """

        self._io_priority = io_priority

    @property
    def profile_id(self):
        """Gets the profile_id of this VirtualVolumeInstance.  # noqa: E501

        The ID of the storage profile governing this virtual volume.  # noqa: E501

        :return: The profile_id of this VirtualVolumeInstance.  # noqa: E501
        :rtype: str
        """
        return self._profile_id

    @profile_id.setter
    def profile_id(self, profile_id):
        """Sets the profile_id of this VirtualVolumeInstance.

        The ID of the storage profile governing this virtual volume.  # noqa: E501

        :param profile_id: The profile_id of this VirtualVolumeInstance.  # noqa: E501
        :type: str
        """

        self._profile_id = profile_id

    @property
    def replication_group_id(self):
        """Gets the replication_group_id of this VirtualVolumeInstance.  # noqa: E501

        The unique identifier of the replication group object that this virtual volume belongs to. Was added in version 3.0.0.0.  # noqa: E501

        :return: The replication_group_id of this VirtualVolumeInstance.  # noqa: E501
        :rtype: str
        """
        return self._replication_group_id

    @replication_group_id.setter
    def replication_group_id(self, replication_group_id):
        """Sets the replication_group_id of this VirtualVolumeInstance.

        The unique identifier of the replication group object that this virtual volume belongs to. Was added in version 3.0.0.0.  # noqa: E501

        :param replication_group_id: The replication_group_id of this VirtualVolumeInstance.  # noqa: E501
        :type: str
        """

        self._replication_group_id = replication_group_id

    @property
    def creator_type(self):
        """Gets the creator_type of this VirtualVolumeInstance.  # noqa: E501


        :return: The creator_type of this VirtualVolumeInstance.  # noqa: E501
        :rtype: StorageCreatorTypeEnum
        """
        return self._creator_type

    @creator_type.setter
    def creator_type(self, creator_type):
        """Sets the creator_type of this VirtualVolumeInstance.


        :param creator_type: The creator_type of this VirtualVolumeInstance.  # noqa: E501
        :type: StorageCreatorTypeEnum
        """

        self._creator_type = creator_type

    @property
    def is_readonly(self):
        """Gets the is_readonly of this VirtualVolumeInstance.  # noqa: E501

        Indicates whether the virtual volume is read-only.  # noqa: E501

        :return: The is_readonly of this VirtualVolumeInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_readonly

    @is_readonly.setter
    def is_readonly(self, is_readonly):
        """Sets the is_readonly of this VirtualVolumeInstance.

        Indicates whether the virtual volume is read-only.  # noqa: E501

        :param is_readonly: The is_readonly of this VirtualVolumeInstance.  # noqa: E501
        :type: bool
        """

        self._is_readonly = is_readonly

    @property
    def migration_session_id(self):
        """Gets the migration_session_id of this VirtualVolumeInstance.  # noqa: E501

        If the virtual volume is part of a migration activity, the session ID for that migration.  # noqa: E501

        :return: The migration_session_id of this VirtualVolumeInstance.  # noqa: E501
        :rtype: str
        """
        return self._migration_session_id

    @migration_session_id.setter
    def migration_session_id(self, migration_session_id):
        """Sets the migration_session_id of this VirtualVolumeInstance.

        If the virtual volume is part of a migration activity, the session ID for that migration.  # noqa: E501

        :param migration_session_id: The migration_session_id of this VirtualVolumeInstance.  # noqa: E501
        :type: str
        """

        self._migration_session_id = migration_session_id

    @property
    def virtual_machine_uuid(self):
        """Gets the virtual_machine_uuid of this VirtualVolumeInstance.  # noqa: E501

        UUID of the virtual machine that owns this virtual volume.  # noqa: E501

        :return: The virtual_machine_uuid of this VirtualVolumeInstance.  # noqa: E501
        :rtype: str
        """
        return self._virtual_machine_uuid

    @virtual_machine_uuid.setter
    def virtual_machine_uuid(self, virtual_machine_uuid):
        """Sets the virtual_machine_uuid of this VirtualVolumeInstance.

        UUID of the virtual machine that owns this virtual volume.  # noqa: E501

        :param virtual_machine_uuid: The virtual_machine_uuid of this VirtualVolumeInstance.  # noqa: E501
        :type: str
        """

        self._virtual_machine_uuid = virtual_machine_uuid

    @property
    def family_id(self):
        """Gets the family_id of this VirtualVolumeInstance.  # noqa: E501

        Family id of the virtual volume. This is the id of the primary object at the root of the family tree. For a primary virtual volume this will be the same as the id of the object. For snap-sets and clone vVols it will be set to the source objects family ID.  # noqa: E501

        :return: The family_id of this VirtualVolumeInstance.  # noqa: E501
        :rtype: str
        """
        return self._family_id

    @family_id.setter
    def family_id(self, family_id):
        """Sets the family_id of this VirtualVolumeInstance.

        Family id of the virtual volume. This is the id of the primary object at the root of the family tree. For a primary virtual volume this will be the same as the id of the object. For snap-sets and clone vVols it will be set to the source objects family ID.  # noqa: E501

        :param family_id: The family_id of this VirtualVolumeInstance.  # noqa: E501
        :type: str
        """

        self._family_id = family_id

    @property
    def parent_id(self):
        """Gets the parent_id of this VirtualVolumeInstance.  # noqa: E501

        For snapshots and clones, the ID of the parent virtual volume. The parent_id is set when an virtual volume is created and will only change if its parent virtual volume is deleted.  # noqa: E501

        :return: The parent_id of this VirtualVolumeInstance.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this VirtualVolumeInstance.

        For snapshots and clones, the ID of the parent virtual volume. The parent_id is set when an virtual volume is created and will only change if its parent virtual volume is deleted.  # noqa: E501

        :param parent_id: The parent_id of this VirtualVolumeInstance.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    @property
    def source_id(self):
        """Gets the source_id of this VirtualVolumeInstance.  # noqa: E501

        Id of the virtual volume from which the content has been sourced. Data is sourced from another virtual volume when a snapshot or clone is created, or when a refresh or restore occurs. Only applies to snap and clones.  # noqa: E501

        :return: The source_id of this VirtualVolumeInstance.  # noqa: E501
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this VirtualVolumeInstance.

        Id of the virtual volume from which the content has been sourced. Data is sourced from another virtual volume when a snapshot or clone is created, or when a refresh or restore occurs. Only applies to snap and clones.  # noqa: E501

        :param source_id: The source_id of this VirtualVolumeInstance.  # noqa: E501
        :type: str
        """

        self._source_id = source_id

    @property
    def source_timestamp(self):
        """Gets the source_timestamp of this VirtualVolumeInstance.  # noqa: E501

        The source data time-stamp of the virtual volume.  # noqa: E501

        :return: The source_timestamp of this VirtualVolumeInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._source_timestamp

    @source_timestamp.setter
    def source_timestamp(self, source_timestamp):
        """Sets the source_timestamp of this VirtualVolumeInstance.

        The source data time-stamp of the virtual volume.  # noqa: E501

        :param source_timestamp: The source_timestamp of this VirtualVolumeInstance.  # noqa: E501
        :type: datetime
        """

        self._source_timestamp = source_timestamp

    @property
    def creation_timestamp(self):
        """Gets the creation_timestamp of this VirtualVolumeInstance.  # noqa: E501

        Timestamp of the moment virtual volume was created at.  # noqa: E501

        :return: The creation_timestamp of this VirtualVolumeInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_timestamp

    @creation_timestamp.setter
    def creation_timestamp(self, creation_timestamp):
        """Sets the creation_timestamp of this VirtualVolumeInstance.

        Timestamp of the moment virtual volume was created at.  # noqa: E501

        :param creation_timestamp: The creation_timestamp of this VirtualVolumeInstance.  # noqa: E501
        :type: datetime
        """

        self._creation_timestamp = creation_timestamp

    @property
    def naa_name(self):
        """Gets the naa_name of this VirtualVolumeInstance.  # noqa: E501

        The NAA name used by hosts for I/O.  This is the VASA equivalent of a LUN's WWN. Was added in version 3.0.0.0.  # noqa: E501

        :return: The naa_name of this VirtualVolumeInstance.  # noqa: E501
        :rtype: str
        """
        return self._naa_name

    @naa_name.setter
    def naa_name(self, naa_name):
        """Sets the naa_name of this VirtualVolumeInstance.

        The NAA name used by hosts for I/O.  This is the VASA equivalent of a LUN's WWN. Was added in version 3.0.0.0.  # noqa: E501

        :param naa_name: The naa_name of this VirtualVolumeInstance.  # noqa: E501
        :type: str
        """

        self._naa_name = naa_name

    @property
    def is_replication_destination(self):
        """Gets the is_replication_destination of this VirtualVolumeInstance.  # noqa: E501

        Indicates whether virtual volume is replication destination or not. Was added in version 3.0.0.0.  # noqa: E501

        :return: The is_replication_destination of this VirtualVolumeInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_replication_destination

    @is_replication_destination.setter
    def is_replication_destination(self, is_replication_destination):
        """Sets the is_replication_destination of this VirtualVolumeInstance.

        Indicates whether virtual volume is replication destination or not. Was added in version 3.0.0.0.  # noqa: E501

        :param is_replication_destination: The is_replication_destination of this VirtualVolumeInstance.  # noqa: E501
        :type: bool
        """

        self._is_replication_destination = is_replication_destination

    @property
    def location_history(self):
        """Gets the location_history of this VirtualVolumeInstance.  # noqa: E501

        Filtering on the fields of this embedded resource is not supported.  # noqa: E501

        :return: The location_history of this VirtualVolumeInstance.  # noqa: E501
        :rtype: list[LocationHistoryInstance]
        """
        return self._location_history

    @location_history.setter
    def location_history(self, location_history):
        """Sets the location_history of this VirtualVolumeInstance.

        Filtering on the fields of this embedded resource is not supported.  # noqa: E501

        :param location_history: The location_history of this VirtualVolumeInstance.  # noqa: E501
        :type: list[LocationHistoryInstance]
        """

        self._location_history = location_history

    @property
    def protection_policy_id(self):
        """Gets the protection_policy_id of this VirtualVolumeInstance.  # noqa: E501

        The unique identifier of the protection policy applied to this virtual volume. Was added in version 3.0.0.0.  # noqa: E501

        :return: The protection_policy_id of this VirtualVolumeInstance.  # noqa: E501
        :rtype: str
        """
        return self._protection_policy_id

    @protection_policy_id.setter
    def protection_policy_id(self, protection_policy_id):
        """Sets the protection_policy_id of this VirtualVolumeInstance.

        The unique identifier of the protection policy applied to this virtual volume. Was added in version 3.0.0.0.  # noqa: E501

        :param protection_policy_id: The protection_policy_id of this VirtualVolumeInstance.  # noqa: E501
        :type: str
        """

        self._protection_policy_id = protection_policy_id

    @property
    def nsid(self):
        """Gets the nsid of this VirtualVolumeInstance.  # noqa: E501

        NVMe Namespace unique identifier in the NVMe subsystem. Was added in version 3.0.0.0.  # noqa: E501

        :return: The nsid of this VirtualVolumeInstance.  # noqa: E501
        :rtype: int
        """
        return self._nsid

    @nsid.setter
    def nsid(self, nsid):
        """Sets the nsid of this VirtualVolumeInstance.

        NVMe Namespace unique identifier in the NVMe subsystem. Was added in version 3.0.0.0.  # noqa: E501

        :param nsid: The nsid of this VirtualVolumeInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                nsid is not None and nsid > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `nsid`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                nsid is not None and nsid < 0):  # noqa: E501
            raise ValueError("Invalid value for `nsid`, must be a value greater than or equal to `0`")  # noqa: E501

        self._nsid = nsid

    @property
    def nguid(self):
        """Gets the nguid of this VirtualVolumeInstance.  # noqa: E501

        NVMe Namespace globally unique identifier. Was added in version 3.0.0.0.  # noqa: E501

        :return: The nguid of this VirtualVolumeInstance.  # noqa: E501
        :rtype: str
        """
        return self._nguid

    @nguid.setter
    def nguid(self, nguid):
        """Sets the nguid of this VirtualVolumeInstance.

        NVMe Namespace globally unique identifier. Was added in version 3.0.0.0.  # noqa: E501

        :param nguid: The nguid of this VirtualVolumeInstance.  # noqa: E501
        :type: str
        """

        self._nguid = nguid

    @property
    def type_l10n(self):
        """Gets the type_l10n of this VirtualVolumeInstance.  # noqa: E501

        Localized message string corresponding to type  # noqa: E501

        :return: The type_l10n of this VirtualVolumeInstance.  # noqa: E501
        :rtype: str
        """
        return self._type_l10n

    @type_l10n.setter
    def type_l10n(self, type_l10n):
        """Sets the type_l10n of this VirtualVolumeInstance.

        Localized message string corresponding to type  # noqa: E501

        :param type_l10n: The type_l10n of this VirtualVolumeInstance.  # noqa: E501
        :type: str
        """

        self._type_l10n = type_l10n

    @property
    def usage_type_l10n(self):
        """Gets the usage_type_l10n of this VirtualVolumeInstance.  # noqa: E501

        Localized message string corresponding to usage_type  # noqa: E501

        :return: The usage_type_l10n of this VirtualVolumeInstance.  # noqa: E501
        :rtype: str
        """
        return self._usage_type_l10n

    @usage_type_l10n.setter
    def usage_type_l10n(self, usage_type_l10n):
        """Sets the usage_type_l10n of this VirtualVolumeInstance.

        Localized message string corresponding to usage_type  # noqa: E501

        :param usage_type_l10n: The usage_type_l10n of this VirtualVolumeInstance.  # noqa: E501
        :type: str
        """

        self._usage_type_l10n = usage_type_l10n

    @property
    def io_priority_l10n(self):
        """Gets the io_priority_l10n of this VirtualVolumeInstance.  # noqa: E501

        Localized message string corresponding to io_priority  # noqa: E501

        :return: The io_priority_l10n of this VirtualVolumeInstance.  # noqa: E501
        :rtype: str
        """
        return self._io_priority_l10n

    @io_priority_l10n.setter
    def io_priority_l10n(self, io_priority_l10n):
        """Sets the io_priority_l10n of this VirtualVolumeInstance.

        Localized message string corresponding to io_priority  # noqa: E501

        :param io_priority_l10n: The io_priority_l10n of this VirtualVolumeInstance.  # noqa: E501
        :type: str
        """

        self._io_priority_l10n = io_priority_l10n

    @property
    def creator_type_l10n(self):
        """Gets the creator_type_l10n of this VirtualVolumeInstance.  # noqa: E501

        Localized message string corresponding to creator_type  # noqa: E501

        :return: The creator_type_l10n of this VirtualVolumeInstance.  # noqa: E501
        :rtype: str
        """
        return self._creator_type_l10n

    @creator_type_l10n.setter
    def creator_type_l10n(self, creator_type_l10n):
        """Sets the creator_type_l10n of this VirtualVolumeInstance.

        Localized message string corresponding to creator_type  # noqa: E501

        :param creator_type_l10n: The creator_type_l10n of this VirtualVolumeInstance.  # noqa: E501
        :type: str
        """

        self._creator_type_l10n = creator_type_l10n

    @property
    def appliance(self):
        """Gets the appliance of this VirtualVolumeInstance.  # noqa: E501

        This is the embeddable reference form of appliance_id attribute.  # noqa: E501

        :return: The appliance of this VirtualVolumeInstance.  # noqa: E501
        :rtype: ApplianceInstance
        """
        return self._appliance

    @appliance.setter
    def appliance(self, appliance):
        """Sets the appliance of this VirtualVolumeInstance.

        This is the embeddable reference form of appliance_id attribute.  # noqa: E501

        :param appliance: The appliance of this VirtualVolumeInstance.  # noqa: E501
        :type: ApplianceInstance
        """

        self._appliance = appliance

    @property
    def storage_container(self):
        """Gets the storage_container of this VirtualVolumeInstance.  # noqa: E501

        This is the embeddable reference form of storage_container_id attribute.  # noqa: E501

        :return: The storage_container of this VirtualVolumeInstance.  # noqa: E501
        :rtype: StorageContainerInstance
        """
        return self._storage_container

    @storage_container.setter
    def storage_container(self, storage_container):
        """Sets the storage_container of this VirtualVolumeInstance.

        This is the embeddable reference form of storage_container_id attribute.  # noqa: E501

        :param storage_container: The storage_container of this VirtualVolumeInstance.  # noqa: E501
        :type: StorageContainerInstance
        """

        self._storage_container = storage_container

    @property
    def replication_group(self):
        """Gets the replication_group of this VirtualVolumeInstance.  # noqa: E501

        This is the embeddable reference form of replication_group_id attribute.  # noqa: E501

        :return: The replication_group of this VirtualVolumeInstance.  # noqa: E501
        :rtype: ReplicationGroupInstance
        """
        return self._replication_group

    @replication_group.setter
    def replication_group(self, replication_group):
        """Sets the replication_group of this VirtualVolumeInstance.

        This is the embeddable reference form of replication_group_id attribute.  # noqa: E501

        :param replication_group: The replication_group of this VirtualVolumeInstance.  # noqa: E501
        :type: ReplicationGroupInstance
        """

        self._replication_group = replication_group

    @property
    def migration_session(self):
        """Gets the migration_session of this VirtualVolumeInstance.  # noqa: E501

        This is the embeddable reference form of migration_session_id attribute.  # noqa: E501

        :return: The migration_session of this VirtualVolumeInstance.  # noqa: E501
        :rtype: MigrationSessionInstance
        """
        return self._migration_session

    @migration_session.setter
    def migration_session(self, migration_session):
        """Sets the migration_session of this VirtualVolumeInstance.

        This is the embeddable reference form of migration_session_id attribute.  # noqa: E501

        :param migration_session: The migration_session of this VirtualVolumeInstance.  # noqa: E501
        :type: MigrationSessionInstance
        """

        self._migration_session = migration_session

    @property
    def parent(self):
        """Gets the parent of this VirtualVolumeInstance.  # noqa: E501

        This is the embeddable reference form of parent_id attribute.  # noqa: E501

        :return: The parent of this VirtualVolumeInstance.  # noqa: E501
        :rtype: VirtualVolumeInstance
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this VirtualVolumeInstance.

        This is the embeddable reference form of parent_id attribute.  # noqa: E501

        :param parent: The parent of this VirtualVolumeInstance.  # noqa: E501
        :type: VirtualVolumeInstance
        """

        self._parent = parent

    @property
    def child_virtual_volumes(self):
        """Gets the child_virtual_volumes of this VirtualVolumeInstance.  # noqa: E501

        This is the inverse of the resource type virtual_volume association.  # noqa: E501

        :return: The child_virtual_volumes of this VirtualVolumeInstance.  # noqa: E501
        :rtype: list[VirtualVolumeInstance]
        """
        return self._child_virtual_volumes

    @child_virtual_volumes.setter
    def child_virtual_volumes(self, child_virtual_volumes):
        """Sets the child_virtual_volumes of this VirtualVolumeInstance.

        This is the inverse of the resource type virtual_volume association.  # noqa: E501

        :param child_virtual_volumes: The child_virtual_volumes of this VirtualVolumeInstance.  # noqa: E501
        :type: list[VirtualVolumeInstance]
        """

        self._child_virtual_volumes = child_virtual_volumes

    @property
    def source(self):
        """Gets the source of this VirtualVolumeInstance.  # noqa: E501

        This is the embeddable reference form of source_id attribute.  # noqa: E501

        :return: The source of this VirtualVolumeInstance.  # noqa: E501
        :rtype: VirtualVolumeInstance
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this VirtualVolumeInstance.

        This is the embeddable reference form of source_id attribute.  # noqa: E501

        :param source: The source of this VirtualVolumeInstance.  # noqa: E501
        :type: VirtualVolumeInstance
        """

        self._source = source

    @property
    def target_virtual_volumes(self):
        """Gets the target_virtual_volumes of this VirtualVolumeInstance.  # noqa: E501

        This is the inverse of the resource type virtual_volume association.  # noqa: E501

        :return: The target_virtual_volumes of this VirtualVolumeInstance.  # noqa: E501
        :rtype: list[VirtualVolumeInstance]
        """
        return self._target_virtual_volumes

    @target_virtual_volumes.setter
    def target_virtual_volumes(self, target_virtual_volumes):
        """Sets the target_virtual_volumes of this VirtualVolumeInstance.

        This is the inverse of the resource type virtual_volume association.  # noqa: E501

        :param target_virtual_volumes: The target_virtual_volumes of this VirtualVolumeInstance.  # noqa: E501
        :type: list[VirtualVolumeInstance]
        """

        self._target_virtual_volumes = target_virtual_volumes

    @property
    def protection_policy(self):
        """Gets the protection_policy of this VirtualVolumeInstance.  # noqa: E501

        This is the embeddable reference form of protection_policy_id attribute.  # noqa: E501

        :return: The protection_policy of this VirtualVolumeInstance.  # noqa: E501
        :rtype: PolicyInstance
        """
        return self._protection_policy

    @protection_policy.setter
    def protection_policy(self, protection_policy):
        """Sets the protection_policy of this VirtualVolumeInstance.

        This is the embeddable reference form of protection_policy_id attribute.  # noqa: E501

        :param protection_policy: The protection_policy of this VirtualVolumeInstance.  # noqa: E501
        :type: PolicyInstance
        """

        self._protection_policy = protection_policy

    @property
    def host_virtual_volume_mappings(self):
        """Gets the host_virtual_volume_mappings of this VirtualVolumeInstance.  # noqa: E501

        This is the inverse of the resource type host_virtual_volume_mapping association.  # noqa: E501

        :return: The host_virtual_volume_mappings of this VirtualVolumeInstance.  # noqa: E501
        :rtype: list[HostVirtualVolumeMappingInstance]
        """
        return self._host_virtual_volume_mappings

    @host_virtual_volume_mappings.setter
    def host_virtual_volume_mappings(self, host_virtual_volume_mappings):
        """Sets the host_virtual_volume_mappings of this VirtualVolumeInstance.

        This is the inverse of the resource type host_virtual_volume_mapping association.  # noqa: E501

        :param host_virtual_volume_mappings: The host_virtual_volume_mappings of this VirtualVolumeInstance.  # noqa: E501
        :type: list[HostVirtualVolumeMappingInstance]
        """

        self._host_virtual_volume_mappings = host_virtual_volume_mappings

    @property
    def virtual_machines(self):
        """Gets the virtual_machines of this VirtualVolumeInstance.  # noqa: E501

        List of the virtual_machines that are associated with this virtual_volume.  # noqa: E501

        :return: The virtual_machines of this VirtualVolumeInstance.  # noqa: E501
        :rtype: list[VirtualMachineInstance]
        """
        return self._virtual_machines

    @virtual_machines.setter
    def virtual_machines(self, virtual_machines):
        """Sets the virtual_machines of this VirtualVolumeInstance.

        List of the virtual_machines that are associated with this virtual_volume.  # noqa: E501

        :param virtual_machines: The virtual_machines of this VirtualVolumeInstance.  # noqa: E501
        :type: list[VirtualMachineInstance]
        """

        self._virtual_machines = virtual_machines

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VirtualVolumeInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VirtualVolumeInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VirtualVolumeInstance):
            return True

        return self.to_dict() != other.to_dict()
