# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class FileUserQuotaCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file_system_id': 'str',
        'tree_quota_id': 'str',
        'uid': 'int',
        'unix_name': 'str',
        'windows_name': 'str',
        'windows_sid': 'str',
        'hard_limit': 'int',
        'soft_limit': 'int'
    }

    attribute_map = {
        'file_system_id': 'file_system_id',
        'tree_quota_id': 'tree_quota_id',
        'uid': 'uid',
        'unix_name': 'unix_name',
        'windows_name': 'windows_name',
        'windows_sid': 'windows_sid',
        'hard_limit': 'hard_limit',
        'soft_limit': 'soft_limit'
    }

    def __init__(self, file_system_id=None, tree_quota_id=None, uid=None, unix_name=None, windows_name=None, windows_sid=None, hard_limit=None, soft_limit=None, _configuration=None):  # noqa: E501
        """FileUserQuotaCreate - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._file_system_id = None
        self._tree_quota_id = None
        self._uid = None
        self._unix_name = None
        self._windows_name = None
        self._windows_sid = None
        self._hard_limit = None
        self._soft_limit = None
        self.discriminator = None

        self.file_system_id = file_system_id
        if tree_quota_id is not None:
            self.tree_quota_id = tree_quota_id
        if uid is not None:
            self.uid = uid
        if unix_name is not None:
            self.unix_name = unix_name
        if windows_name is not None:
            self.windows_name = windows_name
        if windows_sid is not None:
            self.windows_sid = windows_sid
        if hard_limit is not None:
            self.hard_limit = hard_limit
        if soft_limit is not None:
            self.soft_limit = soft_limit

    @property
    def file_system_id(self):
        """Gets the file_system_id of this FileUserQuotaCreate.  # noqa: E501

        Unique identifier of the filesystem in which the new user quota will be created. name:{name} can be used instead of {id}. For example:'file_system_id':'name:file_system_name'  # noqa: E501

        :return: The file_system_id of this FileUserQuotaCreate.  # noqa: E501
        :rtype: str
        """
        return self._file_system_id

    @file_system_id.setter
    def file_system_id(self, file_system_id):
        """Sets the file_system_id of this FileUserQuotaCreate.

        Unique identifier of the filesystem in which the new user quota will be created. name:{name} can be used instead of {id}. For example:'file_system_id':'name:file_system_name'  # noqa: E501

        :param file_system_id: The file_system_id of this FileUserQuotaCreate.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and file_system_id is None:
            raise ValueError("Invalid value for `file_system_id`, must not be `None`")  # noqa: E501

        self._file_system_id = file_system_id

    @property
    def tree_quota_id(self):
        """Gets the tree_quota_id of this FileUserQuotaCreate.  # noqa: E501

        Unique identifier of the tree quota in which the new user quota will be created.  # noqa: E501

        :return: The tree_quota_id of this FileUserQuotaCreate.  # noqa: E501
        :rtype: str
        """
        return self._tree_quota_id

    @tree_quota_id.setter
    def tree_quota_id(self, tree_quota_id):
        """Sets the tree_quota_id of this FileUserQuotaCreate.

        Unique identifier of the tree quota in which the new user quota will be created.  # noqa: E501

        :param tree_quota_id: The tree_quota_id of this FileUserQuotaCreate.  # noqa: E501
        :type: str
        """

        self._tree_quota_id = tree_quota_id

    @property
    def uid(self):
        """Gets the uid of this FileUserQuotaCreate.  # noqa: E501

        Unix user identifier (UID) of the user. Preferred identifier.  # noqa: E501

        :return: The uid of this FileUserQuotaCreate.  # noqa: E501
        :rtype: int
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this FileUserQuotaCreate.

        Unix user identifier (UID) of the user. Preferred identifier.  # noqa: E501

        :param uid: The uid of this FileUserQuotaCreate.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                uid is not None and uid > 4294967294):  # noqa: E501
            raise ValueError("Invalid value for `uid`, must be a value less than or equal to `4294967294`")  # noqa: E501
        if (self._configuration.client_side_validation and
                uid is not None and uid < 1):  # noqa: E501
            raise ValueError("Invalid value for `uid`, must be a value greater than or equal to `1`")  # noqa: E501

        self._uid = uid

    @property
    def unix_name(self):
        """Gets the unix_name of this FileUserQuotaCreate.  # noqa: E501

        Unix username. Identifers are exclusive. Only one of the four identifiers among 'user uid' / 'unix username' / 'windows username' / 'windows SID' can be used at a time.  # noqa: E501

        :return: The unix_name of this FileUserQuotaCreate.  # noqa: E501
        :rtype: str
        """
        return self._unix_name

    @unix_name.setter
    def unix_name(self, unix_name):
        """Sets the unix_name of this FileUserQuotaCreate.

        Unix username. Identifers are exclusive. Only one of the four identifiers among 'user uid' / 'unix username' / 'windows username' / 'windows SID' can be used at a time.  # noqa: E501

        :param unix_name: The unix_name of this FileUserQuotaCreate.  # noqa: E501
        :type: str
        """

        self._unix_name = unix_name

    @property
    def windows_name(self):
        """Gets the windows_name of this FileUserQuotaCreate.  # noqa: E501

        Windows username. The format is domain\\\\user for the domain user. Identifers are exclusive. Only one of the four identifiers among 'user uid' / 'unix username' / 'windows username' / 'windows SID' can be used at a time.  # noqa: E501

        :return: The windows_name of this FileUserQuotaCreate.  # noqa: E501
        :rtype: str
        """
        return self._windows_name

    @windows_name.setter
    def windows_name(self, windows_name):
        """Sets the windows_name of this FileUserQuotaCreate.

        Windows username. The format is domain\\\\user for the domain user. Identifers are exclusive. Only one of the four identifiers among 'user uid' / 'unix username' / 'windows username' / 'windows SID' can be used at a time.  # noqa: E501

        :param windows_name: The windows_name of this FileUserQuotaCreate.  # noqa: E501
        :type: str
        """

        self._windows_name = windows_name

    @property
    def windows_sid(self):
        """Gets the windows_sid of this FileUserQuotaCreate.  # noqa: E501

        Windows Security Identifier of the user. Identifers are exclusive. Only one of the four identifiers among 'user uid' / 'unix username' / 'windows username' / 'windows SID' can be used at a time.  # noqa: E501

        :return: The windows_sid of this FileUserQuotaCreate.  # noqa: E501
        :rtype: str
        """
        return self._windows_sid

    @windows_sid.setter
    def windows_sid(self, windows_sid):
        """Sets the windows_sid of this FileUserQuotaCreate.

        Windows Security Identifier of the user. Identifers are exclusive. Only one of the four identifiers among 'user uid' / 'unix username' / 'windows username' / 'windows SID' can be used at a time.  # noqa: E501

        :param windows_sid: The windows_sid of this FileUserQuotaCreate.  # noqa: E501
        :type: str
        """

        self._windows_sid = windows_sid

    @property
    def hard_limit(self):
        """Gets the hard_limit of this FileUserQuotaCreate.  # noqa: E501

        Hard limit of the user quota, in bytes. No hard limit when set to 0. This value can be used to compute amount of space that is consumed without limiting the space. Value is rounded up to match the physical block size of the filesystem.  # noqa: E501

        :return: The hard_limit of this FileUserQuotaCreate.  # noqa: E501
        :rtype: int
        """
        return self._hard_limit

    @hard_limit.setter
    def hard_limit(self, hard_limit):
        """Sets the hard_limit of this FileUserQuotaCreate.

        Hard limit of the user quota, in bytes. No hard limit when set to 0. This value can be used to compute amount of space that is consumed without limiting the space. Value is rounded up to match the physical block size of the filesystem.  # noqa: E501

        :param hard_limit: The hard_limit of this FileUserQuotaCreate.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                hard_limit is not None and hard_limit > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `hard_limit`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                hard_limit is not None and hard_limit < 0):  # noqa: E501
            raise ValueError("Invalid value for `hard_limit`, must be a value greater than or equal to `0`")  # noqa: E501

        self._hard_limit = hard_limit

    @property
    def soft_limit(self):
        """Gets the soft_limit of this FileUserQuotaCreate.  # noqa: E501

        Soft limit of the user quota, in bytes. No hard limit when set to 0. Value is rounded up to match the physical block size of the filesystem.  # noqa: E501

        :return: The soft_limit of this FileUserQuotaCreate.  # noqa: E501
        :rtype: int
        """
        return self._soft_limit

    @soft_limit.setter
    def soft_limit(self, soft_limit):
        """Sets the soft_limit of this FileUserQuotaCreate.

        Soft limit of the user quota, in bytes. No hard limit when set to 0. Value is rounded up to match the physical block size of the filesystem.  # noqa: E501

        :param soft_limit: The soft_limit of this FileUserQuotaCreate.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                soft_limit is not None and soft_limit > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `soft_limit`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                soft_limit is not None and soft_limit < 0):  # noqa: E501
            raise ValueError("Invalid value for `soft_limit`, must be a value greater than or equal to `0`")  # noqa: E501

        self._soft_limit = soft_limit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileUserQuotaCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileUserQuotaCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FileUserQuotaCreate):
            return True

        return self.to_dict() != other.to_dict()
