# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class ImportSessionCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'remote_system_id': 'str',
        'source_resource_id': 'str',
        'name': 'str',
        'global_storage_discovery_address': 'str',
        'description': 'str',
        'type': 'ImportSessionTypeEnum',
        'host_ids': 'list[str]',
        'host_group_ids': 'list[str]',
        'consistency_group_member_host_ids': 'list[ConsistencyGroupMemberHostMapping]',
        'consistency_group_member_host_group_ids': 'list[ConsistencyGroupMemberHostGroupMapping]',
        'volume_group_id': 'str',
        'automatic_cutover': 'bool',
        'protection_policy_id': 'str',
        'scheduled_timestamp': 'datetime'
    }

    attribute_map = {
        'remote_system_id': 'remote_system_id',
        'source_resource_id': 'source_resource_id',
        'name': 'name',
        'global_storage_discovery_address': 'global_storage_discovery_address',
        'description': 'description',
        'type': 'type',
        'host_ids': 'host_ids',
        'host_group_ids': 'host_group_ids',
        'consistency_group_member_host_ids': 'consistency_group_member_host_ids',
        'consistency_group_member_host_group_ids': 'consistency_group_member_host_group_ids',
        'volume_group_id': 'volume_group_id',
        'automatic_cutover': 'automatic_cutover',
        'protection_policy_id': 'protection_policy_id',
        'scheduled_timestamp': 'scheduled_timestamp'
    }

    def __init__(self, remote_system_id=None, source_resource_id=None, name=None, global_storage_discovery_address=None, description=None, type=None, host_ids=None, host_group_ids=None, consistency_group_member_host_ids=None, consistency_group_member_host_group_ids=None, volume_group_id=None, automatic_cutover=False, protection_policy_id=None, scheduled_timestamp=None, _configuration=None):  # noqa: E501
        """ImportSessionCreate - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._remote_system_id = None
        self._source_resource_id = None
        self._name = None
        self._global_storage_discovery_address = None
        self._description = None
        self._type = None
        self._host_ids = None
        self._host_group_ids = None
        self._consistency_group_member_host_ids = None
        self._consistency_group_member_host_group_ids = None
        self._volume_group_id = None
        self._automatic_cutover = None
        self._protection_policy_id = None
        self._scheduled_timestamp = None
        self.discriminator = None

        self.remote_system_id = remote_system_id
        self.source_resource_id = source_resource_id
        self.name = name
        if global_storage_discovery_address is not None:
            self.global_storage_discovery_address = global_storage_discovery_address
        if description is not None:
            self.description = description
        if type is not None:
            self.type = type
        if host_ids is not None:
            self.host_ids = host_ids
        if host_group_ids is not None:
            self.host_group_ids = host_group_ids
        if consistency_group_member_host_ids is not None:
            self.consistency_group_member_host_ids = consistency_group_member_host_ids
        if consistency_group_member_host_group_ids is not None:
            self.consistency_group_member_host_group_ids = consistency_group_member_host_group_ids
        if volume_group_id is not None:
            self.volume_group_id = volume_group_id
        if automatic_cutover is not None:
            self.automatic_cutover = automatic_cutover
        if protection_policy_id is not None:
            self.protection_policy_id = protection_policy_id
        if scheduled_timestamp is not None:
            self.scheduled_timestamp = scheduled_timestamp

    @property
    def remote_system_id(self):
        """Gets the remote_system_id of this ImportSessionCreate.  # noqa: E501

        Unique identifier of the storage system that contains the source volume or consistency group to be imported. You can query the source volume or consistency group object to get the identifier of the source system that the volume or consistency group are part of. Alternatively, you can use the remote_system object to get this information. name:{name} can be used instead of {id}. For example:'remote_system_id':'name:remote_system_name'  # noqa: E501

        :return: The remote_system_id of this ImportSessionCreate.  # noqa: E501
        :rtype: str
        """
        return self._remote_system_id

    @remote_system_id.setter
    def remote_system_id(self, remote_system_id):
        """Sets the remote_system_id of this ImportSessionCreate.

        Unique identifier of the storage system that contains the source volume or consistency group to be imported. You can query the source volume or consistency group object to get the identifier of the source system that the volume or consistency group are part of. Alternatively, you can use the remote_system object to get this information. name:{name} can be used instead of {id}. For example:'remote_system_id':'name:remote_system_name'  # noqa: E501

        :param remote_system_id: The remote_system_id of this ImportSessionCreate.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and remote_system_id is None:
            raise ValueError("Invalid value for `remote_system_id`, must not be `None`")  # noqa: E501

        self._remote_system_id = remote_system_id

    @property
    def source_resource_id(self):
        """Gets the source_resource_id of this ImportSessionCreate.  # noqa: E501

        Unique identifier of the volume or consistency group to be imported. Refer to the following objects for more information: * Storage Center : import_storage_center_volume, import_storage_center_consistency_group * VNX : import_vnx_volume, import_vnx_consistency_group * PS Series : import_psgroup_volume * Unity : import_unity_volume, import_unity_consistency_group  # noqa: E501

        :return: The source_resource_id of this ImportSessionCreate.  # noqa: E501
        :rtype: str
        """
        return self._source_resource_id

    @source_resource_id.setter
    def source_resource_id(self, source_resource_id):
        """Sets the source_resource_id of this ImportSessionCreate.

        Unique identifier of the volume or consistency group to be imported. Refer to the following objects for more information: * Storage Center : import_storage_center_volume, import_storage_center_consistency_group * VNX : import_vnx_volume, import_vnx_consistency_group * PS Series : import_psgroup_volume * Unity : import_unity_volume, import_unity_consistency_group  # noqa: E501

        :param source_resource_id: The source_resource_id of this ImportSessionCreate.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and source_resource_id is None:
            raise ValueError("Invalid value for `source_resource_id`, must not be `None`")  # noqa: E501

        self._source_resource_id = source_resource_id

    @property
    def name(self):
        """Gets the name of this ImportSessionCreate.  # noqa: E501

        Name of the import session. The name must be unique in the PowerStore cluster and can contain a maximum of 128 unicode characters. It cannot contain special HTTP characters, unprintable characters, or white space.  # noqa: E501

        :return: The name of this ImportSessionCreate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ImportSessionCreate.

        Name of the import session. The name must be unique in the PowerStore cluster and can contain a maximum of 128 unicode characters. It cannot contain special HTTP characters, unprintable characters, or white space.  # noqa: E501

        :param name: The name of this ImportSessionCreate.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 128):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")  # noqa: E501

        self._name = name

    @property
    def global_storage_discovery_address(self):
        """Gets the global_storage_discovery_address of this ImportSessionCreate.  # noqa: E501

        Global storage discovery iSCSI ip address that will be used for import workflow. The address can be an IPv4 address or FQDN (Fully Qualified Domain Name). Was added in version 3.0.0.0.  # noqa: E501

        :return: The global_storage_discovery_address of this ImportSessionCreate.  # noqa: E501
        :rtype: str
        """
        return self._global_storage_discovery_address

    @global_storage_discovery_address.setter
    def global_storage_discovery_address(self, global_storage_discovery_address):
        """Sets the global_storage_discovery_address of this ImportSessionCreate.

        Global storage discovery iSCSI ip address that will be used for import workflow. The address can be an IPv4 address or FQDN (Fully Qualified Domain Name). Was added in version 3.0.0.0.  # noqa: E501

        :param global_storage_discovery_address: The global_storage_discovery_address of this ImportSessionCreate.  # noqa: E501
        :type: str
        """

        self._global_storage_discovery_address = global_storage_discovery_address

    @property
    def description(self):
        """Gets the description of this ImportSessionCreate.  # noqa: E501

        Description of the import session. The name can contain a maximum of 128 unicode characters. It cannot contain unprintable characters.  # noqa: E501

        :return: The description of this ImportSessionCreate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ImportSessionCreate.

        Description of the import session. The name can contain a maximum of 128 unicode characters. It cannot contain unprintable characters.  # noqa: E501

        :param description: The description of this ImportSessionCreate.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                description is not None and len(description) > 128):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `128`")  # noqa: E501

        self._description = description

    @property
    def type(self):
        """Gets the type of this ImportSessionCreate.  # noqa: E501

         Was added in version 1.0.2.  # noqa: E501

        :return: The type of this ImportSessionCreate.  # noqa: E501
        :rtype: ImportSessionTypeEnum
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ImportSessionCreate.

         Was added in version 1.0.2.  # noqa: E501

        :param type: The type of this ImportSessionCreate.  # noqa: E501
        :type: ImportSessionTypeEnum
        """

        self._type = type

    @property
    def host_ids(self):
        """Gets the host_ids of this ImportSessionCreate.  # noqa: E501

        Hosts to be mapped to the destination resource for an agentless import session. Was added in version 1.0.2.  # noqa: E501

        :return: The host_ids of this ImportSessionCreate.  # noqa: E501
        :rtype: list[str]
        """
        return self._host_ids

    @host_ids.setter
    def host_ids(self, host_ids):
        """Sets the host_ids of this ImportSessionCreate.

        Hosts to be mapped to the destination resource for an agentless import session. Was added in version 1.0.2.  # noqa: E501

        :param host_ids: The host_ids of this ImportSessionCreate.  # noqa: E501
        :type: list[str]
        """

        self._host_ids = host_ids

    @property
    def host_group_ids(self):
        """Gets the host_group_ids of this ImportSessionCreate.  # noqa: E501

        Unique identifiers of the host groups that map to the destination resource for an agentless import session. In case of a consistency group, if all the member volumes have the same host group mapping, then use this property, otherwise use consistency_group_member_host_group_ids. Was added in version 2.0.0.0.  # noqa: E501

        :return: The host_group_ids of this ImportSessionCreate.  # noqa: E501
        :rtype: list[str]
        """
        return self._host_group_ids

    @host_group_ids.setter
    def host_group_ids(self, host_group_ids):
        """Sets the host_group_ids of this ImportSessionCreate.

        Unique identifiers of the host groups that map to the destination resource for an agentless import session. In case of a consistency group, if all the member volumes have the same host group mapping, then use this property, otherwise use consistency_group_member_host_group_ids. Was added in version 2.0.0.0.  # noqa: E501

        :param host_group_ids: The host_group_ids of this ImportSessionCreate.  # noqa: E501
        :type: list[str]
        """

        self._host_group_ids = host_group_ids

    @property
    def consistency_group_member_host_ids(self):
        """Gets the consistency_group_member_host_ids of this ImportSessionCreate.  # noqa: E501

         Was added in version 1.0.2.  # noqa: E501

        :return: The consistency_group_member_host_ids of this ImportSessionCreate.  # noqa: E501
        :rtype: list[ConsistencyGroupMemberHostMapping]
        """
        return self._consistency_group_member_host_ids

    @consistency_group_member_host_ids.setter
    def consistency_group_member_host_ids(self, consistency_group_member_host_ids):
        """Sets the consistency_group_member_host_ids of this ImportSessionCreate.

         Was added in version 1.0.2.  # noqa: E501

        :param consistency_group_member_host_ids: The consistency_group_member_host_ids of this ImportSessionCreate.  # noqa: E501
        :type: list[ConsistencyGroupMemberHostMapping]
        """

        self._consistency_group_member_host_ids = consistency_group_member_host_ids

    @property
    def consistency_group_member_host_group_ids(self):
        """Gets the consistency_group_member_host_group_ids of this ImportSessionCreate.  # noqa: E501

         Was added in version 2.0.0.0.  # noqa: E501

        :return: The consistency_group_member_host_group_ids of this ImportSessionCreate.  # noqa: E501
        :rtype: list[ConsistencyGroupMemberHostGroupMapping]
        """
        return self._consistency_group_member_host_group_ids

    @consistency_group_member_host_group_ids.setter
    def consistency_group_member_host_group_ids(self, consistency_group_member_host_group_ids):
        """Sets the consistency_group_member_host_group_ids of this ImportSessionCreate.

         Was added in version 2.0.0.0.  # noqa: E501

        :param consistency_group_member_host_group_ids: The consistency_group_member_host_group_ids of this ImportSessionCreate.  # noqa: E501
        :type: list[ConsistencyGroupMemberHostGroupMapping]
        """

        self._consistency_group_member_host_group_ids = consistency_group_member_host_group_ids

    @property
    def volume_group_id(self):
        """Gets the volume_group_id of this ImportSessionCreate.  # noqa: E501

        Unique identifier of the volume group to which the imported volume will belong, if any. name:{name} can be used instead of {id}. For example:'volume_group_id':'name:volume_group_name'  # noqa: E501

        :return: The volume_group_id of this ImportSessionCreate.  # noqa: E501
        :rtype: str
        """
        return self._volume_group_id

    @volume_group_id.setter
    def volume_group_id(self, volume_group_id):
        """Sets the volume_group_id of this ImportSessionCreate.

        Unique identifier of the volume group to which the imported volume will belong, if any. name:{name} can be used instead of {id}. For example:'volume_group_id':'name:volume_group_name'  # noqa: E501

        :param volume_group_id: The volume_group_id of this ImportSessionCreate.  # noqa: E501
        :type: str
        """

        self._volume_group_id = volume_group_id

    @property
    def automatic_cutover(self):
        """Gets the automatic_cutover of this ImportSessionCreate.  # noqa: E501

        Indicates whether the import session cutover is manual (true) or automatic (false).  # noqa: E501

        :return: The automatic_cutover of this ImportSessionCreate.  # noqa: E501
        :rtype: bool
        """
        return self._automatic_cutover

    @automatic_cutover.setter
    def automatic_cutover(self, automatic_cutover):
        """Sets the automatic_cutover of this ImportSessionCreate.

        Indicates whether the import session cutover is manual (true) or automatic (false).  # noqa: E501

        :param automatic_cutover: The automatic_cutover of this ImportSessionCreate.  # noqa: E501
        :type: bool
        """

        self._automatic_cutover = automatic_cutover

    @property
    def protection_policy_id(self):
        """Gets the protection_policy_id of this ImportSessionCreate.  # noqa: E501

        Unique identifier of the protection policy that will be applied to an imported volume or consistency group after the import completes. Only snapshot policies are supported in an import. Once the import completes, you can add a replication policy. If you try to import a replication policy, the import job will fail.  # noqa: E501

        :return: The protection_policy_id of this ImportSessionCreate.  # noqa: E501
        :rtype: str
        """
        return self._protection_policy_id

    @protection_policy_id.setter
    def protection_policy_id(self, protection_policy_id):
        """Sets the protection_policy_id of this ImportSessionCreate.

        Unique identifier of the protection policy that will be applied to an imported volume or consistency group after the import completes. Only snapshot policies are supported in an import. Once the import completes, you can add a replication policy. If you try to import a replication policy, the import job will fail.  # noqa: E501

        :param protection_policy_id: The protection_policy_id of this ImportSessionCreate.  # noqa: E501
        :type: str
        """

        self._protection_policy_id = protection_policy_id

    @property
    def scheduled_timestamp(self):
        """Gets the scheduled_timestamp of this ImportSessionCreate.  # noqa: E501

        Date and time at which the import session is scheduled to start. The date time is specified in ISO 8601 format with the time expressed in UTC format.  # noqa: E501

        :return: The scheduled_timestamp of this ImportSessionCreate.  # noqa: E501
        :rtype: datetime
        """
        return self._scheduled_timestamp

    @scheduled_timestamp.setter
    def scheduled_timestamp(self, scheduled_timestamp):
        """Sets the scheduled_timestamp of this ImportSessionCreate.

        Date and time at which the import session is scheduled to start. The date time is specified in ISO 8601 format with the time expressed in UTC format.  # noqa: E501

        :param scheduled_timestamp: The scheduled_timestamp of this ImportSessionCreate.  # noqa: E501
        :type: datetime
        """

        self._scheduled_timestamp = scheduled_timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImportSessionCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportSessionCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImportSessionCreate):
            return True

        return self.to_dict() != other.to_dict()
