# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class ImportVmaxInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'symmetrix_id': 'str',
        'management_address': 'str',
        'model': 'str',
        'unisphere_api_version': 'str',
        'is_embedded': 'bool',
        'ucode_version': 'str',
        'supported_import_type': 'SupportedImportTypeEnum',
        'user_name': 'str',
        'last_updated_timestamp': 'datetime',
        'port': 'int',
        'supported_import_type_l10n': 'str',
        'import_vmax_volumes': 'list[ImportVmaxVolumeInstance]',
        'import_vmax_storage_group': 'list[ImportVmaxStorageGroupInstance]'
    }

    attribute_map = {
        'id': 'id',
        'symmetrix_id': 'symmetrix_id',
        'management_address': 'management_address',
        'model': 'model',
        'unisphere_api_version': 'unisphere_api_version',
        'is_embedded': 'is_embedded',
        'ucode_version': 'ucode_version',
        'supported_import_type': 'supported_import_type',
        'user_name': 'user_name',
        'last_updated_timestamp': 'last_updated_timestamp',
        'port': 'port',
        'supported_import_type_l10n': 'supported_import_type_l10n',
        'import_vmax_volumes': 'import_vmax_volumes',
        'import_vmax_storage_group': 'import_vmax_storage_group'
    }

    def __init__(self, id=None, symmetrix_id=None, management_address=None, model=None, unisphere_api_version=None, is_embedded=None, ucode_version=None, supported_import_type=None, user_name=None, last_updated_timestamp=None, port=None, supported_import_type_l10n=None, import_vmax_volumes=None, import_vmax_storage_group=None, _configuration=None):  # noqa: E501
        """ImportVmaxInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._symmetrix_id = None
        self._management_address = None
        self._model = None
        self._unisphere_api_version = None
        self._is_embedded = None
        self._ucode_version = None
        self._supported_import_type = None
        self._user_name = None
        self._last_updated_timestamp = None
        self._port = None
        self._supported_import_type_l10n = None
        self._import_vmax_volumes = None
        self._import_vmax_storage_group = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if symmetrix_id is not None:
            self.symmetrix_id = symmetrix_id
        if management_address is not None:
            self.management_address = management_address
        if model is not None:
            self.model = model
        if unisphere_api_version is not None:
            self.unisphere_api_version = unisphere_api_version
        if is_embedded is not None:
            self.is_embedded = is_embedded
        if ucode_version is not None:
            self.ucode_version = ucode_version
        if supported_import_type is not None:
            self.supported_import_type = supported_import_type
        if user_name is not None:
            self.user_name = user_name
        if last_updated_timestamp is not None:
            self.last_updated_timestamp = last_updated_timestamp
        if port is not None:
            self.port = port
        if supported_import_type_l10n is not None:
            self.supported_import_type_l10n = supported_import_type_l10n
        if import_vmax_volumes is not None:
            self.import_vmax_volumes = import_vmax_volumes
        if import_vmax_storage_group is not None:
            self.import_vmax_storage_group = import_vmax_storage_group

    @property
    def id(self):
        """Gets the id of this ImportVmaxInstance.  # noqa: E501

        Unique identifier of the import_vmax resource instance, and of the corresponding remote_system instance.  # noqa: E501

        :return: The id of this ImportVmaxInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ImportVmaxInstance.

        Unique identifier of the import_vmax resource instance, and of the corresponding remote_system instance.  # noqa: E501

        :param id: The id of this ImportVmaxInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def symmetrix_id(self):
        """Gets the symmetrix_id of this ImportVmaxInstance.  # noqa: E501

        Unique identifier of the VMAX storage system that is a storage system for import.  # noqa: E501

        :return: The symmetrix_id of this ImportVmaxInstance.  # noqa: E501
        :rtype: str
        """
        return self._symmetrix_id

    @symmetrix_id.setter
    def symmetrix_id(self, symmetrix_id):
        """Sets the symmetrix_id of this ImportVmaxInstance.

        Unique identifier of the VMAX storage system that is a storage system for import.  # noqa: E501

        :param symmetrix_id: The symmetrix_id of this ImportVmaxInstance.  # noqa: E501
        :type: str
        """

        self._symmetrix_id = symmetrix_id

    @property
    def management_address(self):
        """Gets the management_address of this ImportVmaxInstance.  # noqa: E501

        Management address to use for communicating with the VMAX storage system. The address can be an IPv4 address, IPv6 address, or FQDN (Fully Qualified Domain Name).  # noqa: E501

        :return: The management_address of this ImportVmaxInstance.  # noqa: E501
        :rtype: str
        """
        return self._management_address

    @management_address.setter
    def management_address(self, management_address):
        """Sets the management_address of this ImportVmaxInstance.

        Management address to use for communicating with the VMAX storage system. The address can be an IPv4 address, IPv6 address, or FQDN (Fully Qualified Domain Name).  # noqa: E501

        :param management_address: The management_address of this ImportVmaxInstance.  # noqa: E501
        :type: str
        """

        self._management_address = management_address

    @property
    def model(self):
        """Gets the model of this ImportVmaxInstance.  # noqa: E501

        Model represent the model of VMAX storage system.  # noqa: E501

        :return: The model of this ImportVmaxInstance.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this ImportVmaxInstance.

        Model represent the model of VMAX storage system.  # noqa: E501

        :param model: The model of this ImportVmaxInstance.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def unisphere_api_version(self):
        """Gets the unisphere_api_version of this ImportVmaxInstance.  # noqa: E501

        Version of the Unisphere that manages the VMAX storage system.  # noqa: E501

        :return: The unisphere_api_version of this ImportVmaxInstance.  # noqa: E501
        :rtype: str
        """
        return self._unisphere_api_version

    @unisphere_api_version.setter
    def unisphere_api_version(self, unisphere_api_version):
        """Sets the unisphere_api_version of this ImportVmaxInstance.

        Version of the Unisphere that manages the VMAX storage system.  # noqa: E501

        :param unisphere_api_version: The unisphere_api_version of this ImportVmaxInstance.  # noqa: E501
        :type: str
        """

        self._unisphere_api_version = unisphere_api_version

    @property
    def is_embedded(self):
        """Gets the is_embedded of this ImportVmaxInstance.  # noqa: E501

        The Unisphere is running as embedded or standalone.  # noqa: E501

        :return: The is_embedded of this ImportVmaxInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_embedded

    @is_embedded.setter
    def is_embedded(self, is_embedded):
        """Sets the is_embedded of this ImportVmaxInstance.

        The Unisphere is running as embedded or standalone.  # noqa: E501

        :param is_embedded: The is_embedded of this ImportVmaxInstance.  # noqa: E501
        :type: bool
        """

        self._is_embedded = is_embedded

    @property
    def ucode_version(self):
        """Gets the ucode_version of this ImportVmaxInstance.  # noqa: E501

        Ucode version will be present in this format 5977.1131.1131 for the VMAX storage system.  # noqa: E501

        :return: The ucode_version of this ImportVmaxInstance.  # noqa: E501
        :rtype: str
        """
        return self._ucode_version

    @ucode_version.setter
    def ucode_version(self, ucode_version):
        """Sets the ucode_version of this ImportVmaxInstance.

        Ucode version will be present in this format 5977.1131.1131 for the VMAX storage system.  # noqa: E501

        :param ucode_version: The ucode_version of this ImportVmaxInstance.  # noqa: E501
        :type: str
        """

        self._ucode_version = ucode_version

    @property
    def supported_import_type(self):
        """Gets the supported_import_type of this ImportVmaxInstance.  # noqa: E501


        :return: The supported_import_type of this ImportVmaxInstance.  # noqa: E501
        :rtype: SupportedImportTypeEnum
        """
        return self._supported_import_type

    @supported_import_type.setter
    def supported_import_type(self, supported_import_type):
        """Sets the supported_import_type of this ImportVmaxInstance.


        :param supported_import_type: The supported_import_type of this ImportVmaxInstance.  # noqa: E501
        :type: SupportedImportTypeEnum
        """

        self._supported_import_type = supported_import_type

    @property
    def user_name(self):
        """Gets the user_name of this ImportVmaxInstance.  # noqa: E501

        User account name used to communicate with the VMAX storage system.  # noqa: E501

        :return: The user_name of this ImportVmaxInstance.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this ImportVmaxInstance.

        User account name used to communicate with the VMAX storage system.  # noqa: E501

        :param user_name: The user_name of this ImportVmaxInstance.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def last_updated_timestamp(self):
        """Gets the last_updated_timestamp of this ImportVmaxInstance.  # noqa: E501

        Date and time when the VMAX storage system details were last updated. These details include the VMAX storage system and information about its importable storage groups. The timestamp is updated when the VMAX storage system is created and whenever the importable storage groups is discovered.  # noqa: E501

        :return: The last_updated_timestamp of this ImportVmaxInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated_timestamp

    @last_updated_timestamp.setter
    def last_updated_timestamp(self, last_updated_timestamp):
        """Sets the last_updated_timestamp of this ImportVmaxInstance.

        Date and time when the VMAX storage system details were last updated. These details include the VMAX storage system and information about its importable storage groups. The timestamp is updated when the VMAX storage system is created and whenever the importable storage groups is discovered.  # noqa: E501

        :param last_updated_timestamp: The last_updated_timestamp of this ImportVmaxInstance.  # noqa: E501
        :type: datetime
        """

        self._last_updated_timestamp = last_updated_timestamp

    @property
    def port(self):
        """Gets the port of this ImportVmaxInstance.  # noqa: E501

        Management port of PowerMax/VMAX remote system.   # noqa: E501

        :return: The port of this ImportVmaxInstance.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ImportVmaxInstance.

        Management port of PowerMax/VMAX remote system.   # noqa: E501

        :param port: The port of this ImportVmaxInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                port is not None and port > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                port is not None and port < 0):  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value greater than or equal to `0`")  # noqa: E501

        self._port = port

    @property
    def supported_import_type_l10n(self):
        """Gets the supported_import_type_l10n of this ImportVmaxInstance.  # noqa: E501

        Localized message string corresponding to supported_import_type Was added in version 3.0.0.0.  # noqa: E501

        :return: The supported_import_type_l10n of this ImportVmaxInstance.  # noqa: E501
        :rtype: str
        """
        return self._supported_import_type_l10n

    @supported_import_type_l10n.setter
    def supported_import_type_l10n(self, supported_import_type_l10n):
        """Sets the supported_import_type_l10n of this ImportVmaxInstance.

        Localized message string corresponding to supported_import_type Was added in version 3.0.0.0.  # noqa: E501

        :param supported_import_type_l10n: The supported_import_type_l10n of this ImportVmaxInstance.  # noqa: E501
        :type: str
        """

        self._supported_import_type_l10n = supported_import_type_l10n

    @property
    def import_vmax_volumes(self):
        """Gets the import_vmax_volumes of this ImportVmaxInstance.  # noqa: E501

        This is the inverse of the resource type import_vmax_volume association.  # noqa: E501

        :return: The import_vmax_volumes of this ImportVmaxInstance.  # noqa: E501
        :rtype: list[ImportVmaxVolumeInstance]
        """
        return self._import_vmax_volumes

    @import_vmax_volumes.setter
    def import_vmax_volumes(self, import_vmax_volumes):
        """Sets the import_vmax_volumes of this ImportVmaxInstance.

        This is the inverse of the resource type import_vmax_volume association.  # noqa: E501

        :param import_vmax_volumes: The import_vmax_volumes of this ImportVmaxInstance.  # noqa: E501
        :type: list[ImportVmaxVolumeInstance]
        """

        self._import_vmax_volumes = import_vmax_volumes

    @property
    def import_vmax_storage_group(self):
        """Gets the import_vmax_storage_group of this ImportVmaxInstance.  # noqa: E501

        This is the inverse of the resource type import_vmax_storage_group association.  # noqa: E501

        :return: The import_vmax_storage_group of this ImportVmaxInstance.  # noqa: E501
        :rtype: list[ImportVmaxStorageGroupInstance]
        """
        return self._import_vmax_storage_group

    @import_vmax_storage_group.setter
    def import_vmax_storage_group(self, import_vmax_storage_group):
        """Sets the import_vmax_storage_group of this ImportVmaxInstance.

        This is the inverse of the resource type import_vmax_storage_group association.  # noqa: E501

        :param import_vmax_storage_group: The import_vmax_storage_group of this ImportVmaxInstance.  # noqa: E501
        :type: list[ImportVmaxStorageGroupInstance]
        """

        self._import_vmax_storage_group = import_vmax_storage_group

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImportVmaxInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportVmaxInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImportVmaxInstance):
            return True

        return self.to_dict() != other.to_dict()
