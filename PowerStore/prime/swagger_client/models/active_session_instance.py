# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class ActiveSessionInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'port_name': 'str',
        'appliance_id': 'str',
        'node_id': 'str',
        'bond_id': 'str',
        'fc_port_id': 'str',
        'veth_id': 'str',
        'eth_port_id': 'str',
        'nvme_transport_addresses': 'list[str]',
        'nvme_transport_type': 'NvmeTransportTypeEnum',
        'nvme_transport_type_l10n': 'str'
    }

    attribute_map = {
        'port_name': 'port_name',
        'appliance_id': 'appliance_id',
        'node_id': 'node_id',
        'bond_id': 'bond_id',
        'fc_port_id': 'fc_port_id',
        'veth_id': 'veth_id',
        'eth_port_id': 'eth_port_id',
        'nvme_transport_addresses': 'nvme_transport_addresses',
        'nvme_transport_type': 'nvme_transport_type',
        'nvme_transport_type_l10n': 'nvme_transport_type_l10n'
    }

    def __init__(self, port_name=None, appliance_id=None, node_id=None, bond_id=None, fc_port_id=None, veth_id=None, eth_port_id=None, nvme_transport_addresses=None, nvme_transport_type=None, nvme_transport_type_l10n=None, _configuration=None):  # noqa: E501
        """ActiveSessionInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._port_name = None
        self._appliance_id = None
        self._node_id = None
        self._bond_id = None
        self._fc_port_id = None
        self._veth_id = None
        self._eth_port_id = None
        self._nvme_transport_addresses = None
        self._nvme_transport_type = None
        self._nvme_transport_type_l10n = None
        self.discriminator = None

        if port_name is not None:
            self.port_name = port_name
        if appliance_id is not None:
            self.appliance_id = appliance_id
        if node_id is not None:
            self.node_id = node_id
        if bond_id is not None:
            self.bond_id = bond_id
        if fc_port_id is not None:
            self.fc_port_id = fc_port_id
        if veth_id is not None:
            self.veth_id = veth_id
        if eth_port_id is not None:
            self.eth_port_id = eth_port_id
        if nvme_transport_addresses is not None:
            self.nvme_transport_addresses = nvme_transport_addresses
        if nvme_transport_type is not None:
            self.nvme_transport_type = nvme_transport_type
        if nvme_transport_type_l10n is not None:
            self.nvme_transport_type_l10n = nvme_transport_type_l10n

    @property
    def port_name(self):
        """Gets the port_name of this ActiveSessionInstance.  # noqa: E501

        IQN or WWN of the target port that the initiator is logged into.  # noqa: E501

        :return: The port_name of this ActiveSessionInstance.  # noqa: E501
        :rtype: str
        """
        return self._port_name

    @port_name.setter
    def port_name(self, port_name):
        """Sets the port_name of this ActiveSessionInstance.

        IQN or WWN of the target port that the initiator is logged into.  # noqa: E501

        :param port_name: The port_name of this ActiveSessionInstance.  # noqa: E501
        :type: str
        """

        self._port_name = port_name

    @property
    def appliance_id(self):
        """Gets the appliance_id of this ActiveSessionInstance.  # noqa: E501

        Unique identifier of the appliance containing the session.  # noqa: E501

        :return: The appliance_id of this ActiveSessionInstance.  # noqa: E501
        :rtype: str
        """
        return self._appliance_id

    @appliance_id.setter
    def appliance_id(self, appliance_id):
        """Sets the appliance_id of this ActiveSessionInstance.

        Unique identifier of the appliance containing the session.  # noqa: E501

        :param appliance_id: The appliance_id of this ActiveSessionInstance.  # noqa: E501
        :type: str
        """

        self._appliance_id = appliance_id

    @property
    def node_id(self):
        """Gets the node_id of this ActiveSessionInstance.  # noqa: E501

        Unique identifier of node on the appliance on which active session is created.  # noqa: E501

        :return: The node_id of this ActiveSessionInstance.  # noqa: E501
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this ActiveSessionInstance.

        Unique identifier of node on the appliance on which active session is created.  # noqa: E501

        :param node_id: The node_id of this ActiveSessionInstance.  # noqa: E501
        :type: str
        """

        self._node_id = node_id

    @property
    def bond_id(self):
        """Gets the bond_id of this ActiveSessionInstance.  # noqa: E501

        Unique identifier of the bond the initiator is logged into.  Null if one of the following is non-null: veth_id, eth_port_id or fc_port_id.  # noqa: E501

        :return: The bond_id of this ActiveSessionInstance.  # noqa: E501
        :rtype: str
        """
        return self._bond_id

    @bond_id.setter
    def bond_id(self, bond_id):
        """Sets the bond_id of this ActiveSessionInstance.

        Unique identifier of the bond the initiator is logged into.  Null if one of the following is non-null: veth_id, eth_port_id or fc_port_id.  # noqa: E501

        :param bond_id: The bond_id of this ActiveSessionInstance.  # noqa: E501
        :type: str
        """

        self._bond_id = bond_id

    @property
    def fc_port_id(self):
        """Gets the fc_port_id of this ActiveSessionInstance.  # noqa: E501

        Unique identifier of the FC port the initiator is logged into.  Null if one of the following is non-null: bond_id, veth_id or eth_port_id  # noqa: E501

        :return: The fc_port_id of this ActiveSessionInstance.  # noqa: E501
        :rtype: str
        """
        return self._fc_port_id

    @fc_port_id.setter
    def fc_port_id(self, fc_port_id):
        """Sets the fc_port_id of this ActiveSessionInstance.

        Unique identifier of the FC port the initiator is logged into.  Null if one of the following is non-null: bond_id, veth_id or eth_port_id  # noqa: E501

        :param fc_port_id: The fc_port_id of this ActiveSessionInstance.  # noqa: E501
        :type: str
        """

        self._fc_port_id = fc_port_id

    @property
    def veth_id(self):
        """Gets the veth_id of this ActiveSessionInstance.  # noqa: E501

        Unique identifier of the virtual Ethernet port the initiator is logged into.  Null if one of the following is non-null: bond, eth_port_id or fc_port_id.  # noqa: E501

        :return: The veth_id of this ActiveSessionInstance.  # noqa: E501
        :rtype: str
        """
        return self._veth_id

    @veth_id.setter
    def veth_id(self, veth_id):
        """Sets the veth_id of this ActiveSessionInstance.

        Unique identifier of the virtual Ethernet port the initiator is logged into.  Null if one of the following is non-null: bond, eth_port_id or fc_port_id.  # noqa: E501

        :param veth_id: The veth_id of this ActiveSessionInstance.  # noqa: E501
        :type: str
        """

        self._veth_id = veth_id

    @property
    def eth_port_id(self):
        """Gets the eth_port_id of this ActiveSessionInstance.  # noqa: E501

        Unique identifier of the Ethernet port the initiator is logged into. Null if one of the following is non-null: bond_id, veth_id or fc_port_id.  # noqa: E501

        :return: The eth_port_id of this ActiveSessionInstance.  # noqa: E501
        :rtype: str
        """
        return self._eth_port_id

    @eth_port_id.setter
    def eth_port_id(self, eth_port_id):
        """Sets the eth_port_id of this ActiveSessionInstance.

        Unique identifier of the Ethernet port the initiator is logged into. Null if one of the following is non-null: bond_id, veth_id or fc_port_id.  # noqa: E501

        :param eth_port_id: The eth_port_id of this ActiveSessionInstance.  # noqa: E501
        :type: str
        """

        self._eth_port_id = eth_port_id

    @property
    def nvme_transport_addresses(self):
        """Gets the nvme_transport_addresses of this ActiveSessionInstance.  # noqa: E501

        List of addresses of the NVMe/NVMe-vVol initiator. These can either be the IPs of the endpoints for NVMe over TCP, or they can be the WWNs if using NVMe over FC. It may be that the same NQN will be applied to multiple WWNs or IP addresses, since NQNs are unique per host sub-system, and not unique per port. This field is null for FC(SCSI) and iSCSI initiators. Was added in version 3.0.0.0.  # noqa: E501

        :return: The nvme_transport_addresses of this ActiveSessionInstance.  # noqa: E501
        :rtype: list[str]
        """
        return self._nvme_transport_addresses

    @nvme_transport_addresses.setter
    def nvme_transport_addresses(self, nvme_transport_addresses):
        """Sets the nvme_transport_addresses of this ActiveSessionInstance.

        List of addresses of the NVMe/NVMe-vVol initiator. These can either be the IPs of the endpoints for NVMe over TCP, or they can be the WWNs if using NVMe over FC. It may be that the same NQN will be applied to multiple WWNs or IP addresses, since NQNs are unique per host sub-system, and not unique per port. This field is null for FC(SCSI) and iSCSI initiators. Was added in version 3.0.0.0.  # noqa: E501

        :param nvme_transport_addresses: The nvme_transport_addresses of this ActiveSessionInstance.  # noqa: E501
        :type: list[str]
        """

        self._nvme_transport_addresses = nvme_transport_addresses

    @property
    def nvme_transport_type(self):
        """Gets the nvme_transport_type of this ActiveSessionInstance.  # noqa: E501

         Was added in version 3.0.0.0.  # noqa: E501

        :return: The nvme_transport_type of this ActiveSessionInstance.  # noqa: E501
        :rtype: NvmeTransportTypeEnum
        """
        return self._nvme_transport_type

    @nvme_transport_type.setter
    def nvme_transport_type(self, nvme_transport_type):
        """Sets the nvme_transport_type of this ActiveSessionInstance.

         Was added in version 3.0.0.0.  # noqa: E501

        :param nvme_transport_type: The nvme_transport_type of this ActiveSessionInstance.  # noqa: E501
        :type: NvmeTransportTypeEnum
        """

        self._nvme_transport_type = nvme_transport_type

    @property
    def nvme_transport_type_l10n(self):
        """Gets the nvme_transport_type_l10n of this ActiveSessionInstance.  # noqa: E501

        Localized message string corresponding to nvme_transport_type Was added in version 3.0.0.0.  # noqa: E501

        :return: The nvme_transport_type_l10n of this ActiveSessionInstance.  # noqa: E501
        :rtype: str
        """
        return self._nvme_transport_type_l10n

    @nvme_transport_type_l10n.setter
    def nvme_transport_type_l10n(self, nvme_transport_type_l10n):
        """Sets the nvme_transport_type_l10n of this ActiveSessionInstance.

        Localized message string corresponding to nvme_transport_type Was added in version 3.0.0.0.  # noqa: E501

        :param nvme_transport_type_l10n: The nvme_transport_type_l10n of this ActiveSessionInstance.  # noqa: E501
        :type: str
        """

        self._nvme_transport_type_l10n = nvme_transport_type_l10n

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActiveSessionInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActiveSessionInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ActiveSessionInstance):
            return True

        return self.to_dict() != other.to_dict()
