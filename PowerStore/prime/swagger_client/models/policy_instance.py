# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class PolicyInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'type': 'PolicyTypeEnum',
        'managed_by': 'PolicyManagedByEnum',
        'managed_by_id': 'str',
        'is_read_only': 'bool',
        'is_replica': 'bool',
        'type_l10n': 'str',
        'managed_by_l10n': 'str',
        'virtual_volumes': 'list[VirtualVolumeInstance]',
        'virtual_machines': 'list[VirtualMachineInstance]',
        'volumes': 'list[VolumeInstance]',
        'volume_groups': 'list[VolumeGroupInstance]',
        'nas_servers': 'list[NasServerInstance]',
        'file_systems': 'list[FileSystemInstance]',
        'performance_rules': 'list[PerformanceRuleInstance]',
        'snapshot_rules': 'list[SnapshotRuleInstance]',
        'replication_rules': 'list[ReplicationRuleInstance]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'type': 'type',
        'managed_by': 'managed_by',
        'managed_by_id': 'managed_by_id',
        'is_read_only': 'is_read_only',
        'is_replica': 'is_replica',
        'type_l10n': 'type_l10n',
        'managed_by_l10n': 'managed_by_l10n',
        'virtual_volumes': 'virtual_volumes',
        'virtual_machines': 'virtual_machines',
        'volumes': 'volumes',
        'volume_groups': 'volume_groups',
        'nas_servers': 'nas_servers',
        'file_systems': 'file_systems',
        'performance_rules': 'performance_rules',
        'snapshot_rules': 'snapshot_rules',
        'replication_rules': 'replication_rules'
    }

    def __init__(self, id=None, name=None, description=None, type=None, managed_by=None, managed_by_id=None, is_read_only=False, is_replica=False, type_l10n=None, managed_by_l10n=None, virtual_volumes=None, virtual_machines=None, volumes=None, volume_groups=None, nas_servers=None, file_systems=None, performance_rules=None, snapshot_rules=None, replication_rules=None, _configuration=None):  # noqa: E501
        """PolicyInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._description = None
        self._type = None
        self._managed_by = None
        self._managed_by_id = None
        self._is_read_only = None
        self._is_replica = None
        self._type_l10n = None
        self._managed_by_l10n = None
        self._virtual_volumes = None
        self._virtual_machines = None
        self._volumes = None
        self._volume_groups = None
        self._nas_servers = None
        self._file_systems = None
        self._performance_rules = None
        self._snapshot_rules = None
        self._replication_rules = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if type is not None:
            self.type = type
        if managed_by is not None:
            self.managed_by = managed_by
        if managed_by_id is not None:
            self.managed_by_id = managed_by_id
        if is_read_only is not None:
            self.is_read_only = is_read_only
        if is_replica is not None:
            self.is_replica = is_replica
        if type_l10n is not None:
            self.type_l10n = type_l10n
        if managed_by_l10n is not None:
            self.managed_by_l10n = managed_by_l10n
        if virtual_volumes is not None:
            self.virtual_volumes = virtual_volumes
        if virtual_machines is not None:
            self.virtual_machines = virtual_machines
        if volumes is not None:
            self.volumes = volumes
        if volume_groups is not None:
            self.volume_groups = volume_groups
        if nas_servers is not None:
            self.nas_servers = nas_servers
        if file_systems is not None:
            self.file_systems = file_systems
        if performance_rules is not None:
            self.performance_rules = performance_rules
        if snapshot_rules is not None:
            self.snapshot_rules = snapshot_rules
        if replication_rules is not None:
            self.replication_rules = replication_rules

    @property
    def id(self):
        """Gets the id of this PolicyInstance.  # noqa: E501

        Unique identifier of the policy.  # noqa: E501

        :return: The id of this PolicyInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PolicyInstance.

        Unique identifier of the policy.  # noqa: E501

        :param id: The id of this PolicyInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this PolicyInstance.  # noqa: E501

        Policy name.  This property supports case-insensitive filtering.  # noqa: E501

        :return: The name of this PolicyInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PolicyInstance.

        Policy name.  This property supports case-insensitive filtering.  # noqa: E501

        :param name: The name of this PolicyInstance.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this PolicyInstance.  # noqa: E501

        Policy description.  # noqa: E501

        :return: The description of this PolicyInstance.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PolicyInstance.

        Policy description.  # noqa: E501

        :param description: The description of this PolicyInstance.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this PolicyInstance.  # noqa: E501


        :return: The type of this PolicyInstance.  # noqa: E501
        :rtype: PolicyTypeEnum
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PolicyInstance.


        :param type: The type of this PolicyInstance.  # noqa: E501
        :type: PolicyTypeEnum
        """

        self._type = type

    @property
    def managed_by(self):
        """Gets the managed_by of this PolicyInstance.  # noqa: E501

         Was added in version 3.0.0.0.  # noqa: E501

        :return: The managed_by of this PolicyInstance.  # noqa: E501
        :rtype: PolicyManagedByEnum
        """
        return self._managed_by

    @managed_by.setter
    def managed_by(self, managed_by):
        """Sets the managed_by of this PolicyInstance.

         Was added in version 3.0.0.0.  # noqa: E501

        :param managed_by: The managed_by of this PolicyInstance.  # noqa: E501
        :type: PolicyManagedByEnum
        """

        self._managed_by = managed_by

    @property
    def managed_by_id(self):
        """Gets the managed_by_id of this PolicyInstance.  # noqa: E501

        Unique identifier of the managing entity based on the value of the managed_by property, as shown below:   * User - Empty   * Metro - Unique identifier of the remote system where the policy was assigned.   * Replication - Unique identifier of the source remote system.   * VMware_vSphere - Unique identifier of the owning VMware vSphere/vCenter. Was added in version 3.0.0.0.  # noqa: E501

        :return: The managed_by_id of this PolicyInstance.  # noqa: E501
        :rtype: str
        """
        return self._managed_by_id

    @managed_by_id.setter
    def managed_by_id(self, managed_by_id):
        """Sets the managed_by_id of this PolicyInstance.

        Unique identifier of the managing entity based on the value of the managed_by property, as shown below:   * User - Empty   * Metro - Unique identifier of the remote system where the policy was assigned.   * Replication - Unique identifier of the source remote system.   * VMware_vSphere - Unique identifier of the owning VMware vSphere/vCenter. Was added in version 3.0.0.0.  # noqa: E501

        :param managed_by_id: The managed_by_id of this PolicyInstance.  # noqa: E501
        :type: str
        """

        self._managed_by_id = managed_by_id

    @property
    def is_read_only(self):
        """Gets the is_read_only of this PolicyInstance.  # noqa: E501

        Indicates whether this policy can be modified.  Was added in version 3.0.0.0.  # noqa: E501

        :return: The is_read_only of this PolicyInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_read_only

    @is_read_only.setter
    def is_read_only(self, is_read_only):
        """Sets the is_read_only of this PolicyInstance.

        Indicates whether this policy can be modified.  Was added in version 3.0.0.0.  # noqa: E501

        :param is_read_only: The is_read_only of this PolicyInstance.  # noqa: E501
        :type: bool
        """

        self._is_read_only = is_read_only

    @property
    def is_replica(self):
        """Gets the is_replica of this PolicyInstance.  # noqa: E501

        Indicates if this is a replica of a policy on a remote system that is the source of a replication session replicating a resource to the local system. A policy of this type is restricted from many operations.   # noqa: E501

        :return: The is_replica of this PolicyInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_replica

    @is_replica.setter
    def is_replica(self, is_replica):
        """Sets the is_replica of this PolicyInstance.

        Indicates if this is a replica of a policy on a remote system that is the source of a replication session replicating a resource to the local system. A policy of this type is restricted from many operations.   # noqa: E501

        :param is_replica: The is_replica of this PolicyInstance.  # noqa: E501
        :type: bool
        """

        self._is_replica = is_replica

    @property
    def type_l10n(self):
        """Gets the type_l10n of this PolicyInstance.  # noqa: E501

        Localized message string corresponding to type  # noqa: E501

        :return: The type_l10n of this PolicyInstance.  # noqa: E501
        :rtype: str
        """
        return self._type_l10n

    @type_l10n.setter
    def type_l10n(self, type_l10n):
        """Sets the type_l10n of this PolicyInstance.

        Localized message string corresponding to type  # noqa: E501

        :param type_l10n: The type_l10n of this PolicyInstance.  # noqa: E501
        :type: str
        """

        self._type_l10n = type_l10n

    @property
    def managed_by_l10n(self):
        """Gets the managed_by_l10n of this PolicyInstance.  # noqa: E501

        Localized message string corresponding to managed_by Was added in version 3.0.0.0.  # noqa: E501

        :return: The managed_by_l10n of this PolicyInstance.  # noqa: E501
        :rtype: str
        """
        return self._managed_by_l10n

    @managed_by_l10n.setter
    def managed_by_l10n(self, managed_by_l10n):
        """Sets the managed_by_l10n of this PolicyInstance.

        Localized message string corresponding to managed_by Was added in version 3.0.0.0.  # noqa: E501

        :param managed_by_l10n: The managed_by_l10n of this PolicyInstance.  # noqa: E501
        :type: str
        """

        self._managed_by_l10n = managed_by_l10n

    @property
    def virtual_volumes(self):
        """Gets the virtual_volumes of this PolicyInstance.  # noqa: E501

        This is the inverse of the resource type virtual_volume association.  # noqa: E501

        :return: The virtual_volumes of this PolicyInstance.  # noqa: E501
        :rtype: list[VirtualVolumeInstance]
        """
        return self._virtual_volumes

    @virtual_volumes.setter
    def virtual_volumes(self, virtual_volumes):
        """Sets the virtual_volumes of this PolicyInstance.

        This is the inverse of the resource type virtual_volume association.  # noqa: E501

        :param virtual_volumes: The virtual_volumes of this PolicyInstance.  # noqa: E501
        :type: list[VirtualVolumeInstance]
        """

        self._virtual_volumes = virtual_volumes

    @property
    def virtual_machines(self):
        """Gets the virtual_machines of this PolicyInstance.  # noqa: E501

        This is the inverse of the resource type virtual_machine association.  # noqa: E501

        :return: The virtual_machines of this PolicyInstance.  # noqa: E501
        :rtype: list[VirtualMachineInstance]
        """
        return self._virtual_machines

    @virtual_machines.setter
    def virtual_machines(self, virtual_machines):
        """Sets the virtual_machines of this PolicyInstance.

        This is the inverse of the resource type virtual_machine association.  # noqa: E501

        :param virtual_machines: The virtual_machines of this PolicyInstance.  # noqa: E501
        :type: list[VirtualMachineInstance]
        """

        self._virtual_machines = virtual_machines

    @property
    def volumes(self):
        """Gets the volumes of this PolicyInstance.  # noqa: E501

        This is the inverse of the resource type volume association.  # noqa: E501

        :return: The volumes of this PolicyInstance.  # noqa: E501
        :rtype: list[VolumeInstance]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this PolicyInstance.

        This is the inverse of the resource type volume association.  # noqa: E501

        :param volumes: The volumes of this PolicyInstance.  # noqa: E501
        :type: list[VolumeInstance]
        """

        self._volumes = volumes

    @property
    def volume_groups(self):
        """Gets the volume_groups of this PolicyInstance.  # noqa: E501

        This is the inverse of the resource type volume_group association.  # noqa: E501

        :return: The volume_groups of this PolicyInstance.  # noqa: E501
        :rtype: list[VolumeGroupInstance]
        """
        return self._volume_groups

    @volume_groups.setter
    def volume_groups(self, volume_groups):
        """Sets the volume_groups of this PolicyInstance.

        This is the inverse of the resource type volume_group association.  # noqa: E501

        :param volume_groups: The volume_groups of this PolicyInstance.  # noqa: E501
        :type: list[VolumeGroupInstance]
        """

        self._volume_groups = volume_groups

    @property
    def nas_servers(self):
        """Gets the nas_servers of this PolicyInstance.  # noqa: E501

        This is the inverse of the resource type nas_server association.  # noqa: E501

        :return: The nas_servers of this PolicyInstance.  # noqa: E501
        :rtype: list[NasServerInstance]
        """
        return self._nas_servers

    @nas_servers.setter
    def nas_servers(self, nas_servers):
        """Sets the nas_servers of this PolicyInstance.

        This is the inverse of the resource type nas_server association.  # noqa: E501

        :param nas_servers: The nas_servers of this PolicyInstance.  # noqa: E501
        :type: list[NasServerInstance]
        """

        self._nas_servers = nas_servers

    @property
    def file_systems(self):
        """Gets the file_systems of this PolicyInstance.  # noqa: E501

        This is the inverse of the resource type file_system association.  # noqa: E501

        :return: The file_systems of this PolicyInstance.  # noqa: E501
        :rtype: list[FileSystemInstance]
        """
        return self._file_systems

    @file_systems.setter
    def file_systems(self, file_systems):
        """Sets the file_systems of this PolicyInstance.

        This is the inverse of the resource type file_system association.  # noqa: E501

        :param file_systems: The file_systems of this PolicyInstance.  # noqa: E501
        :type: list[FileSystemInstance]
        """

        self._file_systems = file_systems

    @property
    def performance_rules(self):
        """Gets the performance_rules of this PolicyInstance.  # noqa: E501

        List of the performance_rules that are associated with this policy.  # noqa: E501

        :return: The performance_rules of this PolicyInstance.  # noqa: E501
        :rtype: list[PerformanceRuleInstance]
        """
        return self._performance_rules

    @performance_rules.setter
    def performance_rules(self, performance_rules):
        """Sets the performance_rules of this PolicyInstance.

        List of the performance_rules that are associated with this policy.  # noqa: E501

        :param performance_rules: The performance_rules of this PolicyInstance.  # noqa: E501
        :type: list[PerformanceRuleInstance]
        """

        self._performance_rules = performance_rules

    @property
    def snapshot_rules(self):
        """Gets the snapshot_rules of this PolicyInstance.  # noqa: E501

        List of the snapshot_rules that are associated with this policy.  # noqa: E501

        :return: The snapshot_rules of this PolicyInstance.  # noqa: E501
        :rtype: list[SnapshotRuleInstance]
        """
        return self._snapshot_rules

    @snapshot_rules.setter
    def snapshot_rules(self, snapshot_rules):
        """Sets the snapshot_rules of this PolicyInstance.

        List of the snapshot_rules that are associated with this policy.  # noqa: E501

        :param snapshot_rules: The snapshot_rules of this PolicyInstance.  # noqa: E501
        :type: list[SnapshotRuleInstance]
        """

        self._snapshot_rules = snapshot_rules

    @property
    def replication_rules(self):
        """Gets the replication_rules of this PolicyInstance.  # noqa: E501

        List of the replication_rules that are associated with this policy.  # noqa: E501

        :return: The replication_rules of this PolicyInstance.  # noqa: E501
        :rtype: list[ReplicationRuleInstance]
        """
        return self._replication_rules

    @replication_rules.setter
    def replication_rules(self, replication_rules):
        """Sets the replication_rules of this PolicyInstance.

        List of the replication_rules that are associated with this policy.  # noqa: E501

        :param replication_rules: The replication_rules of this PolicyInstance.  # noqa: E501
        :type: list[ReplicationRuleInstance]
        """

        self._replication_rules = replication_rules

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PolicyInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PolicyInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PolicyInstance):
            return True

        return self.to_dict() != other.to_dict()
