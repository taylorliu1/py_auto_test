# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class NasServerClone(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'file_systems': 'list[str]',
        'clone_flr_file_systems': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'file_systems': 'file_systems',
        'clone_flr_file_systems': 'clone_flr_file_systems'
    }

    def __init__(self, name=None, file_systems=None, clone_flr_file_systems=False, _configuration=None):  # noqa: E501
        """NasServerClone - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._file_systems = None
        self._clone_flr_file_systems = None
        self.discriminator = None

        self.name = name
        if file_systems is not None:
            self.file_systems = file_systems
        if clone_flr_file_systems is not None:
            self.clone_flr_file_systems = clone_flr_file_systems

    @property
    def name(self):
        """Gets the name of this NasServerClone.  # noqa: E501

        The name for the cloned NAS server.  # noqa: E501

        :return: The name of this NasServerClone.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NasServerClone.

        The name for the cloned NAS server.  # noqa: E501

        :param name: The name of this NasServerClone.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def file_systems(self):
        """Gets the file_systems of this NasServerClone.  # noqa: E501

        The list of File systems to clone.  # noqa: E501

        :return: The file_systems of this NasServerClone.  # noqa: E501
        :rtype: list[str]
        """
        return self._file_systems

    @file_systems.setter
    def file_systems(self, file_systems):
        """Sets the file_systems of this NasServerClone.

        The list of File systems to clone.  # noqa: E501

        :param file_systems: The file_systems of this NasServerClone.  # noqa: E501
        :type: list[str]
        """

        self._file_systems = file_systems

    @property
    def clone_flr_file_systems(self):
        """Gets the clone_flr_file_systems of this NasServerClone.  # noqa: E501

        Specifies whether cloning of FLR-C user file system should be allowed.  # noqa: E501

        :return: The clone_flr_file_systems of this NasServerClone.  # noqa: E501
        :rtype: bool
        """
        return self._clone_flr_file_systems

    @clone_flr_file_systems.setter
    def clone_flr_file_systems(self, clone_flr_file_systems):
        """Sets the clone_flr_file_systems of this NasServerClone.

        Specifies whether cloning of FLR-C user file system should be allowed.  # noqa: E501

        :param clone_flr_file_systems: The clone_flr_file_systems of this NasServerClone.  # noqa: E501
        :type: bool
        """

        self._clone_flr_file_systems = clone_flr_file_systems

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NasServerClone, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NasServerClone):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NasServerClone):
            return True

        return self.to_dict() != other.to_dict()
