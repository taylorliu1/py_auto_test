# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class MaintenanceWindowModify(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_enabled': 'bool',
        'end_offset': 'int'
    }

    attribute_map = {
        'is_enabled': 'is_enabled',
        'end_offset': 'end_offset'
    }

    def __init__(self, is_enabled=None, end_offset=None, _configuration=None):  # noqa: E501
        """MaintenanceWindowModify - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._is_enabled = None
        self._end_offset = None
        self.discriminator = None

        if is_enabled is not None:
            self.is_enabled = is_enabled
        if end_offset is not None:
            self.end_offset = end_offset

    @property
    def is_enabled(self):
        """Gets the is_enabled of this MaintenanceWindowModify.  # noqa: E501

        Activate or deactivate the window for one appliance.  # noqa: E501

        :return: The is_enabled of this MaintenanceWindowModify.  # noqa: E501
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this MaintenanceWindowModify.

        Activate or deactivate the window for one appliance.  # noqa: E501

        :param is_enabled: The is_enabled of this MaintenanceWindowModify.  # noqa: E501
        :type: bool
        """

        self._is_enabled = is_enabled

    @property
    def end_offset(self):
        """Gets the end_offset of this MaintenanceWindowModify.  # noqa: E501

        Number of seconds from the current timestamp the maintenance window will expire. This value is required if is_enabled is passed as true, and may not be more than 172800 (48 hours).  # noqa: E501

        :return: The end_offset of this MaintenanceWindowModify.  # noqa: E501
        :rtype: int
        """
        return self._end_offset

    @end_offset.setter
    def end_offset(self, end_offset):
        """Sets the end_offset of this MaintenanceWindowModify.

        Number of seconds from the current timestamp the maintenance window will expire. This value is required if is_enabled is passed as true, and may not be more than 172800 (48 hours).  # noqa: E501

        :param end_offset: The end_offset of this MaintenanceWindowModify.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                end_offset is not None and end_offset > 172800):  # noqa: E501
            raise ValueError("Invalid value for `end_offset`, must be a value less than or equal to `172800`")  # noqa: E501
        if (self._configuration.client_side_validation and
                end_offset is not None and end_offset < 0):  # noqa: E501
            raise ValueError("Invalid value for `end_offset`, must be a value greater than or equal to `0`")  # noqa: E501

        self._end_offset = end_offset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MaintenanceWindowModify, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MaintenanceWindowModify):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MaintenanceWindowModify):
            return True

        return self.to_dict() != other.to_dict()
