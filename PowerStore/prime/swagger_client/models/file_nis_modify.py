# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class FileNisModify(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'domain': 'str',
        'ip_addresses': 'list[str]',
        'add_ip_addresses': 'list[str]',
        'remove_ip_addresses': 'list[str]',
        'is_destination_override_enabled': 'bool'
    }

    attribute_map = {
        'domain': 'domain',
        'ip_addresses': 'ip_addresses',
        'add_ip_addresses': 'add_ip_addresses',
        'remove_ip_addresses': 'remove_ip_addresses',
        'is_destination_override_enabled': 'is_destination_override_enabled'
    }

    def __init__(self, domain=None, ip_addresses=None, add_ip_addresses=None, remove_ip_addresses=None, is_destination_override_enabled=False, _configuration=None):  # noqa: E501
        """FileNisModify - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._domain = None
        self._ip_addresses = None
        self._add_ip_addresses = None
        self._remove_ip_addresses = None
        self._is_destination_override_enabled = None
        self.discriminator = None

        if domain is not None:
            self.domain = domain
        if ip_addresses is not None:
            self.ip_addresses = ip_addresses
        if add_ip_addresses is not None:
            self.add_ip_addresses = add_ip_addresses
        if remove_ip_addresses is not None:
            self.remove_ip_addresses = remove_ip_addresses
        if is_destination_override_enabled is not None:
            self.is_destination_override_enabled = is_destination_override_enabled

    @property
    def domain(self):
        """Gets the domain of this FileNisModify.  # noqa: E501

        Name of the NIS domain.  # noqa: E501

        :return: The domain of this FileNisModify.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this FileNisModify.

        Name of the NIS domain.  # noqa: E501

        :param domain: The domain of this FileNisModify.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                domain is not None and len(domain) > 255):
            raise ValueError("Invalid value for `domain`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                domain is not None and len(domain) < 1):
            raise ValueError("Invalid value for `domain`, length must be greater than or equal to `1`")  # noqa: E501

        self._domain = domain

    @property
    def ip_addresses(self):
        """Gets the ip_addresses of this FileNisModify.  # noqa: E501

        A new list of NIS server IP addresses to replace the existing list. The addresses may be IPv4 or IPv6.  # noqa: E501

        :return: The ip_addresses of this FileNisModify.  # noqa: E501
        :rtype: list[str]
        """
        return self._ip_addresses

    @ip_addresses.setter
    def ip_addresses(self, ip_addresses):
        """Sets the ip_addresses of this FileNisModify.

        A new list of NIS server IP addresses to replace the existing list. The addresses may be IPv4 or IPv6.  # noqa: E501

        :param ip_addresses: The ip_addresses of this FileNisModify.  # noqa: E501
        :type: list[str]
        """

        self._ip_addresses = ip_addresses

    @property
    def add_ip_addresses(self):
        """Gets the add_ip_addresses of this FileNisModify.  # noqa: E501

        IP addresses to add to the current list. The addresses may be IPv4 or IPv6. Error occurs if the IP address already exists. Cannot be combined with ip_addresses.  # noqa: E501

        :return: The add_ip_addresses of this FileNisModify.  # noqa: E501
        :rtype: list[str]
        """
        return self._add_ip_addresses

    @add_ip_addresses.setter
    def add_ip_addresses(self, add_ip_addresses):
        """Sets the add_ip_addresses of this FileNisModify.

        IP addresses to add to the current list. The addresses may be IPv4 or IPv6. Error occurs if the IP address already exists. Cannot be combined with ip_addresses.  # noqa: E501

        :param add_ip_addresses: The add_ip_addresses of this FileNisModify.  # noqa: E501
        :type: list[str]
        """

        self._add_ip_addresses = add_ip_addresses

    @property
    def remove_ip_addresses(self):
        """Gets the remove_ip_addresses of this FileNisModify.  # noqa: E501

        IP addresses to remove from the current list. The addresses may be IPv4 or IPv6. Error occurs if the IP address is not present. Cannot be combined with ip_addresses.  # noqa: E501

        :return: The remove_ip_addresses of this FileNisModify.  # noqa: E501
        :rtype: list[str]
        """
        return self._remove_ip_addresses

    @remove_ip_addresses.setter
    def remove_ip_addresses(self, remove_ip_addresses):
        """Sets the remove_ip_addresses of this FileNisModify.

        IP addresses to remove from the current list. The addresses may be IPv4 or IPv6. Error occurs if the IP address is not present. Cannot be combined with ip_addresses.  # noqa: E501

        :param remove_ip_addresses: The remove_ip_addresses of this FileNisModify.  # noqa: E501
        :type: list[str]
        """

        self._remove_ip_addresses = remove_ip_addresses

    @property
    def is_destination_override_enabled(self):
        """Gets the is_destination_override_enabled of this FileNisModify.  # noqa: E501

        In order to modify any properties of this resource when the associated NAS server is a replication destination, the is_destination_override_enabled flag must be set to true. When true these properties may be modified: ip_addresses, add_ip_addresses, remove_ip_addresses. Values are:   true - Enable locally set properties. Source property changes will propagate to the source_parameters of the resource.   false - Reset the properties to the ones from the source. Source property changes will propagate directly to this resource.  Was added in version 3.0.0.0.  # noqa: E501

        :return: The is_destination_override_enabled of this FileNisModify.  # noqa: E501
        :rtype: bool
        """
        return self._is_destination_override_enabled

    @is_destination_override_enabled.setter
    def is_destination_override_enabled(self, is_destination_override_enabled):
        """Sets the is_destination_override_enabled of this FileNisModify.

        In order to modify any properties of this resource when the associated NAS server is a replication destination, the is_destination_override_enabled flag must be set to true. When true these properties may be modified: ip_addresses, add_ip_addresses, remove_ip_addresses. Values are:   true - Enable locally set properties. Source property changes will propagate to the source_parameters of the resource.   false - Reset the properties to the ones from the source. Source property changes will propagate directly to this resource.  Was added in version 3.0.0.0.  # noqa: E501

        :param is_destination_override_enabled: The is_destination_override_enabled of this FileNisModify.  # noqa: E501
        :type: bool
        """

        self._is_destination_override_enabled = is_destination_override_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileNisModify, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileNisModify):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FileNisModify):
            return True

        return self.to_dict() != other.to_dict()
