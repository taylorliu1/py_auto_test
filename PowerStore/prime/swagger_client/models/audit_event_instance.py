# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class AuditEventInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'type': 'AuditEventTypeEnum',
        'timestamp': 'datetime',
        'username': 'str',
        'is_successful': 'bool',
        'client_address': 'str',
        'server_address': 'str',
        'appliance_id': 'str',
        'job_id': 'str',
        'resource_type': 'ResourceTypeEnum',
        'resource_action': 'ResourceActionEnum',
        'message_code': 'str',
        'message_arguments': 'list[str]',
        'message_l10n': 'str',
        'type_l10n': 'str',
        'resource_type_l10n': 'str',
        'resource_action_l10n': 'str'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'timestamp': 'timestamp',
        'username': 'username',
        'is_successful': 'is_successful',
        'client_address': 'client_address',
        'server_address': 'server_address',
        'appliance_id': 'appliance_id',
        'job_id': 'job_id',
        'resource_type': 'resource_type',
        'resource_action': 'resource_action',
        'message_code': 'message_code',
        'message_arguments': 'message_arguments',
        'message_l10n': 'message_l10n',
        'type_l10n': 'type_l10n',
        'resource_type_l10n': 'resource_type_l10n',
        'resource_action_l10n': 'resource_action_l10n'
    }

    def __init__(self, id=None, type=None, timestamp=None, username=None, is_successful=None, client_address=None, server_address=None, appliance_id=None, job_id=None, resource_type=None, resource_action=None, message_code=None, message_arguments=None, message_l10n=None, type_l10n=None, resource_type_l10n=None, resource_action_l10n=None, _configuration=None):  # noqa: E501
        """AuditEventInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._type = None
        self._timestamp = None
        self._username = None
        self._is_successful = None
        self._client_address = None
        self._server_address = None
        self._appliance_id = None
        self._job_id = None
        self._resource_type = None
        self._resource_action = None
        self._message_code = None
        self._message_arguments = None
        self._message_l10n = None
        self._type_l10n = None
        self._resource_type_l10n = None
        self._resource_action_l10n = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if timestamp is not None:
            self.timestamp = timestamp
        if username is not None:
            self.username = username
        if is_successful is not None:
            self.is_successful = is_successful
        if client_address is not None:
            self.client_address = client_address
        if server_address is not None:
            self.server_address = server_address
        if appliance_id is not None:
            self.appliance_id = appliance_id
        if job_id is not None:
            self.job_id = job_id
        if resource_type is not None:
            self.resource_type = resource_type
        if resource_action is not None:
            self.resource_action = resource_action
        if message_code is not None:
            self.message_code = message_code
        if message_arguments is not None:
            self.message_arguments = message_arguments
        if message_l10n is not None:
            self.message_l10n = message_l10n
        if type_l10n is not None:
            self.type_l10n = type_l10n
        if resource_type_l10n is not None:
            self.resource_type_l10n = resource_type_l10n
        if resource_action_l10n is not None:
            self.resource_action_l10n = resource_action_l10n

    @property
    def id(self):
        """Gets the id of this AuditEventInstance.  # noqa: E501

        Unique identifier of the audit log entry.  # noqa: E501

        :return: The id of this AuditEventInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AuditEventInstance.

        Unique identifier of the audit log entry.  # noqa: E501

        :param id: The id of this AuditEventInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this AuditEventInstance.  # noqa: E501


        :return: The type of this AuditEventInstance.  # noqa: E501
        :rtype: AuditEventTypeEnum
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AuditEventInstance.


        :param type: The type of this AuditEventInstance.  # noqa: E501
        :type: AuditEventTypeEnum
        """

        self._type = type

    @property
    def timestamp(self):
        """Gets the timestamp of this AuditEventInstance.  # noqa: E501

        Time the event occurred to one second precision.  # noqa: E501

        :return: The timestamp of this AuditEventInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this AuditEventInstance.

        Time the event occurred to one second precision.  # noqa: E501

        :param timestamp: The timestamp of this AuditEventInstance.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def username(self):
        """Gets the username of this AuditEventInstance.  # noqa: E501

        Fully qualified name of the user who initiated the event to be audited. For example, domain_name/name.  # noqa: E501

        :return: The username of this AuditEventInstance.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this AuditEventInstance.

        Fully qualified name of the user who initiated the event to be audited. For example, domain_name/name.  # noqa: E501

        :param username: The username of this AuditEventInstance.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def is_successful(self):
        """Gets the is_successful of this AuditEventInstance.  # noqa: E501

        Whether the event was successful or not.  # noqa: E501

        :return: The is_successful of this AuditEventInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_successful

    @is_successful.setter
    def is_successful(self, is_successful):
        """Sets the is_successful of this AuditEventInstance.

        Whether the event was successful or not.  # noqa: E501

        :param is_successful: The is_successful of this AuditEventInstance.  # noqa: E501
        :type: bool
        """

        self._is_successful = is_successful

    @property
    def client_address(self):
        """Gets the client_address of this AuditEventInstance.  # noqa: E501

        FQDN/IP Address of the client from where the event was initiated.  # noqa: E501

        :return: The client_address of this AuditEventInstance.  # noqa: E501
        :rtype: str
        """
        return self._client_address

    @client_address.setter
    def client_address(self, client_address):
        """Sets the client_address of this AuditEventInstance.

        FQDN/IP Address of the client from where the event was initiated.  # noqa: E501

        :param client_address: The client_address of this AuditEventInstance.  # noqa: E501
        :type: str
        """

        self._client_address = client_address

    @property
    def server_address(self):
        """Gets the server_address of this AuditEventInstance.  # noqa: E501

        IP Address on which the request was targeted.  # noqa: E501

        :return: The server_address of this AuditEventInstance.  # noqa: E501
        :rtype: str
        """
        return self._server_address

    @server_address.setter
    def server_address(self, server_address):
        """Sets the server_address of this AuditEventInstance.

        IP Address on which the request was targeted.  # noqa: E501

        :param server_address: The server_address of this AuditEventInstance.  # noqa: E501
        :type: str
        """

        self._server_address = server_address

    @property
    def appliance_id(self):
        """Gets the appliance_id of this AuditEventInstance.  # noqa: E501

        Unique identifier of the appliance where the event occurred.  # noqa: E501

        :return: The appliance_id of this AuditEventInstance.  # noqa: E501
        :rtype: str
        """
        return self._appliance_id

    @appliance_id.setter
    def appliance_id(self, appliance_id):
        """Sets the appliance_id of this AuditEventInstance.

        Unique identifier of the appliance where the event occurred.  # noqa: E501

        :param appliance_id: The appliance_id of this AuditEventInstance.  # noqa: E501
        :type: str
        """

        self._appliance_id = appliance_id

    @property
    def job_id(self):
        """Gets the job_id of this AuditEventInstance.  # noqa: E501

        Unique identifier of the job associated with the audit event (if any).  # noqa: E501

        :return: The job_id of this AuditEventInstance.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this AuditEventInstance.

        Unique identifier of the job associated with the audit event (if any).  # noqa: E501

        :param job_id: The job_id of this AuditEventInstance.  # noqa: E501
        :type: str
        """

        self._job_id = job_id

    @property
    def resource_type(self):
        """Gets the resource_type of this AuditEventInstance.  # noqa: E501


        :return: The resource_type of this AuditEventInstance.  # noqa: E501
        :rtype: ResourceTypeEnum
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this AuditEventInstance.


        :param resource_type: The resource_type of this AuditEventInstance.  # noqa: E501
        :type: ResourceTypeEnum
        """

        self._resource_type = resource_type

    @property
    def resource_action(self):
        """Gets the resource_action of this AuditEventInstance.  # noqa: E501


        :return: The resource_action of this AuditEventInstance.  # noqa: E501
        :rtype: ResourceActionEnum
        """
        return self._resource_action

    @resource_action.setter
    def resource_action(self, resource_action):
        """Sets the resource_action of this AuditEventInstance.


        :param resource_action: The resource_action of this AuditEventInstance.  # noqa: E501
        :type: ResourceActionEnum
        """

        self._resource_action = resource_action

    @property
    def message_code(self):
        """Gets the message_code of this AuditEventInstance.  # noqa: E501

        Unique identifier of the message for this audit_event.  # noqa: E501

        :return: The message_code of this AuditEventInstance.  # noqa: E501
        :rtype: str
        """
        return self._message_code

    @message_code.setter
    def message_code(self, message_code):
        """Sets the message_code of this AuditEventInstance.

        Unique identifier of the message for this audit_event.  # noqa: E501

        :param message_code: The message_code of this AuditEventInstance.  # noqa: E501
        :type: str
        """

        self._message_code = message_code

    @property
    def message_arguments(self):
        """Gets the message_arguments of this AuditEventInstance.  # noqa: E501

        Arguments (if applicable) for the audit_event message.  # noqa: E501

        :return: The message_arguments of this AuditEventInstance.  # noqa: E501
        :rtype: list[str]
        """
        return self._message_arguments

    @message_arguments.setter
    def message_arguments(self, message_arguments):
        """Sets the message_arguments of this AuditEventInstance.

        Arguments (if applicable) for the audit_event message.  # noqa: E501

        :param message_arguments: The message_arguments of this AuditEventInstance.  # noqa: E501
        :type: list[str]
        """

        self._message_arguments = message_arguments

    @property
    def message_l10n(self):
        """Gets the message_l10n of this AuditEventInstance.  # noqa: E501

        Localized message string corresponding to message_code.  # noqa: E501

        :return: The message_l10n of this AuditEventInstance.  # noqa: E501
        :rtype: str
        """
        return self._message_l10n

    @message_l10n.setter
    def message_l10n(self, message_l10n):
        """Sets the message_l10n of this AuditEventInstance.

        Localized message string corresponding to message_code.  # noqa: E501

        :param message_l10n: The message_l10n of this AuditEventInstance.  # noqa: E501
        :type: str
        """

        self._message_l10n = message_l10n

    @property
    def type_l10n(self):
        """Gets the type_l10n of this AuditEventInstance.  # noqa: E501

        Localized message string corresponding to type  # noqa: E501

        :return: The type_l10n of this AuditEventInstance.  # noqa: E501
        :rtype: str
        """
        return self._type_l10n

    @type_l10n.setter
    def type_l10n(self, type_l10n):
        """Sets the type_l10n of this AuditEventInstance.

        Localized message string corresponding to type  # noqa: E501

        :param type_l10n: The type_l10n of this AuditEventInstance.  # noqa: E501
        :type: str
        """

        self._type_l10n = type_l10n

    @property
    def resource_type_l10n(self):
        """Gets the resource_type_l10n of this AuditEventInstance.  # noqa: E501

        Localized message string corresponding to resource_type  # noqa: E501

        :return: The resource_type_l10n of this AuditEventInstance.  # noqa: E501
        :rtype: str
        """
        return self._resource_type_l10n

    @resource_type_l10n.setter
    def resource_type_l10n(self, resource_type_l10n):
        """Sets the resource_type_l10n of this AuditEventInstance.

        Localized message string corresponding to resource_type  # noqa: E501

        :param resource_type_l10n: The resource_type_l10n of this AuditEventInstance.  # noqa: E501
        :type: str
        """

        self._resource_type_l10n = resource_type_l10n

    @property
    def resource_action_l10n(self):
        """Gets the resource_action_l10n of this AuditEventInstance.  # noqa: E501

        Localized message string corresponding to resource_action  # noqa: E501

        :return: The resource_action_l10n of this AuditEventInstance.  # noqa: E501
        :rtype: str
        """
        return self._resource_action_l10n

    @resource_action_l10n.setter
    def resource_action_l10n(self, resource_action_l10n):
        """Sets the resource_action_l10n of this AuditEventInstance.

        Localized message string corresponding to resource_action  # noqa: E501

        :param resource_action_l10n: The resource_action_l10n of this AuditEventInstance.  # noqa: E501
        :type: str
        """

        self._resource_action_l10n = resource_action_l10n

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuditEventInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuditEventInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AuditEventInstance):
            return True

        return self.to_dict() != other.to_dict()
