# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class DatacollectionApplianceInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'appliance_serial_number': 'str',
        'start_timestamp': 'datetime',
        'end_timestamp': 'datetime',
        'compressed_size': 'int',
        'uncompressed_size': 'int',
        'download_uri': 'str',
        'status': 'DatacollectionStatusEnum',
        'status_message_l10n': 'str',
        'uploaded': 'datetime',
        'downloaded': 'datetime',
        'upload_in_progress': 'bool',
        'node': 'str',
        'log_from_timestamp': 'datetime',
        'log_to_timestamp': 'datetime',
        'status_l10n': 'str'
    }

    attribute_map = {
        'id': 'id',
        'appliance_serial_number': 'appliance_serial_number',
        'start_timestamp': 'start_timestamp',
        'end_timestamp': 'end_timestamp',
        'compressed_size': 'compressed_size',
        'uncompressed_size': 'uncompressed_size',
        'download_uri': 'download_uri',
        'status': 'status',
        'status_message_l10n': 'status_message_l10n',
        'uploaded': 'uploaded',
        'downloaded': 'downloaded',
        'upload_in_progress': 'upload_in_progress',
        'node': 'node',
        'log_from_timestamp': 'log_from_timestamp',
        'log_to_timestamp': 'log_to_timestamp',
        'status_l10n': 'status_l10n'
    }

    def __init__(self, id=None, appliance_serial_number=None, start_timestamp=None, end_timestamp=None, compressed_size=None, uncompressed_size=None, download_uri=None, status=None, status_message_l10n=None, uploaded=None, downloaded=None, upload_in_progress=None, node=None, log_from_timestamp=None, log_to_timestamp=None, status_l10n=None, _configuration=None):  # noqa: E501
        """DatacollectionApplianceInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._appliance_serial_number = None
        self._start_timestamp = None
        self._end_timestamp = None
        self._compressed_size = None
        self._uncompressed_size = None
        self._download_uri = None
        self._status = None
        self._status_message_l10n = None
        self._uploaded = None
        self._downloaded = None
        self._upload_in_progress = None
        self._node = None
        self._log_from_timestamp = None
        self._log_to_timestamp = None
        self._status_l10n = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if appliance_serial_number is not None:
            self.appliance_serial_number = appliance_serial_number
        if start_timestamp is not None:
            self.start_timestamp = start_timestamp
        if end_timestamp is not None:
            self.end_timestamp = end_timestamp
        if compressed_size is not None:
            self.compressed_size = compressed_size
        if uncompressed_size is not None:
            self.uncompressed_size = uncompressed_size
        if download_uri is not None:
            self.download_uri = download_uri
        if status is not None:
            self.status = status
        if status_message_l10n is not None:
            self.status_message_l10n = status_message_l10n
        if uploaded is not None:
            self.uploaded = uploaded
        if downloaded is not None:
            self.downloaded = downloaded
        if upload_in_progress is not None:
            self.upload_in_progress = upload_in_progress
        if node is not None:
            self.node = node
        if log_from_timestamp is not None:
            self.log_from_timestamp = log_from_timestamp
        if log_to_timestamp is not None:
            self.log_to_timestamp = log_to_timestamp
        if status_l10n is not None:
            self.status_l10n = status_l10n

    @property
    def id(self):
        """Gets the id of this DatacollectionApplianceInstance.  # noqa: E501

        Unique identifier for this instance.  # noqa: E501

        :return: The id of this DatacollectionApplianceInstance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DatacollectionApplianceInstance.

        Unique identifier for this instance.  # noqa: E501

        :param id: The id of this DatacollectionApplianceInstance.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def appliance_serial_number(self):
        """Gets the appliance_serial_number of this DatacollectionApplianceInstance.  # noqa: E501

        The serial number of the appliance where this data collection was created.  # noqa: E501

        :return: The appliance_serial_number of this DatacollectionApplianceInstance.  # noqa: E501
        :rtype: str
        """
        return self._appliance_serial_number

    @appliance_serial_number.setter
    def appliance_serial_number(self, appliance_serial_number):
        """Sets the appliance_serial_number of this DatacollectionApplianceInstance.

        The serial number of the appliance where this data collection was created.  # noqa: E501

        :param appliance_serial_number: The appliance_serial_number of this DatacollectionApplianceInstance.  # noqa: E501
        :type: str
        """

        self._appliance_serial_number = appliance_serial_number

    @property
    def start_timestamp(self):
        """Gets the start_timestamp of this DatacollectionApplianceInstance.  # noqa: E501

        The date and time that this data collection started on this appliance.  # noqa: E501

        :return: The start_timestamp of this DatacollectionApplianceInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._start_timestamp

    @start_timestamp.setter
    def start_timestamp(self, start_timestamp):
        """Sets the start_timestamp of this DatacollectionApplianceInstance.

        The date and time that this data collection started on this appliance.  # noqa: E501

        :param start_timestamp: The start_timestamp of this DatacollectionApplianceInstance.  # noqa: E501
        :type: datetime
        """

        self._start_timestamp = start_timestamp

    @property
    def end_timestamp(self):
        """Gets the end_timestamp of this DatacollectionApplianceInstance.  # noqa: E501

        The date and time that this data collection completed on the appliance.  # noqa: E501

        :return: The end_timestamp of this DatacollectionApplianceInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._end_timestamp

    @end_timestamp.setter
    def end_timestamp(self, end_timestamp):
        """Sets the end_timestamp of this DatacollectionApplianceInstance.

        The date and time that this data collection completed on the appliance.  # noqa: E501

        :param end_timestamp: The end_timestamp of this DatacollectionApplianceInstance.  # noqa: E501
        :type: datetime
        """

        self._end_timestamp = end_timestamp

    @property
    def compressed_size(self):
        """Gets the compressed_size of this DatacollectionApplianceInstance.  # noqa: E501

        The uncompressed size of this data collection in bytes.  # noqa: E501

        :return: The compressed_size of this DatacollectionApplianceInstance.  # noqa: E501
        :rtype: int
        """
        return self._compressed_size

    @compressed_size.setter
    def compressed_size(self, compressed_size):
        """Sets the compressed_size of this DatacollectionApplianceInstance.

        The uncompressed size of this data collection in bytes.  # noqa: E501

        :param compressed_size: The compressed_size of this DatacollectionApplianceInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                compressed_size is not None and compressed_size > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `compressed_size`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                compressed_size is not None and compressed_size < 0):  # noqa: E501
            raise ValueError("Invalid value for `compressed_size`, must be a value greater than or equal to `0`")  # noqa: E501

        self._compressed_size = compressed_size

    @property
    def uncompressed_size(self):
        """Gets the uncompressed_size of this DatacollectionApplianceInstance.  # noqa: E501

        The compressed size of this data collection in bytes.  # noqa: E501

        :return: The uncompressed_size of this DatacollectionApplianceInstance.  # noqa: E501
        :rtype: int
        """
        return self._uncompressed_size

    @uncompressed_size.setter
    def uncompressed_size(self, uncompressed_size):
        """Sets the uncompressed_size of this DatacollectionApplianceInstance.

        The compressed size of this data collection in bytes.  # noqa: E501

        :param uncompressed_size: The uncompressed_size of this DatacollectionApplianceInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                uncompressed_size is not None and uncompressed_size > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `uncompressed_size`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                uncompressed_size is not None and uncompressed_size < 0):  # noqa: E501
            raise ValueError("Invalid value for `uncompressed_size`, must be a value greater than or equal to `0`")  # noqa: E501

        self._uncompressed_size = uncompressed_size

    @property
    def download_uri(self):
        """Gets the download_uri of this DatacollectionApplianceInstance.  # noqa: E501

        The download URI for this file.  # noqa: E501

        :return: The download_uri of this DatacollectionApplianceInstance.  # noqa: E501
        :rtype: str
        """
        return self._download_uri

    @download_uri.setter
    def download_uri(self, download_uri):
        """Sets the download_uri of this DatacollectionApplianceInstance.

        The download URI for this file.  # noqa: E501

        :param download_uri: The download_uri of this DatacollectionApplianceInstance.  # noqa: E501
        :type: str
        """

        self._download_uri = download_uri

    @property
    def status(self):
        """Gets the status of this DatacollectionApplianceInstance.  # noqa: E501


        :return: The status of this DatacollectionApplianceInstance.  # noqa: E501
        :rtype: DatacollectionStatusEnum
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DatacollectionApplianceInstance.


        :param status: The status of this DatacollectionApplianceInstance.  # noqa: E501
        :type: DatacollectionStatusEnum
        """

        self._status = status

    @property
    def status_message_l10n(self):
        """Gets the status_message_l10n of this DatacollectionApplianceInstance.  # noqa: E501

        Additional status detail  # noqa: E501

        :return: The status_message_l10n of this DatacollectionApplianceInstance.  # noqa: E501
        :rtype: str
        """
        return self._status_message_l10n

    @status_message_l10n.setter
    def status_message_l10n(self, status_message_l10n):
        """Sets the status_message_l10n of this DatacollectionApplianceInstance.

        Additional status detail  # noqa: E501

        :param status_message_l10n: The status_message_l10n of this DatacollectionApplianceInstance.  # noqa: E501
        :type: str
        """

        self._status_message_l10n = status_message_l10n

    @property
    def uploaded(self):
        """Gets the uploaded of this DatacollectionApplianceInstance.  # noqa: E501

        The last date and time that this collection was uploaded to your service provider.  # noqa: E501

        :return: The uploaded of this DatacollectionApplianceInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._uploaded

    @uploaded.setter
    def uploaded(self, uploaded):
        """Sets the uploaded of this DatacollectionApplianceInstance.

        The last date and time that this collection was uploaded to your service provider.  # noqa: E501

        :param uploaded: The uploaded of this DatacollectionApplianceInstance.  # noqa: E501
        :type: datetime
        """

        self._uploaded = uploaded

    @property
    def downloaded(self):
        """Gets the downloaded of this DatacollectionApplianceInstance.  # noqa: E501

        The last date and time that this collection was downloaded.  # noqa: E501

        :return: The downloaded of this DatacollectionApplianceInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._downloaded

    @downloaded.setter
    def downloaded(self, downloaded):
        """Sets the downloaded of this DatacollectionApplianceInstance.

        The last date and time that this collection was downloaded.  # noqa: E501

        :param downloaded: The downloaded of this DatacollectionApplianceInstance.  # noqa: E501
        :type: datetime
        """

        self._downloaded = downloaded

    @property
    def upload_in_progress(self):
        """Gets the upload_in_progress of this DatacollectionApplianceInstance.  # noqa: E501

        Indicates whether upload of the data collection bundle is in progress.  # noqa: E501

        :return: The upload_in_progress of this DatacollectionApplianceInstance.  # noqa: E501
        :rtype: bool
        """
        return self._upload_in_progress

    @upload_in_progress.setter
    def upload_in_progress(self, upload_in_progress):
        """Sets the upload_in_progress of this DatacollectionApplianceInstance.

        Indicates whether upload of the data collection bundle is in progress.  # noqa: E501

        :param upload_in_progress: The upload_in_progress of this DatacollectionApplianceInstance.  # noqa: E501
        :type: bool
        """

        self._upload_in_progress = upload_in_progress

    @property
    def node(self):
        """Gets the node of this DatacollectionApplianceInstance.  # noqa: E501

        The node where the data collection bundle is located.  # noqa: E501

        :return: The node of this DatacollectionApplianceInstance.  # noqa: E501
        :rtype: str
        """
        return self._node

    @node.setter
    def node(self, node):
        """Sets the node of this DatacollectionApplianceInstance.

        The node where the data collection bundle is located.  # noqa: E501

        :param node: The node of this DatacollectionApplianceInstance.  # noqa: E501
        :type: str
        """

        self._node = node

    @property
    def log_from_timestamp(self):
        """Gets the log_from_timestamp of this DatacollectionApplianceInstance.  # noqa: E501

        The date and time from which to start collecting the logs.  # noqa: E501

        :return: The log_from_timestamp of this DatacollectionApplianceInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._log_from_timestamp

    @log_from_timestamp.setter
    def log_from_timestamp(self, log_from_timestamp):
        """Sets the log_from_timestamp of this DatacollectionApplianceInstance.

        The date and time from which to start collecting the logs.  # noqa: E501

        :param log_from_timestamp: The log_from_timestamp of this DatacollectionApplianceInstance.  # noqa: E501
        :type: datetime
        """

        self._log_from_timestamp = log_from_timestamp

    @property
    def log_to_timestamp(self):
        """Gets the log_to_timestamp of this DatacollectionApplianceInstance.  # noqa: E501

        The date and time up to which the logs should be collected.  # noqa: E501

        :return: The log_to_timestamp of this DatacollectionApplianceInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._log_to_timestamp

    @log_to_timestamp.setter
    def log_to_timestamp(self, log_to_timestamp):
        """Sets the log_to_timestamp of this DatacollectionApplianceInstance.

        The date and time up to which the logs should be collected.  # noqa: E501

        :param log_to_timestamp: The log_to_timestamp of this DatacollectionApplianceInstance.  # noqa: E501
        :type: datetime
        """

        self._log_to_timestamp = log_to_timestamp

    @property
    def status_l10n(self):
        """Gets the status_l10n of this DatacollectionApplianceInstance.  # noqa: E501

        Localized message string corresponding to status Was added in version 3.0.0.0.  # noqa: E501

        :return: The status_l10n of this DatacollectionApplianceInstance.  # noqa: E501
        :rtype: str
        """
        return self._status_l10n

    @status_l10n.setter
    def status_l10n(self, status_l10n):
        """Sets the status_l10n of this DatacollectionApplianceInstance.

        Localized message string corresponding to status Was added in version 3.0.0.0.  # noqa: E501

        :param status_l10n: The status_l10n of this DatacollectionApplianceInstance.  # noqa: E501
        :type: str
        """

        self._status_l10n = status_l10n

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DatacollectionApplianceInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DatacollectionApplianceInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DatacollectionApplianceInstance):
            return True

        return self.to_dict() != other.to_dict()
