# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class LdapDomainCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'domain_name': 'str',
        'ldap_servers': 'list[str]',
        'port': 'int',
        'protocol': 'LDAPProtocolEnum',
        'ldap_server_type': 'LDAPServerTypeEnum',
        'bind_user': 'str',
        'bind_password': 'str',
        'ldap_timeout': 'int',
        'is_global_catalog': 'bool',
        'user_id_attribute': 'str',
        'user_object_class': 'str',
        'user_search_path': 'str',
        'group_name_attribute': 'str',
        'group_member_attribute': 'str',
        'group_object_class': 'str',
        'group_search_path': 'str',
        'group_search_level': 'int'
    }

    attribute_map = {
        'domain_name': 'domain_name',
        'ldap_servers': 'ldap_servers',
        'port': 'port',
        'protocol': 'protocol',
        'ldap_server_type': 'ldap_server_type',
        'bind_user': 'bind_user',
        'bind_password': 'bind_password',
        'ldap_timeout': 'ldap_timeout',
        'is_global_catalog': 'is_global_catalog',
        'user_id_attribute': 'user_id_attribute',
        'user_object_class': 'user_object_class',
        'user_search_path': 'user_search_path',
        'group_name_attribute': 'group_name_attribute',
        'group_member_attribute': 'group_member_attribute',
        'group_object_class': 'group_object_class',
        'group_search_path': 'group_search_path',
        'group_search_level': 'group_search_level'
    }

    def __init__(self, domain_name=None, ldap_servers=None, port=None, protocol=None, ldap_server_type=None, bind_user=None, bind_password=None, ldap_timeout=None, is_global_catalog=None, user_id_attribute=None, user_object_class=None, user_search_path=None, group_name_attribute=None, group_member_attribute=None, group_object_class=None, group_search_path=None, group_search_level=None, _configuration=None):  # noqa: E501
        """LdapDomainCreate - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._domain_name = None
        self._ldap_servers = None
        self._port = None
        self._protocol = None
        self._ldap_server_type = None
        self._bind_user = None
        self._bind_password = None
        self._ldap_timeout = None
        self._is_global_catalog = None
        self._user_id_attribute = None
        self._user_object_class = None
        self._user_search_path = None
        self._group_name_attribute = None
        self._group_member_attribute = None
        self._group_object_class = None
        self._group_search_path = None
        self._group_search_level = None
        self.discriminator = None

        self.domain_name = domain_name
        self.ldap_servers = ldap_servers
        if port is not None:
            self.port = port
        if protocol is not None:
            self.protocol = protocol
        if ldap_server_type is not None:
            self.ldap_server_type = ldap_server_type
        self.bind_user = bind_user
        self.bind_password = bind_password
        if ldap_timeout is not None:
            self.ldap_timeout = ldap_timeout
        if is_global_catalog is not None:
            self.is_global_catalog = is_global_catalog
        if user_id_attribute is not None:
            self.user_id_attribute = user_id_attribute
        if user_object_class is not None:
            self.user_object_class = user_object_class
        self.user_search_path = user_search_path
        if group_name_attribute is not None:
            self.group_name_attribute = group_name_attribute
        if group_member_attribute is not None:
            self.group_member_attribute = group_member_attribute
        if group_object_class is not None:
            self.group_object_class = group_object_class
        self.group_search_path = group_search_path
        if group_search_level is not None:
            self.group_search_level = group_search_level

    @property
    def domain_name(self):
        """Gets the domain_name of this LdapDomainCreate.  # noqa: E501

        Name of the LDAP authority to construct the LDAP server configuration.  # noqa: E501

        :return: The domain_name of this LdapDomainCreate.  # noqa: E501
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this LdapDomainCreate.

        Name of the LDAP authority to construct the LDAP server configuration.  # noqa: E501

        :param domain_name: The domain_name of this LdapDomainCreate.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and domain_name is None:
            raise ValueError("Invalid value for `domain_name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                domain_name is not None and len(domain_name) > 1023):
            raise ValueError("Invalid value for `domain_name`, length must be less than or equal to `1023`")  # noqa: E501
        if (self._configuration.client_side_validation and
                domain_name is not None and len(domain_name) < 1):
            raise ValueError("Invalid value for `domain_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._domain_name = domain_name

    @property
    def ldap_servers(self):
        """Gets the ldap_servers of this LdapDomainCreate.  # noqa: E501

        List of IP addresses of the LDAP servers for the domain. IP addesses are in IPv4 or IPv6 format.  # noqa: E501

        :return: The ldap_servers of this LdapDomainCreate.  # noqa: E501
        :rtype: list[str]
        """
        return self._ldap_servers

    @ldap_servers.setter
    def ldap_servers(self, ldap_servers):
        """Sets the ldap_servers of this LdapDomainCreate.

        List of IP addresses of the LDAP servers for the domain. IP addesses are in IPv4 or IPv6 format.  # noqa: E501

        :param ldap_servers: The ldap_servers of this LdapDomainCreate.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and ldap_servers is None:
            raise ValueError("Invalid value for `ldap_servers`, must not be `None`")  # noqa: E501

        self._ldap_servers = ldap_servers

    @property
    def port(self):
        """Gets the port of this LdapDomainCreate.  # noqa: E501

        Port number used to connect to the LDAP Server. Default values are LDAP(389), LDAPs(636), GlobalCatalog LDAP(3268), Global Catalog LDAPs(3269).  # noqa: E501

        :return: The port of this LdapDomainCreate.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this LdapDomainCreate.

        Port number used to connect to the LDAP Server. Default values are LDAP(389), LDAPs(636), GlobalCatalog LDAP(3268), Global Catalog LDAPs(3269).  # noqa: E501

        :param port: The port of this LdapDomainCreate.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                port is not None and port > 65535):  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value less than or equal to `65535`")  # noqa: E501
        if (self._configuration.client_side_validation and
                port is not None and port < 0):  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value greater than or equal to `0`")  # noqa: E501

        self._port = port

    @property
    def protocol(self):
        """Gets the protocol of this LdapDomainCreate.  # noqa: E501


        :return: The protocol of this LdapDomainCreate.  # noqa: E501
        :rtype: LDAPProtocolEnum
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this LdapDomainCreate.


        :param protocol: The protocol of this LdapDomainCreate.  # noqa: E501
        :type: LDAPProtocolEnum
        """

        self._protocol = protocol

    @property
    def ldap_server_type(self):
        """Gets the ldap_server_type of this LdapDomainCreate.  # noqa: E501


        :return: The ldap_server_type of this LdapDomainCreate.  # noqa: E501
        :rtype: LDAPServerTypeEnum
        """
        return self._ldap_server_type

    @ldap_server_type.setter
    def ldap_server_type(self, ldap_server_type):
        """Sets the ldap_server_type of this LdapDomainCreate.


        :param ldap_server_type: The ldap_server_type of this LdapDomainCreate.  # noqa: E501
        :type: LDAPServerTypeEnum
        """

        self._ldap_server_type = ldap_server_type

    @property
    def bind_user(self):
        """Gets the bind_user of this LdapDomainCreate.  # noqa: E501

        Distinguished Name (DN) of the user to be used when binding; that is, authenticating and setting up the connection to the LDAP Server.  # noqa: E501

        :return: The bind_user of this LdapDomainCreate.  # noqa: E501
        :rtype: str
        """
        return self._bind_user

    @bind_user.setter
    def bind_user(self, bind_user):
        """Sets the bind_user of this LdapDomainCreate.

        Distinguished Name (DN) of the user to be used when binding; that is, authenticating and setting up the connection to the LDAP Server.  # noqa: E501

        :param bind_user: The bind_user of this LdapDomainCreate.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and bind_user is None:
            raise ValueError("Invalid value for `bind_user`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                bind_user is not None and len(bind_user) > 1023):
            raise ValueError("Invalid value for `bind_user`, length must be less than or equal to `1023`")  # noqa: E501
        if (self._configuration.client_side_validation and
                bind_user is not None and len(bind_user) < 1):
            raise ValueError("Invalid value for `bind_user`, length must be greater than or equal to `1`")  # noqa: E501

        self._bind_user = bind_user

    @property
    def bind_password(self):
        """Gets the bind_password of this LdapDomainCreate.  # noqa: E501

        Password to use when binding a new LDAP session.  # noqa: E501

        :return: The bind_password of this LdapDomainCreate.  # noqa: E501
        :rtype: str
        """
        return self._bind_password

    @bind_password.setter
    def bind_password(self, bind_password):
        """Sets the bind_password of this LdapDomainCreate.

        Password to use when binding a new LDAP session.  # noqa: E501

        :param bind_password: The bind_password of this LdapDomainCreate.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and bind_password is None:
            raise ValueError("Invalid value for `bind_password`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                bind_password is not None and len(bind_password) > 1023):
            raise ValueError("Invalid value for `bind_password`, length must be less than or equal to `1023`")  # noqa: E501
        if (self._configuration.client_side_validation and
                bind_password is not None and len(bind_password) < 1):
            raise ValueError("Invalid value for `bind_password`, length must be greater than or equal to `1`")  # noqa: E501

        self._bind_password = bind_password

    @property
    def ldap_timeout(self):
        """Gets the ldap_timeout of this LdapDomainCreate.  # noqa: E501

        Timeout for establishing a connection to an LDAP server in milliseconds. If the system does not receive a reply from the LDAP server after the specified timeout, it stops sending requests. Default value is 30000 (30 seconds).  # noqa: E501

        :return: The ldap_timeout of this LdapDomainCreate.  # noqa: E501
        :rtype: int
        """
        return self._ldap_timeout

    @ldap_timeout.setter
    def ldap_timeout(self, ldap_timeout):
        """Sets the ldap_timeout of this LdapDomainCreate.

        Timeout for establishing a connection to an LDAP server in milliseconds. If the system does not receive a reply from the LDAP server after the specified timeout, it stops sending requests. Default value is 30000 (30 seconds).  # noqa: E501

        :param ldap_timeout: The ldap_timeout of this LdapDomainCreate.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                ldap_timeout is not None and ldap_timeout > 170000):  # noqa: E501
            raise ValueError("Invalid value for `ldap_timeout`, must be a value less than or equal to `170000`")  # noqa: E501
        if (self._configuration.client_side_validation and
                ldap_timeout is not None and ldap_timeout < 0):  # noqa: E501
            raise ValueError("Invalid value for `ldap_timeout`, must be a value greater than or equal to `0`")  # noqa: E501

        self._ldap_timeout = ldap_timeout

    @property
    def is_global_catalog(self):
        """Gets the is_global_catalog of this LdapDomainCreate.  # noqa: E501

        Whether or not the catalog is global. Default value is false.  # noqa: E501

        :return: The is_global_catalog of this LdapDomainCreate.  # noqa: E501
        :rtype: bool
        """
        return self._is_global_catalog

    @is_global_catalog.setter
    def is_global_catalog(self, is_global_catalog):
        """Sets the is_global_catalog of this LdapDomainCreate.

        Whether or not the catalog is global. Default value is false.  # noqa: E501

        :param is_global_catalog: The is_global_catalog of this LdapDomainCreate.  # noqa: E501
        :type: bool
        """

        self._is_global_catalog = is_global_catalog

    @property
    def user_id_attribute(self):
        """Gets the user_id_attribute of this LdapDomainCreate.  # noqa: E501

        Name of the LDAP attribute whose value indicates the unique identifier of the user. Default value is sAMAccountName.  # noqa: E501

        :return: The user_id_attribute of this LdapDomainCreate.  # noqa: E501
        :rtype: str
        """
        return self._user_id_attribute

    @user_id_attribute.setter
    def user_id_attribute(self, user_id_attribute):
        """Sets the user_id_attribute of this LdapDomainCreate.

        Name of the LDAP attribute whose value indicates the unique identifier of the user. Default value is sAMAccountName.  # noqa: E501

        :param user_id_attribute: The user_id_attribute of this LdapDomainCreate.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                user_id_attribute is not None and len(user_id_attribute) > 1023):
            raise ValueError("Invalid value for `user_id_attribute`, length must be less than or equal to `1023`")  # noqa: E501
        if (self._configuration.client_side_validation and
                user_id_attribute is not None and len(user_id_attribute) < 1):
            raise ValueError("Invalid value for `user_id_attribute`, length must be greater than or equal to `1`")  # noqa: E501

        self._user_id_attribute = user_id_attribute

    @property
    def user_object_class(self):
        """Gets the user_object_class of this LdapDomainCreate.  # noqa: E501

        LDAP object class for users. Default value is user.  # noqa: E501

        :return: The user_object_class of this LdapDomainCreate.  # noqa: E501
        :rtype: str
        """
        return self._user_object_class

    @user_object_class.setter
    def user_object_class(self, user_object_class):
        """Sets the user_object_class of this LdapDomainCreate.

        LDAP object class for users. Default value is user.  # noqa: E501

        :param user_object_class: The user_object_class of this LdapDomainCreate.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                user_object_class is not None and len(user_object_class) > 1023):
            raise ValueError("Invalid value for `user_object_class`, length must be less than or equal to `1023`")  # noqa: E501
        if (self._configuration.client_side_validation and
                user_object_class is not None and len(user_object_class) < 1):
            raise ValueError("Invalid value for `user_object_class`, length must be greater than or equal to `1`")  # noqa: E501

        self._user_object_class = user_object_class

    @property
    def user_search_path(self):
        """Gets the user_search_path of this LdapDomainCreate.  # noqa: E501

        Path used to search for users on the directory server. Search path is empty, if global catalog is enabled.  # noqa: E501

        :return: The user_search_path of this LdapDomainCreate.  # noqa: E501
        :rtype: str
        """
        return self._user_search_path

    @user_search_path.setter
    def user_search_path(self, user_search_path):
        """Sets the user_search_path of this LdapDomainCreate.

        Path used to search for users on the directory server. Search path is empty, if global catalog is enabled.  # noqa: E501

        :param user_search_path: The user_search_path of this LdapDomainCreate.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and user_search_path is None:
            raise ValueError("Invalid value for `user_search_path`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                user_search_path is not None and len(user_search_path) > 1023):
            raise ValueError("Invalid value for `user_search_path`, length must be less than or equal to `1023`")  # noqa: E501
        if (self._configuration.client_side_validation and
                user_search_path is not None and len(user_search_path) < 0):
            raise ValueError("Invalid value for `user_search_path`, length must be greater than or equal to `0`")  # noqa: E501

        self._user_search_path = user_search_path

    @property
    def group_name_attribute(self):
        """Gets the group_name_attribute of this LdapDomainCreate.  # noqa: E501

        Name of the LDAP attribute whose value indicates the group name. Default value is cn.  # noqa: E501

        :return: The group_name_attribute of this LdapDomainCreate.  # noqa: E501
        :rtype: str
        """
        return self._group_name_attribute

    @group_name_attribute.setter
    def group_name_attribute(self, group_name_attribute):
        """Sets the group_name_attribute of this LdapDomainCreate.

        Name of the LDAP attribute whose value indicates the group name. Default value is cn.  # noqa: E501

        :param group_name_attribute: The group_name_attribute of this LdapDomainCreate.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                group_name_attribute is not None and len(group_name_attribute) > 1023):
            raise ValueError("Invalid value for `group_name_attribute`, length must be less than or equal to `1023`")  # noqa: E501
        if (self._configuration.client_side_validation and
                group_name_attribute is not None and len(group_name_attribute) < 1):
            raise ValueError("Invalid value for `group_name_attribute`, length must be greater than or equal to `1`")  # noqa: E501

        self._group_name_attribute = group_name_attribute

    @property
    def group_member_attribute(self):
        """Gets the group_member_attribute of this LdapDomainCreate.  # noqa: E501

        Name of the LDAP attribute whose value contains the names of group members within a group. Default value is member.  # noqa: E501

        :return: The group_member_attribute of this LdapDomainCreate.  # noqa: E501
        :rtype: str
        """
        return self._group_member_attribute

    @group_member_attribute.setter
    def group_member_attribute(self, group_member_attribute):
        """Sets the group_member_attribute of this LdapDomainCreate.

        Name of the LDAP attribute whose value contains the names of group members within a group. Default value is member.  # noqa: E501

        :param group_member_attribute: The group_member_attribute of this LdapDomainCreate.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                group_member_attribute is not None and len(group_member_attribute) > 1023):
            raise ValueError("Invalid value for `group_member_attribute`, length must be less than or equal to `1023`")  # noqa: E501
        if (self._configuration.client_side_validation and
                group_member_attribute is not None and len(group_member_attribute) < 1):
            raise ValueError("Invalid value for `group_member_attribute`, length must be greater than or equal to `1`")  # noqa: E501

        self._group_member_attribute = group_member_attribute

    @property
    def group_object_class(self):
        """Gets the group_object_class of this LdapDomainCreate.  # noqa: E501

        LDAP object class for groups. Default value is group. In Active Directory, groups and users are stored in the same directory path, and are in a class called group. Default value is group.  # noqa: E501

        :return: The group_object_class of this LdapDomainCreate.  # noqa: E501
        :rtype: str
        """
        return self._group_object_class

    @group_object_class.setter
    def group_object_class(self, group_object_class):
        """Sets the group_object_class of this LdapDomainCreate.

        LDAP object class for groups. Default value is group. In Active Directory, groups and users are stored in the same directory path, and are in a class called group. Default value is group.  # noqa: E501

        :param group_object_class: The group_object_class of this LdapDomainCreate.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                group_object_class is not None and len(group_object_class) > 1023):
            raise ValueError("Invalid value for `group_object_class`, length must be less than or equal to `1023`")  # noqa: E501
        if (self._configuration.client_side_validation and
                group_object_class is not None and len(group_object_class) < 1):
            raise ValueError("Invalid value for `group_object_class`, length must be greater than or equal to `1`")  # noqa: E501

        self._group_object_class = group_object_class

    @property
    def group_search_path(self):
        """Gets the group_search_path of this LdapDomainCreate.  # noqa: E501

        Path used to search for groups on the directory server. Search path is empty, if global catalog is enabled.  # noqa: E501

        :return: The group_search_path of this LdapDomainCreate.  # noqa: E501
        :rtype: str
        """
        return self._group_search_path

    @group_search_path.setter
    def group_search_path(self, group_search_path):
        """Sets the group_search_path of this LdapDomainCreate.

        Path used to search for groups on the directory server. Search path is empty, if global catalog is enabled.  # noqa: E501

        :param group_search_path: The group_search_path of this LdapDomainCreate.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and group_search_path is None:
            raise ValueError("Invalid value for `group_search_path`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                group_search_path is not None and len(group_search_path) > 1023):
            raise ValueError("Invalid value for `group_search_path`, length must be less than or equal to `1023`")  # noqa: E501
        if (self._configuration.client_side_validation and
                group_search_path is not None and len(group_search_path) < 0):
            raise ValueError("Invalid value for `group_search_path`, length must be greater than or equal to `0`")  # noqa: E501

        self._group_search_path = group_search_path

    @property
    def group_search_level(self):
        """Gets the group_search_level of this LdapDomainCreate.  # noqa: E501

        Nested search level for performing group search. Default value is 0 (no nested search level limitation).  # noqa: E501

        :return: The group_search_level of this LdapDomainCreate.  # noqa: E501
        :rtype: int
        """
        return self._group_search_level

    @group_search_level.setter
    def group_search_level(self, group_search_level):
        """Sets the group_search_level of this LdapDomainCreate.

        Nested search level for performing group search. Default value is 0 (no nested search level limitation).  # noqa: E501

        :param group_search_level: The group_search_level of this LdapDomainCreate.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                group_search_level is not None and group_search_level > 65535):  # noqa: E501
            raise ValueError("Invalid value for `group_search_level`, must be a value less than or equal to `65535`")  # noqa: E501
        if (self._configuration.client_side_validation and
                group_search_level is not None and group_search_level < 0):  # noqa: E501
            raise ValueError("Invalid value for `group_search_level`, must be a value greater than or equal to `0`")  # noqa: E501

        self._group_search_level = group_search_level

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LdapDomainCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LdapDomainCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LdapDomainCreate):
            return True

        return self.to_dict() != other.to_dict()
