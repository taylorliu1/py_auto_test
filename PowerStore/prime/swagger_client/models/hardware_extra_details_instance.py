# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class HardwareExtraDetailsInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cpu_model': 'str',
        'physical_memory_size_gb': 'int',
        'cpu_cores': 'int',
        'cpu_sockets': 'int',
        'bus_number': 'int',
        'enclosure_number': 'int',
        'model_name': 'str',
        'rpm_reading': 'str',
        'firmware_version': 'str',
        'mode': 'HardwareSFPModeEnum',
        'supported_speeds': 'list[HardwareSFPSpeedEnum]',
        'supported_protocol': 'HardwareSFPSupportedProtocolEnum',
        'connector_type': 'HardwareSFPConnectorTypeEnum',
        'drive_type': 'HardwareDriveTypeEnum',
        'size': 'int',
        'encryption_status': 'HardwareDriveEncryptionStatusEnum',
        'fips_status': 'HardwareDriveFIPSStatusEnum',
        'dell_service_tag': 'str',
        'express_service_code': 'str',
        'enclosure_model_description': 'HardwareEnclosureModelDescriptionEnum',
        'mode_l10n': 'str',
        'supported_speeds_l10n': 'list[str]',
        'supported_protocol_l10n': 'str',
        'connector_type_l10n': 'str',
        'drive_type_l10n': 'str',
        'encryption_status_l10n': 'str',
        'fips_status_l10n': 'str',
        'enclosure_model_description_l10n': 'str'
    }

    attribute_map = {
        'cpu_model': 'cpu_model',
        'physical_memory_size_gb': 'physical_memory_size_gb',
        'cpu_cores': 'cpu_cores',
        'cpu_sockets': 'cpu_sockets',
        'bus_number': 'bus_number',
        'enclosure_number': 'enclosure_number',
        'model_name': 'model_name',
        'rpm_reading': 'rpm_reading',
        'firmware_version': 'firmware_version',
        'mode': 'mode',
        'supported_speeds': 'supported_speeds',
        'supported_protocol': 'supported_protocol',
        'connector_type': 'connector_type',
        'drive_type': 'drive_type',
        'size': 'size',
        'encryption_status': 'encryption_status',
        'fips_status': 'fips_status',
        'dell_service_tag': 'dell_service_tag',
        'express_service_code': 'express_service_code',
        'enclosure_model_description': 'enclosure_model_description',
        'mode_l10n': 'mode_l10n',
        'supported_speeds_l10n': 'supported_speeds_l10n',
        'supported_protocol_l10n': 'supported_protocol_l10n',
        'connector_type_l10n': 'connector_type_l10n',
        'drive_type_l10n': 'drive_type_l10n',
        'encryption_status_l10n': 'encryption_status_l10n',
        'fips_status_l10n': 'fips_status_l10n',
        'enclosure_model_description_l10n': 'enclosure_model_description_l10n'
    }

    def __init__(self, cpu_model=None, physical_memory_size_gb=None, cpu_cores=None, cpu_sockets=None, bus_number=None, enclosure_number=None, model_name=None, rpm_reading=None, firmware_version=None, mode=None, supported_speeds=None, supported_protocol=None, connector_type=None, drive_type=None, size=None, encryption_status=None, fips_status=None, dell_service_tag=None, express_service_code=None, enclosure_model_description=None, mode_l10n=None, supported_speeds_l10n=None, supported_protocol_l10n=None, connector_type_l10n=None, drive_type_l10n=None, encryption_status_l10n=None, fips_status_l10n=None, enclosure_model_description_l10n=None, _configuration=None):  # noqa: E501
        """HardwareExtraDetailsInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._cpu_model = None
        self._physical_memory_size_gb = None
        self._cpu_cores = None
        self._cpu_sockets = None
        self._bus_number = None
        self._enclosure_number = None
        self._model_name = None
        self._rpm_reading = None
        self._firmware_version = None
        self._mode = None
        self._supported_speeds = None
        self._supported_protocol = None
        self._connector_type = None
        self._drive_type = None
        self._size = None
        self._encryption_status = None
        self._fips_status = None
        self._dell_service_tag = None
        self._express_service_code = None
        self._enclosure_model_description = None
        self._mode_l10n = None
        self._supported_speeds_l10n = None
        self._supported_protocol_l10n = None
        self._connector_type_l10n = None
        self._drive_type_l10n = None
        self._encryption_status_l10n = None
        self._fips_status_l10n = None
        self._enclosure_model_description_l10n = None
        self.discriminator = None

        if cpu_model is not None:
            self.cpu_model = cpu_model
        if physical_memory_size_gb is not None:
            self.physical_memory_size_gb = physical_memory_size_gb
        if cpu_cores is not None:
            self.cpu_cores = cpu_cores
        if cpu_sockets is not None:
            self.cpu_sockets = cpu_sockets
        if bus_number is not None:
            self.bus_number = bus_number
        if enclosure_number is not None:
            self.enclosure_number = enclosure_number
        if model_name is not None:
            self.model_name = model_name
        if rpm_reading is not None:
            self.rpm_reading = rpm_reading
        if firmware_version is not None:
            self.firmware_version = firmware_version
        if mode is not None:
            self.mode = mode
        if supported_speeds is not None:
            self.supported_speeds = supported_speeds
        if supported_protocol is not None:
            self.supported_protocol = supported_protocol
        if connector_type is not None:
            self.connector_type = connector_type
        if drive_type is not None:
            self.drive_type = drive_type
        if size is not None:
            self.size = size
        if encryption_status is not None:
            self.encryption_status = encryption_status
        if fips_status is not None:
            self.fips_status = fips_status
        if dell_service_tag is not None:
            self.dell_service_tag = dell_service_tag
        if express_service_code is not None:
            self.express_service_code = express_service_code
        if enclosure_model_description is not None:
            self.enclosure_model_description = enclosure_model_description
        if mode_l10n is not None:
            self.mode_l10n = mode_l10n
        if supported_speeds_l10n is not None:
            self.supported_speeds_l10n = supported_speeds_l10n
        if supported_protocol_l10n is not None:
            self.supported_protocol_l10n = supported_protocol_l10n
        if connector_type_l10n is not None:
            self.connector_type_l10n = connector_type_l10n
        if drive_type_l10n is not None:
            self.drive_type_l10n = drive_type_l10n
        if encryption_status_l10n is not None:
            self.encryption_status_l10n = encryption_status_l10n
        if fips_status_l10n is not None:
            self.fips_status_l10n = fips_status_l10n
        if enclosure_model_description_l10n is not None:
            self.enclosure_model_description_l10n = enclosure_model_description_l10n

    @property
    def cpu_model(self):
        """Gets the cpu_model of this HardwareExtraDetailsInstance.  # noqa: E501

        CPU model name. Available on Node hardware type.  # noqa: E501

        :return: The cpu_model of this HardwareExtraDetailsInstance.  # noqa: E501
        :rtype: str
        """
        return self._cpu_model

    @cpu_model.setter
    def cpu_model(self, cpu_model):
        """Sets the cpu_model of this HardwareExtraDetailsInstance.

        CPU model name. Available on Node hardware type.  # noqa: E501

        :param cpu_model: The cpu_model of this HardwareExtraDetailsInstance.  # noqa: E501
        :type: str
        """

        self._cpu_model = cpu_model

    @property
    def physical_memory_size_gb(self):
        """Gets the physical_memory_size_gb of this HardwareExtraDetailsInstance.  # noqa: E501

        Total amount of physical memory in gigabytes. Available on the Node hardware type.  # noqa: E501

        :return: The physical_memory_size_gb of this HardwareExtraDetailsInstance.  # noqa: E501
        :rtype: int
        """
        return self._physical_memory_size_gb

    @physical_memory_size_gb.setter
    def physical_memory_size_gb(self, physical_memory_size_gb):
        """Sets the physical_memory_size_gb of this HardwareExtraDetailsInstance.

        Total amount of physical memory in gigabytes. Available on the Node hardware type.  # noqa: E501

        :param physical_memory_size_gb: The physical_memory_size_gb of this HardwareExtraDetailsInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                physical_memory_size_gb is not None and physical_memory_size_gb > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `physical_memory_size_gb`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                physical_memory_size_gb is not None and physical_memory_size_gb < 0):  # noqa: E501
            raise ValueError("Invalid value for `physical_memory_size_gb`, must be a value greater than or equal to `0`")  # noqa: E501

        self._physical_memory_size_gb = physical_memory_size_gb

    @property
    def cpu_cores(self):
        """Gets the cpu_cores of this HardwareExtraDetailsInstance.  # noqa: E501

        Total number of physical cores. Available on the Node hardware type.  # noqa: E501

        :return: The cpu_cores of this HardwareExtraDetailsInstance.  # noqa: E501
        :rtype: int
        """
        return self._cpu_cores

    @cpu_cores.setter
    def cpu_cores(self, cpu_cores):
        """Sets the cpu_cores of this HardwareExtraDetailsInstance.

        Total number of physical cores. Available on the Node hardware type.  # noqa: E501

        :param cpu_cores: The cpu_cores of this HardwareExtraDetailsInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                cpu_cores is not None and cpu_cores > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `cpu_cores`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                cpu_cores is not None and cpu_cores < 0):  # noqa: E501
            raise ValueError("Invalid value for `cpu_cores`, must be a value greater than or equal to `0`")  # noqa: E501

        self._cpu_cores = cpu_cores

    @property
    def cpu_sockets(self):
        """Gets the cpu_sockets of this HardwareExtraDetailsInstance.  # noqa: E501

        Total number of physical sockets. Available on the Node hardware type.  # noqa: E501

        :return: The cpu_sockets of this HardwareExtraDetailsInstance.  # noqa: E501
        :rtype: int
        """
        return self._cpu_sockets

    @cpu_sockets.setter
    def cpu_sockets(self, cpu_sockets):
        """Sets the cpu_sockets of this HardwareExtraDetailsInstance.

        Total number of physical sockets. Available on the Node hardware type.  # noqa: E501

        :param cpu_sockets: The cpu_sockets of this HardwareExtraDetailsInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                cpu_sockets is not None and cpu_sockets > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `cpu_sockets`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                cpu_sockets is not None and cpu_sockets < 0):  # noqa: E501
            raise ValueError("Invalid value for `cpu_sockets`, must be a value greater than or equal to `0`")  # noqa: E501

        self._cpu_sockets = cpu_sockets

    @property
    def bus_number(self):
        """Gets the bus_number of this HardwareExtraDetailsInstance.  # noqa: E501

        Bus number of the Expansion_Shelf. Available on the Expansion_Shelf hardware type.  # noqa: E501

        :return: The bus_number of this HardwareExtraDetailsInstance.  # noqa: E501
        :rtype: int
        """
        return self._bus_number

    @bus_number.setter
    def bus_number(self, bus_number):
        """Sets the bus_number of this HardwareExtraDetailsInstance.

        Bus number of the Expansion_Shelf. Available on the Expansion_Shelf hardware type.  # noqa: E501

        :param bus_number: The bus_number of this HardwareExtraDetailsInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                bus_number is not None and bus_number > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `bus_number`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                bus_number is not None and bus_number < 0):  # noqa: E501
            raise ValueError("Invalid value for `bus_number`, must be a value greater than or equal to `0`")  # noqa: E501

        self._bus_number = bus_number

    @property
    def enclosure_number(self):
        """Gets the enclosure_number of this HardwareExtraDetailsInstance.  # noqa: E501

        Enclosure number of the Expansion_Shelf. Available on the Expansion_Shelf hardware type.  # noqa: E501

        :return: The enclosure_number of this HardwareExtraDetailsInstance.  # noqa: E501
        :rtype: int
        """
        return self._enclosure_number

    @enclosure_number.setter
    def enclosure_number(self, enclosure_number):
        """Sets the enclosure_number of this HardwareExtraDetailsInstance.

        Enclosure number of the Expansion_Shelf. Available on the Expansion_Shelf hardware type.  # noqa: E501

        :param enclosure_number: The enclosure_number of this HardwareExtraDetailsInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                enclosure_number is not None and enclosure_number > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `enclosure_number`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self._configuration.client_side_validation and
                enclosure_number is not None and enclosure_number < 0):  # noqa: E501
            raise ValueError("Invalid value for `enclosure_number`, must be a value greater than or equal to `0`")  # noqa: E501

        self._enclosure_number = enclosure_number

    @property
    def model_name(self):
        """Gets the model_name of this HardwareExtraDetailsInstance.  # noqa: E501

        Model name of the hardware.  Available on the IO_Module and M2_Drive hardware types.  # noqa: E501

        :return: The model_name of this HardwareExtraDetailsInstance.  # noqa: E501
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """Sets the model_name of this HardwareExtraDetailsInstance.

        Model name of the hardware.  Available on the IO_Module and M2_Drive hardware types.  # noqa: E501

        :param model_name: The model_name of this HardwareExtraDetailsInstance.  # noqa: E501
        :type: str
        """

        self._model_name = model_name

    @property
    def rpm_reading(self):
        """Gets the rpm_reading of this HardwareExtraDetailsInstance.  # noqa: E501

        rpm_reading. Was added in version 2.0.0.0.  # noqa: E501

        :return: The rpm_reading of this HardwareExtraDetailsInstance.  # noqa: E501
        :rtype: str
        """
        return self._rpm_reading

    @rpm_reading.setter
    def rpm_reading(self, rpm_reading):
        """Sets the rpm_reading of this HardwareExtraDetailsInstance.

        rpm_reading. Was added in version 2.0.0.0.  # noqa: E501

        :param rpm_reading: The rpm_reading of this HardwareExtraDetailsInstance.  # noqa: E501
        :type: str
        """

        self._rpm_reading = rpm_reading

    @property
    def firmware_version(self):
        """Gets the firmware_version of this HardwareExtraDetailsInstance.  # noqa: E501

        Firmware version of the hardware. Available on the Drive hardware type.  # noqa: E501

        :return: The firmware_version of this HardwareExtraDetailsInstance.  # noqa: E501
        :rtype: str
        """
        return self._firmware_version

    @firmware_version.setter
    def firmware_version(self, firmware_version):
        """Sets the firmware_version of this HardwareExtraDetailsInstance.

        Firmware version of the hardware. Available on the Drive hardware type.  # noqa: E501

        :param firmware_version: The firmware_version of this HardwareExtraDetailsInstance.  # noqa: E501
        :type: str
        """

        self._firmware_version = firmware_version

    @property
    def mode(self):
        """Gets the mode of this HardwareExtraDetailsInstance.  # noqa: E501


        :return: The mode of this HardwareExtraDetailsInstance.  # noqa: E501
        :rtype: HardwareSFPModeEnum
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this HardwareExtraDetailsInstance.


        :param mode: The mode of this HardwareExtraDetailsInstance.  # noqa: E501
        :type: HardwareSFPModeEnum
        """

        self._mode = mode

    @property
    def supported_speeds(self):
        """Gets the supported_speeds of this HardwareExtraDetailsInstance.  # noqa: E501


        :return: The supported_speeds of this HardwareExtraDetailsInstance.  # noqa: E501
        :rtype: list[HardwareSFPSpeedEnum]
        """
        return self._supported_speeds

    @supported_speeds.setter
    def supported_speeds(self, supported_speeds):
        """Sets the supported_speeds of this HardwareExtraDetailsInstance.


        :param supported_speeds: The supported_speeds of this HardwareExtraDetailsInstance.  # noqa: E501
        :type: list[HardwareSFPSpeedEnum]
        """

        self._supported_speeds = supported_speeds

    @property
    def supported_protocol(self):
        """Gets the supported_protocol of this HardwareExtraDetailsInstance.  # noqa: E501


        :return: The supported_protocol of this HardwareExtraDetailsInstance.  # noqa: E501
        :rtype: HardwareSFPSupportedProtocolEnum
        """
        return self._supported_protocol

    @supported_protocol.setter
    def supported_protocol(self, supported_protocol):
        """Sets the supported_protocol of this HardwareExtraDetailsInstance.


        :param supported_protocol: The supported_protocol of this HardwareExtraDetailsInstance.  # noqa: E501
        :type: HardwareSFPSupportedProtocolEnum
        """

        self._supported_protocol = supported_protocol

    @property
    def connector_type(self):
        """Gets the connector_type of this HardwareExtraDetailsInstance.  # noqa: E501


        :return: The connector_type of this HardwareExtraDetailsInstance.  # noqa: E501
        :rtype: HardwareSFPConnectorTypeEnum
        """
        return self._connector_type

    @connector_type.setter
    def connector_type(self, connector_type):
        """Sets the connector_type of this HardwareExtraDetailsInstance.


        :param connector_type: The connector_type of this HardwareExtraDetailsInstance.  # noqa: E501
        :type: HardwareSFPConnectorTypeEnum
        """

        self._connector_type = connector_type

    @property
    def drive_type(self):
        """Gets the drive_type of this HardwareExtraDetailsInstance.  # noqa: E501


        :return: The drive_type of this HardwareExtraDetailsInstance.  # noqa: E501
        :rtype: HardwareDriveTypeEnum
        """
        return self._drive_type

    @drive_type.setter
    def drive_type(self, drive_type):
        """Sets the drive_type of this HardwareExtraDetailsInstance.


        :param drive_type: The drive_type of this HardwareExtraDetailsInstance.  # noqa: E501
        :type: HardwareDriveTypeEnum
        """

        self._drive_type = drive_type

    @property
    def size(self):
        """Gets the size of this HardwareExtraDetailsInstance.  # noqa: E501

        Size of the drive in bytes. Available on the Drive hardware type.  # noqa: E501

        :return: The size of this HardwareExtraDetailsInstance.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this HardwareExtraDetailsInstance.

        Size of the drive in bytes. Available on the Drive hardware type.  # noqa: E501

        :param size: The size of this HardwareExtraDetailsInstance.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                size is not None and size > -9223372036854775616):  # noqa: E501
            raise ValueError("Invalid value for `size`, must be a value less than or equal to `-9223372036854775616`")  # noqa: E501
        if (self._configuration.client_side_validation and
                size is not None and size < 0):  # noqa: E501
            raise ValueError("Invalid value for `size`, must be a value greater than or equal to `0`")  # noqa: E501

        self._size = size

    @property
    def encryption_status(self):
        """Gets the encryption_status of this HardwareExtraDetailsInstance.  # noqa: E501


        :return: The encryption_status of this HardwareExtraDetailsInstance.  # noqa: E501
        :rtype: HardwareDriveEncryptionStatusEnum
        """
        return self._encryption_status

    @encryption_status.setter
    def encryption_status(self, encryption_status):
        """Sets the encryption_status of this HardwareExtraDetailsInstance.


        :param encryption_status: The encryption_status of this HardwareExtraDetailsInstance.  # noqa: E501
        :type: HardwareDriveEncryptionStatusEnum
        """

        self._encryption_status = encryption_status

    @property
    def fips_status(self):
        """Gets the fips_status of this HardwareExtraDetailsInstance.  # noqa: E501


        :return: The fips_status of this HardwareExtraDetailsInstance.  # noqa: E501
        :rtype: HardwareDriveFIPSStatusEnum
        """
        return self._fips_status

    @fips_status.setter
    def fips_status(self, fips_status):
        """Sets the fips_status of this HardwareExtraDetailsInstance.


        :param fips_status: The fips_status of this HardwareExtraDetailsInstance.  # noqa: E501
        :type: HardwareDriveFIPSStatusEnum
        """

        self._fips_status = fips_status

    @property
    def dell_service_tag(self):
        """Gets the dell_service_tag of this HardwareExtraDetailsInstance.  # noqa: E501

        Dell service tag of the hardware. Available on the Base_Enclosure and Expansion_Enclosure hardware types.  # noqa: E501

        :return: The dell_service_tag of this HardwareExtraDetailsInstance.  # noqa: E501
        :rtype: str
        """
        return self._dell_service_tag

    @dell_service_tag.setter
    def dell_service_tag(self, dell_service_tag):
        """Sets the dell_service_tag of this HardwareExtraDetailsInstance.

        Dell service tag of the hardware. Available on the Base_Enclosure and Expansion_Enclosure hardware types.  # noqa: E501

        :param dell_service_tag: The dell_service_tag of this HardwareExtraDetailsInstance.  # noqa: E501
        :type: str
        """

        self._dell_service_tag = dell_service_tag

    @property
    def express_service_code(self):
        """Gets the express_service_code of this HardwareExtraDetailsInstance.  # noqa: E501

        Express service code of the hardware. Available on the Base_Enclosure and Expansion_Enclosure hardware types.  # noqa: E501

        :return: The express_service_code of this HardwareExtraDetailsInstance.  # noqa: E501
        :rtype: str
        """
        return self._express_service_code

    @express_service_code.setter
    def express_service_code(self, express_service_code):
        """Sets the express_service_code of this HardwareExtraDetailsInstance.

        Express service code of the hardware. Available on the Base_Enclosure and Expansion_Enclosure hardware types.  # noqa: E501

        :param express_service_code: The express_service_code of this HardwareExtraDetailsInstance.  # noqa: E501
        :type: str
        """

        self._express_service_code = express_service_code

    @property
    def enclosure_model_description(self):
        """Gets the enclosure_model_description of this HardwareExtraDetailsInstance.  # noqa: E501

         Was added in version 3.0.0.0.  # noqa: E501

        :return: The enclosure_model_description of this HardwareExtraDetailsInstance.  # noqa: E501
        :rtype: HardwareEnclosureModelDescriptionEnum
        """
        return self._enclosure_model_description

    @enclosure_model_description.setter
    def enclosure_model_description(self, enclosure_model_description):
        """Sets the enclosure_model_description of this HardwareExtraDetailsInstance.

         Was added in version 3.0.0.0.  # noqa: E501

        :param enclosure_model_description: The enclosure_model_description of this HardwareExtraDetailsInstance.  # noqa: E501
        :type: HardwareEnclosureModelDescriptionEnum
        """

        self._enclosure_model_description = enclosure_model_description

    @property
    def mode_l10n(self):
        """Gets the mode_l10n of this HardwareExtraDetailsInstance.  # noqa: E501

        Localized message string corresponding to mode  # noqa: E501

        :return: The mode_l10n of this HardwareExtraDetailsInstance.  # noqa: E501
        :rtype: str
        """
        return self._mode_l10n

    @mode_l10n.setter
    def mode_l10n(self, mode_l10n):
        """Sets the mode_l10n of this HardwareExtraDetailsInstance.

        Localized message string corresponding to mode  # noqa: E501

        :param mode_l10n: The mode_l10n of this HardwareExtraDetailsInstance.  # noqa: E501
        :type: str
        """

        self._mode_l10n = mode_l10n

    @property
    def supported_speeds_l10n(self):
        """Gets the supported_speeds_l10n of this HardwareExtraDetailsInstance.  # noqa: E501

        Localized message array corresponding to supported_speeds  # noqa: E501

        :return: The supported_speeds_l10n of this HardwareExtraDetailsInstance.  # noqa: E501
        :rtype: list[str]
        """
        return self._supported_speeds_l10n

    @supported_speeds_l10n.setter
    def supported_speeds_l10n(self, supported_speeds_l10n):
        """Sets the supported_speeds_l10n of this HardwareExtraDetailsInstance.

        Localized message array corresponding to supported_speeds  # noqa: E501

        :param supported_speeds_l10n: The supported_speeds_l10n of this HardwareExtraDetailsInstance.  # noqa: E501
        :type: list[str]
        """

        self._supported_speeds_l10n = supported_speeds_l10n

    @property
    def supported_protocol_l10n(self):
        """Gets the supported_protocol_l10n of this HardwareExtraDetailsInstance.  # noqa: E501

        Localized message string corresponding to supported_protocol  # noqa: E501

        :return: The supported_protocol_l10n of this HardwareExtraDetailsInstance.  # noqa: E501
        :rtype: str
        """
        return self._supported_protocol_l10n

    @supported_protocol_l10n.setter
    def supported_protocol_l10n(self, supported_protocol_l10n):
        """Sets the supported_protocol_l10n of this HardwareExtraDetailsInstance.

        Localized message string corresponding to supported_protocol  # noqa: E501

        :param supported_protocol_l10n: The supported_protocol_l10n of this HardwareExtraDetailsInstance.  # noqa: E501
        :type: str
        """

        self._supported_protocol_l10n = supported_protocol_l10n

    @property
    def connector_type_l10n(self):
        """Gets the connector_type_l10n of this HardwareExtraDetailsInstance.  # noqa: E501

        Localized message string corresponding to connector_type  # noqa: E501

        :return: The connector_type_l10n of this HardwareExtraDetailsInstance.  # noqa: E501
        :rtype: str
        """
        return self._connector_type_l10n

    @connector_type_l10n.setter
    def connector_type_l10n(self, connector_type_l10n):
        """Sets the connector_type_l10n of this HardwareExtraDetailsInstance.

        Localized message string corresponding to connector_type  # noqa: E501

        :param connector_type_l10n: The connector_type_l10n of this HardwareExtraDetailsInstance.  # noqa: E501
        :type: str
        """

        self._connector_type_l10n = connector_type_l10n

    @property
    def drive_type_l10n(self):
        """Gets the drive_type_l10n of this HardwareExtraDetailsInstance.  # noqa: E501

        Localized message string corresponding to drive_type  # noqa: E501

        :return: The drive_type_l10n of this HardwareExtraDetailsInstance.  # noqa: E501
        :rtype: str
        """
        return self._drive_type_l10n

    @drive_type_l10n.setter
    def drive_type_l10n(self, drive_type_l10n):
        """Sets the drive_type_l10n of this HardwareExtraDetailsInstance.

        Localized message string corresponding to drive_type  # noqa: E501

        :param drive_type_l10n: The drive_type_l10n of this HardwareExtraDetailsInstance.  # noqa: E501
        :type: str
        """

        self._drive_type_l10n = drive_type_l10n

    @property
    def encryption_status_l10n(self):
        """Gets the encryption_status_l10n of this HardwareExtraDetailsInstance.  # noqa: E501

        Localized message string corresponding to encryption_status  # noqa: E501

        :return: The encryption_status_l10n of this HardwareExtraDetailsInstance.  # noqa: E501
        :rtype: str
        """
        return self._encryption_status_l10n

    @encryption_status_l10n.setter
    def encryption_status_l10n(self, encryption_status_l10n):
        """Sets the encryption_status_l10n of this HardwareExtraDetailsInstance.

        Localized message string corresponding to encryption_status  # noqa: E501

        :param encryption_status_l10n: The encryption_status_l10n of this HardwareExtraDetailsInstance.  # noqa: E501
        :type: str
        """

        self._encryption_status_l10n = encryption_status_l10n

    @property
    def fips_status_l10n(self):
        """Gets the fips_status_l10n of this HardwareExtraDetailsInstance.  # noqa: E501

        Localized message string corresponding to fips_status  # noqa: E501

        :return: The fips_status_l10n of this HardwareExtraDetailsInstance.  # noqa: E501
        :rtype: str
        """
        return self._fips_status_l10n

    @fips_status_l10n.setter
    def fips_status_l10n(self, fips_status_l10n):
        """Sets the fips_status_l10n of this HardwareExtraDetailsInstance.

        Localized message string corresponding to fips_status  # noqa: E501

        :param fips_status_l10n: The fips_status_l10n of this HardwareExtraDetailsInstance.  # noqa: E501
        :type: str
        """

        self._fips_status_l10n = fips_status_l10n

    @property
    def enclosure_model_description_l10n(self):
        """Gets the enclosure_model_description_l10n of this HardwareExtraDetailsInstance.  # noqa: E501

        Localized message string corresponding to enclosure_model_description Was added in version 3.0.0.0.  # noqa: E501

        :return: The enclosure_model_description_l10n of this HardwareExtraDetailsInstance.  # noqa: E501
        :rtype: str
        """
        return self._enclosure_model_description_l10n

    @enclosure_model_description_l10n.setter
    def enclosure_model_description_l10n(self, enclosure_model_description_l10n):
        """Sets the enclosure_model_description_l10n of this HardwareExtraDetailsInstance.

        Localized message string corresponding to enclosure_model_description Was added in version 3.0.0.0.  # noqa: E501

        :param enclosure_model_description_l10n: The enclosure_model_description_l10n of this HardwareExtraDetailsInstance.  # noqa: E501
        :type: str
        """

        self._enclosure_model_description_l10n = enclosure_model_description_l10n

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HardwareExtraDetailsInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HardwareExtraDetailsInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HardwareExtraDetailsInstance):
            return True

        return self.to_dict() != other.to_dict()
