# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from prime.swagger_client.configuration import Configuration


class IpPortModify(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'add_current_usages': 'list[IpPortUsageEnum]',
        'network_id': 'str'
    }

    attribute_map = {
        'add_current_usages': 'add_current_usages',
        'network_id': 'network_id'
    }

    def __init__(self, add_current_usages=None, network_id=None, _configuration=None):  # noqa: E501
        """IpPortModify - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._add_current_usages = None
        self._network_id = None
        self.discriminator = None

        if add_current_usages is not None:
            self.add_current_usages = add_current_usages
        if network_id is not None:
            self.network_id = network_id

    @property
    def add_current_usages(self):
        """Gets the add_current_usages of this IpPortModify.  # noqa: E501

        Usages to add to the current usages of an IP port. The current usages of an IP port can be extended with external replication if this usage is in the port's list of available usages. The same settings will be applied to the partner IP port.  WARNING: Only one IP port on each node can be assigned to the External_Replication usage. Assigning another IP port to this usage will automatically unassign the currently used IP port on the same node. To unassign an IP port from being used for external replication, choose another IP port and add External_Replication to its list of current usages.   # noqa: E501

        :return: The add_current_usages of this IpPortModify.  # noqa: E501
        :rtype: list[IpPortUsageEnum]
        """
        return self._add_current_usages

    @add_current_usages.setter
    def add_current_usages(self, add_current_usages):
        """Sets the add_current_usages of this IpPortModify.

        Usages to add to the current usages of an IP port. The current usages of an IP port can be extended with external replication if this usage is in the port's list of available usages. The same settings will be applied to the partner IP port.  WARNING: Only one IP port on each node can be assigned to the External_Replication usage. Assigning another IP port to this usage will automatically unassign the currently used IP port on the same node. To unassign an IP port from being used for external replication, choose another IP port and add External_Replication to its list of current usages.   # noqa: E501

        :param add_current_usages: The add_current_usages of this IpPortModify.  # noqa: E501
        :type: list[IpPortUsageEnum]
        """

        self._add_current_usages = add_current_usages

    @property
    def network_id(self):
        """Gets the network_id of this IpPortModify.  # noqa: E501

        Unique identifier of the network in which IP port usages will be changed Was added in version 2.0.0.0.  # noqa: E501

        :return: The network_id of this IpPortModify.  # noqa: E501
        :rtype: str
        """
        return self._network_id

    @network_id.setter
    def network_id(self, network_id):
        """Sets the network_id of this IpPortModify.

        Unique identifier of the network in which IP port usages will be changed Was added in version 2.0.0.0.  # noqa: E501

        :param network_id: The network_id of this IpPortModify.  # noqa: E501
        :type: str
        """

        self._network_id = network_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IpPortModify, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IpPortModify):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IpPortModify):
            return True

        return self.to_dict() != other.to_dict()
