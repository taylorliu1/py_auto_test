# coding: utf-8

"""
    PowerStore REST API

    Storage cluster REST API definition. ( For \"Try It Out\", use the cluster management IP address to load this swaggerui interface. )  # noqa: E501

    OpenAPI spec version: 3.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from prime.swagger_client.api_client import ApiClient


class VolumeGroupApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def volume_group_get(self, **kwargs):  # noqa: E501
        """Collection Query  # noqa: E501

        Query volume groups, including snapshot sets and clones of volume groups.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.volume_group_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[VolumeGroupInstance]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.volume_group_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.volume_group_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def volume_group_get_with_http_info(self, **kwargs):  # noqa: E501
        """Collection Query  # noqa: E501

        Query volume groups, including snapshot sets and clones of volume groups.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.volume_group_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[VolumeGroupInstance]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method volume_group_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/volume_group', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[VolumeGroupInstance]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def volume_group_id_add_members_post(self, id, body, **kwargs):  # noqa: E501
        """Add Members  # noqa: E501

        Add member volumes to an existing primary or clone volume group. This cannot be used to add members to a snapshot set. Members cannot be added to a volume group that is acting as the destination in a replication session.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.volume_group_id_add_members_post(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique identifier of the volume group. name:{name} can be used instead of {id}. (required)
        :param VolumeGroupAddMembers body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.volume_group_id_add_members_post_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.volume_group_id_add_members_post_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def volume_group_id_add_members_post_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """Add Members  # noqa: E501

        Add member volumes to an existing primary or clone volume group. This cannot be used to add members to a snapshot set. Members cannot be added to a volume group that is acting as the destination in a replication session.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.volume_group_id_add_members_post_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique identifier of the volume group. name:{name} can be used instead of {id}. (required)
        :param VolumeGroupAddMembers body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method volume_group_id_add_members_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `volume_group_id_add_members_post`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `volume_group_id_add_members_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/volume_group/{id}/add_members', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def volume_group_id_clone_post(self, id, body, **kwargs):  # noqa: E501
        """Clone  # noqa: E501

        Clone a volume group. The clone volume group will be created on the same appliance as the source volume group. A clone of a volume group will result in a new volume group of __Clone__ type. The clone will belong to the same family as the source volume group. When the source of a clone operation is a either primary or clone volume group,  * __source_id__ will be set to the identifier of the source volume group.  * __source_time__ will be set to the time at which the clone will be created.  When the source of a clone operation is a snapshot set,  * __source_id__ will be set to the source_id of the source snapshot set.  * __source_time__ will be set to the source_time of the source snapshot set.  The clone volume group will inherit the value of the __is_write_order_consistent__ property from the source volume group. A clone of a snapshot set is modeled as a clone of the snapshot set's source, created at the same time instant as when the source snapshot set was created.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.volume_group_id_clone_post(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique identifier of the volume group. name:{name} can be used instead of {id}. (required)
        :param VolumeGroupClone body: (required)
        :return: VolumeGroupCloneResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.volume_group_id_clone_post_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.volume_group_id_clone_post_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def volume_group_id_clone_post_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """Clone  # noqa: E501

        Clone a volume group. The clone volume group will be created on the same appliance as the source volume group. A clone of a volume group will result in a new volume group of __Clone__ type. The clone will belong to the same family as the source volume group. When the source of a clone operation is a either primary or clone volume group,  * __source_id__ will be set to the identifier of the source volume group.  * __source_time__ will be set to the time at which the clone will be created.  When the source of a clone operation is a snapshot set,  * __source_id__ will be set to the source_id of the source snapshot set.  * __source_time__ will be set to the source_time of the source snapshot set.  The clone volume group will inherit the value of the __is_write_order_consistent__ property from the source volume group. A clone of a snapshot set is modeled as a clone of the snapshot set's source, created at the same time instant as when the source snapshot set was created.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.volume_group_id_clone_post_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique identifier of the volume group. name:{name} can be used instead of {id}. (required)
        :param VolumeGroupClone body: (required)
        :return: VolumeGroupCloneResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method volume_group_id_clone_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `volume_group_id_clone_post`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `volume_group_id_clone_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/volume_group/{id}/clone', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VolumeGroupCloneResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def volume_group_id_delete(self, id, **kwargs):  # noqa: E501
        """Delete  # noqa: E501

        Delete a volume group, snapshot set, or clone. Before you try deleting a volume group, snapshot set, or clone, ensure that you first detach it from all hosts. Note the following: * When a volume group or clone is deleted, all related snapshot sets will also be deleted. * When a snapshot set is deleted, all of its constituent snapshots will also be deleted.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.volume_group_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique identifier of the volume group. name:{name} can be used instead of {id}. (required)
        :param VolumeGroupDelete body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.volume_group_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.volume_group_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def volume_group_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete  # noqa: E501

        Delete a volume group, snapshot set, or clone. Before you try deleting a volume group, snapshot set, or clone, ensure that you first detach it from all hosts. Note the following: * When a volume group or clone is deleted, all related snapshot sets will also be deleted. * When a snapshot set is deleted, all of its constituent snapshots will also be deleted.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.volume_group_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique identifier of the volume group. name:{name} can be used instead of {id}. (required)
        :param VolumeGroupDelete body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method volume_group_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `volume_group_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/volume_group/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def volume_group_id_get(self, id, **kwargs):  # noqa: E501
        """Instance Query  # noqa: E501

        Query a specific volume group, snapshot set, or clone.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.volume_group_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique identifier of the volume group. name:{name} can be used instead of {id}. (required)
        :return: VolumeGroupInstance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.volume_group_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.volume_group_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def volume_group_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Instance Query  # noqa: E501

        Query a specific volume group, snapshot set, or clone.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.volume_group_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique identifier of the volume group. name:{name} can be used instead of {id}. (required)
        :return: VolumeGroupInstance
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method volume_group_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `volume_group_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/volume_group/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VolumeGroupInstance',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def volume_group_id_patch(self, id, body, **kwargs):  # noqa: E501
        """Modify  # noqa: E501

        Modify a volume group, snapshot set, or clone.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.volume_group_id_patch(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique identifier of the volume group. name:{name} can be used instead of {id}. (required)
        :param VolumeGroupModify body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.volume_group_id_patch_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.volume_group_id_patch_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def volume_group_id_patch_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """Modify  # noqa: E501

        Modify a volume group, snapshot set, or clone.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.volume_group_id_patch_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique identifier of the volume group. name:{name} can be used instead of {id}. (required)
        :param VolumeGroupModify body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method volume_group_id_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `volume_group_id_patch`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `volume_group_id_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/volume_group/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def volume_group_id_refresh_post(self, id, body, **kwargs):  # noqa: E501
        """Refresh  # noqa: E501

         Refresh the contents of a volume group (the target volume group) from another volume group in the same family. A backup snapshot set of the target volume group will be created before refresh is attempted. This behavior can be overridden by setting the __create_backup_snap__ property to false. The profile for the backup snapshot set will be auto-generated, unless a custom profile is specified. The auto-generated profile only initializes the name to an auto-generated, unique value. Other optional parameters are not specified. The table below outlines supported modes of operation and resulting updates to __source_id__ and __source_time__ attributes of __protection_data__. |Target volume group|Source volume group|New source_id|New source_time| |-|-|-|-| |Primary (P1) |Clone (C1)|id of clone (C1)|Current time| |Primary (P1) |snapshot set (C1S1) of clone (C1)|id of source snapshot set (C1S1)|source_time of source snapshot set (C1S1)| |Clone (C1) |Primary (P1)|id of primary (P1)|Current time| |Clone (C1) |snapshot set (S1) of primary (P1)|id of source snapshot set (S1)|source_time of source snapshot set (S1)| |Clone (C1) |Clone (C2)|id of source clone(C2)|Current time| |Clone (C1) |snapshot set (C2S1) of clone (C2)|id of source snapshot set (C2S1)|source_time of source snapshot set (C2S1)| Refresh operation is only supported if there are no membership changes between the source and target volume groups of the refresh operation. You can refresh a volume group even when the sizes of the volumes in the target volume group have changed. This represents a case where the source volumes have been modified over time and you want to refresh the target to the new state of the source volume group. A volume group that is acting as the destination in a replication session cannot be refreshed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.volume_group_id_refresh_post(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique identifier of the volume group. name:{name} can be used instead of {id}. (required)
        :param VolumeGroupRefresh body: (required)
        :return: VolumeGroupRefreshResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.volume_group_id_refresh_post_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.volume_group_id_refresh_post_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def volume_group_id_refresh_post_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """Refresh  # noqa: E501

         Refresh the contents of a volume group (the target volume group) from another volume group in the same family. A backup snapshot set of the target volume group will be created before refresh is attempted. This behavior can be overridden by setting the __create_backup_snap__ property to false. The profile for the backup snapshot set will be auto-generated, unless a custom profile is specified. The auto-generated profile only initializes the name to an auto-generated, unique value. Other optional parameters are not specified. The table below outlines supported modes of operation and resulting updates to __source_id__ and __source_time__ attributes of __protection_data__. |Target volume group|Source volume group|New source_id|New source_time| |-|-|-|-| |Primary (P1) |Clone (C1)|id of clone (C1)|Current time| |Primary (P1) |snapshot set (C1S1) of clone (C1)|id of source snapshot set (C1S1)|source_time of source snapshot set (C1S1)| |Clone (C1) |Primary (P1)|id of primary (P1)|Current time| |Clone (C1) |snapshot set (S1) of primary (P1)|id of source snapshot set (S1)|source_time of source snapshot set (S1)| |Clone (C1) |Clone (C2)|id of source clone(C2)|Current time| |Clone (C1) |snapshot set (C2S1) of clone (C2)|id of source snapshot set (C2S1)|source_time of source snapshot set (C2S1)| Refresh operation is only supported if there are no membership changes between the source and target volume groups of the refresh operation. You can refresh a volume group even when the sizes of the volumes in the target volume group have changed. This represents a case where the source volumes have been modified over time and you want to refresh the target to the new state of the source volume group. A volume group that is acting as the destination in a replication session cannot be refreshed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.volume_group_id_refresh_post_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique identifier of the volume group. name:{name} can be used instead of {id}. (required)
        :param VolumeGroupRefresh body: (required)
        :return: VolumeGroupRefreshResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method volume_group_id_refresh_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `volume_group_id_refresh_post`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `volume_group_id_refresh_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/volume_group/{id}/refresh', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VolumeGroupRefreshResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def volume_group_id_remove_members_post(self, id, body, **kwargs):  # noqa: E501
        """Remove Members  # noqa: E501

        Remove members from an existing primary or clone volume group. This cannot be used to remove members from a snapshot set. Members cannot be removed from a volume group that is a acting as the destination in a replication session.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.volume_group_id_remove_members_post(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique identifier of the volume group. name:{name} can be used instead of {id}. (required)
        :param VolumeGroupRemoveMembers body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.volume_group_id_remove_members_post_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.volume_group_id_remove_members_post_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def volume_group_id_remove_members_post_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """Remove Members  # noqa: E501

        Remove members from an existing primary or clone volume group. This cannot be used to remove members from a snapshot set. Members cannot be removed from a volume group that is a acting as the destination in a replication session.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.volume_group_id_remove_members_post_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique identifier of the volume group. name:{name} can be used instead of {id}. (required)
        :param VolumeGroupRemoveMembers body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method volume_group_id_remove_members_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `volume_group_id_remove_members_post`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `volume_group_id_remove_members_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/volume_group/{id}/remove_members', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def volume_group_id_restore_post(self, id, body, **kwargs):  # noqa: E501
        """Restore  # noqa: E501

        Restore a volume group from a snapshot set. A primary or a clone volume group can only be restored from one of its immediate snapshot sets. A backup snapshot set of the target volume group will be created before restore is attempted. This behavior can be overridden by setting the __create_backup_snap__ property to false.  The profile for the backup snapshot set will be auto-generated unless a custom profile is specified. The auto-generated profile only initializes the name to an auto-generated, unique value. Other optional parameters are not specified. Restore operation is only supported if there are no membership changes between the target volume group and source snapshot set. You can restore a volume group even when the sizes of the volumes in the target volume group have changed. This represents a case where the target volumes have been modified over time, but you want to revert them back to their old state captured in the source snapshot set. When a volume group is restored,  * __source_time__ is set to the __source_time__ of the snapshot set it is being restored from.  A volume group that is acting as the destination in a replication session cannot be restored.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.volume_group_id_restore_post(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique identifier of the volume group. name:{name} can be used instead of {id}. (required)
        :param VolumeGroupRestore body: (required)
        :return: VolumeGroupRestoreResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.volume_group_id_restore_post_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.volume_group_id_restore_post_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def volume_group_id_restore_post_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """Restore  # noqa: E501

        Restore a volume group from a snapshot set. A primary or a clone volume group can only be restored from one of its immediate snapshot sets. A backup snapshot set of the target volume group will be created before restore is attempted. This behavior can be overridden by setting the __create_backup_snap__ property to false.  The profile for the backup snapshot set will be auto-generated unless a custom profile is specified. The auto-generated profile only initializes the name to an auto-generated, unique value. Other optional parameters are not specified. Restore operation is only supported if there are no membership changes between the target volume group and source snapshot set. You can restore a volume group even when the sizes of the volumes in the target volume group have changed. This represents a case where the target volumes have been modified over time, but you want to revert them back to their old state captured in the source snapshot set. When a volume group is restored,  * __source_time__ is set to the __source_time__ of the snapshot set it is being restored from.  A volume group that is acting as the destination in a replication session cannot be restored.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.volume_group_id_restore_post_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique identifier of the volume group. name:{name} can be used instead of {id}. (required)
        :param VolumeGroupRestore body: (required)
        :return: VolumeGroupRestoreResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method volume_group_id_restore_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `volume_group_id_restore_post`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `volume_group_id_restore_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/volume_group/{id}/restore', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VolumeGroupRestoreResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def volume_group_id_snapshot_post(self, id, body, **kwargs):  # noqa: E501
        """Snapshot  # noqa: E501

        Create a new snapshot set for a volume group. When a snapshot of a volume group is created, the resultant snapshot volume group is referred to as a \"snapshot set\" and it represents a point-in-time copy of the members in the volume group. The snapshot set will be created on the same appliance as the source volume group. A snapshot of a volume group will result in a new volume group of __Snapshot__ type. The snapshot set will belong to the same family as the source volume group. When the source of a snapshot operation is a primary or clone volume group,  * __source_id__ of the snapshot set will be set to the identifier of the source volume group.  * __source_time__ of the snapshot set will be set to the time at which the snapshot set will be created.  The __is_write_order_consistent__ property of the source volume group determines whether the snapshot set will be write-order consistent.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.volume_group_id_snapshot_post(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique identifier of the volume group. name:{name} can be used instead of {id}. (required)
        :param VolumeGroupSnapshot body: (required)
        :return: VolumeGroupSnapshotResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.volume_group_id_snapshot_post_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.volume_group_id_snapshot_post_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def volume_group_id_snapshot_post_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """Snapshot  # noqa: E501

        Create a new snapshot set for a volume group. When a snapshot of a volume group is created, the resultant snapshot volume group is referred to as a \"snapshot set\" and it represents a point-in-time copy of the members in the volume group. The snapshot set will be created on the same appliance as the source volume group. A snapshot of a volume group will result in a new volume group of __Snapshot__ type. The snapshot set will belong to the same family as the source volume group. When the source of a snapshot operation is a primary or clone volume group,  * __source_id__ of the snapshot set will be set to the identifier of the source volume group.  * __source_time__ of the snapshot set will be set to the time at which the snapshot set will be created.  The __is_write_order_consistent__ property of the source volume group determines whether the snapshot set will be write-order consistent.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.volume_group_id_snapshot_post_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Unique identifier of the volume group. name:{name} can be used instead of {id}. (required)
        :param VolumeGroupSnapshot body: (required)
        :return: VolumeGroupSnapshotResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method volume_group_id_snapshot_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `volume_group_id_snapshot_post`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `volume_group_id_snapshot_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/volume_group/{id}/snapshot', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VolumeGroupSnapshotResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def volume_group_post(self, body, **kwargs):  # noqa: E501
        """Create  # noqa: E501

        Create a new volume group. The resulting volume group will have a type of Primary.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.volume_group_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VolumeGroupCreate body: (required)
        :return: CreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.volume_group_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.volume_group_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def volume_group_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create  # noqa: E501

        Create a new volume group. The resulting volume group will have a type of Primary.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.volume_group_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VolumeGroupCreate body: (required)
        :return: CreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method volume_group_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `volume_group_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/volume_group', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
